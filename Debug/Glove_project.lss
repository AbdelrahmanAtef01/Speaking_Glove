
Glove_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ae8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003b4  00800060  00004ae8  00004b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  00800414  00800414  00004f30  2**0
                  ALLOC
  3 .stab         00005820  00000000  00000000  00004f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025e1  00000000  00000000  0000a750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000cd31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ced1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__vector_9>
      28:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 19 24 	call	0x4832	; 0x4832 <main>
      8a:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SHOW_vidShowAndPlayInit>:
uint8_t sentences_length[7] = {2, 1, 3, 4, 4, 2, 4};

void callback();

void SHOW_vidShowAndPlayInit (uint8_t * ready_flag)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SHOW_vidShowAndPlayInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	ready_flag_glob = ready_flag;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 58 04 	sts	0x0458, r25
     e44:	80 93 57 04 	sts	0x0457, r24
	(*ready_flag)=0;
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	10 82       	st	Z, r1
	LCD_vidInit();
     e4e:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <LCD_vidInit>
	M16P_vidInit(9600);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	95 e2       	ldi	r25, 0x25	; 37
     e56:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <M16P_vidInit>
	TMR0_Init();
     e5a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <TMR0_Init>
	TMR0_SetCallback(&callback);
     e5e:	8c e9       	ldi	r24, 0x9C	; 156
     e60:	98 e0       	ldi	r25, 0x08	; 8
     e62:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <TMR0_SetCallback>
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <SHOW_u8CalcTrackNumber>:

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <SHOW_u8CalcTrackNumber+0x6>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <SHOW_u8CalcTrackNumber+0x8>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t track_number = 0;
     e80:	1a 82       	std	Y+2, r1	; 0x02

	for(uint8_t i = 1; i<folder; i++)
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	12 c0       	rjmp	.+36     	; 0xeac <SHOW_u8CalcTrackNumber+0x3c>
	{
		track_number += i*sentences_length[i-1];
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	fc 01       	movw	r30, r24
     e92:	eb 55       	subi	r30, 0x5B	; 91
     e94:	fd 4f       	sbci	r31, 0xFD	; 253
     e96:	90 81       	ld	r25, Z
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	98 9f       	mul	r25, r24
     e9c:	90 2d       	mov	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	89 0f       	add	r24, r25
     ea4:	8a 83       	std	Y+2, r24	; 0x02

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
	uint8_t track_number = 0;

	for(uint8_t i = 1; i<folder; i++)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	99 81       	ldd	r25, Y+1	; 0x01
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	98 17       	cp	r25, r24
     eb2:	50 f3       	brcs	.-44     	; 0xe88 <SHOW_u8CalcTrackNumber+0x18>
	{
		track_number += i*sentences_length[i-1];
	}
	track_number += file;
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	89 0f       	add	r24, r25
     eba:	8a 83       	std	Y+2, r24	; 0x02

	return track_number;
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <SHOW_vidShowAndPlay>:

void SHOW_vidShowAndPlay (uint8_t * words)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	e8 97       	sbiw	r28, 0x38	; 56
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	9b ab       	std	Y+51, r25	; 0x33
     ee2:	8a ab       	std	Y+50, r24	; 0x32
	uint8_t string_output[32] ={0};
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	fe 01       	movw	r30, r28
     ee8:	38 96       	adiw	r30, 0x08	; 8
     eea:	df 01       	movw	r26, r30
     eec:	98 2f       	mov	r25, r24
     eee:	1d 92       	st	X+, r1
     ef0:	9a 95       	dec	r25
     ef2:	e9 f7       	brne	.-6      	; 0xeee <SHOW_vidShowAndPlay+0x22>
	uint8_t words_cpy[10];
	uint8_t l = 0;
     ef4:	1f 82       	std	Y+7, r1	; 0x07
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
     ef6:	1d 82       	std	Y+5, r1	; 0x05
     ef8:	15 c0       	rjmp	.+42     	; 0xf24 <SHOW_vidShowAndPlay+0x58>
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	48 2f       	mov	r20, r24
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8a a9       	ldd	r24, Y+50	; 0x32
     f08:	9b a9       	ldd	r25, Y+51	; 0x33
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	20 81       	ld	r18, Z
     f12:	ce 01       	movw	r24, r28
     f14:	88 96       	adiw	r24, 0x28	; 40
     f16:	fc 01       	movw	r30, r24
     f18:	e4 0f       	add	r30, r20
     f1a:	f5 1f       	adc	r31, r21
     f1c:	20 83       	st	Z, r18
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	8a 30       	cpi	r24, 0x0A	; 10
     f28:	40 f3       	brcs	.-48     	; 0xefa <SHOW_vidShowAndPlay+0x2e>
	LCD_vidClearDisplay();
     f2a:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <LCD_vidClearDisplay>
	(*ready_flag_glob) = 1;
     f2e:	e0 91 57 04 	lds	r30, 0x0457
     f32:	f0 91 58 04 	lds	r31, 0x0458
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 83       	st	Z, r24
	uint8_t j=0;
     f3a:	1e 82       	std	Y+6, r1	; 0x06
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     f3c:	1c 82       	std	Y+4, r1	; 0x04
     f3e:	b4 c0       	rjmp	.+360    	; 0x10a8 <SHOW_vidShowAndPlay+0x1dc>
	{
		for(j =0; j<NO_OF_WORDS; j++)
     f40:	1e 82       	std	Y+6, r1	; 0x06
     f42:	41 c0       	rjmp	.+130    	; 0xfc6 <SHOW_vidShowAndPlay+0xfa>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	88 96       	adiw	r24, 0x28	; 40
     f4e:	fc 01       	movw	r30, r24
     f50:	e2 0f       	add	r30, r18
     f52:	f3 1f       	adc	r31, r19
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	fc 01       	movw	r30, r24
     f72:	e8 59       	subi	r30, 0x98	; 152
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	48 17       	cp	r20, r24
     f7c:	59 07       	cpc	r21, r25
     f7e:	01 f5       	brne	.+64     	; 0xfc0 <SHOW_vidShowAndPlay+0xf4>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	9c 01       	movw	r18, r24
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	ce 01       	movw	r24, r28
     f8e:	88 96       	adiw	r24, 0x28	; 40
     f90:	fc 01       	movw	r30, r24
     f92:	e2 0f       	add	r30, r18
     f94:	f3 1f       	adc	r31, r19
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	c9 01       	movw	r24, r18
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	fc 01       	movw	r30, r24
     fb2:	e4 59       	subi	r30, 0x94	; 148
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	48 17       	cp	r20, r24
     fbc:	59 07       	cpc	r21, r25
     fbe:	39 f0       	breq	.+14     	; 0xfce <SHOW_vidShowAndPlay+0x102>
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
	{
		for(j =0; j<NO_OF_WORDS; j++)
     fc0:	8e 81       	ldd	r24, Y+6	; 0x06
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8e 83       	std	Y+6, r24	; 0x06
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	84 31       	cpi	r24, 0x14	; 20
     fca:	08 f4       	brcc	.+2      	; 0xfce <SHOW_vidShowAndPlay+0x102>
     fcc:	bb cf       	rjmp	.-138    	; 0xf44 <SHOW_vidShowAndPlay+0x78>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
     fce:	80 91 14 04 	lds	r24, 0x0414
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	80 93 14 04 	sts	0x0414, r24
		sound_buffer[i]=outputs[j];
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	48 2f       	mov	r20, r24
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	c9 01       	movw	r24, r18
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	9c 01       	movw	r18, r24
     ff4:	27 5c       	subi	r18, 0xC7	; 199
     ff6:	3b 4f       	sbci	r19, 0xFB	; 251
     ff8:	ca 01       	movw	r24, r20
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	84 0f       	add	r24, r20
    1000:	95 1f       	adc	r25, r21
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	88 59       	subi	r24, 0x98	; 152
    1008:	9e 4f       	sbci	r25, 0xFE	; 254
    100a:	3d ab       	std	Y+53, r19	; 0x35
    100c:	2c ab       	std	Y+52, r18	; 0x34
    100e:	9f ab       	std	Y+55, r25	; 0x37
    1010:	8e ab       	std	Y+54, r24	; 0x36
    1012:	a6 e0       	ldi	r26, 0x06	; 6
    1014:	a8 af       	std	Y+56, r26	; 0x38
    1016:	ee a9       	ldd	r30, Y+54	; 0x36
    1018:	ff a9       	ldd	r31, Y+55	; 0x37
    101a:	00 80       	ld	r0, Z
    101c:	8e a9       	ldd	r24, Y+54	; 0x36
    101e:	9f a9       	ldd	r25, Y+55	; 0x37
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	9f ab       	std	Y+55, r25	; 0x37
    1024:	8e ab       	std	Y+54, r24	; 0x36
    1026:	ac a9       	ldd	r26, Y+52	; 0x34
    1028:	bd a9       	ldd	r27, Y+53	; 0x35
    102a:	0c 92       	st	X, r0
    102c:	ec a9       	ldd	r30, Y+52	; 0x34
    102e:	fd a9       	ldd	r31, Y+53	; 0x35
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	fd ab       	std	Y+53, r31	; 0x35
    1034:	ec ab       	std	Y+52, r30	; 0x34
    1036:	f8 ad       	ldd	r31, Y+56	; 0x38
    1038:	f1 50       	subi	r31, 0x01	; 1
    103a:	f8 af       	std	Y+56, r31	; 0x38
    103c:	88 ad       	ldd	r24, Y+56	; 0x38
    103e:	88 23       	and	r24, r24
    1040:	51 f7       	brne	.-44     	; 0x1016 <SHOW_vidShowAndPlay+0x14a>
		uint8_t * ptr = strings[j];
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	fc 01       	movw	r30, r24
    104e:	e7 59       	subi	r30, 0x97	; 151
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
		for(uint8_t k = 0; k < strings_length[j]; k++)
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	18 c0       	rjmp	.+48     	; 0x108e <SHOW_vidShowAndPlay+0x1c2>
		{
			string_output[l++] = ptr[k];
    105e:	8f 81       	ldd	r24, Y+7	; 0x07
    1060:	48 2f       	mov	r20, r24
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	20 81       	ld	r18, Z
    1076:	ce 01       	movw	r24, r28
    1078:	08 96       	adiw	r24, 0x08	; 8
    107a:	fc 01       	movw	r30, r24
    107c:	e4 0f       	add	r30, r20
    107e:	f5 1f       	adc	r31, r21
    1080:	20 83       	st	Z, r18
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	8f 83       	std	Y+7, r24	; 0x07
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
		sound_buffer[i]=outputs[j];
		uint8_t * ptr = strings[j];
		for(uint8_t k = 0; k < strings_length[j]; k++)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	fc 01       	movw	r30, r24
    1096:	ef 56       	subi	r30, 0x6F	; 111
    1098:	fd 4f       	sbci	r31, 0xFD	; 253
    109a:	90 81       	ld	r25, Z
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	89 17       	cp	r24, r25
    10a0:	f0 f2       	brcs	.-68     	; 0x105e <SHOW_vidShowAndPlay+0x192>
	uint8_t l = 0;
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	8e 5f       	subi	r24, 0xFE	; 254
    10a6:	8c 83       	std	Y+4, r24	; 0x04
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	ce 01       	movw	r24, r28
    10b0:	88 96       	adiw	r24, 0x28	; 40
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	80 81       	ld	r24, Z
    10ba:	88 23       	and	r24, r24
    10bc:	79 f0       	breq	.+30     	; 0x10dc <SHOW_vidShowAndPlay+0x210>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9c 01       	movw	r18, r24
    10c6:	2f 5f       	subi	r18, 0xFF	; 255
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ca:	ce 01       	movw	r24, r28
    10cc:	88 96       	adiw	r24, 0x28	; 40
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	80 81       	ld	r24, Z
    10d6:	88 23       	and	r24, r24
    10d8:	09 f0       	breq	.+2      	; 0x10dc <SHOW_vidShowAndPlay+0x210>
    10da:	32 cf       	rjmp	.-412    	; 0xf40 <SHOW_vidShowAndPlay+0x74>
		for(uint8_t k = 0; k < strings_length[j]; k++)
		{
			string_output[l++] = ptr[k];
		}
	}
	string_output[l]= '\0';
    10dc:	8f 81       	ldd	r24, Y+7	; 0x07
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	ce 01       	movw	r24, r28
    10e4:	08 96       	adiw	r24, 0x08	; 8
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	10 82       	st	Z, r1
	LCD_vidDisplayString(&string_output[0]);
    10ee:	ce 01       	movw	r24, r28
    10f0:	08 96       	adiw	r24, 0x08	; 8
    10f2:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <LCD_vidDisplayString>
	TMR0_Start(sound_buffer[0].sound_duration);
    10f6:	80 91 39 04 	lds	r24, 0x0439
    10fa:	90 91 3a 04 	lds	r25, 0x043A
    10fe:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <TMR0_Start>
	//M16P_vidPlayFileInFolder(sound_buffer[0].folder, sound_buffer[0].file);
	M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[0].folder, sound_buffer[0].file));
    1102:	80 91 3b 04 	lds	r24, 0x043B
    1106:	90 91 3c 04 	lds	r25, 0x043C
    110a:	28 2f       	mov	r18, r24
    110c:	80 91 3d 04 	lds	r24, 0x043D
    1110:	90 91 3e 04 	lds	r25, 0x043E
    1114:	98 2f       	mov	r25, r24
    1116:	82 2f       	mov	r24, r18
    1118:	69 2f       	mov	r22, r25
    111a:	0e 94 38 07 	call	0xe70	; 0xe70 <SHOW_u8CalcTrackNumber>
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 e7 22 	call	0x45ce	; 0x45ce <M16P_vidPlayTrack>
}
    1126:	e8 96       	adiw	r28, 0x38	; 56
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <callback>:

void callback()
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	M16P_vidPause();
    1140:	0e 94 61 23 	call	0x46c2	; 0x46c2 <M16P_vidPause>
	static uint8_t current_file = 1;
	if(current_file < sound_buffer_size)
    1144:	90 91 ac 02 	lds	r25, 0x02AC
    1148:	80 91 14 04 	lds	r24, 0x0414
    114c:	98 17       	cp	r25, r24
    114e:	08 f0       	brcs	.+2      	; 0x1152 <callback+0x1a>
    1150:	43 c0       	rjmp	.+134    	; 0x11d8 <callback+0xa0>
	{
		M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[current_file].folder, sound_buffer[current_file].file));
    1152:	80 91 ac 02 	lds	r24, 0x02AC
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	c9 01       	movw	r24, r18
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	fc 01       	movw	r30, r24
    116c:	e7 5c       	subi	r30, 0xC7	; 199
    116e:	fb 4f       	sbci	r31, 0xFB	; 251
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	48 2f       	mov	r20, r24
    1176:	80 91 ac 02 	lds	r24, 0x02AC
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	c9 01       	movw	r24, r18
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	fc 01       	movw	r30, r24
    118e:	e3 5c       	subi	r30, 0xC3	; 195
    1190:	fb 4f       	sbci	r31, 0xFB	; 251
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	98 2f       	mov	r25, r24
    1198:	84 2f       	mov	r24, r20
    119a:	69 2f       	mov	r22, r25
    119c:	0e 94 38 07 	call	0xe70	; 0xe70 <SHOW_u8CalcTrackNumber>
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 e7 22 	call	0x45ce	; 0x45ce <M16P_vidPlayTrack>
		//M16P_vidPlayFileInFolder(sound_buffer[current_file].folder, sound_buffer[current_file].file);
		TMR0_Start(sound_buffer[current_file].sound_duration);
    11a8:	80 91 ac 02 	lds	r24, 0x02AC
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	c9 01       	movw	r24, r18
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	82 0f       	add	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	fc 01       	movw	r30, r24
    11c0:	e7 5c       	subi	r30, 0xC7	; 199
    11c2:	fb 4f       	sbci	r31, 0xFB	; 251
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <TMR0_Start>
		current_file++;
    11cc:	80 91 ac 02 	lds	r24, 0x02AC
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	80 93 ac 02 	sts	0x02AC, r24
    11d6:	0a c0       	rjmp	.+20     	; 0x11ec <callback+0xb4>

	}else{
		current_file = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	80 93 ac 02 	sts	0x02AC, r24
		sound_buffer_size = 0;
    11de:	10 92 14 04 	sts	0x0414, r1
		(*ready_flag_glob) = 0;
    11e2:	e0 91 57 04 	lds	r30, 0x0457
    11e6:	f0 91 58 04 	lds	r31, 0x0458
    11ea:	10 82       	st	Z, r1
	}
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <GLOVE_vidCallBack>:
uint16_ i = 0;

uint8_t FLEX_SENSORS[8] = {FLEX_0, FLEX_1, FLEX_2, FLEX_3, FLEX_4, FLEX_5, FLEX_6, FLEX_7};

void GLOVE_vidCallBack()
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	SENSOR_READ[i]=READ;
    11fa:	20 91 15 04 	lds	r18, 0x0415
    11fe:	30 91 16 04 	lds	r19, 0x0416
    1202:	80 91 1a 04 	lds	r24, 0x041A
    1206:	90 91 1b 04 	lds	r25, 0x041B
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	f9 01       	movw	r30, r18
    1210:	e8 0f       	add	r30, r24
    1212:	f9 1f       	adc	r31, r25
    1214:	80 91 18 04 	lds	r24, 0x0418
    1218:	90 91 19 04 	lds	r25, 0x0419
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
	if(i < NO_OF_FLEX_SENSORS-1)
    1220:	80 91 17 04 	lds	r24, 0x0417
    1224:	88 2f       	mov	r24, r24
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9c 01       	movw	r18, r24
    122c:	80 91 1a 04 	lds	r24, 0x041A
    1230:	90 91 1b 04 	lds	r25, 0x041B
    1234:	82 17       	cp	r24, r18
    1236:	93 07       	cpc	r25, r19
    1238:	58 f5       	brcc	.+86     	; 0x1290 <GLOVE_vidCallBack+0x9e>
	{
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=0;
    123a:	20 91 15 04 	lds	r18, 0x0415
    123e:	30 91 16 04 	lds	r19, 0x0416
    1242:	80 91 17 04 	lds	r24, 0x0417
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 96       	adiw	r24, 0x02	; 2
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	f9 01       	movw	r30, r18
    1252:	e8 0f       	add	r30, r24
    1254:	f9 1f       	adc	r31, r25
    1256:	11 82       	std	Z+1, r1	; 0x01
    1258:	10 82       	st	Z, r1
		i++;
    125a:	80 91 1a 04 	lds	r24, 0x041A
    125e:	90 91 1b 04 	lds	r25, 0x041B
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	90 93 1b 04 	sts	0x041B, r25
    1268:	80 93 1a 04 	sts	0x041A, r24
		READ=0;
    126c:	10 92 19 04 	sts	0x0419, r1
    1270:	10 92 18 04 	sts	0x0418, r1
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    1274:	80 91 1a 04 	lds	r24, 0x041A
    1278:	90 91 1b 04 	lds	r25, 0x041B
    127c:	fc 01       	movw	r30, r24
    127e:	e3 55       	subi	r30, 0x53	; 83
    1280:	fd 4f       	sbci	r31, 0xFD	; 253
    1282:	20 81       	ld	r18, Z
    1284:	88 e1       	ldi	r24, 0x18	; 24
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	62 2f       	mov	r22, r18
    128a:	0e 94 bd 21 	call	0x437a	; 0x437a <FLEX_vidGetFlexRead>
    128e:	27 c0       	rjmp	.+78     	; 0x12de <GLOVE_vidCallBack+0xec>
	}else if(i == NO_OF_FLEX_SENSORS-1)
    1290:	80 91 17 04 	lds	r24, 0x0417
    1294:	88 2f       	mov	r24, r24
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9c 01       	movw	r18, r24
    129c:	80 91 1a 04 	lds	r24, 0x041A
    12a0:	90 91 1b 04 	lds	r25, 0x041B
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	d1 f4       	brne	.+52     	; 0x12de <GLOVE_vidCallBack+0xec>
	{
		i=0;
    12aa:	10 92 1b 04 	sts	0x041B, r1
    12ae:	10 92 1a 04 	sts	0x041A, r1
		READ=0;
    12b2:	10 92 19 04 	sts	0x0419, r1
    12b6:	10 92 18 04 	sts	0x0418, r1
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=1;
    12ba:	20 91 15 04 	lds	r18, 0x0415
    12be:	30 91 16 04 	lds	r19, 0x0416
    12c2:	80 91 17 04 	lds	r24, 0x0417
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 96       	adiw	r24, 0x02	; 2
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	f9 01       	movw	r30, r18
    12d2:	e8 0f       	add	r30, r24
    12d4:	f9 1f       	adc	r31, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	80 83       	st	Z, r24
	}
}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <GLOVE_vidSensorsInit>:

void GLOVE_vidSensorsInit()
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	FLEX_vidFlexInit(FLEX_ALL);
    12ec:	88 e0       	ldi	r24, 0x08	; 8
    12ee:	0e 94 ad 21 	call	0x435a	; 0x435a <FLEX_vidFlexInit>
	TILT_vidInit(TILT_2);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <TILT_vidInit>
	TILT_vidInit(TILT_3);
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <TILT_vidInit>
	FLEX_vidSetCallBack(&GLOVE_vidCallBack);
    12fe:	89 ef       	ldi	r24, 0xF9	; 249
    1300:	98 e0       	ldi	r25, 0x08	; 8
    1302:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <FLEX_vidSetCallBack>
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <GLOVE_vidSetGloveParams>:

void GLOVE_vidSetGloveParams(uint16_* sensor_read, uint8_t no_of_sensors)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <GLOVE_vidSetGloveParams+0x6>
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	6b 83       	std	Y+3, r22	; 0x03
	SENSOR_READ = sensor_read;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	90 93 16 04 	sts	0x0416, r25
    1326:	80 93 15 04 	sts	0x0415, r24
	if(no_of_sensors<=8)NO_OF_FLEX_SENSORS = no_of_sensors - 2;
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	89 30       	cpi	r24, 0x09	; 9
    132e:	20 f4       	brcc	.+8      	; 0x1338 <GLOVE_vidSetGloveParams+0x2c>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	82 50       	subi	r24, 0x02	; 2
    1334:	80 93 17 04 	sts	0x0417, r24
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <GLOVE_vidGetHandRead>:

void GLOVE_vidGetHandRead()
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	if(i==0)
    134c:	80 91 1a 04 	lds	r24, 0x041A
    1350:	90 91 1b 04 	lds	r25, 0x041B
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f5       	brne	.+90     	; 0x13b2 <GLOVE_vidGetHandRead+0x6e>
	{
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS],TILT_2);
    1358:	80 91 15 04 	lds	r24, 0x0415
    135c:	90 91 16 04 	lds	r25, 0x0416
    1360:	9c 01       	movw	r18, r24
    1362:	80 91 17 04 	lds	r24, 0x0417
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	0e 94 0c 18 	call	0x3018	; 0x3018 <TILT_vidGetTiltRead>
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS + 1],TILT_3);
    1378:	20 91 15 04 	lds	r18, 0x0415
    137c:	30 91 16 04 	lds	r19, 0x0416
    1380:	80 91 17 04 	lds	r24, 0x0417
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	63 e0       	ldi	r22, 0x03	; 3
    1394:	0e 94 0c 18 	call	0x3018	; 0x3018 <TILT_vidGetTiltRead>
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    1398:	80 91 1a 04 	lds	r24, 0x041A
    139c:	90 91 1b 04 	lds	r25, 0x041B
    13a0:	fc 01       	movw	r30, r24
    13a2:	e3 55       	subi	r30, 0x53	; 83
    13a4:	fd 4f       	sbci	r31, 0xFD	; 253
    13a6:	20 81       	ld	r18, Z
    13a8:	88 e1       	ldi	r24, 0x18	; 24
    13aa:	94 e0       	ldi	r25, 0x04	; 4
    13ac:	62 2f       	mov	r22, r18
    13ae:	0e 94 bd 21 	call	0x437a	; 0x437a <FLEX_vidGetFlexRead>
	}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <GET_float32Pow>:
									  STOPPING_WORD, NOT_FOUND};

// HELPING FUNCTIONS 

// 1. Custom function to calculate power of a number
float32_t GET_float32Pow(float32_t base, uint8_t exp) {
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	2a 97       	sbiw	r28, 0x0a	; 10
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	6e 83       	std	Y+6, r22	; 0x06
    13ce:	7f 83       	std	Y+7, r23	; 0x07
    13d0:	88 87       	std	Y+8, r24	; 0x08
    13d2:	99 87       	std	Y+9, r25	; 0x09
    13d4:	4a 87       	std	Y+10, r20	; 0x0a
    float32_t result = 1.0;
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a0 e8       	ldi	r26, 0x80	; 128
    13dc:	bf e3       	ldi	r27, 0x3F	; 63
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	ac 83       	std	Y+4, r26	; 0x04
    13e4:	bd 83       	std	Y+5, r27	; 0x05
    for (uint8_t i = 0; i < exp; i++) {
    13e6:	19 82       	std	Y+1, r1	; 0x01
    13e8:	13 c0       	rjmp	.+38     	; 0x1410 <GET_float32Pow+0x58>
        result *= base;
    13ea:	6a 81       	ldd	r22, Y+2	; 0x02
    13ec:	7b 81       	ldd	r23, Y+3	; 0x03
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	2e 81       	ldd	r18, Y+6	; 0x06
    13f4:	3f 81       	ldd	r19, Y+7	; 0x07
    13f6:	48 85       	ldd	r20, Y+8	; 0x08
    13f8:	59 85       	ldd	r21, Y+9	; 0x09
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	9b 83       	std	Y+3, r25	; 0x03
    1406:	ac 83       	std	Y+4, r26	; 0x04
    1408:	bd 83       	std	Y+5, r27	; 0x05
// HELPING FUNCTIONS 

// 1. Custom function to calculate power of a number
float32_t GET_float32Pow(float32_t base, uint8_t exp) {
    float32_t result = 1.0;
    for (uint8_t i = 0; i < exp; i++) {
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	99 81       	ldd	r25, Y+1	; 0x01
    1412:	8a 85       	ldd	r24, Y+10	; 0x0a
    1414:	98 17       	cp	r25, r24
    1416:	48 f3       	brcs	.-46     	; 0x13ea <GET_float32Pow+0x32>
        result *= base;
    }
    return result;
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	9b 81       	ldd	r25, Y+3	; 0x03
    141c:	ac 81       	ldd	r26, Y+4	; 0x04
    141e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1420:	bc 01       	movw	r22, r24
    1422:	cd 01       	movw	r24, r26
    1424:	2a 96       	adiw	r28, 0x0a	; 10
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <GET_float32Sqrt>:

// 2. Custom function to calculate square root using the Babylonian method
float32_t GET_float32Sqrt(float32_t num) {
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	60 97       	sbiw	r28, 0x10	; 16
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	6d 87       	std	Y+13, r22	; 0x0d
    144c:	7e 87       	std	Y+14, r23	; 0x0e
    144e:	8f 87       	std	Y+15, r24	; 0x0f
    1450:	98 8b       	std	Y+16, r25	; 0x10
    float32_t x = num;
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	af 85       	ldd	r26, Y+15	; 0x0f
    1458:	b8 89       	ldd	r27, Y+16	; 0x10
    145a:	89 87       	std	Y+9, r24	; 0x09
    145c:	9a 87       	std	Y+10, r25	; 0x0a
    145e:	ab 87       	std	Y+11, r26	; 0x0b
    1460:	bc 87       	std	Y+12, r27	; 0x0c
    float32_t y = 1.0;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e8       	ldi	r26, 0x80	; 128
    1468:	bf e3       	ldi	r27, 0x3F	; 63
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	af 83       	std	Y+7, r26	; 0x07
    1470:	b8 87       	std	Y+8, r27	; 0x08
    float32_t epsilon = 0.001;  // Accuracy
    1472:	8f e6       	ldi	r24, 0x6F	; 111
    1474:	92 e1       	ldi	r25, 0x12	; 18
    1476:	a3 e8       	ldi	r26, 0x83	; 131
    1478:	ba e3       	ldi	r27, 0x3A	; 58
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	9a 83       	std	Y+2, r25	; 0x02
    147e:	ab 83       	std	Y+3, r26	; 0x03
    1480:	bc 83       	std	Y+4, r27	; 0x04
    1482:	2a c0       	rjmp	.+84     	; 0x14d8 <GET_float32Sqrt+0xa2>

    while (x - y > epsilon) {
        x = (x + y) / 2.0;
    1484:	69 85       	ldd	r22, Y+9	; 0x09
    1486:	7a 85       	ldd	r23, Y+10	; 0x0a
    1488:	8b 85       	ldd	r24, Y+11	; 0x0b
    148a:	9c 85       	ldd	r25, Y+12	; 0x0c
    148c:	2d 81       	ldd	r18, Y+5	; 0x05
    148e:	3e 81       	ldd	r19, Y+6	; 0x06
    1490:	4f 81       	ldd	r20, Y+7	; 0x07
    1492:	58 85       	ldd	r21, Y+8	; 0x08
    1494:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	50 e4       	ldi	r21, 0x40	; 64
    14a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	89 87       	std	Y+9, r24	; 0x09
    14b2:	9a 87       	std	Y+10, r25	; 0x0a
    14b4:	ab 87       	std	Y+11, r26	; 0x0b
    14b6:	bc 87       	std	Y+12, r27	; 0x0c
        y = num / x;
    14b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    14ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    14bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14be:	98 89       	ldd	r25, Y+16	; 0x10
    14c0:	29 85       	ldd	r18, Y+9	; 0x09
    14c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    14c4:	4b 85       	ldd	r20, Y+11	; 0x0b
    14c6:	5c 85       	ldd	r21, Y+12	; 0x0c
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	af 83       	std	Y+7, r26	; 0x07
    14d6:	b8 87       	std	Y+8, r27	; 0x08
float32_t GET_float32Sqrt(float32_t num) {
    float32_t x = num;
    float32_t y = 1.0;
    float32_t epsilon = 0.001;  // Accuracy

    while (x - y > epsilon) {
    14d8:	69 85       	ldd	r22, Y+9	; 0x09
    14da:	7a 85       	ldd	r23, Y+10	; 0x0a
    14dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    14de:	9c 85       	ldd	r25, Y+12	; 0x0c
    14e0:	2d 81       	ldd	r18, Y+5	; 0x05
    14e2:	3e 81       	ldd	r19, Y+6	; 0x06
    14e4:	4f 81       	ldd	r20, Y+7	; 0x07
    14e6:	58 85       	ldd	r21, Y+8	; 0x08
    14e8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	29 81       	ldd	r18, Y+1	; 0x01
    14f6:	3a 81       	ldd	r19, Y+2	; 0x02
    14f8:	4b 81       	ldd	r20, Y+3	; 0x03
    14fa:	5c 81       	ldd	r21, Y+4	; 0x04
    14fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1500:	18 16       	cp	r1, r24
    1502:	0c f4       	brge	.+2      	; 0x1506 <GET_float32Sqrt+0xd0>
    1504:	bf cf       	rjmp	.-130    	; 0x1484 <GET_float32Sqrt+0x4e>
        x = (x + y) / 2.0;
        y = num / x;
    }

    return x;
    1506:	89 85       	ldd	r24, Y+9	; 0x09
    1508:	9a 85       	ldd	r25, Y+10	; 0x0a
    150a:	ab 85       	ldd	r26, Y+11	; 0x0b
    150c:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	60 96       	adiw	r28, 0x10	; 16
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <GET_float32CalculateDistance>:

// 3. Function to calculate Euclidean distance between two sensor readings
float32_t GET_float32CalculateDistance(uint16_* sensor_reads, word* word) {
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	28 97       	sbiw	r28, 0x08	; 8
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	78 87       	std	Y+8, r23	; 0x08
    153e:	6f 83       	std	Y+7, r22	; 0x07

    float32_t distance = 0.0;
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	ab 83       	std	Y+3, r26	; 0x03
    154e:	bc 83       	std	Y+4, r27	; 0x04

    distance += GET_float32Pow((float32_t)(sensor_reads[0] - word->thumb), 2);
    1550:	ed 81       	ldd	r30, Y+5	; 0x05
    1552:	fe 81       	ldd	r31, Y+6	; 0x06
    1554:	20 81       	ld	r18, Z
    1556:	31 81       	ldd	r19, Z+1	; 0x01
    1558:	ef 81       	ldd	r30, Y+7	; 0x07
    155a:	f8 85       	ldd	r31, Y+8	; 0x08
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	a9 01       	movw	r20, r18
    1562:	48 1b       	sub	r20, r24
    1564:	59 0b       	sbc	r21, r25
    1566:	ca 01       	movw	r24, r20
    1568:	cc 01       	movw	r24, r24
    156a:	a0 e0       	ldi	r26, 0x00	; 0
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	42 e0       	ldi	r20, 0x02	; 2
    1580:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    1584:	9b 01       	movw	r18, r22
    1586:	ac 01       	movw	r20, r24
    1588:	69 81       	ldd	r22, Y+1	; 0x01
    158a:	7a 81       	ldd	r23, Y+2	; 0x02
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	ab 83       	std	Y+3, r26	; 0x03
    159e:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[1] - word->finger_1), 2);
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	fc 01       	movw	r30, r24
    15a6:	32 96       	adiw	r30, 0x02	; 2
    15a8:	20 81       	ld	r18, Z
    15aa:	31 81       	ldd	r19, Z+1	; 0x01
    15ac:	ef 81       	ldd	r30, Y+7	; 0x07
    15ae:	f8 85       	ldd	r31, Y+8	; 0x08
    15b0:	82 81       	ldd	r24, Z+2	; 0x02
    15b2:	93 81       	ldd	r25, Z+3	; 0x03
    15b4:	a9 01       	movw	r20, r18
    15b6:	48 1b       	sub	r20, r24
    15b8:	59 0b       	sbc	r21, r25
    15ba:	ca 01       	movw	r24, r20
    15bc:	cc 01       	movw	r24, r24
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	42 e0       	ldi	r20, 0x02	; 2
    15d4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	69 81       	ldd	r22, Y+1	; 0x01
    15de:	7a 81       	ldd	r23, Y+2	; 0x02
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	ab 83       	std	Y+3, r26	; 0x03
    15f2:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[2] - word->finger_2), 2);
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	fc 01       	movw	r30, r24
    15fa:	34 96       	adiw	r30, 0x04	; 4
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
    1600:	ef 81       	ldd	r30, Y+7	; 0x07
    1602:	f8 85       	ldd	r31, Y+8	; 0x08
    1604:	84 81       	ldd	r24, Z+4	; 0x04
    1606:	95 81       	ldd	r25, Z+5	; 0x05
    1608:	a9 01       	movw	r20, r18
    160a:	48 1b       	sub	r20, r24
    160c:	59 0b       	sbc	r21, r25
    160e:	ca 01       	movw	r24, r20
    1610:	cc 01       	movw	r24, r24
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	42 e0       	ldi	r20, 0x02	; 2
    1628:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	69 81       	ldd	r22, Y+1	; 0x01
    1632:	7a 81       	ldd	r23, Y+2	; 0x02
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	ab 83       	std	Y+3, r26	; 0x03
    1646:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[3] - word->finger_3), 2);
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	fc 01       	movw	r30, r24
    164e:	36 96       	adiw	r30, 0x06	; 6
    1650:	20 81       	ld	r18, Z
    1652:	31 81       	ldd	r19, Z+1	; 0x01
    1654:	ef 81       	ldd	r30, Y+7	; 0x07
    1656:	f8 85       	ldd	r31, Y+8	; 0x08
    1658:	86 81       	ldd	r24, Z+6	; 0x06
    165a:	97 81       	ldd	r25, Z+7	; 0x07
    165c:	a9 01       	movw	r20, r18
    165e:	48 1b       	sub	r20, r24
    1660:	59 0b       	sbc	r21, r25
    1662:	ca 01       	movw	r24, r20
    1664:	cc 01       	movw	r24, r24
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	42 e0       	ldi	r20, 0x02	; 2
    167c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	69 81       	ldd	r22, Y+1	; 0x01
    1686:	7a 81       	ldd	r23, Y+2	; 0x02
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	ab 83       	std	Y+3, r26	; 0x03
    169a:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[4] - word->finger_4), 2);
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	fc 01       	movw	r30, r24
    16a2:	38 96       	adiw	r30, 0x08	; 8
    16a4:	20 81       	ld	r18, Z
    16a6:	31 81       	ldd	r19, Z+1	; 0x01
    16a8:	ef 81       	ldd	r30, Y+7	; 0x07
    16aa:	f8 85       	ldd	r31, Y+8	; 0x08
    16ac:	80 85       	ldd	r24, Z+8	; 0x08
    16ae:	91 85       	ldd	r25, Z+9	; 0x09
    16b0:	a9 01       	movw	r20, r18
    16b2:	48 1b       	sub	r20, r24
    16b4:	59 0b       	sbc	r21, r25
    16b6:	ca 01       	movw	r24, r20
    16b8:	cc 01       	movw	r24, r24
    16ba:	a0 e0       	ldi	r26, 0x00	; 0
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	42 e0       	ldi	r20, 0x02	; 2
    16d0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	69 81       	ldd	r22, Y+1	; 0x01
    16da:	7a 81       	ldd	r23, Y+2	; 0x02
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	ab 83       	std	Y+3, r26	; 0x03
    16ee:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[5] - word->tilt0), 2);
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	fc 01       	movw	r30, r24
    16f6:	3a 96       	adiw	r30, 0x0a	; 10
    16f8:	20 81       	ld	r18, Z
    16fa:	31 81       	ldd	r19, Z+1	; 0x01
    16fc:	ef 81       	ldd	r30, Y+7	; 0x07
    16fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1700:	82 85       	ldd	r24, Z+10	; 0x0a
    1702:	93 85       	ldd	r25, Z+11	; 0x0b
    1704:	a9 01       	movw	r20, r18
    1706:	48 1b       	sub	r20, r24
    1708:	59 0b       	sbc	r21, r25
    170a:	ca 01       	movw	r24, r20
    170c:	cc 01       	movw	r24, r24
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	42 e0       	ldi	r20, 0x02	; 2
    1724:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    1728:	9b 01       	movw	r18, r22
    172a:	ac 01       	movw	r20, r24
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	ab 83       	std	Y+3, r26	; 0x03
    1742:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[6] - word->tilt1), 2);
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	fc 01       	movw	r30, r24
    174a:	3c 96       	adiw	r30, 0x0c	; 12
    174c:	20 81       	ld	r18, Z
    174e:	31 81       	ldd	r19, Z+1	; 0x01
    1750:	ef 81       	ldd	r30, Y+7	; 0x07
    1752:	f8 85       	ldd	r31, Y+8	; 0x08
    1754:	84 85       	ldd	r24, Z+12	; 0x0c
    1756:	95 85       	ldd	r25, Z+13	; 0x0d
    1758:	a9 01       	movw	r20, r18
    175a:	48 1b       	sub	r20, r24
    175c:	59 0b       	sbc	r21, r25
    175e:	ca 01       	movw	r24, r20
    1760:	cc 01       	movw	r24, r24
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	42 e0       	ldi	r20, 0x02	; 2
    1778:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GET_float32Pow>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	69 81       	ldd	r22, Y+1	; 0x01
    1782:	7a 81       	ldd	r23, Y+2	; 0x02
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	9a 83       	std	Y+2, r25	; 0x02
    1794:	ab 83       	std	Y+3, r26	; 0x03
    1796:	bc 83       	std	Y+4, r27	; 0x04

    return GET_float32Sqrt(distance);
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	ab 81       	ldd	r26, Y+3	; 0x03
    179e:	bc 81       	ldd	r27, Y+4	; 0x04
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <GET_float32Sqrt>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22

}
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	28 96       	adiw	r28, 0x08	; 8
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <GET_u8FindClosestSensor>:


// 4. Function to find the closest predefined sensor data
uint8_t GET_u8FindClosestSensor(word* words, uint16_* sensor_reads, uint8_t num_words) {
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	2f 97       	sbiw	r28, 0x0f	; 15
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	9c 87       	std	Y+12, r25	; 0x0c
    17d8:	8b 87       	std	Y+11, r24	; 0x0b
    17da:	7e 87       	std	Y+14, r23	; 0x0e
    17dc:	6d 87       	std	Y+13, r22	; 0x0d
    17de:	4f 87       	std	Y+15, r20	; 0x0f

    uint8_t closest_index = 0;
    17e0:	1a 86       	std	Y+10, r1	; 0x0a

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    17e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    17ea:	b9 01       	movw	r22, r18
    17ec:	0e 94 92 0a 	call	0x1524	; 0x1524 <GET_float32CalculateDistance>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8e 83       	std	Y+6, r24	; 0x06
    17f6:	9f 83       	std	Y+7, r25	; 0x07
    17f8:	a8 87       	std	Y+8, r26	; 0x08
    17fa:	b9 87       	std	Y+9, r27	; 0x09

    for (uint8_t i = 1; i < num_words; i++) {
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	32 c0       	rjmp	.+100    	; 0x1866 <GET_u8FindClosestSensor+0xa4>
        float32_t distance = GET_float32CalculateDistance(sensor_reads, &words[i]);
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	9c 01       	movw	r18, r24
    180a:	22 95       	swap	r18
    180c:	32 95       	swap	r19
    180e:	30 7f       	andi	r19, 0xF0	; 240
    1810:	32 27       	eor	r19, r18
    1812:	20 7f       	andi	r18, 0xF0	; 240
    1814:	32 27       	eor	r19, r18
    1816:	8b 85       	ldd	r24, Y+11	; 0x0b
    1818:	9c 85       	ldd	r25, Y+12	; 0x0c
    181a:	28 0f       	add	r18, r24
    181c:	39 1f       	adc	r19, r25
    181e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1820:	9e 85       	ldd	r25, Y+14	; 0x0e
    1822:	b9 01       	movw	r22, r18
    1824:	0e 94 92 0a 	call	0x1524	; 0x1524 <GET_float32CalculateDistance>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	ab 83       	std	Y+3, r26	; 0x03
    1832:	bc 83       	std	Y+4, r27	; 0x04
        if (distance < min_distance) {
    1834:	69 81       	ldd	r22, Y+1	; 0x01
    1836:	7a 81       	ldd	r23, Y+2	; 0x02
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	2e 81       	ldd	r18, Y+6	; 0x06
    183e:	3f 81       	ldd	r19, Y+7	; 0x07
    1840:	48 85       	ldd	r20, Y+8	; 0x08
    1842:	59 85       	ldd	r21, Y+9	; 0x09
    1844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	54 f4       	brge	.+20     	; 0x1860 <GET_u8FindClosestSensor+0x9e>
            min_distance = distance;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
    1850:	ab 81       	ldd	r26, Y+3	; 0x03
    1852:	bc 81       	ldd	r27, Y+4	; 0x04
    1854:	8e 83       	std	Y+6, r24	; 0x06
    1856:	9f 83       	std	Y+7, r25	; 0x07
    1858:	a8 87       	std	Y+8, r26	; 0x08
    185a:	b9 87       	std	Y+9, r27	; 0x09
            closest_index = i;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	8a 87       	std	Y+10, r24	; 0x0a

    uint8_t closest_index = 0;

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);

    for (uint8_t i = 1; i < num_words; i++) {
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	8f 85       	ldd	r24, Y+15	; 0x0f
    186a:	98 17       	cp	r25, r24
    186c:	50 f2       	brcs	.-108    	; 0x1802 <GET_u8FindClosestSensor+0x40>
            min_distance = distance;
            closest_index = i;
        }
    }

    return closest_index;
    186e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1870:	2f 96       	adiw	r28, 0x0f	; 15
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <GET_vidGetWordAndSound>:


// Main Function 
void GET_vidGetWordAndSound(uint16_ * sensor_reads, uint8_t * word_location )
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <GET_vidGetWordAndSound+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <GET_vidGetWordAndSound+0x8>
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	8a 83       	std	Y+2, r24	; 0x02
    1894:	7d 83       	std	Y+5, r23	; 0x05
    1896:	6c 83       	std	Y+4, r22	; 0x04
	
uint8_t i = GET_u8FindClosestSensor(words, sensor_reads, TOTAL_NO_OF_WORDS);
    1898:	85 eb       	ldi	r24, 0xB5	; 181
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	2a 81       	ldd	r18, Y+2	; 0x02
    189e:	3b 81       	ldd	r19, Y+3	; 0x03
    18a0:	b9 01       	movw	r22, r18
    18a2:	44 e1       	ldi	r20, 0x14	; 20
    18a4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <GET_u8FindClosestSensor>
    18a8:	89 83       	std	Y+1, r24	; 0x01

word_location[0] = words[i].sentence;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	82 95       	swap	r24
    18b2:	92 95       	swap	r25
    18b4:	90 7f       	andi	r25, 0xF0	; 240
    18b6:	98 27       	eor	r25, r24
    18b8:	80 7f       	andi	r24, 0xF0	; 240
    18ba:	98 27       	eor	r25, r24
    18bc:	fc 01       	movw	r30, r24
    18be:	ed 53       	subi	r30, 0x3D	; 61
    18c0:	fd 4f       	sbci	r31, 0xFD	; 253
    18c2:	80 81       	ld	r24, Z
    18c4:	ec 81       	ldd	r30, Y+4	; 0x04
    18c6:	fd 81       	ldd	r31, Y+5	; 0x05
    18c8:	80 83       	st	Z, r24
word_location[1] = words[i].word;
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	dc 01       	movw	r26, r24
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	82 95       	swap	r24
    18da:	92 95       	swap	r25
    18dc:	90 7f       	andi	r25, 0xF0	; 240
    18de:	98 27       	eor	r25, r24
    18e0:	80 7f       	andi	r24, 0xF0	; 240
    18e2:	98 27       	eor	r25, r24
    18e4:	fc 01       	movw	r30, r24
    18e6:	ec 53       	subi	r30, 0x3C	; 60
    18e8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ea:	80 81       	ld	r24, Z
    18ec:	8c 93       	st	X, r24

}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>:
#include"../../libraries/bit_math.h"
#include "../global_interrupt_driver/global_interrupt_int.h"
#include "../global_interrupt_driver/global_interrupt_register.h"

void GLOBAL_INTERRUPT_vidGlobalInterruptEnable(uint8_t mode)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x6>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	3b 83       	std	Y+3, r19	; 0x03
    1914:	2a 83       	std	Y+2, r18	; 0x02
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f0       	breq	.+26     	; 0x1938 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x3a>
    191e:	2a 81       	ldd	r18, Y+2	; 0x02
    1920:	3b 81       	ldd	r19, Y+3	; 0x03
    1922:	21 30       	cpi	r18, 0x01	; 1
    1924:	31 05       	cpc	r19, r1
    1926:	79 f4       	brne	.+30     	; 0x1946 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
	{
		case ENABLED:
			SET_BIT(SREG,7);
    1928:	af e5       	ldi	r26, 0x5F	; 95
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ef e5       	ldi	r30, 0x5F	; 95
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 68       	ori	r24, 0x80	; 128
    1934:	8c 93       	st	X, r24
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
			break;
		case DISABLED:
			CLR_BIT(SREG,7);
    1938:	af e5       	ldi	r26, 0x5F	; 95
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ef e5       	ldi	r30, 0x5F	; 95
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8f 77       	andi	r24, 0x7F	; 127
    1944:	8c 93       	st	X, r24
			break;
	}
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <DIO_u8SetPinMode>:
#include"../../libraries/bit_math.h"
#include"dio_register.h"
#include"dio_int.h"

uint8_t DIO_u8SetPinMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	00 d0       	rcall	.+0      	; 0x1958 <DIO_u8SetPinMode+0x6>
    1958:	00 d0       	rcall	.+0      	; 0x195a <DIO_u8SetPinMode+0x8>
    195a:	00 d0       	rcall	.+0      	; 0x195c <DIO_u8SetPinMode+0xa>
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	6b 83       	std	Y+3, r22	; 0x03
    1964:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1966:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	3e 83       	std	Y+6, r19	; 0x06
    1970:	2d 83       	std	Y+5, r18	; 0x05
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 05       	cpc	r25, r1
    197a:	09 f4       	brne	.+2      	; 0x197e <DIO_u8SetPinMode+0x2c>
    197c:	49 c0       	rjmp	.+146    	; 0x1a10 <DIO_u8SetPinMode+0xbe>
    197e:	2d 81       	ldd	r18, Y+5	; 0x05
    1980:	3e 81       	ldd	r19, Y+6	; 0x06
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	2c f4       	brge	.+10     	; 0x1992 <DIO_u8SetPinMode+0x40>
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	71 f0       	breq	.+28     	; 0x19ac <DIO_u8SetPinMode+0x5a>
    1990:	d5 c0       	rjmp	.+426    	; 0x1b3c <DIO_u8SetPinMode+0x1ea>
    1992:	2d 81       	ldd	r18, Y+5	; 0x05
    1994:	3e 81       	ldd	r19, Y+6	; 0x06
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	09 f4       	brne	.+2      	; 0x199e <DIO_u8SetPinMode+0x4c>
    199c:	6b c0       	rjmp	.+214    	; 0x1a74 <DIO_u8SetPinMode+0x122>
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <DIO_u8SetPinMode+0x58>
    19a8:	97 c0       	rjmp	.+302    	; 0x1ad8 <DIO_u8SetPinMode+0x186>
    19aa:	c8 c0       	rjmp	.+400    	; 0x1b3c <DIO_u8SetPinMode+0x1ea>
		{
		case PORT_A:
			if(mode==INPUT)CLR_BIT(DDRA_REG,pin_no);
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	88 23       	and	r24, r24
    19b0:	a9 f4       	brne	.+42     	; 0x19dc <DIO_u8SetPinMode+0x8a>
    19b2:	aa e3       	ldi	r26, 0x3A	; 58
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ea e3       	ldi	r30, 0x3A	; 58
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_u8SetPinMode+0x7e>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_u8SetPinMode+0x7a>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
    19da:	b2 c0       	rjmp	.+356    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRA_REG,pin_no);
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	a1 f4       	brne	.+40     	; 0x1a0a <DIO_u8SetPinMode+0xb8>
    19e2:	aa e3       	ldi	r26, 0x3A	; 58
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ea e3       	ldi	r30, 0x3A	; 58
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	48 2f       	mov	r20, r24
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 2e       	mov	r0, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <DIO_u8SetPinMode+0xae>
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	0a 94       	dec	r0
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <DIO_u8SetPinMode+0xaa>
    1a04:	84 2b       	or	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	9b c0       	rjmp	.+310    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	98 c0       	rjmp	.+304    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_B:
			if(mode==INPUT)CLR_BIT(DDRB_REG,pin_no);
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	88 23       	and	r24, r24
    1a14:	a9 f4       	brne	.+42     	; 0x1a40 <DIO_u8SetPinMode+0xee>
    1a16:	a7 e3       	ldi	r26, 0x37	; 55
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e7 e3       	ldi	r30, 0x37	; 55
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_u8SetPinMode+0xe2>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_u8SetPinMode+0xde>
    1a38:	80 95       	com	r24
    1a3a:	84 23       	and	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	80 c0       	rjmp	.+256    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRB_REG,pin_no);
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	a1 f4       	brne	.+40     	; 0x1a6e <DIO_u8SetPinMode+0x11c>
    1a46:	a7 e3       	ldi	r26, 0x37	; 55
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e7 e3       	ldi	r30, 0x37	; 55
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_u8SetPinMode+0x112>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_u8SetPinMode+0x10e>
    1a68:	84 2b       	or	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	69 c0       	rjmp	.+210    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	66 c0       	rjmp	.+204    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_C:
			if(mode==INPUT)CLR_BIT(DDRC_REG,pin_no);
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	88 23       	and	r24, r24
    1a78:	a9 f4       	brne	.+42     	; 0x1aa4 <DIO_u8SetPinMode+0x152>
    1a7a:	a4 e3       	ldi	r26, 0x34	; 52
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e4 e3       	ldi	r30, 0x34	; 52
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_u8SetPinMode+0x146>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_u8SetPinMode+0x142>
    1a9c:	80 95       	com	r24
    1a9e:	84 23       	and	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	4e c0       	rjmp	.+156    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRC_REG,pin_no);
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	a1 f4       	brne	.+40     	; 0x1ad2 <DIO_u8SetPinMode+0x180>
    1aaa:	a4 e3       	ldi	r26, 0x34	; 52
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e4 e3       	ldi	r30, 0x34	; 52
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <DIO_u8SetPinMode+0x176>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <DIO_u8SetPinMode+0x172>
    1acc:	84 2b       	or	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	37 c0       	rjmp	.+110    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	34 c0       	rjmp	.+104    	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_D:
			if(mode==INPUT)CLR_BIT(DDRD_REG,pin_no);
    1ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ada:	88 23       	and	r24, r24
    1adc:	a9 f4       	brne	.+42     	; 0x1b08 <DIO_u8SetPinMode+0x1b6>
    1ade:	a1 e3       	ldi	r26, 0x31	; 49
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e1 e3       	ldi	r30, 0x31	; 49
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	48 2f       	mov	r20, r24
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_u8SetPinMode+0x1aa>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_u8SetPinMode+0x1a6>
    1b00:	80 95       	com	r24
    1b02:	84 23       	and	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	1c c0       	rjmp	.+56     	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRD_REG,pin_no);
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	a1 f4       	brne	.+40     	; 0x1b36 <DIO_u8SetPinMode+0x1e4>
    1b0e:	a1 e3       	ldi	r26, 0x31	; 49
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e1 e3       	ldi	r30, 0x31	; 49
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_u8SetPinMode+0x1da>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_u8SetPinMode+0x1d6>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_u8SetPinMode+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b42:	26 96       	adiw	r28, 0x06	; 6
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <DIO_u8SetPinValue>:
uint8_t DIO_u8SetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t value)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <DIO_u8SetPinValue+0x6>
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <DIO_u8SetPinValue+0x8>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <DIO_u8SetPinValue+0xa>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	8a 83       	std	Y+2, r24	; 0x02
    1b64:	6b 83       	std	Y+3, r22	; 0x03
    1b66:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1b68:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	3e 83       	std	Y+6, r19	; 0x06
    1b72:	2d 83       	std	Y+5, r18	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <DIO_u8SetPinValue+0x2c>
    1b7e:	49 c0       	rjmp	.+146    	; 0x1c12 <DIO_u8SetPinValue+0xbe>
    1b80:	2d 81       	ldd	r18, Y+5	; 0x05
    1b82:	3e 81       	ldd	r19, Y+6	; 0x06
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	2c f4       	brge	.+10     	; 0x1b94 <DIO_u8SetPinValue+0x40>
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	71 f0       	breq	.+28     	; 0x1bae <DIO_u8SetPinValue+0x5a>
    1b92:	d5 c0       	rjmp	.+426    	; 0x1d3e <DIO_u8SetPinValue+0x1ea>
    1b94:	2d 81       	ldd	r18, Y+5	; 0x05
    1b96:	3e 81       	ldd	r19, Y+6	; 0x06
    1b98:	22 30       	cpi	r18, 0x02	; 2
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <DIO_u8SetPinValue+0x4c>
    1b9e:	6b c0       	rjmp	.+214    	; 0x1c76 <DIO_u8SetPinValue+0x122>
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <DIO_u8SetPinValue+0x58>
    1baa:	97 c0       	rjmp	.+302    	; 0x1cda <DIO_u8SetPinValue+0x186>
    1bac:	c8 c0       	rjmp	.+400    	; 0x1d3e <DIO_u8SetPinValue+0x1ea>
		{
		case PORT_A:
			if(value==LOW)CLR_BIT(PORTA_REG,pin_no);
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	88 23       	and	r24, r24
    1bb2:	a9 f4       	brne	.+42     	; 0x1bde <DIO_u8SetPinValue+0x8a>
    1bb4:	ab e3       	ldi	r26, 0x3B	; 59
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	eb e3       	ldi	r30, 0x3B	; 59
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8SetPinValue+0x7e>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8SetPinValue+0x7a>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	b2 c0       	rjmp	.+356    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTA_REG,pin_no);
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <DIO_u8SetPinValue+0xb8>
    1be4:	ab e3       	ldi	r26, 0x3B	; 59
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	eb e3       	ldi	r30, 0x3B	; 59
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <DIO_u8SetPinValue+0xae>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <DIO_u8SetPinValue+0xaa>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	9b c0       	rjmp	.+310    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	98 c0       	rjmp	.+304    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_B:
			if(value==LOW)CLR_BIT(PORTB_REG,pin_no);
    1c12:	8c 81       	ldd	r24, Y+4	; 0x04
    1c14:	88 23       	and	r24, r24
    1c16:	a9 f4       	brne	.+42     	; 0x1c42 <DIO_u8SetPinValue+0xee>
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_u8SetPinValue+0xe2>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_u8SetPinValue+0xde>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	80 c0       	rjmp	.+256    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTB_REG,pin_no);
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	a1 f4       	brne	.+40     	; 0x1c70 <DIO_u8SetPinValue+0x11c>
    1c48:	a8 e3       	ldi	r26, 0x38	; 56
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e8 e3       	ldi	r30, 0x38	; 56
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_u8SetPinValue+0x112>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_u8SetPinValue+0x10e>
    1c6a:	84 2b       	or	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	69 c0       	rjmp	.+210    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	66 c0       	rjmp	.+204    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_C:
			if(value==LOW)CLR_BIT(PORTC_REG,pin_no);
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	88 23       	and	r24, r24
    1c7a:	a9 f4       	brne	.+42     	; 0x1ca6 <DIO_u8SetPinValue+0x152>
    1c7c:	a5 e3       	ldi	r26, 0x35	; 53
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e5 e3       	ldi	r30, 0x35	; 53
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <DIO_u8SetPinValue+0x146>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <DIO_u8SetPinValue+0x142>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	4e c0       	rjmp	.+156    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTC_REG,pin_no);
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	a1 f4       	brne	.+40     	; 0x1cd4 <DIO_u8SetPinValue+0x180>
    1cac:	a5 e3       	ldi	r26, 0x35	; 53
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e5 e3       	ldi	r30, 0x35	; 53
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <DIO_u8SetPinValue+0x176>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <DIO_u8SetPinValue+0x172>
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	37 c0       	rjmp	.+110    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	34 c0       	rjmp	.+104    	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_D:
			if(value==LOW)CLR_BIT(PORTD_REG,pin_no);
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	88 23       	and	r24, r24
    1cde:	a9 f4       	brne	.+42     	; 0x1d0a <DIO_u8SetPinValue+0x1b6>
    1ce0:	a2 e3       	ldi	r26, 0x32	; 50
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e2 e3       	ldi	r30, 0x32	; 50
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_u8SetPinValue+0x1aa>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_u8SetPinValue+0x1a6>
    1d02:	80 95       	com	r24
    1d04:	84 23       	and	r24, r20
    1d06:	8c 93       	st	X, r24
    1d08:	1c c0       	rjmp	.+56     	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTD_REG,pin_no);
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	a1 f4       	brne	.+40     	; 0x1d38 <DIO_u8SetPinValue+0x1e4>
    1d10:	a2 e3       	ldi	r26, 0x32	; 50
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e2 e3       	ldi	r30, 0x32	; 50
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_u8SetPinValue+0x1da>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_u8SetPinValue+0x1d6>
    1d32:	84 2b       	or	r24, r20
    1d34:	8c 93       	st	X, r24
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_u8SetPinValue+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d44:	26 96       	adiw	r28, 0x06	; 6
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <DIO_u8GetPinValue>:
uint8_t DIO_u8GetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	27 97       	sbiw	r28, 0x07	; 7
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    1d6c:	6b 83       	std	Y+3, r22	; 0x03
    1d6e:	5d 83       	std	Y+5, r21	; 0x05
    1d70:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1d72:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	88 30       	cpi	r24, 0x08	; 8
    1d78:	08 f0       	brcs	.+2      	; 0x1d7c <DIO_u8GetPinValue+0x26>
    1d7a:	74 c0       	rjmp	.+232    	; 0x1e64 <DIO_u8GetPinValue+0x10e>
	{
		switch(port_id)
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	3f 83       	std	Y+7, r19	; 0x07
    1d84:	2e 83       	std	Y+6, r18	; 0x06
    1d86:	4e 81       	ldd	r20, Y+6	; 0x06
    1d88:	5f 81       	ldd	r21, Y+7	; 0x07
    1d8a:	41 30       	cpi	r20, 0x01	; 1
    1d8c:	51 05       	cpc	r21, r1
    1d8e:	59 f1       	breq	.+86     	; 0x1de6 <DIO_u8GetPinValue+0x90>
    1d90:	8e 81       	ldd	r24, Y+6	; 0x06
    1d92:	9f 81       	ldd	r25, Y+7	; 0x07
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	91 05       	cpc	r25, r1
    1d98:	34 f4       	brge	.+12     	; 0x1da6 <DIO_u8GetPinValue+0x50>
    1d9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d9e:	21 15       	cp	r18, r1
    1da0:	31 05       	cpc	r19, r1
    1da2:	69 f0       	breq	.+26     	; 0x1dbe <DIO_u8GetPinValue+0x68>
    1da4:	5c c0       	rjmp	.+184    	; 0x1e5e <DIO_u8GetPinValue+0x108>
    1da6:	4e 81       	ldd	r20, Y+6	; 0x06
    1da8:	5f 81       	ldd	r21, Y+7	; 0x07
    1daa:	42 30       	cpi	r20, 0x02	; 2
    1dac:	51 05       	cpc	r21, r1
    1dae:	79 f1       	breq	.+94     	; 0x1e0e <DIO_u8GetPinValue+0xb8>
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	9f 81       	ldd	r25, Y+7	; 0x07
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <DIO_u8GetPinValue+0x66>
    1dba:	3d c0       	rjmp	.+122    	; 0x1e36 <DIO_u8GetPinValue+0xe0>
    1dbc:	50 c0       	rjmp	.+160    	; 0x1e5e <DIO_u8GetPinValue+0x108>
		{
		case PORT_A: *value = GET_BIT(PINA_REG,pin_no); break;
    1dbe:	e9 e3       	ldi	r30, 0x39	; 57
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	88 2f       	mov	r24, r24
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a9 01       	movw	r20, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_u8GetPinValue+0x80>
    1dd2:	55 95       	asr	r21
    1dd4:	47 95       	ror	r20
    1dd6:	8a 95       	dec	r24
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_u8GetPinValue+0x7c>
    1dda:	ca 01       	movw	r24, r20
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	ec 81       	ldd	r30, Y+4	; 0x04
    1de0:	fd 81       	ldd	r31, Y+5	; 0x05
    1de2:	80 83       	st	Z, r24
    1de4:	41 c0       	rjmp	.+130    	; 0x1e68 <DIO_u8GetPinValue+0x112>
		case PORT_B: *value = GET_BIT(PINB_REG,pin_no); break;
    1de6:	e6 e3       	ldi	r30, 0x36	; 54
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	88 2f       	mov	r24, r24
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a9 01       	movw	r20, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_u8GetPinValue+0xa8>
    1dfa:	55 95       	asr	r21
    1dfc:	47 95       	ror	r20
    1dfe:	8a 95       	dec	r24
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_u8GetPinValue+0xa4>
    1e02:	ca 01       	movw	r24, r20
    1e04:	81 70       	andi	r24, 0x01	; 1
    1e06:	ec 81       	ldd	r30, Y+4	; 0x04
    1e08:	fd 81       	ldd	r31, Y+5	; 0x05
    1e0a:	80 83       	st	Z, r24
    1e0c:	2d c0       	rjmp	.+90     	; 0x1e68 <DIO_u8GetPinValue+0x112>
		case PORT_C: *value = GET_BIT(PINC_REG,pin_no); break;
    1e0e:	e3 e3       	ldi	r30, 0x33	; 51
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a9 01       	movw	r20, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_u8GetPinValue+0xd0>
    1e22:	55 95       	asr	r21
    1e24:	47 95       	ror	r20
    1e26:	8a 95       	dec	r24
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_u8GetPinValue+0xcc>
    1e2a:	ca 01       	movw	r24, r20
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e30:	fd 81       	ldd	r31, Y+5	; 0x05
    1e32:	80 83       	st	Z, r24
    1e34:	19 c0       	rjmp	.+50     	; 0x1e68 <DIO_u8GetPinValue+0x112>
		case PORT_D: *value = GET_BIT(PIND_REG,pin_no); break;
    1e36:	e0 e3       	ldi	r30, 0x30	; 48
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a9 01       	movw	r20, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_u8GetPinValue+0xf8>
    1e4a:	55 95       	asr	r21
    1e4c:	47 95       	ror	r20
    1e4e:	8a 95       	dec	r24
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_u8GetPinValue+0xf4>
    1e52:	ca 01       	movw	r24, r20
    1e54:	81 70       	andi	r24, 0x01	; 1
    1e56:	ec 81       	ldd	r30, Y+4	; 0x04
    1e58:	fd 81       	ldd	r31, Y+5	; 0x05
    1e5a:	80 83       	st	Z, r24
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <DIO_u8GetPinValue+0x112>
		default : error_status = E_NOK; break;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_u8GetPinValue+0x112>
		}
	}else error_status = E_NOK;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6a:	27 96       	adiw	r28, 0x07	; 7
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <DIO_u8IsPinOutPut>:
uint8_t DIO_u8IsPinOutPut(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	27 97       	sbiw	r28, 0x07	; 7
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	6b 83       	std	Y+3, r22	; 0x03
    1e94:	5d 83       	std	Y+5, r21	; 0x05
    1e96:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1e98:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	88 30       	cpi	r24, 0x08	; 8
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <DIO_u8IsPinOutPut+0x26>
    1ea0:	74 c0       	rjmp	.+232    	; 0x1f8a <DIO_u8IsPinOutPut+0x10e>
		{
			switch(port_id)
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3f 83       	std	Y+7, r19	; 0x07
    1eaa:	2e 83       	std	Y+6, r18	; 0x06
    1eac:	4e 81       	ldd	r20, Y+6	; 0x06
    1eae:	5f 81       	ldd	r21, Y+7	; 0x07
    1eb0:	41 30       	cpi	r20, 0x01	; 1
    1eb2:	51 05       	cpc	r21, r1
    1eb4:	59 f1       	breq	.+86     	; 0x1f0c <DIO_u8IsPinOutPut+0x90>
    1eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	34 f4       	brge	.+12     	; 0x1ecc <DIO_u8IsPinOutPut+0x50>
    1ec0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec4:	21 15       	cp	r18, r1
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	69 f0       	breq	.+26     	; 0x1ee4 <DIO_u8IsPinOutPut+0x68>
    1eca:	5c c0       	rjmp	.+184    	; 0x1f84 <DIO_u8IsPinOutPut+0x108>
    1ecc:	4e 81       	ldd	r20, Y+6	; 0x06
    1ece:	5f 81       	ldd	r21, Y+7	; 0x07
    1ed0:	42 30       	cpi	r20, 0x02	; 2
    1ed2:	51 05       	cpc	r21, r1
    1ed4:	79 f1       	breq	.+94     	; 0x1f34 <DIO_u8IsPinOutPut+0xb8>
    1ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	91 05       	cpc	r25, r1
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <DIO_u8IsPinOutPut+0x66>
    1ee0:	3d c0       	rjmp	.+122    	; 0x1f5c <DIO_u8IsPinOutPut+0xe0>
    1ee2:	50 c0       	rjmp	.+160    	; 0x1f84 <DIO_u8IsPinOutPut+0x108>
			{
			case PORT_A: *value = GET_BIT(DDRA_REG,pin_no); break;
    1ee4:	ea e3       	ldi	r30, 0x3A	; 58
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_u8IsPinOutPut+0x80>
    1ef8:	55 95       	asr	r21
    1efa:	47 95       	ror	r20
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_u8IsPinOutPut+0x7c>
    1f00:	ca 01       	movw	r24, r20
    1f02:	81 70       	andi	r24, 0x01	; 1
    1f04:	ec 81       	ldd	r30, Y+4	; 0x04
    1f06:	fd 81       	ldd	r31, Y+5	; 0x05
    1f08:	80 83       	st	Z, r24
    1f0a:	41 c0       	rjmp	.+130    	; 0x1f8e <DIO_u8IsPinOutPut+0x112>
			case PORT_B: *value = GET_BIT(DDRB_REG,pin_no); break;
    1f0c:	e7 e3       	ldi	r30, 0x37	; 55
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	88 2f       	mov	r24, r24
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a9 01       	movw	r20, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_u8IsPinOutPut+0xa8>
    1f20:	55 95       	asr	r21
    1f22:	47 95       	ror	r20
    1f24:	8a 95       	dec	r24
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_u8IsPinOutPut+0xa4>
    1f28:	ca 01       	movw	r24, r20
    1f2a:	81 70       	andi	r24, 0x01	; 1
    1f2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f30:	80 83       	st	Z, r24
    1f32:	2d c0       	rjmp	.+90     	; 0x1f8e <DIO_u8IsPinOutPut+0x112>
			case PORT_C: *value = GET_BIT(DDRC_REG,pin_no); break;
    1f34:	e4 e3       	ldi	r30, 0x34	; 52
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a9 01       	movw	r20, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <DIO_u8IsPinOutPut+0xd0>
    1f48:	55 95       	asr	r21
    1f4a:	47 95       	ror	r20
    1f4c:	8a 95       	dec	r24
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <DIO_u8IsPinOutPut+0xcc>
    1f50:	ca 01       	movw	r24, r20
    1f52:	81 70       	andi	r24, 0x01	; 1
    1f54:	ec 81       	ldd	r30, Y+4	; 0x04
    1f56:	fd 81       	ldd	r31, Y+5	; 0x05
    1f58:	80 83       	st	Z, r24
    1f5a:	19 c0       	rjmp	.+50     	; 0x1f8e <DIO_u8IsPinOutPut+0x112>
			case PORT_D: *value = GET_BIT(DDRD_REG,pin_no); break;
    1f5c:	e1 e3       	ldi	r30, 0x31	; 49
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a9 01       	movw	r20, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_u8IsPinOutPut+0xf8>
    1f70:	55 95       	asr	r21
    1f72:	47 95       	ror	r20
    1f74:	8a 95       	dec	r24
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <DIO_u8IsPinOutPut+0xf4>
    1f78:	ca 01       	movw	r24, r20
    1f7a:	81 70       	andi	r24, 0x01	; 1
    1f7c:	ec 81       	ldd	r30, Y+4	; 0x04
    1f7e:	fd 81       	ldd	r31, Y+5	; 0x05
    1f80:	80 83       	st	Z, r24
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <DIO_u8IsPinOutPut+0x112>
			default : error_status = E_NOK; break;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_u8IsPinOutPut+0x112>
			}
		}else error_status = E_NOK;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f90:	27 96       	adiw	r28, 0x07	; 7
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <DIO_u8SetPullUpMode>:
uint8_t DIO_u8SetPullUpMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	2e 97       	sbiw	r28, 0x0e	; 14
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	6b 83       	std	Y+3, r22	; 0x03
    1fba:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 30       	cpi	r24, 0x08	; 8
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <DIO_u8SetPullUpMode+0x24>
    1fc4:	db c0       	rjmp	.+438    	; 0x217c <DIO_u8SetPullUpMode+0x1da>
	{
	switch(port_id)
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	3e 87       	std	Y+14, r19	; 0x0e
    1fce:	2d 87       	std	Y+13, r18	; 0x0d
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <DIO_u8SetPullUpMode+0x3a>
    1fda:	44 c0       	rjmp	.+136    	; 0x2064 <DIO_u8SetPullUpMode+0xc2>
    1fdc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fde:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fe0:	22 30       	cpi	r18, 0x02	; 2
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <DIO_u8SetPullUpMode+0x4e>
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	71 f0       	breq	.+28     	; 0x200a <DIO_u8SetPullUpMode+0x68>
    1fee:	c3 c0       	rjmp	.+390    	; 0x2176 <DIO_u8SetPullUpMode+0x1d4>
    1ff0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ff2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <DIO_u8SetPullUpMode+0x5a>
    1ffa:	62 c0       	rjmp	.+196    	; 0x20c0 <DIO_u8SetPullUpMode+0x11e>
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	91 05       	cpc	r25, r1
    2004:	09 f4       	brne	.+2      	; 0x2008 <DIO_u8SetPullUpMode+0x66>
    2006:	89 c0       	rjmp	.+274    	; 0x211a <DIO_u8SetPullUpMode+0x178>
    2008:	b6 c0       	rjmp	.+364    	; 0x2176 <DIO_u8SetPullUpMode+0x1d4>
	{
	case PORT_A: mode==Enabled?SET_BIT(PORTA_REG,pin_no):CLR_BIT(PORTA_REG,pin_no); break;
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	a9 f4       	brne	.+42     	; 0x203a <DIO_u8SetPullUpMode+0x98>
    2010:	ab e3       	ldi	r26, 0x3B	; 59
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	eb e3       	ldi	r30, 0x3B	; 59
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_u8SetPullUpMode+0x8c>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_u8SetPullUpMode+0x88>
    2032:	84 2b       	or	r24, r20
    2034:	8c 93       	st	X, r24
    2036:	9c 91       	ld	r25, X
    2038:	a3 c0       	rjmp	.+326    	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
    203a:	ab e3       	ldi	r26, 0x3B	; 59
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	eb e3       	ldi	r30, 0x3B	; 59
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <DIO_u8SetPullUpMode+0xb4>
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	2a 95       	dec	r18
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <DIO_u8SetPullUpMode+0xb0>
    205a:	80 95       	com	r24
    205c:	84 23       	and	r24, r20
    205e:	8c 93       	st	X, r24
    2060:	2c 91       	ld	r18, X
    2062:	8e c0       	rjmp	.+284    	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
	case PORT_B: mode==Enabled?SET_BIT(PORTB_REG,pin_no):CLR_BIT(PORTB_REG,pin_no); break;
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	a9 f4       	brne	.+42     	; 0x2094 <DIO_u8SetPullUpMode+0xf2>
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	48 2f       	mov	r20, r24
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <DIO_u8SetPullUpMode+0xe6>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <DIO_u8SetPullUpMode+0xe2>
    208c:	84 2b       	or	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	3c 91       	ld	r19, X
    2092:	76 c0       	rjmp	.+236    	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
    2094:	a8 e3       	ldi	r26, 0x38	; 56
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e8 e3       	ldi	r30, 0x38	; 56
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 2e       	mov	r0, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_u8SetPullUpMode+0x110>
    20ae:	88 0f       	add	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_u8SetPullUpMode+0x10c>
    20b6:	80 95       	com	r24
    20b8:	84 23       	and	r24, r20
    20ba:	8c 93       	st	X, r24
    20bc:	8c 91       	ld	r24, X
    20be:	60 c0       	rjmp	.+192    	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
	case PORT_C: mode==Enabled?SET_BIT(PORTC_REG,pin_no):CLR_BIT(PORTC_REG,pin_no); break;
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	81 30       	cpi	r24, 0x01	; 1
    20c4:	a9 f4       	brne	.+42     	; 0x20f0 <DIO_u8SetPullUpMode+0x14e>
    20c6:	a5 e3       	ldi	r26, 0x35	; 53
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e5 e3       	ldi	r30, 0x35	; 53
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	48 2f       	mov	r20, r24
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 2e       	mov	r0, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_u8SetPullUpMode+0x142>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_u8SetPullUpMode+0x13e>
    20e8:	84 2b       	or	r24, r20
    20ea:	8c 93       	st	X, r24
    20ec:	9c 91       	ld	r25, X
    20ee:	48 c0       	rjmp	.+144    	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
    20f0:	a5 e3       	ldi	r26, 0x35	; 53
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e5 e3       	ldi	r30, 0x35	; 53
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_u8SetPullUpMode+0x16a>
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	2a 95       	dec	r18
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_u8SetPullUpMode+0x166>
    2110:	80 95       	com	r24
    2112:	84 23       	and	r24, r20
    2114:	8c 93       	st	X, r24
    2116:	2c 91       	ld	r18, X
    2118:	33 c0       	rjmp	.+102    	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
	case PORT_D: mode==Enabled?SET_BIT(PORTD_REG,pin_no):CLR_BIT(PORTD_REG,pin_no); break;
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	a9 f4       	brne	.+42     	; 0x214a <DIO_u8SetPullUpMode+0x1a8>
    2120:	a2 e3       	ldi	r26, 0x32	; 50
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e2 e3       	ldi	r30, 0x32	; 50
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	48 2f       	mov	r20, r24
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	02 2e       	mov	r0, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <DIO_u8SetPullUpMode+0x19c>
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	0a 94       	dec	r0
    2140:	e2 f7       	brpl	.-8      	; 0x213a <DIO_u8SetPullUpMode+0x198>
    2142:	84 2b       	or	r24, r20
    2144:	8c 93       	st	X, r24
    2146:	3c 91       	ld	r19, X
    2148:	1b c0       	rjmp	.+54     	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
    214a:	a2 e3       	ldi	r26, 0x32	; 50
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e2 e3       	ldi	r30, 0x32	; 50
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <DIO_u8SetPullUpMode+0x1c6>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <DIO_u8SetPullUpMode+0x1c2>
    216c:	80 95       	com	r24
    216e:	84 23       	and	r24, r20
    2170:	8c 93       	st	X, r24
    2172:	8c 91       	ld	r24, X
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
	default : error_status = E_NOK; break;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <DIO_u8SetPullUpMode+0x1de>
	}
	}else error_status=E_NOK;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
}
    2182:	2e 96       	adiw	r28, 0x0e	; 14
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <DIO_u8SetPortMode>:

uint8_t DIO_u8SetPortMode(uint8_t port_id,uint8_t mode)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <DIO_u8SetPortMode+0x6>
    219a:	00 d0       	rcall	.+0      	; 0x219c <DIO_u8SetPortMode+0x8>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	8a 83       	std	Y+2, r24	; 0x02
    21a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    21a6:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	3d 83       	std	Y+5, r19	; 0x05
    21b0:	2c 83       	std	Y+4, r18	; 0x04
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	d1 f0       	breq	.+52     	; 0x21f0 <DIO_u8SetPortMode+0x5c>
    21bc:	2c 81       	ldd	r18, Y+4	; 0x04
    21be:	3d 81       	ldd	r19, Y+5	; 0x05
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <DIO_u8SetPortMode+0x3c>
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <DIO_u8SetPortMode+0x52>
    21ce:	1f c0       	rjmp	.+62     	; 0x220e <DIO_u8SetPortMode+0x7a>
    21d0:	2c 81       	ldd	r18, Y+4	; 0x04
    21d2:	3d 81       	ldd	r19, Y+5	; 0x05
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	81 f0       	breq	.+32     	; 0x21fa <DIO_u8SetPortMode+0x66>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	91 05       	cpc	r25, r1
    21e2:	81 f0       	breq	.+32     	; 0x2204 <DIO_u8SetPortMode+0x70>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <DIO_u8SetPortMode+0x7a>
	{
	case PORT_A: DDRA_REG = mode; break;
    21e6:	ea e3       	ldi	r30, 0x3A	; 58
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	80 83       	st	Z, r24
    21ee:	11 c0       	rjmp	.+34     	; 0x2212 <DIO_u8SetPortMode+0x7e>
	case PORT_B: DDRB_REG = mode; break;
    21f0:	e7 e3       	ldi	r30, 0x37	; 55
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	80 83       	st	Z, r24
    21f8:	0c c0       	rjmp	.+24     	; 0x2212 <DIO_u8SetPortMode+0x7e>
	case PORT_C: DDRC_REG = mode; break;
    21fa:	e4 e3       	ldi	r30, 0x34	; 52
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	80 83       	st	Z, r24
    2202:	07 c0       	rjmp	.+14     	; 0x2212 <DIO_u8SetPortMode+0x7e>
	case PORT_D: DDRD_REG = mode; break;
    2204:	e1 e3       	ldi	r30, 0x31	; 49
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	80 83       	st	Z, r24
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <DIO_u8SetPortMode+0x7e>
	default : error_status = E_NOK; break;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <DIO_u8SetPortValue>:
uint8_t DIO_u8SetPortValue(uint8_t port_id,uint8_t value)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	00 d0       	rcall	.+0      	; 0x222a <DIO_u8SetPortValue+0x6>
    222a:	00 d0       	rcall	.+0      	; 0x222c <DIO_u8SetPortValue+0x8>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	8a 83       	std	Y+2, r24	; 0x02
    2234:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    2236:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	3d 83       	std	Y+5, r19	; 0x05
    2240:	2c 83       	std	Y+4, r18	; 0x04
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	9d 81       	ldd	r25, Y+5	; 0x05
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	91 05       	cpc	r25, r1
    224a:	d1 f0       	breq	.+52     	; 0x2280 <DIO_u8SetPortValue+0x5c>
    224c:	2c 81       	ldd	r18, Y+4	; 0x04
    224e:	3d 81       	ldd	r19, Y+5	; 0x05
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 05       	cpc	r19, r1
    2254:	2c f4       	brge	.+10     	; 0x2260 <DIO_u8SetPortValue+0x3c>
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	9d 81       	ldd	r25, Y+5	; 0x05
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	61 f0       	breq	.+24     	; 0x2276 <DIO_u8SetPortValue+0x52>
    225e:	1f c0       	rjmp	.+62     	; 0x229e <DIO_u8SetPortValue+0x7a>
    2260:	2c 81       	ldd	r18, Y+4	; 0x04
    2262:	3d 81       	ldd	r19, Y+5	; 0x05
    2264:	22 30       	cpi	r18, 0x02	; 2
    2266:	31 05       	cpc	r19, r1
    2268:	81 f0       	breq	.+32     	; 0x228a <DIO_u8SetPortValue+0x66>
    226a:	8c 81       	ldd	r24, Y+4	; 0x04
    226c:	9d 81       	ldd	r25, Y+5	; 0x05
    226e:	83 30       	cpi	r24, 0x03	; 3
    2270:	91 05       	cpc	r25, r1
    2272:	81 f0       	breq	.+32     	; 0x2294 <DIO_u8SetPortValue+0x70>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A: PORTA_REG = value; break;
    2276:	eb e3       	ldi	r30, 0x3B	; 59
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	80 83       	st	Z, r24
    227e:	11 c0       	rjmp	.+34     	; 0x22a2 <DIO_u8SetPortValue+0x7e>
		case PORT_B: PORTB_REG = value; break;
    2280:	e8 e3       	ldi	r30, 0x38	; 56
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	80 83       	st	Z, r24
    2288:	0c c0       	rjmp	.+24     	; 0x22a2 <DIO_u8SetPortValue+0x7e>
		case PORT_C: PORTC_REG = value; break;
    228a:	e5 e3       	ldi	r30, 0x35	; 53
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	80 83       	st	Z, r24
    2292:	07 c0       	rjmp	.+14     	; 0x22a2 <DIO_u8SetPortValue+0x7e>
		case PORT_D: PORTD_REG = value; break;
    2294:	e2 e3       	ldi	r30, 0x32	; 50
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	80 83       	st	Z, r24
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <DIO_u8SetPortValue+0x7e>
		default : error_status = E_NOK; break;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <DIO_u8GetPortValue>:
uint8_t DIO_u8GetPortValue(uint8_t port_id,uint8_t * value)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <DIO_u8GetPortValue+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <DIO_u8GetPortValue+0x8>
    22bc:	00 d0       	rcall	.+0      	; 0x22be <DIO_u8GetPortValue+0xa>
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	8a 83       	std	Y+2, r24	; 0x02
    22c4:	7c 83       	std	Y+4, r23	; 0x04
    22c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    22c8:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	3e 83       	std	Y+6, r19	; 0x06
    22d2:	2d 83       	std	Y+5, r18	; 0x05
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	91 05       	cpc	r25, r1
    22dc:	e1 f0       	breq	.+56     	; 0x2316 <DIO_u8GetPortValue+0x62>
    22de:	2d 81       	ldd	r18, Y+5	; 0x05
    22e0:	3e 81       	ldd	r19, Y+6	; 0x06
    22e2:	22 30       	cpi	r18, 0x02	; 2
    22e4:	31 05       	cpc	r19, r1
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <DIO_u8GetPortValue+0x3e>
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	61 f0       	breq	.+24     	; 0x2308 <DIO_u8GetPortValue+0x54>
    22f0:	27 c0       	rjmp	.+78     	; 0x2340 <DIO_u8GetPortValue+0x8c>
    22f2:	2d 81       	ldd	r18, Y+5	; 0x05
    22f4:	3e 81       	ldd	r19, Y+6	; 0x06
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	31 05       	cpc	r19, r1
    22fa:	a1 f0       	breq	.+40     	; 0x2324 <DIO_u8GetPortValue+0x70>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	83 30       	cpi	r24, 0x03	; 3
    2302:	91 05       	cpc	r25, r1
    2304:	b1 f0       	breq	.+44     	; 0x2332 <DIO_u8GetPortValue+0x7e>
    2306:	1c c0       	rjmp	.+56     	; 0x2340 <DIO_u8GetPortValue+0x8c>
		{
		case PORT_A: *value = PINA_REG; break;
    2308:	e9 e3       	ldi	r30, 0x39	; 57
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	eb 81       	ldd	r30, Y+3	; 0x03
    2310:	fc 81       	ldd	r31, Y+4	; 0x04
    2312:	80 83       	st	Z, r24
    2314:	17 c0       	rjmp	.+46     	; 0x2344 <DIO_u8GetPortValue+0x90>
		case PORT_B: *value = PINB_REG; break;
    2316:	e6 e3       	ldi	r30, 0x36	; 54
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	eb 81       	ldd	r30, Y+3	; 0x03
    231e:	fc 81       	ldd	r31, Y+4	; 0x04
    2320:	80 83       	st	Z, r24
    2322:	10 c0       	rjmp	.+32     	; 0x2344 <DIO_u8GetPortValue+0x90>
		case PORT_C: *value = PINC_REG; break;
    2324:	e3 e3       	ldi	r30, 0x33	; 51
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	80 83       	st	Z, r24
    2330:	09 c0       	rjmp	.+18     	; 0x2344 <DIO_u8GetPortValue+0x90>
		case PORT_D: *value = PIND_REG; break;
    2332:	e0 e3       	ldi	r30, 0x30	; 48
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	eb 81       	ldd	r30, Y+3	; 0x03
    233a:	fc 81       	ldd	r31, Y+4	; 0x04
    233c:	80 83       	st	Z, r24
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <DIO_u8GetPortValue+0x90>
		default : error_status = E_NOK; break;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
}
    2346:	26 96       	adiw	r28, 0x06	; 6
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <DIO_u8SetPortPullUpMode>:

uint8_t DIO_u8SetPortPullUpMode(uint8_t port_id,uint8_t mode)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <DIO_u8SetPortPullUpMode+0x6>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <DIO_u8SetPortPullUpMode+0x8>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    236a:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	3d 83       	std	Y+5, r19	; 0x05
    2374:	2c 83       	std	Y+4, r18	; 0x04
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	91 05       	cpc	r25, r1
    237e:	d1 f0       	breq	.+52     	; 0x23b4 <DIO_u8SetPortPullUpMode+0x5c>
    2380:	2c 81       	ldd	r18, Y+4	; 0x04
    2382:	3d 81       	ldd	r19, Y+5	; 0x05
    2384:	22 30       	cpi	r18, 0x02	; 2
    2386:	31 05       	cpc	r19, r1
    2388:	2c f4       	brge	.+10     	; 0x2394 <DIO_u8SetPortPullUpMode+0x3c>
    238a:	8c 81       	ldd	r24, Y+4	; 0x04
    238c:	9d 81       	ldd	r25, Y+5	; 0x05
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	61 f0       	breq	.+24     	; 0x23aa <DIO_u8SetPortPullUpMode+0x52>
    2392:	1f c0       	rjmp	.+62     	; 0x23d2 <DIO_u8SetPortPullUpMode+0x7a>
    2394:	2c 81       	ldd	r18, Y+4	; 0x04
    2396:	3d 81       	ldd	r19, Y+5	; 0x05
    2398:	22 30       	cpi	r18, 0x02	; 2
    239a:	31 05       	cpc	r19, r1
    239c:	81 f0       	breq	.+32     	; 0x23be <DIO_u8SetPortPullUpMode+0x66>
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	83 30       	cpi	r24, 0x03	; 3
    23a4:	91 05       	cpc	r25, r1
    23a6:	81 f0       	breq	.+32     	; 0x23c8 <DIO_u8SetPortPullUpMode+0x70>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <DIO_u8SetPortPullUpMode+0x7a>
	{
	case PORT_A: PORTA_REG=mode; break;
    23aa:	eb e3       	ldi	r30, 0x3B	; 59
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	80 83       	st	Z, r24
    23b2:	11 c0       	rjmp	.+34     	; 0x23d6 <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_B: PORTB_REG=mode; break;
    23b4:	e8 e3       	ldi	r30, 0x38	; 56
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	80 83       	st	Z, r24
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_C: PORTC_REG=mode; break;
    23be:	e5 e3       	ldi	r30, 0x35	; 53
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	80 83       	st	Z, r24
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_D: PORTD_REG=mode; break;
    23c8:	e2 e3       	ldi	r30, 0x32	; 50
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	80 83       	st	Z, r24
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <DIO_u8SetPortPullUpMode+0x7e>
	default : error_status = E_NOK; break;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <ADC_vidAdcInit>:
uint16_* ADC_READ=NULL;

static void ADC_vidSetMultiPlexer(uint8_t adc_pin);

void ADC_vidAdcInit(uint8_t voltage_reference)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <ADC_vidAdcInit+0x6>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,7);
    23f6:	a6 e2       	ldi	r26, 0x26	; 38
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e6 e2       	ldi	r30, 0x26	; 38
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 68       	ori	r24, 0x80	; 128
    2402:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,2);
    2404:	a6 e2       	ldi	r26, 0x26	; 38
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e6 e2       	ldi	r30, 0x26	; 38
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8b 7f       	andi	r24, 0xFB	; 251
    2410:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    2412:	a6 e2       	ldi	r26, 0x26	; 38
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e6 e2       	ldi	r30, 0x26	; 38
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	82 60       	ori	r24, 0x02	; 2
    241e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    2420:	a6 e2       	ldi	r26, 0x26	; 38
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e6 e2       	ldi	r30, 0x26	; 38
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	8e 7f       	andi	r24, 0xFE	; 254
    242c:	8c 93       	st	X, r24
	switch(voltage_reference)
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	3b 83       	std	Y+3, r19	; 0x03
    2436:	2a 83       	std	Y+2, r18	; 0x02
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	c9 f0       	breq	.+50     	; 0x2474 <ADC_vidAdcInit+0x8c>
    2442:	2a 81       	ldd	r18, Y+2	; 0x02
    2444:	3b 81       	ldd	r19, Y+3	; 0x03
    2446:	22 30       	cpi	r18, 0x02	; 2
    2448:	31 05       	cpc	r19, r1
    244a:	29 f0       	breq	.+10     	; 0x2456 <ADC_vidAdcInit+0x6e>
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	9b 81       	ldd	r25, Y+3	; 0x03
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	f9 f0       	breq	.+62     	; 0x2492 <ADC_vidAdcInit+0xaa>
    2454:	2c c0       	rjmp	.+88     	; 0x24ae <ADC_vidAdcInit+0xc6>
	{
	case AREF_VOLTAGE:
		CLR_BIT(ADMUX,7);
    2456:	a7 e2       	ldi	r26, 0x27	; 39
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e7 e2       	ldi	r30, 0x27	; 39
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8f 77       	andi	r24, 0x7F	; 127
    2462:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,6);
    2464:	a7 e2       	ldi	r26, 0x27	; 39
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e7 e2       	ldi	r30, 0x27	; 39
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8f 7b       	andi	r24, 0xBF	; 191
    2470:	8c 93       	st	X, r24
    2472:	1d c0       	rjmp	.+58     	; 0x24ae <ADC_vidAdcInit+0xc6>
		break;
	case VCC:
		CLR_BIT(ADMUX,7);
    2474:	a7 e2       	ldi	r26, 0x27	; 39
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e7 e2       	ldi	r30, 0x27	; 39
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	8f 77       	andi	r24, 0x7F	; 127
    2480:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2482:	a7 e2       	ldi	r26, 0x27	; 39
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e2       	ldi	r30, 0x27	; 39
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	8c 93       	st	X, r24
    2490:	0e c0       	rjmp	.+28     	; 0x24ae <ADC_vidAdcInit+0xc6>
		break;
	case INTERNAL_2_56_:
		SET_BIT(ADMUX,7);
    2492:	a7 e2       	ldi	r26, 0x27	; 39
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e7 e2       	ldi	r30, 0x27	; 39
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	80 68       	ori	r24, 0x80	; 128
    249e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    24a0:	a7 e2       	ldi	r26, 0x27	; 39
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e7 e2       	ldi	r30, 0x27	; 39
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	80 64       	ori	r24, 0x40	; 64
    24ac:	8c 93       	st	X, r24
	ADC_vidAdcPinInit(ADC_AUTO_TRIGGER_PIN);
	ADC_vidSetMultiPlexer(ADC_AUTO_TRIGGER_PIN);
	ADC_VIDSetAutoTriggerMode(INT_0);
	SET_BIT(ADCSRA,5);
#elif ADC_TRIGGERING_MODE == 1
	CLR_BIT(ADCSRA,5);
    24ae:	a6 e2       	ldi	r26, 0x26	; 38
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e6 e2       	ldi	r30, 0x26	; 38
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	8f 7d       	andi	r24, 0xDF	; 223
    24ba:	8c 93       	st	X, r24
#endif

#if ADC_READING_TECHNIQUE == 0
	SET_BIT(ADCSRA,3);
    24bc:	a6 e2       	ldi	r26, 0x26	; 38
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e6 e2       	ldi	r30, 0x26	; 38
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	88 60       	ori	r24, 0x08	; 8
    24c8:	8c 93       	st	X, r24
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
#endif

#if ADC_READING_NO_OF_BITS == 0
	SET_BIT(ADMUX,5);
#elif ADC_READING_NO_OF_BITS == 1
	CLR_BIT(ADMUX,5);
    24d0:	a7 e2       	ldi	r26, 0x27	; 39
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e7 e2       	ldi	r30, 0x27	; 39
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	8f 7d       	andi	r24, 0xDF	; 223
    24dc:	8c 93       	st	X, r24
#endif

}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <ADC_vidAdcPinInit>:

void ADC_vidAdcPinInit(uint8_t adc_pin)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <ADC_vidAdcPinInit+0x6>
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	8a 83       	std	Y+2, r24	; 0x02
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	88 30       	cpi	r24, 0x08	; 8
    24fa:	c0 f4       	brcc	.+48     	; 0x252c <ADC_vidAdcPinInit+0x42>
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	fc 01       	movw	r30, r24
    2508:	eb 50       	subi	r30, 0x0B	; 11
    250a:	fc 4f       	sbci	r31, 0xFC	; 252
    250c:	20 81       	ld	r18, Z
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	fc 01       	movw	r30, r24
    251a:	ea 50       	subi	r30, 0x0A	; 10
    251c:	fc 4f       	sbci	r31, 0xFC	; 252
    251e:	90 81       	ld	r25, Z
    2520:	82 2f       	mov	r24, r18
    2522:	69 2f       	mov	r22, r25
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
    252a:	22 c0       	rjmp	.+68     	; 0x2570 <ADC_vidAdcPinInit+0x86>
	else if(adc_pin==8)
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	88 30       	cpi	r24, 0x08	; 8
    2530:	f9 f4       	brne	.+62     	; 0x2570 <ADC_vidAdcPinInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2532:	19 82       	std	Y+1, r1	; 0x01
    2534:	1a c0       	rjmp	.+52     	; 0x256a <ADC_vidAdcPinInit+0x80>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	fc 01       	movw	r30, r24
    2542:	eb 50       	subi	r30, 0x0B	; 11
    2544:	fc 4f       	sbci	r31, 0xFC	; 252
    2546:	20 81       	ld	r18, Z
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	fc 01       	movw	r30, r24
    2554:	ea 50       	subi	r30, 0x0A	; 10
    2556:	fc 4f       	sbci	r31, 0xFC	; 252
    2558:	90 81       	ld	r25, Z
    255a:	82 2f       	mov	r24, r18
    255c:	69 2f       	mov	r22, r25
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
void ADC_vidAdcPinInit(uint8_t adc_pin)
{
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
	else if(adc_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	88 30       	cpi	r24, 0x08	; 8
    256e:	18 f3       	brcs	.-58     	; 0x2536 <ADC_vidAdcPinInit+0x4c>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
		}
	}
}
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <ADC_vidAdcGetRead>:

void ADC_vidAdcGetRead(uint8_t adc_pin)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	0f 92       	push	r0
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetMultiPlexer(adc_pin);
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	0e 94 65 13 	call	0x26ca	; 0x26ca <ADC_vidSetMultiPlexer>
	SET_BIT(ADCSRA,6);
    258c:	a6 e2       	ldi	r26, 0x26	; 38
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e6 e2       	ldi	r30, 0x26	; 38
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 64       	ori	r24, 0x40	; 64
    2598:	8c 93       	st	X, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <ADC_vidGetAutoTriggerRead>:

void ADC_vidGetAutoTriggerRead()
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <ADC_VIDSetAutoTriggerMode>:

void ADC_VIDSetAutoTriggerMode(uint8_t mode)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	0f 92       	push	r0
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	88 2f       	mov	r24, r24
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	91 05       	cpc	r25, r1
    25c6:	a9 f4       	brne	.+42     	; 0x25f2 <ADC_VIDSetAutoTriggerMode+0x42>
	{
	case INT_0:
		CLR_BIT(SFIOR,5);
    25c8:	a0 e5       	ldi	r26, 0x50	; 80
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e0 e5       	ldi	r30, 0x50	; 80
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	8f 7d       	andi	r24, 0xDF	; 223
    25d4:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    25d6:	a0 e5       	ldi	r26, 0x50	; 80
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e0 e5       	ldi	r30, 0x50	; 80
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	80 64       	ori	r24, 0x40	; 64
    25e2:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,7);
    25e4:	a0 e5       	ldi	r26, 0x50	; 80
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e0 e5       	ldi	r30, 0x50	; 80
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	8f 77       	andi	r24, 0x7F	; 127
    25f0:	8c 93       	st	X, r24
		break;
	}
}
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <ADC_vidSetReadingVariable>:

void ADC_vidSetReadingVariable(uint16_* adc_read)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <ADC_vidSetReadingVariable+0x6>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
	ADC_READ=adc_read;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	90 93 1f 04 	sts	0x041F, r25
    2610:	80 93 1e 04 	sts	0x041E, r24
}
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <ADC_vidSetCallBack>:

void ADC_vidSetCallBack(void (*func)(void))
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <ADC_vidSetCallBack+0x6>
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
	vector_16=func;
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	90 93 1d 04 	sts	0x041D, r25
    2634:	80 93 1c 04 	sts	0x041C, r24
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2642:	1f 92       	push	r1
    2644:	0f 92       	push	r0
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	0f 92       	push	r0
    264a:	11 24       	eor	r1, r1
    264c:	2f 93       	push	r18
    264e:	3f 93       	push	r19
    2650:	4f 93       	push	r20
    2652:	5f 93       	push	r21
    2654:	6f 93       	push	r22
    2656:	7f 93       	push	r23
    2658:	8f 93       	push	r24
    265a:	9f 93       	push	r25
    265c:	af 93       	push	r26
    265e:	bf 93       	push	r27
    2660:	ef 93       	push	r30
    2662:	ff 93       	push	r31
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
#if ADC_READING_TECHNIQUE == 0
	if(ADC_READ!=NULL)
    266c:	80 91 1e 04 	lds	r24, 0x041E
    2670:	90 91 1f 04 	lds	r25, 0x041F
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	59 f0       	breq	.+22     	; 0x268e <__vector_16+0x4c>
	{
#if ADC_READING_NO_OF_BITS == 1
	*ADC_READ=ADCL16;
    2678:	e0 91 1e 04 	lds	r30, 0x041E
    267c:	f0 91 1f 04 	lds	r31, 0x041F
    2680:	a4 e2       	ldi	r26, 0x24	; 36
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	8d 91       	ld	r24, X+
    2686:	9c 91       	ld	r25, X
    2688:	11 97       	sbiw	r26, 0x01	; 1
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	}
	if(vector_16!=NULL)vector_16();
    268e:	80 91 1c 04 	lds	r24, 0x041C
    2692:	90 91 1d 04 	lds	r25, 0x041D
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	29 f0       	breq	.+10     	; 0x26a4 <__vector_16+0x62>
    269a:	e0 91 1c 04 	lds	r30, 0x041C
    269e:	f0 91 1d 04 	lds	r31, 0x041D
    26a2:	09 95       	icall
#endif
}
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	ff 91       	pop	r31
    26aa:	ef 91       	pop	r30
    26ac:	bf 91       	pop	r27
    26ae:	af 91       	pop	r26
    26b0:	9f 91       	pop	r25
    26b2:	8f 91       	pop	r24
    26b4:	7f 91       	pop	r23
    26b6:	6f 91       	pop	r22
    26b8:	5f 91       	pop	r21
    26ba:	4f 91       	pop	r20
    26bc:	3f 91       	pop	r19
    26be:	2f 91       	pop	r18
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	0f 90       	pop	r0
    26c6:	1f 90       	pop	r1
    26c8:	18 95       	reti

000026ca <ADC_vidSetMultiPlexer>:

static void ADC_vidSetMultiPlexer(uint8_t adc_pin)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <ADC_vidSetMultiPlexer+0x6>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	89 83       	std	Y+1, r24	; 0x01
	switch(adc_pin)
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	3b 83       	std	Y+3, r19	; 0x03
    26e0:	2a 83       	std	Y+2, r18	; 0x02
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	83 30       	cpi	r24, 0x03	; 3
    26e8:	91 05       	cpc	r25, r1
    26ea:	09 f4       	brne	.+2      	; 0x26ee <ADC_vidSetMultiPlexer+0x24>
    26ec:	9b c0       	rjmp	.+310    	; 0x2824 <ADC_vidSetMultiPlexer+0x15a>
    26ee:	2a 81       	ldd	r18, Y+2	; 0x02
    26f0:	3b 81       	ldd	r19, Y+3	; 0x03
    26f2:	24 30       	cpi	r18, 0x04	; 4
    26f4:	31 05       	cpc	r19, r1
    26f6:	8c f4       	brge	.+34     	; 0x271a <ADC_vidSetMultiPlexer+0x50>
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	91 05       	cpc	r25, r1
    2700:	09 f4       	brne	.+2      	; 0x2704 <ADC_vidSetMultiPlexer+0x3a>
    2702:	48 c0       	rjmp	.+144    	; 0x2794 <ADC_vidSetMultiPlexer+0xca>
    2704:	2a 81       	ldd	r18, Y+2	; 0x02
    2706:	3b 81       	ldd	r19, Y+3	; 0x03
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	31 05       	cpc	r19, r1
    270c:	0c f0       	brlt	.+2      	; 0x2710 <ADC_vidSetMultiPlexer+0x46>
    270e:	66 c0       	rjmp	.+204    	; 0x27dc <ADC_vidSetMultiPlexer+0x112>
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	9b 81       	ldd	r25, Y+3	; 0x03
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	d1 f0       	breq	.+52     	; 0x274c <ADC_vidSetMultiPlexer+0x82>
    2718:	38 c1       	rjmp	.+624    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
    271a:	2a 81       	ldd	r18, Y+2	; 0x02
    271c:	3b 81       	ldd	r19, Y+3	; 0x03
    271e:	25 30       	cpi	r18, 0x05	; 5
    2720:	31 05       	cpc	r19, r1
    2722:	09 f4       	brne	.+2      	; 0x2726 <ADC_vidSetMultiPlexer+0x5c>
    2724:	c7 c0       	rjmp	.+398    	; 0x28b4 <ADC_vidSetMultiPlexer+0x1ea>
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	85 30       	cpi	r24, 0x05	; 5
    272c:	91 05       	cpc	r25, r1
    272e:	0c f4       	brge	.+2      	; 0x2732 <ADC_vidSetMultiPlexer+0x68>
    2730:	9d c0       	rjmp	.+314    	; 0x286c <ADC_vidSetMultiPlexer+0x1a2>
    2732:	2a 81       	ldd	r18, Y+2	; 0x02
    2734:	3b 81       	ldd	r19, Y+3	; 0x03
    2736:	26 30       	cpi	r18, 0x06	; 6
    2738:	31 05       	cpc	r19, r1
    273a:	09 f4       	brne	.+2      	; 0x273e <ADC_vidSetMultiPlexer+0x74>
    273c:	df c0       	rjmp	.+446    	; 0x28fc <ADC_vidSetMultiPlexer+0x232>
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	9b 81       	ldd	r25, Y+3	; 0x03
    2742:	87 30       	cpi	r24, 0x07	; 7
    2744:	91 05       	cpc	r25, r1
    2746:	09 f4       	brne	.+2      	; 0x274a <ADC_vidSetMultiPlexer+0x80>
    2748:	fd c0       	rjmp	.+506    	; 0x2944 <ADC_vidSetMultiPlexer+0x27a>
    274a:	1f c1       	rjmp	.+574    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
	{
	case ADC_0:
			CLR_BIT(ADMUX,4);
    274c:	a7 e2       	ldi	r26, 0x27	; 39
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e7 e2       	ldi	r30, 0x27	; 39
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8f 7e       	andi	r24, 0xEF	; 239
    2758:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    275a:	a7 e2       	ldi	r26, 0x27	; 39
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e7 e2       	ldi	r30, 0x27	; 39
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	87 7f       	andi	r24, 0xF7	; 247
    2766:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2768:	a7 e2       	ldi	r26, 0x27	; 39
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e7 e2       	ldi	r30, 0x27	; 39
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8b 7f       	andi	r24, 0xFB	; 251
    2774:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2776:	a7 e2       	ldi	r26, 0x27	; 39
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	e7 e2       	ldi	r30, 0x27	; 39
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8d 7f       	andi	r24, 0xFD	; 253
    2782:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    2784:	a7 e2       	ldi	r26, 0x27	; 39
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e7 e2       	ldi	r30, 0x27	; 39
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8e 7f       	andi	r24, 0xFE	; 254
    2790:	8c 93       	st	X, r24
    2792:	fb c0       	rjmp	.+502    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_1:
			CLR_BIT(ADMUX,4);
    2794:	a7 e2       	ldi	r26, 0x27	; 39
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e7 e2       	ldi	r30, 0x27	; 39
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	8f 7e       	andi	r24, 0xEF	; 239
    27a0:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    27a2:	a7 e2       	ldi	r26, 0x27	; 39
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e7 e2       	ldi	r30, 0x27	; 39
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	87 7f       	andi	r24, 0xF7	; 247
    27ae:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    27b0:	a7 e2       	ldi	r26, 0x27	; 39
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e7 e2       	ldi	r30, 0x27	; 39
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8b 7f       	andi	r24, 0xFB	; 251
    27bc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    27be:	a7 e2       	ldi	r26, 0x27	; 39
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e7 e2       	ldi	r30, 0x27	; 39
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8d 7f       	andi	r24, 0xFD	; 253
    27ca:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    27cc:	a7 e2       	ldi	r26, 0x27	; 39
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e7 e2       	ldi	r30, 0x27	; 39
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	81 60       	ori	r24, 0x01	; 1
    27d8:	8c 93       	st	X, r24
    27da:	d7 c0       	rjmp	.+430    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_2:
			CLR_BIT(ADMUX,4);
    27dc:	a7 e2       	ldi	r26, 0x27	; 39
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e7 e2       	ldi	r30, 0x27	; 39
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	8f 7e       	andi	r24, 0xEF	; 239
    27e8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    27ea:	a7 e2       	ldi	r26, 0x27	; 39
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e7 e2       	ldi	r30, 0x27	; 39
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	87 7f       	andi	r24, 0xF7	; 247
    27f6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    27f8:	a7 e2       	ldi	r26, 0x27	; 39
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e7 e2       	ldi	r30, 0x27	; 39
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8b 7f       	andi	r24, 0xFB	; 251
    2804:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2806:	a7 e2       	ldi	r26, 0x27	; 39
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e7 e2       	ldi	r30, 0x27	; 39
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	82 60       	ori	r24, 0x02	; 2
    2812:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    2814:	a7 e2       	ldi	r26, 0x27	; 39
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	e7 e2       	ldi	r30, 0x27	; 39
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	8e 7f       	andi	r24, 0xFE	; 254
    2820:	8c 93       	st	X, r24
    2822:	b3 c0       	rjmp	.+358    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_3:
			CLR_BIT(ADMUX,4);
    2824:	a7 e2       	ldi	r26, 0x27	; 39
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e7 e2       	ldi	r30, 0x27	; 39
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8f 7e       	andi	r24, 0xEF	; 239
    2830:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2832:	a7 e2       	ldi	r26, 0x27	; 39
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e7 e2       	ldi	r30, 0x27	; 39
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	87 7f       	andi	r24, 0xF7	; 247
    283e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2840:	a7 e2       	ldi	r26, 0x27	; 39
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e7 e2       	ldi	r30, 0x27	; 39
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	8b 7f       	andi	r24, 0xFB	; 251
    284c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    284e:	a7 e2       	ldi	r26, 0x27	; 39
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e7 e2       	ldi	r30, 0x27	; 39
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	82 60       	ori	r24, 0x02	; 2
    285a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    285c:	a7 e2       	ldi	r26, 0x27	; 39
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	e7 e2       	ldi	r30, 0x27	; 39
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	81 60       	ori	r24, 0x01	; 1
    2868:	8c 93       	st	X, r24
    286a:	8f c0       	rjmp	.+286    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_4:
			CLR_BIT(ADMUX,4);
    286c:	a7 e2       	ldi	r26, 0x27	; 39
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e7 e2       	ldi	r30, 0x27	; 39
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	8f 7e       	andi	r24, 0xEF	; 239
    2878:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    287a:	a7 e2       	ldi	r26, 0x27	; 39
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e7 e2       	ldi	r30, 0x27	; 39
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	87 7f       	andi	r24, 0xF7	; 247
    2886:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2888:	a7 e2       	ldi	r26, 0x27	; 39
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e7 e2       	ldi	r30, 0x27	; 39
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	84 60       	ori	r24, 0x04	; 4
    2894:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2896:	a7 e2       	ldi	r26, 0x27	; 39
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e7 e2       	ldi	r30, 0x27	; 39
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8d 7f       	andi	r24, 0xFD	; 253
    28a2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    28a4:	a7 e2       	ldi	r26, 0x27	; 39
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e7 e2       	ldi	r30, 0x27	; 39
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	8e 7f       	andi	r24, 0xFE	; 254
    28b0:	8c 93       	st	X, r24
    28b2:	6b c0       	rjmp	.+214    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_5:
			CLR_BIT(ADMUX,4);
    28b4:	a7 e2       	ldi	r26, 0x27	; 39
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e7 e2       	ldi	r30, 0x27	; 39
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	8f 7e       	andi	r24, 0xEF	; 239
    28c0:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    28c2:	a7 e2       	ldi	r26, 0x27	; 39
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e7 e2       	ldi	r30, 0x27	; 39
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	87 7f       	andi	r24, 0xF7	; 247
    28ce:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    28d0:	a7 e2       	ldi	r26, 0x27	; 39
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e7 e2       	ldi	r30, 0x27	; 39
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	84 60       	ori	r24, 0x04	; 4
    28dc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    28de:	a7 e2       	ldi	r26, 0x27	; 39
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e7 e2       	ldi	r30, 0x27	; 39
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	8d 7f       	andi	r24, 0xFD	; 253
    28ea:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    28ec:	a7 e2       	ldi	r26, 0x27	; 39
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e7 e2       	ldi	r30, 0x27	; 39
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	81 60       	ori	r24, 0x01	; 1
    28f8:	8c 93       	st	X, r24
    28fa:	47 c0       	rjmp	.+142    	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_6:
			CLR_BIT(ADMUX,4);
    28fc:	a7 e2       	ldi	r26, 0x27	; 39
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e7 e2       	ldi	r30, 0x27	; 39
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	8f 7e       	andi	r24, 0xEF	; 239
    2908:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    290a:	a7 e2       	ldi	r26, 0x27	; 39
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e7 e2       	ldi	r30, 0x27	; 39
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	87 7f       	andi	r24, 0xF7	; 247
    2916:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2918:	a7 e2       	ldi	r26, 0x27	; 39
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e7 e2       	ldi	r30, 0x27	; 39
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	84 60       	ori	r24, 0x04	; 4
    2924:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2926:	a7 e2       	ldi	r26, 0x27	; 39
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e7 e2       	ldi	r30, 0x27	; 39
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	82 60       	ori	r24, 0x02	; 2
    2932:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    2934:	a7 e2       	ldi	r26, 0x27	; 39
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e7 e2       	ldi	r30, 0x27	; 39
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	8e 7f       	andi	r24, 0xFE	; 254
    2940:	8c 93       	st	X, r24
    2942:	23 c0       	rjmp	.+70     	; 0x298a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_7:
			CLR_BIT(ADMUX,4);
    2944:	a7 e2       	ldi	r26, 0x27	; 39
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e7 e2       	ldi	r30, 0x27	; 39
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	8f 7e       	andi	r24, 0xEF	; 239
    2950:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2952:	a7 e2       	ldi	r26, 0x27	; 39
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e7 e2       	ldi	r30, 0x27	; 39
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	87 7f       	andi	r24, 0xF7	; 247
    295e:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2960:	a7 e2       	ldi	r26, 0x27	; 39
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e7 e2       	ldi	r30, 0x27	; 39
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	84 60       	ori	r24, 0x04	; 4
    296c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    296e:	a7 e2       	ldi	r26, 0x27	; 39
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e7 e2       	ldi	r30, 0x27	; 39
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	82 60       	ori	r24, 0x02	; 2
    297a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    297c:	a7 e2       	ldi	r26, 0x27	; 39
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e7 e2       	ldi	r30, 0x27	; 39
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	80 81       	ld	r24, Z
    2986:	81 60       	ori	r24, 0x01	; 1
    2988:	8c 93       	st	X, r24
			break;
	}
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <UART_Init>:
#include "../../libraries/std_types.h"
#include "../../libraries/bit_math.h"
#include "UART.h"
#include "UART_REGISTERS.h"

void UART_Init(uint16_ baud) {
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	00 d0       	rcall	.+0      	; 0x299c <UART_Init+0x6>
    299c:	00 d0       	rcall	.+0      	; 0x299e <UART_Init+0x8>
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	9c 83       	std	Y+4, r25	; 0x04
    29a4:	8b 83       	std	Y+3, r24	; 0x03
    uint16_ ubrr = (uint16_)(((uint32_t)8000000/16)/baud-1);
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	9c 01       	movw	r18, r24
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	80 e2       	ldi	r24, 0x20	; 32
    29b2:	91 ea       	ldi	r25, 0xA1	; 161
    29b4:	a7 e0       	ldi	r26, 0x07	; 7
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    29c0:	da 01       	movw	r26, r20
    29c2:	c9 01       	movw	r24, r18
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01

    UBRRH = (uint8_t)(ubrr>>8);
    29ca:	e0 e4       	ldi	r30, 0x40	; 64
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	89 2f       	mov	r24, r25
    29d4:	99 27       	eor	r25, r25
    29d6:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr;
    29d8:	e9 e2       	ldi	r30, 0x29	; 41
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	89 81       	ldd	r24, Y+1	; 0x01
    29de:	80 83       	st	Z, r24
    SET_BIT(UCSRB,4);
    29e0:	aa e2       	ldi	r26, 0x2A	; 42
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	ea e2       	ldi	r30, 0x2A	; 42
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	80 61       	ori	r24, 0x10	; 16
    29ec:	8c 93       	st	X, r24
    SET_BIT(UCSRB,3);
    29ee:	aa e2       	ldi	r26, 0x2A	; 42
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	ea e2       	ldi	r30, 0x2A	; 42
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	88 60       	ori	r24, 0x08	; 8
    29fa:	8c 93       	st	X, r24
    UCSRC = (1<<7) | (3<<1);
    29fc:	e0 e4       	ldi	r30, 0x40	; 64
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	86 e8       	ldi	r24, 0x86	; 134
    2a02:	80 83       	st	Z, r24
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <UART_Transmit>:

void UART_Transmit(uint8_t data) {
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	0f 92       	push	r0
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    while (!GET_BIT(UCSRA,5));
    2a1e:	eb e2       	ldi	r30, 0x2B	; 43
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	82 95       	swap	r24
    2a26:	86 95       	lsr	r24
    2a28:	87 70       	andi	r24, 0x07	; 7
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	81 70       	andi	r24, 0x01	; 1
    2a30:	90 70       	andi	r25, 0x00	; 0
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	a1 f3       	breq	.-24     	; 0x2a1e <UART_Transmit+0xc>
    UDR = data;
    2a36:	ec e2       	ldi	r30, 0x2C	; 44
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	80 83       	st	Z, r24
}
    2a3e:	0f 90       	pop	r0
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <UART_Receive>:

uint8_t UART_Receive(void) {
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA,7));
    2a4e:	eb e2       	ldi	r30, 0x2B	; 43
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	88 23       	and	r24, r24
    2a56:	dc f7       	brge	.-10     	; 0x2a4e <UART_Receive+0x8>
    return UDR;
    2a58:	ec e2       	ldi	r30, 0x2C	; 44
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <TIMER1_voidInit>:

void (* TIMER1_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt1;

void TIMER1_voidInit(void){
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
	TCCR1B |= TIMER1_PRESCALER;

#elif TIMER1_MODE == CTC_T_MODE

	CLR_BIT(TCCR1A , WGM10);
    2a6c:	af e4       	ldi	r26, 0x4F	; 79
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	ef e4       	ldi	r30, 0x4F	; 79
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	8e 7f       	andi	r24, 0xFE	; 254
    2a78:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , WGM11);
    2a7a:	af e4       	ldi	r26, 0x4F	; 79
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	ef e4       	ldi	r30, 0x4F	; 79
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	8d 7f       	andi	r24, 0xFD	; 253
    2a86:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    2a88:	ae e4       	ldi	r26, 0x4E	; 78
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ee e4       	ldi	r30, 0x4E	; 78
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	88 60       	ori	r24, 0x08	; 8
    2a94:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , WGM13);
    2a96:	ae e4       	ldi	r26, 0x4E	; 78
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	ee e4       	ldi	r30, 0x4E	; 78
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 7e       	andi	r24, 0xEF	; 239
    2aa2:	8c 93       	st	X, r24

	//Enabling timer flag;
	SET_BIT(TIMSK , OCIE1A);
    2aa4:	a9 e5       	ldi	r26, 0x59	; 89
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e9 e5       	ldi	r30, 0x59	; 89
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 61       	ori	r24, 0x10	; 16
    2ab0:	8c 93       	st	X, r24

	//selecting prescaler;
	TCCR1B &= 0b11111000;
    2ab2:	ae e4       	ldi	r26, 0x4E	; 78
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ee e4       	ldi	r30, 0x4E	; 78
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	88 7f       	andi	r24, 0xF8	; 248
    2abe:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER;
    2ac0:	ae e4       	ldi	r26, 0x4E	; 78
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ee e4       	ldi	r30, 0x4E	; 78
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	85 60       	ori	r24, 0x05	; 5
    2acc:	8c 93       	st	X, r24
#else

#error "wrong timer mode"

#endif
}
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <TIMER1_voidDisable>:

void TIMER1_voidDisable(void){
    2ad4:	df 93       	push	r29
    2ad6:	cf 93       	push	r28
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62

	TCCR1B &= 0b11111000;
    2adc:	ae e4       	ldi	r26, 0x4E	; 78
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ee e4       	ldi	r30, 0x4E	; 78
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	88 7f       	andi	r24, 0xF8	; 248
    2ae8:	8c 93       	st	X, r24

}
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <TIMER1_uint8SetPrescaler>:

uint8_t TIMER1_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <TIMER1_uint8SetPrescaler+0x6>
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    2afc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	88 30       	cpi	r24, 0x08	; 8
    2b02:	80 f4       	brcc	.+32     	; 0x2b24 <TIMER1_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR1B &= 0b11111000;
    2b04:	ae e4       	ldi	r26, 0x4E	; 78
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	ee e4       	ldi	r30, 0x4E	; 78
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 7f       	andi	r24, 0xF8	; 248
    2b10:	8c 93       	st	X, r24
		TCCR1B |= Copy_uint8Prescaler;
    2b12:	ae e4       	ldi	r26, 0x4E	; 78
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ee e4       	ldi	r30, 0x4E	; 78
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	90 81       	ld	r25, Z
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	89 2b       	or	r24, r25
    2b20:	8c 93       	st	X, r24
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <TIMER1_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    2b28:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <TIMER1_voidSetCounterRegister>:
void TIMER1_voidSetCounterRegister(uint8_t Copy_uint8Counter1Start){
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	0f 92       	push	r0
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	89 83       	std	Y+1, r24	; 0x01

	TCNT1L = Copy_uint8Counter1Start;
    2b40:	ec e4       	ldi	r30, 0x4C	; 76
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	80 83       	st	Z, r24
}
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <TIMER1_voidSetCTCTime>:

void TIMER1_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	0f 92       	push	r0
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	89 83       	std	Y+1, r24	; 0x01

	 OCR1AL = Copy_uint8CompareTime;
    2b5c:	ea e4       	ldi	r30, 0x4A	; 74
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	80 83       	st	Z, r24

}
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <TIMER1_voidGetNumCountCTC>:

void TIMER1_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <TIMER1_voidGetNumCountCTC+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <TIMER1_voidGetNumCountCTC+0x8>
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <TIMER1_voidGetNumCountCTC+0xa>
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	9a 83       	std	Y+2, r25	; 0x02
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	7c 83       	std	Y+4, r23	; 0x04
    2b80:	6b 83       	std	Y+3, r22	; 0x03
    2b82:	5e 83       	std	Y+6, r21	; 0x06
    2b84:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER1_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8a:	cc 01       	movw	r24, r24
    2b8c:	a0 e0       	ldi	r26, 0x00	; 0
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	28 ee       	ldi	r18, 0xE8	; 232
    2b92:	33 e0       	ldi	r19, 0x03	; 3
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__mulsi3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	3d e7       	ldi	r19, 0x7D	; 125
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	bc 01       	movw	r22, r24
    2bae:	cd 01       	movw	r24, r26
    2bb0:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    2bb4:	da 01       	movw	r26, r20
    2bb6:	c9 01       	movw	r24, r18
    2bb8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bba:	fc 81       	ldd	r31, Y+4	; 0x04
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    2bc0:	ed 81       	ldd	r30, Y+5	; 0x05
    2bc2:	fe 81       	ldd	r31, Y+6	; 0x06
    2bc4:	8a ef       	ldi	r24, 0xFA	; 250
    2bc6:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    2bc8:	26 96       	adiw	r28, 0x06	; 6
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <TIMER1_voidSetCallBackNormal>:


void TIMER1_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal1)(void)){
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <TIMER1_voidSetCallBackNormal+0x6>
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	9a 83       	std	Y+2, r25	; 0x02
    2be6:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal1;
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	90 93 21 04 	sts	0x0421, r25
    2bf0:	80 93 20 04 	sts	0x0420, r24

}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC1)(void)){
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <TIMER1_voidSetCallBackCTC+0x6>
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	9a 83       	std	Y+2, r25	; 0x02
    2c0a:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC1;
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	90 93 23 04 	sts	0x0423, r25
    2c14:	80 93 22 04 	sts	0x0422, r24

}
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    2c22:	1f 92       	push	r1
    2c24:	0f 92       	push	r0
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	0f 92       	push	r0
    2c2a:	11 24       	eor	r1, r1
    2c2c:	2f 93       	push	r18
    2c2e:	3f 93       	push	r19
    2c30:	4f 93       	push	r20
    2c32:	5f 93       	push	r21
    2c34:	6f 93       	push	r22
    2c36:	7f 93       	push	r23
    2c38:	8f 93       	push	r24
    2c3a:	9f 93       	push	r25
    2c3c:	af 93       	push	r26
    2c3e:	bf 93       	push	r27
    2c40:	ef 93       	push	r30
    2c42:	ff 93       	push	r31
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62

	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    2c4c:	80 91 24 04 	lds	r24, 0x0424
    2c50:	90 91 25 04 	lds	r25, 0x0425
    2c54:	01 96       	adiw	r24, 0x01	; 1
    2c56:	90 93 25 04 	sts	0x0425, r25
    2c5a:	80 93 24 04 	sts	0x0424, r24
	if(cnt == compare_cnt1){
    2c5e:	20 91 24 04 	lds	r18, 0x0424
    2c62:	30 91 25 04 	lds	r19, 0x0425
    2c66:	80 91 59 04 	lds	r24, 0x0459
    2c6a:	90 91 5a 04 	lds	r25, 0x045A
    2c6e:	28 17       	cp	r18, r24
    2c70:	39 07       	cpc	r19, r25
    2c72:	79 f4       	brne	.+30     	; 0x2c92 <__vector_7+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER1_voidpSetCallBackCTC != NULL){
    2c74:	80 91 22 04 	lds	r24, 0x0422
    2c78:	90 91 23 04 	lds	r25, 0x0423
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	49 f0       	breq	.+18     	; 0x2c92 <__vector_7+0x70>

			TIMER1_voidpSetCallBackCTC();
    2c80:	e0 91 22 04 	lds	r30, 0x0422
    2c84:	f0 91 23 04 	lds	r31, 0x0423
    2c88:	09 95       	icall
			cnt = 0;
    2c8a:	10 92 25 04 	sts	0x0425, r1
    2c8e:	10 92 24 04 	sts	0x0424, r1
		}

	}


}
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	ff 91       	pop	r31
    2c98:	ef 91       	pop	r30
    2c9a:	bf 91       	pop	r27
    2c9c:	af 91       	pop	r26
    2c9e:	9f 91       	pop	r25
    2ca0:	8f 91       	pop	r24
    2ca2:	7f 91       	pop	r23
    2ca4:	6f 91       	pop	r22
    2ca6:	5f 91       	pop	r21
    2ca8:	4f 91       	pop	r20
    2caa:	3f 91       	pop	r19
    2cac:	2f 91       	pop	r18
    2cae:	0f 90       	pop	r0
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	0f 90       	pop	r0
    2cb4:	1f 90       	pop	r1
    2cb6:	18 95       	reti

00002cb8 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    2cb8:	1f 92       	push	r1
    2cba:	0f 92       	push	r0
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	0f 92       	push	r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	2f 93       	push	r18
    2cc4:	3f 93       	push	r19
    2cc6:	4f 93       	push	r20
    2cc8:	5f 93       	push	r21
    2cca:	6f 93       	push	r22
    2ccc:	7f 93       	push	r23
    2cce:	8f 93       	push	r24
    2cd0:	9f 93       	push	r25
    2cd2:	af 93       	push	r26
    2cd4:	bf 93       	push	r27
    2cd6:	ef 93       	push	r30
    2cd8:	ff 93       	push	r31
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_voidpSetCallBackNormal != NULL){
    2ce2:	80 91 20 04 	lds	r24, 0x0420
    2ce6:	90 91 21 04 	lds	r25, 0x0421
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	29 f0       	breq	.+10     	; 0x2cf8 <__vector_9+0x40>

		TIMER1_voidpSetCallBackNormal();
    2cee:	e0 91 20 04 	lds	r30, 0x0420
    2cf2:	f0 91 21 04 	lds	r31, 0x0421
    2cf6:	09 95       	icall

		//do nothing;

	}

}
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	ff 91       	pop	r31
    2cfe:	ef 91       	pop	r30
    2d00:	bf 91       	pop	r27
    2d02:	af 91       	pop	r26
    2d04:	9f 91       	pop	r25
    2d06:	8f 91       	pop	r24
    2d08:	7f 91       	pop	r23
    2d0a:	6f 91       	pop	r22
    2d0c:	5f 91       	pop	r21
    2d0e:	4f 91       	pop	r20
    2d10:	3f 91       	pop	r19
    2d12:	2f 91       	pop	r18
    2d14:	0f 90       	pop	r0
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	0f 90       	pop	r0
    2d1a:	1f 90       	pop	r1
    2d1c:	18 95       	reti

00002d1e <TMR0_Init>:

// Function prototypes
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds);

void TMR0_Init(void)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
	// Set mode based on configuration
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
	TCCR0_REG &= ~(1 << TCCR0_WGM01);  // Normal mode
	#elif TMR0_MODE == TMR0_MODE_CTC
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
    2d26:	a3 e5       	ldi	r26, 0x53	; 83
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e3 e5       	ldi	r30, 0x53	; 83
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	8f 7b       	andi	r24, 0xBF	; 191
    2d32:	8c 93       	st	X, r24
	TCCR0_REG |= (1 << TCCR0_WGM01);   // CTC mode
    2d34:	a3 e5       	ldi	r26, 0x53	; 83
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e3 e5       	ldi	r30, 0x53	; 83
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 60       	ori	r24, 0x08	; 8
    2d40:	8c 93       	st	X, r24

	// Enable Timer interrupt based on the mode
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TIMSK_REG |= (1 << TIMSK_TOIE0);   // Enable Overflow Interrupt
	#elif TMR0_MODE == TMR0_MODE_CTC
	TIMSK_REG |= (1 << TIMSK_OCIE0);   // Enable Compare Match Interrupt
    2d42:	a9 e5       	ldi	r26, 0x59	; 89
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e9 e5       	ldi	r30, 0x59	; 89
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	82 60       	ori	r24, 0x02	; 2
    2d4e:	8c 93       	st	X, r24
	#endif
	// Enable global interrupts
	SREG |= (1 << 7);
    2d50:	af e5       	ldi	r26, 0x5F	; 95
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	ef e5       	ldi	r30, 0x5F	; 95
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 68       	ori	r24, 0x80	; 128
    2d5c:	8c 93       	st	X, r24
}
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <TMR0_Start>:

void TMR0_Start(uint16_ milliseconds)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <TMR0_Start+0x6>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <TMR0_Start+0x8>
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	9c 83       	std	Y+4, r25	; 0x04
    2d72:	8b 83       	std	Y+3, r24	; 0x03
	uint16_ ticks = TMR0_CalculateTicks(milliseconds);
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	0e 94 41 17 	call	0x2e82	; 0x2e82 <TMR0_CalculateTicks>
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01

	// Set compare value for CTC mode
	if (TMR0_MODE == TMR0_MODE_CTC)
	{
		OCR0_REG = ticks;
    2d80:	ec e5       	ldi	r30, 0x5C	; 92
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	80 83       	st	Z, r24
	}

	// Reset the match counter
	TMR0_CurrentMatches = 0;
    2d88:	10 92 2b 04 	sts	0x042B, r1
    2d8c:	10 92 2a 04 	sts	0x042A, r1
		break;
		case TMR0_PRESCALER_8:
		TCCR0_REG |= (1 << TCCR0_CS01);
		break;
		case TMR0_PRESCALER_64:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS01);
    2d90:	a3 e5       	ldi	r26, 0x53	; 83
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e3 e5       	ldi	r30, 0x53	; 83
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	83 60       	ori	r24, 0x03	; 3
    2d9c:	8c 93       	st	X, r24
		break;
		case TMR0_PRESCALER_1024:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS02);
		break;
	}
}
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <TMR0_Stop>:

void TMR0_Stop(void)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
	// Stop the timer by clearing the clock source bits
	TCCR0_REG &= ~((1 << TCCR0_CS00) | (1 << TCCR0_CS01) | (1 << TCCR0_CS02));
    2db4:	a3 e5       	ldi	r26, 0x53	; 83
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e3 e5       	ldi	r30, 0x53	; 83
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	88 7f       	andi	r24, 0xF8	; 248
    2dc0:	8c 93       	st	X, r24
}
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <TMR0_SetCallback>:

void TMR0_SetCallback(void (*callbackFunc)(void))
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <TMR0_SetCallback+0x6>
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
	TMR0_Callback = callbackFunc;
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	90 93 27 04 	sts	0x0427, r25
    2dde:	80 93 26 04 	sts	0x0426, r24
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <__vector_10>:

// Interrupt Service Routine for Timer0 Compare Match
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2dec:	1f 92       	push	r1
    2dee:	0f 92       	push	r0
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	0f 92       	push	r0
    2df4:	11 24       	eor	r1, r1
    2df6:	2f 93       	push	r18
    2df8:	3f 93       	push	r19
    2dfa:	4f 93       	push	r20
    2dfc:	5f 93       	push	r21
    2dfe:	6f 93       	push	r22
    2e00:	7f 93       	push	r23
    2e02:	8f 93       	push	r24
    2e04:	9f 93       	push	r25
    2e06:	af 93       	push	r26
    2e08:	bf 93       	push	r27
    2e0a:	ef 93       	push	r30
    2e0c:	ff 93       	push	r31
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62

	TMR0_CurrentMatches++;
    2e16:	80 91 2a 04 	lds	r24, 0x042A
    2e1a:	90 91 2b 04 	lds	r25, 0x042B
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	90 93 2b 04 	sts	0x042B, r25
    2e24:	80 93 2a 04 	sts	0x042A, r24
	
	// Check if we've reached the required number of matches
	if (TMR0_CurrentMatches >= TMR0_RequiredMatches)
    2e28:	20 91 2a 04 	lds	r18, 0x042A
    2e2c:	30 91 2b 04 	lds	r19, 0x042B
    2e30:	80 91 28 04 	lds	r24, 0x0428
    2e34:	90 91 29 04 	lds	r25, 0x0429
    2e38:	28 17       	cp	r18, r24
    2e3a:	39 07       	cpc	r19, r25
    2e3c:	78 f0       	brcs	.+30     	; 0x2e5c <__vector_10+0x70>
	{
		if (TMR0_Callback != 0)
    2e3e:	80 91 26 04 	lds	r24, 0x0426
    2e42:	90 91 27 04 	lds	r25, 0x0427
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	29 f0       	breq	.+10     	; 0x2e54 <__vector_10+0x68>
		{
			TMR0_Callback();
    2e4a:	e0 91 26 04 	lds	r30, 0x0426
    2e4e:	f0 91 27 04 	lds	r31, 0x0427
    2e52:	09 95       	icall
		}
		TMR0_CurrentMatches = 0;  // Reset matches for the next cycle
    2e54:	10 92 2b 04 	sts	0x042B, r1
    2e58:	10 92 2a 04 	sts	0x042A, r1
	}
}
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	ff 91       	pop	r31
    2e62:	ef 91       	pop	r30
    2e64:	bf 91       	pop	r27
    2e66:	af 91       	pop	r26
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	7f 91       	pop	r23
    2e6e:	6f 91       	pop	r22
    2e70:	5f 91       	pop	r21
    2e72:	4f 91       	pop	r20
    2e74:	3f 91       	pop	r19
    2e76:	2f 91       	pop	r18
    2e78:	0f 90       	pop	r0
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	0f 90       	pop	r0
    2e7e:	1f 90       	pop	r1
    2e80:	18 95       	reti

00002e82 <TMR0_CalculateTicks>:

// Function to calculate ticks based on the desired time in milliseconds and the configured prescaler
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds)
{
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	2a 97       	sbiw	r28, 0x0a	; 10
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	9a 87       	std	Y+10, r25	; 0x0a
    2ea0:	89 87       	std	Y+9, r24	; 0x09
	uint32_t prescaler_value = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	a0 e0       	ldi	r26, 0x00	; 0
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	af 83       	std	Y+7, r26	; 0x07
    2eb0:	b8 87       	std	Y+8, r27	; 0x08
		break;
		case TMR0_PRESCALER_8:
		prescaler_value = 8;
		break;
		case TMR0_PRESCALER_64:
		prescaler_value = 64;
    2eb2:	80 e4       	ldi	r24, 0x40	; 64
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	a0 e0       	ldi	r26, 0x00	; 0
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	9e 83       	std	Y+6, r25	; 0x06
    2ebe:	af 83       	std	Y+7, r26	; 0x07
    2ec0:	b8 87       	std	Y+8, r27	; 0x08
		prescaler_value = 1024;
		break;
	}

	// Calculate ticks based on prescaler and the desired time in milliseconds
	uint32_t ticks = ((8000000 / (prescaler_value * 1000)) * milliseconds);
    2ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec6:	af 81       	ldd	r26, Y+7	; 0x07
    2ec8:	b8 85       	ldd	r27, Y+8	; 0x08
    2eca:	28 ee       	ldi	r18, 0xE8	; 232
    2ecc:	33 e0       	ldi	r19, 0x03	; 3
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__mulsi3>
    2eda:	9b 01       	movw	r18, r22
    2edc:	ac 01       	movw	r20, r24
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	92 e1       	ldi	r25, 0x12	; 18
    2ee2:	aa e7       	ldi	r26, 0x7A	; 122
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    2eee:	da 01       	movw	r26, r20
    2ef0:	c9 01       	movw	r24, r18
    2ef2:	7c 01       	movw	r14, r24
    2ef4:	8d 01       	movw	r16, r26
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	9c 01       	movw	r18, r24
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	c8 01       	movw	r24, r16
    2f02:	b7 01       	movw	r22, r14
    2f04:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__mulsi3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	ab 83       	std	Y+3, r26	; 0x03
    2f12:	bc 83       	std	Y+4, r27	; 0x04

	// If the number of ticks exceeds 255 (the max value for an 8-bit timer), calculate how many compare matches are required
	if (ticks > 255)
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	ab 81       	ldd	r26, Y+3	; 0x03
    2f1a:	bc 81       	ldd	r27, Y+4	; 0x04
    2f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f1e:	91 05       	cpc	r25, r1
    2f20:	a1 05       	cpc	r26, r1
    2f22:	b1 05       	cpc	r27, r1
    2f24:	e1 f0       	breq	.+56     	; 0x2f5e <TMR0_CalculateTicks+0xdc>
    2f26:	d8 f0       	brcs	.+54     	; 0x2f5e <TMR0_CalculateTicks+0xdc>
	{
		TMR0_RequiredMatches = ticks / 255;
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f30:	2f ef       	ldi	r18, 0xFF	; 255
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    2f40:	da 01       	movw	r26, r20
    2f42:	c9 01       	movw	r24, r18
    2f44:	90 93 29 04 	sts	0x0429, r25
    2f48:	80 93 28 04 	sts	0x0428, r24
		ticks = 255;  // Set the compare value to the maximum for the first match
    2f4c:	8f ef       	ldi	r24, 0xFF	; 255
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	9a 83       	std	Y+2, r25	; 0x02
    2f58:	ab 83       	std	Y+3, r26	; 0x03
    2f5a:	bc 83       	std	Y+4, r27	; 0x04
    2f5c:	06 c0       	rjmp	.+12     	; 0x2f6a <TMR0_CalculateTicks+0xe8>
	}
	else
	{
		TMR0_RequiredMatches = 1;  // Only one match is needed
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	90 93 29 04 	sts	0x0429, r25
    2f66:	80 93 28 04 	sts	0x0428, r24
	}

	return (uint16_)ticks;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f6e:	2a 96       	adiw	r28, 0x0a	; 10
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	ff 90       	pop	r15
    2f84:	ef 90       	pop	r14
    2f86:	08 95       	ret

00002f88 <TILT_vidInit>:
TILT_SENSOR_PIN tilt_pins[NO_OF_SENSORS] ={TILT_1_PIN,TILT_2_PIN,TILT_3_PIN,TILT_4_PIN,
										TILT_5_PIN,TILT_6_PIN,TILT_7_PIN,TILT_8_PIN};


void TILT_vidInit(uint8_t tilt_pin)
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <TILT_vidInit+0x6>
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	8a 83       	std	Y+2, r24	; 0x02
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
    2f94:	8a 81       	ldd	r24, Y+2	; 0x02
    2f96:	88 30       	cpi	r24, 0x08	; 8
    2f98:	c0 f4       	brcc	.+48     	; 0x2fca <TILT_vidInit+0x42>
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	eb 5f       	subi	r30, 0xFB	; 251
    2fa8:	fb 4f       	sbci	r31, 0xFB	; 251
    2faa:	20 81       	ld	r18, Z
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	88 0f       	add	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	ea 5f       	subi	r30, 0xFA	; 250
    2fba:	fb 4f       	sbci	r31, 0xFB	; 251
    2fbc:	90 81       	ld	r25, Z
    2fbe:	82 2f       	mov	r24, r18
    2fc0:	69 2f       	mov	r22, r25
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
    2fc8:	22 c0       	rjmp	.+68     	; 0x300e <TILT_vidInit+0x86>
	else if(tilt_pin==8)
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	88 30       	cpi	r24, 0x08	; 8
    2fce:	f9 f4       	brne	.+62     	; 0x300e <TILT_vidInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2fd0:	19 82       	std	Y+1, r1	; 0x01
    2fd2:	1a c0       	rjmp	.+52     	; 0x3008 <TILT_vidInit+0x80>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	88 2f       	mov	r24, r24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	fc 01       	movw	r30, r24
    2fe0:	eb 5f       	subi	r30, 0xFB	; 251
    2fe2:	fb 4f       	sbci	r31, 0xFB	; 251
    2fe4:	20 81       	ld	r18, Z
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	ea 5f       	subi	r30, 0xFA	; 250
    2ff4:	fb 4f       	sbci	r31, 0xFB	; 251
    2ff6:	90 81       	ld	r25, Z
    2ff8:	82 2f       	mov	r24, r18
    2ffa:	69 2f       	mov	r22, r25
    2ffc:	40 e0       	ldi	r20, 0x00	; 0
    2ffe:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
void TILT_vidInit(uint8_t tilt_pin)
{
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
	else if(tilt_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	88 30       	cpi	r24, 0x08	; 8
    300c:	18 f3       	brcs	.-58     	; 0x2fd4 <TILT_vidInit+0x4c>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
		}
	}
}
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	cf 91       	pop	r28
    3014:	df 91       	pop	r29
    3016:	08 95       	ret

00003018 <TILT_vidGetTiltRead>:

void TILT_vidGetTiltRead(uint8_t * tilt_read, uint8_t tilt_pin)
{
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	00 d0       	rcall	.+0      	; 0x301e <TILT_vidGetTiltRead+0x6>
    301e:	0f 92       	push	r0
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,tilt_read);
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	fc 01       	movw	r30, r24
    3036:	eb 5f       	subi	r30, 0xFB	; 251
    3038:	fb 4f       	sbci	r31, 0xFB	; 251
    303a:	40 81       	ld	r20, Z
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	88 2f       	mov	r24, r24
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	fc 01       	movw	r30, r24
    3048:	ea 5f       	subi	r30, 0xFA	; 250
    304a:	fb 4f       	sbci	r31, 0xFB	; 251
    304c:	90 81       	ld	r25, Z
    304e:	29 81       	ldd	r18, Y+1	; 0x01
    3050:	3a 81       	ldd	r19, Y+2	; 0x02
    3052:	84 2f       	mov	r24, r20
    3054:	69 2f       	mov	r22, r25
    3056:	a9 01       	movw	r20, r18
    3058:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8GetPinValue>
}
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <TILT_vidGetAllTiltRead>:

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	00 d0       	rcall	.+0      	; 0x306e <TILT_vidGetAllTiltRead+0x6>
    306e:	0f 92       	push	r0
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	9b 83       	std	Y+3, r25	; 0x03
    3076:	8a 83       	std	Y+2, r24	; 0x02
	tilt_read[NO_OF_SENSORS]=0;
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	fc 01       	movw	r30, r24
    307e:	32 96       	adiw	r30, 0x02	; 2
    3080:	10 82       	st	Z, r1
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    3082:	19 82       	std	Y+1, r1	; 0x01
    3084:	21 c0       	rjmp	.+66     	; 0x30c8 <TILT_vidGetAllTiltRead+0x60>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	88 2f       	mov	r24, r24
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	fc 01       	movw	r30, r24
    3092:	eb 5f       	subi	r30, 0xFB	; 251
    3094:	fb 4f       	sbci	r31, 0xFB	; 251
    3096:	40 81       	ld	r20, Z
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	fc 01       	movw	r30, r24
    30a4:	ea 5f       	subi	r30, 0xFA	; 250
    30a6:	fb 4f       	sbci	r31, 0xFB	; 251
    30a8:	50 81       	ld	r21, Z
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	28 0f       	add	r18, r24
    30b6:	39 1f       	adc	r19, r25
    30b8:	84 2f       	mov	r24, r20
    30ba:	65 2f       	mov	r22, r21
    30bc:	a9 01       	movw	r20, r18
    30be:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8GetPinValue>
}

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
	tilt_read[NO_OF_SENSORS]=0;
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	89 83       	std	Y+1, r24	; 0x01
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	82 30       	cpi	r24, 0x02	; 2
    30cc:	e0 f2       	brcs	.-72     	; 0x3086 <TILT_vidGetAllTiltRead+0x1e>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
	}
	tilt_read[NO_OF_SENSORS]=1;
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	fc 01       	movw	r30, r24
    30d4:	32 96       	adiw	r30, 0x02	; 2
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	80 83       	st	Z, r24
}
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	08 95       	ret

000030e6 <LED_u8InitializeLed>:
#include"../../libraries/std_types.h"
#include "../../mcal/dio_driver/dio_int.h"

uint8_t LED_u8InitializeLed(uint8_t port_id,uint8_t led_pin)
{
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <LED_u8InitializeLed+0x6>
    30ec:	0f 92       	push	r0
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    30f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = DIO_u8SetPinMode(port_id,led_pin,OUTPUT);
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	6b 81       	ldd	r22, Y+3	; 0x03
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
    3100:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    3102:	89 81       	ldd	r24, Y+1	; 0x01
}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <LED_u8InitializeLedPort>:

uint8_t LED_u8InitializeLedPort(uint8_t port_id)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	00 d0       	rcall	.+0      	; 0x3116 <LED_u8InitializeLedPort+0x6>
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t error_status = DIO_u8SetPortMode(port_id,255);
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	6f ef       	ldi	r22, 0xFF	; 255
    3120:	0e 94 ca 10 	call	0x2194	; 0x2194 <DIO_u8SetPortMode>
    3124:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    3126:	89 81       	ldd	r24, Y+1	; 0x01
}
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <LED_u8LedOn>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"led_helper.h"

uint8_t LED_u8LedOn(uint8_t port_id,uint8_t led_pin)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <LED_u8LedOn+0x6>
    3138:	00 d0       	rcall	.+0      	; 0x313a <LED_u8LedOn+0x8>
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	8b 83       	std	Y+3, r24	; 0x03
    3140:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    3142:	9e 01       	movw	r18, r28
    3144:	2e 5f       	subi	r18, 0xFE	; 254
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	6c 81       	ldd	r22, Y+4	; 0x04
    314c:	a9 01       	movw	r20, r18
    314e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    3152:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	88 23       	and	r24, r24
    3158:	71 f4       	brne	.+28     	; 0x3176 <LED_u8LedOn+0x44>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	88 23       	and	r24, r24
    315e:	29 f4       	brne	.+10     	; 0x316a <LED_u8LedOn+0x38>
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	6c 81       	ldd	r22, Y+4	; 0x04
    3164:	0e 94 73 18 	call	0x30e6	; 0x30e6 <LED_u8InitializeLed>
    3168:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPinValue(port_id,led_pin,HIGH);
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	6c 81       	ldd	r22, Y+4	; 0x04
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
    3174:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    3176:	89 81       	ldd	r24, Y+1	; 0x01
}
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	0f 90       	pop	r0
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <LED_u8LedOff>:
uint8_t LED_u8LedOff(uint8_t port_id,uint8_t led_pin)
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	00 d0       	rcall	.+0      	; 0x318c <LED_u8LedOff+0x6>
    318c:	00 d0       	rcall	.+0      	; 0x318e <LED_u8LedOff+0x8>
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	8b 83       	std	Y+3, r24	; 0x03
    3194:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    3196:	9e 01       	movw	r18, r28
    3198:	2e 5f       	subi	r18, 0xFE	; 254
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	6c 81       	ldd	r22, Y+4	; 0x04
    31a0:	a9 01       	movw	r20, r18
    31a2:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    31a6:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	88 23       	and	r24, r24
    31ac:	71 f4       	brne	.+28     	; 0x31ca <LED_u8LedOff+0x44>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	88 23       	and	r24, r24
    31b2:	29 f4       	brne	.+10     	; 0x31be <LED_u8LedOff+0x38>
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	6c 81       	ldd	r22, Y+4	; 0x04
    31b8:	0e 94 73 18 	call	0x30e6	; 0x30e6 <LED_u8InitializeLed>
    31bc:	89 83       	std	Y+1, r24	; 0x01
	    error_status = DIO_u8SetPinValue(port_id,led_pin,LOW);
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	6c 81       	ldd	r22, Y+4	; 0x04
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
    31c8:	89 83       	std	Y+1, r24	; 0x01
		}
	return error_status;
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <LED_u8LedToggle>:
uint8_t LED_u8LedToggle(uint8_t port_id,uint8_t led_pin)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <LED_u8LedToggle+0x6>
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <LED_u8LedToggle+0x8>
    31e2:	0f 92       	push	r0
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	8c 83       	std	Y+4, r24	; 0x04
    31ea:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t value;
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    31ec:	9e 01       	movw	r18, r28
    31ee:	2d 5f       	subi	r18, 0xFD	; 253
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	8c 81       	ldd	r24, Y+4	; 0x04
    31f4:	6d 81       	ldd	r22, Y+5	; 0x05
    31f6:	a9 01       	movw	r20, r18
    31f8:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    31fc:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	88 23       	and	r24, r24
    3202:	21 f5       	brne	.+72     	; 0x324c <LED_u8LedToggle+0x72>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	88 23       	and	r24, r24
    3208:	29 f4       	brne	.+10     	; 0x3214 <LED_u8LedToggle+0x3a>
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	6d 81       	ldd	r22, Y+5	; 0x05
    320e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <LED_u8InitializeLed>
    3212:	89 83       	std	Y+1, r24	; 0x01
		error_status = DIO_u8GetPinValue(port_id,led_pin,&value);
    3214:	9e 01       	movw	r18, r28
    3216:	2e 5f       	subi	r18, 0xFE	; 254
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	8c 81       	ldd	r24, Y+4	; 0x04
    321c:	6d 81       	ldd	r22, Y+5	; 0x05
    321e:	a9 01       	movw	r20, r18
    3220:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <DIO_u8GetPinValue>
    3224:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK){
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	88 23       	and	r24, r24
    322a:	81 f4       	brne	.+32     	; 0x324c <LED_u8LedToggle+0x72>
			if(value==HIGH)error_status=DIO_u8SetPinValue(port_id,led_pin,LOW);
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	81 30       	cpi	r24, 0x01	; 1
    3230:	39 f4       	brne	.+14     	; 0x3240 <LED_u8LedToggle+0x66>
    3232:	8c 81       	ldd	r24, Y+4	; 0x04
    3234:	6d 81       	ldd	r22, Y+5	; 0x05
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	06 c0       	rjmp	.+12     	; 0x324c <LED_u8LedToggle+0x72>
			else error_status=DIO_u8SetPinValue(port_id,led_pin,HIGH);
    3240:	8c 81       	ldd	r24, Y+4	; 0x04
    3242:	6d 81       	ldd	r22, Y+5	; 0x05
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
    324a:	89 83       	std	Y+1, r24	; 0x01
		}
		}
	return error_status;
    324c:	89 81       	ldd	r24, Y+1	; 0x01
}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <LED_u8LedBlink>:
uint8_t LED_u8LedBlink(uint8_t port_id,uint8_t led_pin,uint16_ delay_time_ms)
{
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	a2 97       	sbiw	r28, 0x22	; 34
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	f8 94       	cli
    326c:	de bf       	out	0x3e, r29	; 62
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	cd bf       	out	0x3d, r28	; 61
    3272:	8f 8f       	std	Y+31, r24	; 0x1f
    3274:	68 a3       	std	Y+32, r22	; 0x20
    3276:	5a a3       	std	Y+34, r21	; 0x22
    3278:	49 a3       	std	Y+33, r20	; 0x21
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    327a:	9e 01       	movw	r18, r28
    327c:	22 5e       	subi	r18, 0xE2	; 226
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3282:	68 a1       	ldd	r22, Y+32	; 0x20
    3284:	a9 01       	movw	r20, r18
    3286:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    328a:	8d 8f       	std	Y+29, r24	; 0x1d
	if(error_status==E_OK)
    328c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328e:	88 23       	and	r24, r24
    3290:	09 f0       	breq	.+2      	; 0x3294 <LED_u8LedBlink+0x36>
    3292:	08 c1       	rjmp	.+528    	; 0x34a4 <LED_u8LedBlink+0x246>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    3294:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3296:	88 23       	and	r24, r24
    3298:	29 f4       	brne	.+10     	; 0x32a4 <LED_u8LedBlink+0x46>
    329a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    329c:	68 a1       	ldd	r22, Y+32	; 0x20
    329e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <LED_u8InitializeLed>
    32a2:	8d 8f       	std	Y+29, r24	; 0x1d
	error_status = LED_u8LedOn(port_id,led_pin);
    32a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a6:	68 a1       	ldd	r22, Y+32	; 0x20
    32a8:	0e 94 99 18 	call	0x3132	; 0x3132 <LED_u8LedOn>
    32ac:	8d 8f       	std	Y+29, r24	; 0x1d
 	 _delay_ms(delay_time_ms);
    32ae:	89 a1       	ldd	r24, Y+33	; 0x21
    32b0:	9a a1       	ldd	r25, Y+34	; 0x22
    32b2:	cc 01       	movw	r24, r24
    32b4:	a0 e0       	ldi	r26, 0x00	; 0
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	89 8f       	std	Y+25, r24	; 0x19
    32c6:	9a 8f       	std	Y+26, r25	; 0x1a
    32c8:	ab 8f       	std	Y+27, r26	; 0x1b
    32ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32cc:	69 8d       	ldd	r22, Y+25	; 0x19
    32ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	4a ef       	ldi	r20, 0xFA	; 250
    32da:	54 e4       	ldi	r21, 0x44	; 68
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	8d 8b       	std	Y+21, r24	; 0x15
    32e6:	9e 8b       	std	Y+22, r25	; 0x16
    32e8:	af 8b       	std	Y+23, r26	; 0x17
    32ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32ec:	6d 89       	ldd	r22, Y+21	; 0x15
    32ee:	7e 89       	ldd	r23, Y+22	; 0x16
    32f0:	8f 89       	ldd	r24, Y+23	; 0x17
    32f2:	98 8d       	ldd	r25, Y+24	; 0x18
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e8       	ldi	r20, 0x80	; 128
    32fa:	5f e3       	ldi	r21, 0x3F	; 63
    32fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3300:	88 23       	and	r24, r24
    3302:	2c f4       	brge	.+10     	; 0x330e <LED_u8LedBlink+0xb0>
		__ticks = 1;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9c 8b       	std	Y+20, r25	; 0x14
    330a:	8b 8b       	std	Y+19, r24	; 0x13
    330c:	3f c0       	rjmp	.+126    	; 0x338c <LED_u8LedBlink+0x12e>
	else if (__tmp > 65535)
    330e:	6d 89       	ldd	r22, Y+21	; 0x15
    3310:	7e 89       	ldd	r23, Y+22	; 0x16
    3312:	8f 89       	ldd	r24, Y+23	; 0x17
    3314:	98 8d       	ldd	r25, Y+24	; 0x18
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	3f ef       	ldi	r19, 0xFF	; 255
    331a:	4f e7       	ldi	r20, 0x7F	; 127
    331c:	57 e4       	ldi	r21, 0x47	; 71
    331e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3322:	18 16       	cp	r1, r24
    3324:	4c f5       	brge	.+82     	; 0x3378 <LED_u8LedBlink+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	69 8d       	ldd	r22, Y+25	; 0x19
    3328:	7a 8d       	ldd	r23, Y+26	; 0x1a
    332a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    332c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9c 8b       	std	Y+20, r25	; 0x14
    334c:	8b 8b       	std	Y+19, r24	; 0x13
    334e:	0f c0       	rjmp	.+30     	; 0x336e <LED_u8LedBlink+0x110>
    3350:	88 ec       	ldi	r24, 0xC8	; 200
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9a 8b       	std	Y+18, r25	; 0x12
    3356:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3358:	89 89       	ldd	r24, Y+17	; 0x11
    335a:	9a 89       	ldd	r25, Y+18	; 0x12
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <LED_u8LedBlink+0xfe>
    3360:	9a 8b       	std	Y+18, r25	; 0x12
    3362:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3364:	8b 89       	ldd	r24, Y+19	; 0x13
    3366:	9c 89       	ldd	r25, Y+20	; 0x14
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	9c 8b       	std	Y+20, r25	; 0x14
    336c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336e:	8b 89       	ldd	r24, Y+19	; 0x13
    3370:	9c 89       	ldd	r25, Y+20	; 0x14
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	69 f7       	brne	.-38     	; 0x3350 <LED_u8LedBlink+0xf2>
    3376:	14 c0       	rjmp	.+40     	; 0x33a0 <LED_u8LedBlink+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3378:	6d 89       	ldd	r22, Y+21	; 0x15
    337a:	7e 89       	ldd	r23, Y+22	; 0x16
    337c:	8f 89       	ldd	r24, Y+23	; 0x17
    337e:	98 8d       	ldd	r25, Y+24	; 0x18
    3380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	9c 8b       	std	Y+20, r25	; 0x14
    338a:	8b 8b       	std	Y+19, r24	; 0x13
    338c:	8b 89       	ldd	r24, Y+19	; 0x13
    338e:	9c 89       	ldd	r25, Y+20	; 0x14
    3390:	98 8b       	std	Y+16, r25	; 0x10
    3392:	8f 87       	std	Y+15, r24	; 0x0f
    3394:	8f 85       	ldd	r24, Y+15	; 0x0f
    3396:	98 89       	ldd	r25, Y+16	; 0x10
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <LED_u8LedBlink+0x13a>
    339c:	98 8b       	std	Y+16, r25	; 0x10
    339e:	8f 87       	std	Y+15, r24	; 0x0f
	if(error_status==E_OK){
    33a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a2:	88 23       	and	r24, r24
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <LED_u8LedBlink+0x14a>
    33a6:	7e c0       	rjmp	.+252    	; 0x34a4 <LED_u8LedBlink+0x246>
	error_status = LED_u8LedOff(port_id,led_pin);
    33a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33aa:	68 a1       	ldd	r22, Y+32	; 0x20
    33ac:	0e 94 c3 18 	call	0x3186	; 0x3186 <LED_u8LedOff>
    33b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(delay_time_ms);
    33b2:	89 a1       	ldd	r24, Y+33	; 0x21
    33b4:	9a a1       	ldd	r25, Y+34	; 0x22
    33b6:	cc 01       	movw	r24, r24
    33b8:	a0 e0       	ldi	r26, 0x00	; 0
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	8b 87       	std	Y+11, r24	; 0x0b
    33ca:	9c 87       	std	Y+12, r25	; 0x0c
    33cc:	ad 87       	std	Y+13, r26	; 0x0d
    33ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a ef       	ldi	r20, 0xFA	; 250
    33de:	54 e4       	ldi	r21, 0x44	; 68
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8f 83       	std	Y+7, r24	; 0x07
    33ea:	98 87       	std	Y+8, r25	; 0x08
    33ec:	a9 87       	std	Y+9, r26	; 0x09
    33ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <LED_u8LedBlink+0x1b4>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9e 83       	std	Y+6, r25	; 0x06
    340e:	8d 83       	std	Y+5, r24	; 0x05
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <LED_u8LedBlink+0x232>
	else if (__tmp > 65535)
    3412:	6f 81       	ldd	r22, Y+7	; 0x07
    3414:	78 85       	ldd	r23, Y+8	; 0x08
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <LED_u8LedBlink+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	6b 85       	ldd	r22, Y+11	; 0x0b
    342c:	7c 85       	ldd	r23, Y+12	; 0x0c
    342e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3430:	9e 85       	ldd	r25, Y+14	; 0x0e
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9e 83       	std	Y+6, r25	; 0x06
    3450:	8d 83       	std	Y+5, r24	; 0x05
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <LED_u8LedBlink+0x214>
    3454:	88 ec       	ldi	r24, 0xC8	; 200
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9c 83       	std	Y+4, r25	; 0x04
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <LED_u8LedBlink+0x202>
    3464:	9c 83       	std	Y+4, r25	; 0x04
    3466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <LED_u8LedBlink+0x1f6>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <LED_u8LedBlink+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9e 83       	std	Y+6, r25	; 0x06
    348e:	8d 83       	std	Y+5, r24	; 0x05
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <LED_u8LedBlink+0x23e>
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    34a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    34a6:	a2 96       	adiw	r28, 0x22	; 34
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <LED_u8LedPortOn>:


uint8_t LED_u8LedPortOn(uint8_t port_id)
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	00 d0       	rcall	.+0      	; 0x34be <LED_u8LedPortOn+0x6>
    34be:	0f 92       	push	r0
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    34c6:	9e 01       	movw	r18, r28
    34c8:	2e 5f       	subi	r18, 0xFE	; 254
    34ca:	3f 4f       	sbci	r19, 0xFF	; 255
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	a9 01       	movw	r20, r18
    34d2:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    34d6:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	88 23       	and	r24, r24
    34dc:	61 f4       	brne	.+24     	; 0x34f6 <LED_u8LedPortOn+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	88 23       	and	r24, r24
    34e2:	21 f4       	brne	.+8      	; 0x34ec <LED_u8LedPortOn+0x34>
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	0e 94 88 18 	call	0x3110	; 0x3110 <LED_u8InitializeLedPort>
    34ea:	89 83       	std	Y+1, r24	; 0x01
    error_status = DIO_u8SetPortValue(port_id,255);
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	6f ef       	ldi	r22, 0xFF	; 255
    34f0:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPortValue>
    34f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <LED_u8LedPortOff>:
uint8_t LED_u8LedPortOff(uint8_t port_id)
{
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	00 d0       	rcall	.+0      	; 0x350a <LED_u8LedPortOff+0x6>
    350a:	0f 92       	push	r0
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    3512:	9e 01       	movw	r18, r28
    3514:	2e 5f       	subi	r18, 0xFE	; 254
    3516:	3f 4f       	sbci	r19, 0xFF	; 255
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	a9 01       	movw	r20, r18
    351e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    3522:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	88 23       	and	r24, r24
    3528:	61 f4       	brne	.+24     	; 0x3542 <LED_u8LedPortOff+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	88 23       	and	r24, r24
    352e:	21 f4       	brne	.+8      	; 0x3538 <LED_u8LedPortOff+0x34>
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	0e 94 88 18 	call	0x3110	; 0x3110 <LED_u8InitializeLedPort>
    3536:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPortValue(port_id,LOW);
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPortValue>
    3540:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    3542:	89 81       	ldd	r24, Y+1	; 0x01
}
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <LED_u8LedPortToggle>:
uint8_t LED_u8LedPortToggle(uint8_t port_id)
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	00 d0       	rcall	.+0      	; 0x3556 <LED_u8LedPortToggle+0x6>
    3556:	00 d0       	rcall	.+0      	; 0x3558 <LED_u8LedPortToggle+0x8>
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t value;
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    355e:	9e 01       	movw	r18, r28
    3560:	2d 5f       	subi	r18, 0xFD	; 253
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	8c 81       	ldd	r24, Y+4	; 0x04
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	a9 01       	movw	r20, r18
    356a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    356e:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	88 23       	and	r24, r24
    3574:	01 f5       	brne	.+64     	; 0x35b6 <LED_u8LedPortToggle+0x66>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	88 23       	and	r24, r24
    357a:	21 f4       	brne	.+8      	; 0x3584 <LED_u8LedPortToggle+0x34>
    357c:	8c 81       	ldd	r24, Y+4	; 0x04
    357e:	0e 94 88 18 	call	0x3110	; 0x3110 <LED_u8InitializeLedPort>
    3582:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8GetPortValue(port_id,&value);
    3584:	9e 01       	movw	r18, r28
    3586:	2e 5f       	subi	r18, 0xFE	; 254
    3588:	3f 4f       	sbci	r19, 0xFF	; 255
    358a:	8c 81       	ldd	r24, Y+4	; 0x04
    358c:	b9 01       	movw	r22, r18
    358e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <DIO_u8GetPortValue>
    3592:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK){
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	88 23       	and	r24, r24
    3598:	71 f4       	brne	.+28     	; 0x35b6 <LED_u8LedPortToggle+0x66>
		if(value==HIGH)error_status=DIO_u8SetPortValue(port_id,LOW);
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	81 30       	cpi	r24, 0x01	; 1
    359e:	31 f4       	brne	.+12     	; 0x35ac <LED_u8LedPortToggle+0x5c>
    35a0:	8c 81       	ldd	r24, Y+4	; 0x04
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPortValue>
    35a8:	89 83       	std	Y+1, r24	; 0x01
    35aa:	05 c0       	rjmp	.+10     	; 0x35b6 <LED_u8LedPortToggle+0x66>
		else error_status=DIO_u8SetPortValue(port_id,255);
    35ac:	8c 81       	ldd	r24, Y+4	; 0x04
    35ae:	6f ef       	ldi	r22, 0xFF	; 255
    35b0:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPortValue>
    35b4:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <LED_u8LedPortBlink>:
uint8_t LED_u8LedPortBlink(uint8_t port_id,uint16_ delay_time_ms)
{
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	a1 97       	sbiw	r28, 0x21	; 33
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	8f 8f       	std	Y+31, r24	; 0x1f
    35dc:	79 a3       	std	Y+33, r23	; 0x21
    35de:	68 a3       	std	Y+32, r22	; 0x20
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    35e0:	9e 01       	movw	r18, r28
    35e2:	22 5e       	subi	r18, 0xE2	; 226
    35e4:	3f 4f       	sbci	r19, 0xFF	; 255
    35e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35e8:	60 e0       	ldi	r22, 0x00	; 0
    35ea:	a9 01       	movw	r20, r18
    35ec:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8IsPinOutPut>
    35f0:	8d 8f       	std	Y+29, r24	; 0x1d
		if(error_status==E_OK)
    35f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35f4:	88 23       	and	r24, r24
    35f6:	09 f0       	breq	.+2      	; 0x35fa <LED_u8LedPortBlink+0x34>
    35f8:	05 c1       	rjmp	.+522    	; 0x3804 <LED_u8LedPortBlink+0x23e>
		{
		if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    35fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35fc:	88 23       	and	r24, r24
    35fe:	21 f4       	brne	.+8      	; 0x3608 <LED_u8LedPortBlink+0x42>
    3600:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3602:	0e 94 88 18 	call	0x3110	; 0x3110 <LED_u8InitializeLedPort>
    3606:	8d 8f       	std	Y+29, r24	; 0x1d
		error_status = LED_u8LedPortOn(port_id);
    3608:	8f 8d       	ldd	r24, Y+31	; 0x1f
    360a:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <LED_u8LedPortOn>
    360e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    3610:	88 a1       	ldd	r24, Y+32	; 0x20
    3612:	99 a1       	ldd	r25, Y+33	; 0x21
    3614:	cc 01       	movw	r24, r24
    3616:	a0 e0       	ldi	r26, 0x00	; 0
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	bc 01       	movw	r22, r24
    361c:	cd 01       	movw	r24, r26
    361e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	89 8f       	std	Y+25, r24	; 0x19
    3628:	9a 8f       	std	Y+26, r25	; 0x1a
    362a:	ab 8f       	std	Y+27, r26	; 0x1b
    362c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362e:	69 8d       	ldd	r22, Y+25	; 0x19
    3630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	4a ef       	ldi	r20, 0xFA	; 250
    363c:	54 e4       	ldi	r21, 0x44	; 68
    363e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	8d 8b       	std	Y+21, r24	; 0x15
    3648:	9e 8b       	std	Y+22, r25	; 0x16
    364a:	af 8b       	std	Y+23, r26	; 0x17
    364c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    364e:	6d 89       	ldd	r22, Y+21	; 0x15
    3650:	7e 89       	ldd	r23, Y+22	; 0x16
    3652:	8f 89       	ldd	r24, Y+23	; 0x17
    3654:	98 8d       	ldd	r25, Y+24	; 0x18
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e8       	ldi	r20, 0x80	; 128
    365c:	5f e3       	ldi	r21, 0x3F	; 63
    365e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3662:	88 23       	and	r24, r24
    3664:	2c f4       	brge	.+10     	; 0x3670 <LED_u8LedPortBlink+0xaa>
		__ticks = 1;
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	9c 8b       	std	Y+20, r25	; 0x14
    366c:	8b 8b       	std	Y+19, r24	; 0x13
    366e:	3f c0       	rjmp	.+126    	; 0x36ee <LED_u8LedPortBlink+0x128>
	else if (__tmp > 65535)
    3670:	6d 89       	ldd	r22, Y+21	; 0x15
    3672:	7e 89       	ldd	r23, Y+22	; 0x16
    3674:	8f 89       	ldd	r24, Y+23	; 0x17
    3676:	98 8d       	ldd	r25, Y+24	; 0x18
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	3f ef       	ldi	r19, 0xFF	; 255
    367c:	4f e7       	ldi	r20, 0x7F	; 127
    367e:	57 e4       	ldi	r21, 0x47	; 71
    3680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3684:	18 16       	cp	r1, r24
    3686:	4c f5       	brge	.+82     	; 0x36da <LED_u8LedPortBlink+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3688:	69 8d       	ldd	r22, Y+25	; 0x19
    368a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    368c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    368e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e2       	ldi	r20, 0x20	; 32
    3696:	51 e4       	ldi	r21, 0x41	; 65
    3698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9c 8b       	std	Y+20, r25	; 0x14
    36ae:	8b 8b       	std	Y+19, r24	; 0x13
    36b0:	0f c0       	rjmp	.+30     	; 0x36d0 <LED_u8LedPortBlink+0x10a>
    36b2:	88 ec       	ldi	r24, 0xC8	; 200
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	9a 8b       	std	Y+18, r25	; 0x12
    36b8:	89 8b       	std	Y+17, r24	; 0x11
    36ba:	89 89       	ldd	r24, Y+17	; 0x11
    36bc:	9a 89       	ldd	r25, Y+18	; 0x12
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <LED_u8LedPortBlink+0xf8>
    36c2:	9a 8b       	std	Y+18, r25	; 0x12
    36c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c6:	8b 89       	ldd	r24, Y+19	; 0x13
    36c8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	9c 8b       	std	Y+20, r25	; 0x14
    36ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d0:	8b 89       	ldd	r24, Y+19	; 0x13
    36d2:	9c 89       	ldd	r25, Y+20	; 0x14
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	69 f7       	brne	.-38     	; 0x36b2 <LED_u8LedPortBlink+0xec>
    36d8:	14 c0       	rjmp	.+40     	; 0x3702 <LED_u8LedPortBlink+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36da:	6d 89       	ldd	r22, Y+21	; 0x15
    36dc:	7e 89       	ldd	r23, Y+22	; 0x16
    36de:	8f 89       	ldd	r24, Y+23	; 0x17
    36e0:	98 8d       	ldd	r25, Y+24	; 0x18
    36e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	9c 8b       	std	Y+20, r25	; 0x14
    36ec:	8b 8b       	std	Y+19, r24	; 0x13
    36ee:	8b 89       	ldd	r24, Y+19	; 0x13
    36f0:	9c 89       	ldd	r25, Y+20	; 0x14
    36f2:	98 8b       	std	Y+16, r25	; 0x10
    36f4:	8f 87       	std	Y+15, r24	; 0x0f
    36f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36f8:	98 89       	ldd	r25, Y+16	; 0x10
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	f1 f7       	brne	.-4      	; 0x36fa <LED_u8LedPortBlink+0x134>
    36fe:	98 8b       	std	Y+16, r25	; 0x10
    3700:	8f 87       	std	Y+15, r24	; 0x0f
		if(error_status==E_OK){
    3702:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3704:	88 23       	and	r24, r24
    3706:	09 f0       	breq	.+2      	; 0x370a <LED_u8LedPortBlink+0x144>
    3708:	7d c0       	rjmp	.+250    	; 0x3804 <LED_u8LedPortBlink+0x23e>
		error_status = LED_u8LedPortOff(port_id);
    370a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    370c:	0e 94 82 1a 	call	0x3504	; 0x3504 <LED_u8LedPortOff>
    3710:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    3712:	88 a1       	ldd	r24, Y+32	; 0x20
    3714:	99 a1       	ldd	r25, Y+33	; 0x21
    3716:	cc 01       	movw	r24, r24
    3718:	a0 e0       	ldi	r26, 0x00	; 0
    371a:	b0 e0       	ldi	r27, 0x00	; 0
    371c:	bc 01       	movw	r22, r24
    371e:	cd 01       	movw	r24, r26
    3720:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	8b 87       	std	Y+11, r24	; 0x0b
    372a:	9c 87       	std	Y+12, r25	; 0x0c
    372c:	ad 87       	std	Y+13, r26	; 0x0d
    372e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3730:	6b 85       	ldd	r22, Y+11	; 0x0b
    3732:	7c 85       	ldd	r23, Y+12	; 0x0c
    3734:	8d 85       	ldd	r24, Y+13	; 0x0d
    3736:	9e 85       	ldd	r25, Y+14	; 0x0e
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	4a ef       	ldi	r20, 0xFA	; 250
    373e:	54 e4       	ldi	r21, 0x44	; 68
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	8f 83       	std	Y+7, r24	; 0x07
    374a:	98 87       	std	Y+8, r25	; 0x08
    374c:	a9 87       	std	Y+9, r26	; 0x09
    374e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3750:	6f 81       	ldd	r22, Y+7	; 0x07
    3752:	78 85       	ldd	r23, Y+8	; 0x08
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e8       	ldi	r20, 0x80	; 128
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3764:	88 23       	and	r24, r24
    3766:	2c f4       	brge	.+10     	; 0x3772 <LED_u8LedPortBlink+0x1ac>
		__ticks = 1;
    3768:	81 e0       	ldi	r24, 0x01	; 1
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	9e 83       	std	Y+6, r25	; 0x06
    376e:	8d 83       	std	Y+5, r24	; 0x05
    3770:	3f c0       	rjmp	.+126    	; 0x37f0 <LED_u8LedPortBlink+0x22a>
	else if (__tmp > 65535)
    3772:	6f 81       	ldd	r22, Y+7	; 0x07
    3774:	78 85       	ldd	r23, Y+8	; 0x08
    3776:	89 85       	ldd	r24, Y+9	; 0x09
    3778:	9a 85       	ldd	r25, Y+10	; 0x0a
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	3f ef       	ldi	r19, 0xFF	; 255
    377e:	4f e7       	ldi	r20, 0x7F	; 127
    3780:	57 e4       	ldi	r21, 0x47	; 71
    3782:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3786:	18 16       	cp	r1, r24
    3788:	4c f5       	brge	.+82     	; 0x37dc <LED_u8LedPortBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378a:	6b 85       	ldd	r22, Y+11	; 0x0b
    378c:	7c 85       	ldd	r23, Y+12	; 0x0c
    378e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3790:	9e 85       	ldd	r25, Y+14	; 0x0e
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9e 83       	std	Y+6, r25	; 0x06
    37b0:	8d 83       	std	Y+5, r24	; 0x05
    37b2:	0f c0       	rjmp	.+30     	; 0x37d2 <LED_u8LedPortBlink+0x20c>
    37b4:	88 ec       	ldi	r24, 0xC8	; 200
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
    37bc:	8b 81       	ldd	r24, Y+3	; 0x03
    37be:	9c 81       	ldd	r25, Y+4	; 0x04
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <LED_u8LedPortBlink+0x1fa>
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ca:	9e 81       	ldd	r25, Y+6	; 0x06
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	9e 83       	std	Y+6, r25	; 0x06
    37d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	8d 81       	ldd	r24, Y+5	; 0x05
    37d4:	9e 81       	ldd	r25, Y+6	; 0x06
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	69 f7       	brne	.-38     	; 0x37b4 <LED_u8LedPortBlink+0x1ee>
    37da:	14 c0       	rjmp	.+40     	; 0x3804 <LED_u8LedPortBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37dc:	6f 81       	ldd	r22, Y+7	; 0x07
    37de:	78 85       	ldd	r23, Y+8	; 0x08
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	9e 83       	std	Y+6, r25	; 0x06
    37ee:	8d 83       	std	Y+5, r24	; 0x05
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	9a 81       	ldd	r25, Y+2	; 0x02
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	f1 f7       	brne	.-4      	; 0x37fc <LED_u8LedPortBlink+0x236>
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
		}
		}

	return error_status;
    3804:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3806:	a1 96       	adiw	r28, 0x21	; 33
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <LCD_vidWriteData>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"lcd_cfg.h"

void LCD_vidWriteData(uint8_t data)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	2f 97       	sbiw	r28, 0x0f	; 15
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    382e:	82 e0       	ldi	r24, 0x02	; 2
    3830:	67 e0       	ldi	r22, 0x07	; 7
    3832:	41 e0       	ldi	r20, 0x01	; 1
    3834:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    3838:	82 e0       	ldi	r24, 0x02	; 2
    383a:	65 e0       	ldi	r22, 0x05	; 5
    383c:	40 e0       	ldi	r20, 0x00	; 0
    383e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,data);
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	6f 85       	ldd	r22, Y+15	; 0x0f
    3846:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    384a:	82 e0       	ldi	r24, 0x02	; 2
    384c:	66 e0       	ldi	r22, 0x06	; 6
    384e:	41 e0       	ldi	r20, 0x01	; 1
    3850:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	a0 e0       	ldi	r26, 0x00	; 0
    385a:	b0 e4       	ldi	r27, 0x40	; 64
    385c:	8b 87       	std	Y+11, r24	; 0x0b
    385e:	9c 87       	std	Y+12, r25	; 0x0c
    3860:	ad 87       	std	Y+13, r26	; 0x0d
    3862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3864:	6b 85       	ldd	r22, Y+11	; 0x0b
    3866:	7c 85       	ldd	r23, Y+12	; 0x0c
    3868:	8d 85       	ldd	r24, Y+13	; 0x0d
    386a:	9e 85       	ldd	r25, Y+14	; 0x0e
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	4a ef       	ldi	r20, 0xFA	; 250
    3872:	54 e4       	ldi	r21, 0x44	; 68
    3874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	8f 83       	std	Y+7, r24	; 0x07
    387e:	98 87       	std	Y+8, r25	; 0x08
    3880:	a9 87       	std	Y+9, r26	; 0x09
    3882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3884:	6f 81       	ldd	r22, Y+7	; 0x07
    3886:	78 85       	ldd	r23, Y+8	; 0x08
    3888:	89 85       	ldd	r24, Y+9	; 0x09
    388a:	9a 85       	ldd	r25, Y+10	; 0x0a
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 e8       	ldi	r20, 0x80	; 128
    3892:	5f e3       	ldi	r21, 0x3F	; 63
    3894:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3898:	88 23       	and	r24, r24
    389a:	2c f4       	brge	.+10     	; 0x38a6 <LCD_vidWriteData+0x8e>
		__ticks = 1;
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	3f c0       	rjmp	.+126    	; 0x3924 <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    38a6:	6f 81       	ldd	r22, Y+7	; 0x07
    38a8:	78 85       	ldd	r23, Y+8	; 0x08
    38aa:	89 85       	ldd	r24, Y+9	; 0x09
    38ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	3f ef       	ldi	r19, 0xFF	; 255
    38b2:	4f e7       	ldi	r20, 0x7F	; 127
    38b4:	57 e4       	ldi	r21, 0x47	; 71
    38b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ba:	18 16       	cp	r1, r24
    38bc:	4c f5       	brge	.+82     	; 0x3910 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e2       	ldi	r20, 0x20	; 32
    38cc:	51 e4       	ldi	r21, 0x41	; 65
    38ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	bc 01       	movw	r22, r24
    38d8:	cd 01       	movw	r24, r26
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9e 83       	std	Y+6, r25	; 0x06
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	0f c0       	rjmp	.+30     	; 0x3906 <LCD_vidWriteData+0xee>
    38e8:	88 ec       	ldi	r24, 0xC8	; 200
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	9c 83       	std	Y+4, r25	; 0x04
    38ee:	8b 83       	std	Y+3, r24	; 0x03
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	9c 81       	ldd	r25, Y+4	; 0x04
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	f1 f7       	brne	.-4      	; 0x38f4 <LCD_vidWriteData+0xdc>
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fc:	8d 81       	ldd	r24, Y+5	; 0x05
    38fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	9e 83       	std	Y+6, r25	; 0x06
    3904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	9e 81       	ldd	r25, Y+6	; 0x06
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	69 f7       	brne	.-38     	; 0x38e8 <LCD_vidWriteData+0xd0>
    390e:	14 c0       	rjmp	.+40     	; 0x3938 <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3910:	6f 81       	ldd	r22, Y+7	; 0x07
    3912:	78 85       	ldd	r23, Y+8	; 0x08
    3914:	89 85       	ldd	r24, Y+9	; 0x09
    3916:	9a 85       	ldd	r25, Y+10	; 0x0a
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9e 83       	std	Y+6, r25	; 0x06
    3922:	8d 83       	std	Y+5, r24	; 0x05
    3924:	8d 81       	ldd	r24, Y+5	; 0x05
    3926:	9e 81       	ldd	r25, Y+6	; 0x06
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	f1 f7       	brne	.-4      	; 0x3930 <LCD_vidWriteData+0x118>
    3934:	9a 83       	std	Y+2, r25	; 0x02
    3936:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	66 e0       	ldi	r22, 0x06	; 6
    393c:	40 e0       	ldi	r20, 0x00	; 0
    393e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
}
    3942:	2f 96       	adiw	r28, 0x0f	; 15
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8_t command)
{
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	2f 97       	sbiw	r28, 0x0f	; 15
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
    3968:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    396a:	82 e0       	ldi	r24, 0x02	; 2
    396c:	67 e0       	ldi	r22, 0x07	; 7
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	65 e0       	ldi	r22, 0x05	; 5
    3978:	40 e0       	ldi	r20, 0x00	; 0
    397a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,command);
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	6f 85       	ldd	r22, Y+15	; 0x0f
    3982:	0e 94 12 11 	call	0x2224	; 0x2224 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3986:	82 e0       	ldi	r24, 0x02	; 2
    3988:	66 e0       	ldi	r22, 0x06	; 6
    398a:	41 e0       	ldi	r20, 0x01	; 1
    398c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	a0 e0       	ldi	r26, 0x00	; 0
    3996:	b0 e4       	ldi	r27, 0x40	; 64
    3998:	8b 87       	std	Y+11, r24	; 0x0b
    399a:	9c 87       	std	Y+12, r25	; 0x0c
    399c:	ad 87       	std	Y+13, r26	; 0x0d
    399e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	4a ef       	ldi	r20, 0xFA	; 250
    39ae:	54 e4       	ldi	r21, 0x44	; 68
    39b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	8f 83       	std	Y+7, r24	; 0x07
    39ba:	98 87       	std	Y+8, r25	; 0x08
    39bc:	a9 87       	std	Y+9, r26	; 0x09
    39be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c0:	6f 81       	ldd	r22, Y+7	; 0x07
    39c2:	78 85       	ldd	r23, Y+8	; 0x08
    39c4:	89 85       	ldd	r24, Y+9	; 0x09
    39c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e8       	ldi	r20, 0x80	; 128
    39ce:	5f e3       	ldi	r21, 0x3F	; 63
    39d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d4:	88 23       	and	r24, r24
    39d6:	2c f4       	brge	.+10     	; 0x39e2 <LCD_vidWriteCmd+0x8e>
		__ticks = 1;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9e 83       	std	Y+6, r25	; 0x06
    39de:	8d 83       	std	Y+5, r24	; 0x05
    39e0:	3f c0       	rjmp	.+126    	; 0x3a60 <LCD_vidWriteCmd+0x10c>
	else if (__tmp > 65535)
    39e2:	6f 81       	ldd	r22, Y+7	; 0x07
    39e4:	78 85       	ldd	r23, Y+8	; 0x08
    39e6:	89 85       	ldd	r24, Y+9	; 0x09
    39e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	3f ef       	ldi	r19, 0xFF	; 255
    39ee:	4f e7       	ldi	r20, 0x7F	; 127
    39f0:	57 e4       	ldi	r21, 0x47	; 71
    39f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f6:	18 16       	cp	r1, r24
    39f8:	4c f5       	brge	.+82     	; 0x3a4c <LCD_vidWriteCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e2       	ldi	r20, 0x20	; 32
    3a08:	51 e4       	ldi	r21, 0x41	; 65
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	9e 83       	std	Y+6, r25	; 0x06
    3a20:	8d 83       	std	Y+5, r24	; 0x05
    3a22:	0f c0       	rjmp	.+30     	; 0x3a42 <LCD_vidWriteCmd+0xee>
    3a24:	88 ec       	ldi	r24, 0xC8	; 200
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9c 83       	std	Y+4, r25	; 0x04
    3a2a:	8b 83       	std	Y+3, r24	; 0x03
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <LCD_vidWriteCmd+0xdc>
    3a34:	9c 83       	std	Y+4, r25	; 0x04
    3a36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a38:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	9e 83       	std	Y+6, r25	; 0x06
    3a40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a42:	8d 81       	ldd	r24, Y+5	; 0x05
    3a44:	9e 81       	ldd	r25, Y+6	; 0x06
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	69 f7       	brne	.-38     	; 0x3a24 <LCD_vidWriteCmd+0xd0>
    3a4a:	14 c0       	rjmp	.+40     	; 0x3a74 <LCD_vidWriteCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4e:	78 85       	ldd	r23, Y+8	; 0x08
    3a50:	89 85       	ldd	r24, Y+9	; 0x09
    3a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
    3a60:	8d 81       	ldd	r24, Y+5	; 0x05
    3a62:	9e 81       	ldd	r25, Y+6	; 0x06
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <LCD_vidWriteCmd+0x118>
    3a70:	9a 83       	std	Y+2, r25	; 0x02
    3a72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3a74:	82 e0       	ldi	r24, 0x02	; 2
    3a76:	66 e0       	ldi	r22, 0x06	; 6
    3a78:	40 e0       	ldi	r20, 0x00	; 0
    3a7a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DIO_u8SetPinValue>
}
    3a7e:	2f 96       	adiw	r28, 0x0f	; 15
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	08 95       	ret

00003a90 <LCD_vidInit>:

void LCD_vidInit(void)
{
    3a90:	df 93       	push	r29
    3a92:	cf 93       	push	r28
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	e8 97       	sbiw	r28, 0x38	; 56
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    3aa4:	82 e0       	ldi	r24, 0x02	; 2
    3aa6:	67 e0       	ldi	r22, 0x07	; 7
    3aa8:	41 e0       	ldi	r20, 0x01	; 1
    3aaa:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    3aae:	82 e0       	ldi	r24, 0x02	; 2
    3ab0:	65 e0       	ldi	r22, 0x05	; 5
    3ab2:	41 e0       	ldi	r20, 0x01	; 1
    3ab4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	66 e0       	ldi	r22, 0x06	; 6
    3abc:	41 e0       	ldi	r20, 0x01	; 1
    3abe:	0e 94 a9 0c 	call	0x1952	; 0x1952 <DIO_u8SetPinMode>
	DIO_u8SetPortMode(LCD_Data_PORT,255);
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	6f ef       	ldi	r22, 0xFF	; 255
    3ac6:	0e 94 ca 10 	call	0x2194	; 0x2194 <DIO_u8SetPortMode>
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	a0 e2       	ldi	r26, 0x20	; 32
    3ad0:	b2 e4       	ldi	r27, 0x42	; 66
    3ad2:	8d ab       	std	Y+53, r24	; 0x35
    3ad4:	9e ab       	std	Y+54, r25	; 0x36
    3ad6:	af ab       	std	Y+55, r26	; 0x37
    3ad8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ada:	6d a9       	ldd	r22, Y+53	; 0x35
    3adc:	7e a9       	ldd	r23, Y+54	; 0x36
    3ade:	8f a9       	ldd	r24, Y+55	; 0x37
    3ae0:	98 ad       	ldd	r25, Y+56	; 0x38
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	4a ef       	ldi	r20, 0xFA	; 250
    3ae8:	54 e4       	ldi	r21, 0x44	; 68
    3aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	89 ab       	std	Y+49, r24	; 0x31
    3af4:	9a ab       	std	Y+50, r25	; 0x32
    3af6:	ab ab       	std	Y+51, r26	; 0x33
    3af8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3afa:	69 a9       	ldd	r22, Y+49	; 0x31
    3afc:	7a a9       	ldd	r23, Y+50	; 0x32
    3afe:	8b a9       	ldd	r24, Y+51	; 0x33
    3b00:	9c a9       	ldd	r25, Y+52	; 0x34
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e8       	ldi	r20, 0x80	; 128
    3b08:	5f e3       	ldi	r21, 0x3F	; 63
    3b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0e:	88 23       	and	r24, r24
    3b10:	2c f4       	brge	.+10     	; 0x3b1c <LCD_vidInit+0x8c>
		__ticks = 1;
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	98 ab       	std	Y+48, r25	; 0x30
    3b18:	8f a7       	std	Y+47, r24	; 0x2f
    3b1a:	3f c0       	rjmp	.+126    	; 0x3b9a <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    3b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    3b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    3b20:	8b a9       	ldd	r24, Y+51	; 0x33
    3b22:	9c a9       	ldd	r25, Y+52	; 0x34
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	3f ef       	ldi	r19, 0xFF	; 255
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	57 e4       	ldi	r21, 0x47	; 71
    3b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b30:	18 16       	cp	r1, r24
    3b32:	4c f5       	brge	.+82     	; 0x3b86 <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b34:	6d a9       	ldd	r22, Y+53	; 0x35
    3b36:	7e a9       	ldd	r23, Y+54	; 0x36
    3b38:	8f a9       	ldd	r24, Y+55	; 0x37
    3b3a:	98 ad       	ldd	r25, Y+56	; 0x38
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e2       	ldi	r20, 0x20	; 32
    3b42:	51 e4       	ldi	r21, 0x41	; 65
    3b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b48:	dc 01       	movw	r26, r24
    3b4a:	cb 01       	movw	r24, r22
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	98 ab       	std	Y+48, r25	; 0x30
    3b5a:	8f a7       	std	Y+47, r24	; 0x2f
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <LCD_vidInit+0xec>
    3b5e:	88 ec       	ldi	r24, 0xC8	; 200
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9e a7       	std	Y+46, r25	; 0x2e
    3b64:	8d a7       	std	Y+45, r24	; 0x2d
    3b66:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b68:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b6a:	01 97       	sbiw	r24, 0x01	; 1
    3b6c:	f1 f7       	brne	.-4      	; 0x3b6a <LCD_vidInit+0xda>
    3b6e:	9e a7       	std	Y+46, r25	; 0x2e
    3b70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b74:	98 a9       	ldd	r25, Y+48	; 0x30
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	98 ab       	std	Y+48, r25	; 0x30
    3b7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b7e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b80:	00 97       	sbiw	r24, 0x00	; 0
    3b82:	69 f7       	brne	.-38     	; 0x3b5e <LCD_vidInit+0xce>
    3b84:	14 c0       	rjmp	.+40     	; 0x3bae <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b86:	69 a9       	ldd	r22, Y+49	; 0x31
    3b88:	7a a9       	ldd	r23, Y+50	; 0x32
    3b8a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b8c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	98 ab       	std	Y+48, r25	; 0x30
    3b98:	8f a7       	std	Y+47, r24	; 0x2f
    3b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    3b9e:	9c a7       	std	Y+44, r25	; 0x2c
    3ba0:	8b a7       	std	Y+43, r24	; 0x2b
    3ba2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ba4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <LCD_vidInit+0x116>
    3baa:	9c a7       	std	Y+44, r25	; 0x2c
    3bac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_vidWriteCmd(0b00111000);
    3bae:	88 e3       	ldi	r24, 0x38	; 56
    3bb0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	a0 e0       	ldi	r26, 0x00	; 0
    3bba:	b0 e4       	ldi	r27, 0x40	; 64
    3bbc:	8f a3       	std	Y+39, r24	; 0x27
    3bbe:	98 a7       	std	Y+40, r25	; 0x28
    3bc0:	a9 a7       	std	Y+41, r26	; 0x29
    3bc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bc4:	6f a1       	ldd	r22, Y+39	; 0x27
    3bc6:	78 a5       	ldd	r23, Y+40	; 0x28
    3bc8:	89 a5       	ldd	r24, Y+41	; 0x29
    3bca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	4a ef       	ldi	r20, 0xFA	; 250
    3bd2:	54 e4       	ldi	r21, 0x44	; 68
    3bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	8b a3       	std	Y+35, r24	; 0x23
    3bde:	9c a3       	std	Y+36, r25	; 0x24
    3be0:	ad a3       	std	Y+37, r26	; 0x25
    3be2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3be4:	6b a1       	ldd	r22, Y+35	; 0x23
    3be6:	7c a1       	ldd	r23, Y+36	; 0x24
    3be8:	8d a1       	ldd	r24, Y+37	; 0x25
    3bea:	9e a1       	ldd	r25, Y+38	; 0x26
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	40 e8       	ldi	r20, 0x80	; 128
    3bf2:	5f e3       	ldi	r21, 0x3F	; 63
    3bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf8:	88 23       	and	r24, r24
    3bfa:	2c f4       	brge	.+10     	; 0x3c06 <LCD_vidInit+0x176>
		__ticks = 1;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	9a a3       	std	Y+34, r25	; 0x22
    3c02:	89 a3       	std	Y+33, r24	; 0x21
    3c04:	3f c0       	rjmp	.+126    	; 0x3c84 <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    3c06:	6b a1       	ldd	r22, Y+35	; 0x23
    3c08:	7c a1       	ldd	r23, Y+36	; 0x24
    3c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	3f ef       	ldi	r19, 0xFF	; 255
    3c12:	4f e7       	ldi	r20, 0x7F	; 127
    3c14:	57 e4       	ldi	r21, 0x47	; 71
    3c16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c1a:	18 16       	cp	r1, r24
    3c1c:	4c f5       	brge	.+82     	; 0x3c70 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    3c20:	78 a5       	ldd	r23, Y+40	; 0x28
    3c22:	89 a5       	ldd	r24, Y+41	; 0x29
    3c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	40 e2       	ldi	r20, 0x20	; 32
    3c2c:	51 e4       	ldi	r21, 0x41	; 65
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	9a a3       	std	Y+34, r25	; 0x22
    3c44:	89 a3       	std	Y+33, r24	; 0x21
    3c46:	0f c0       	rjmp	.+30     	; 0x3c66 <LCD_vidInit+0x1d6>
    3c48:	88 ec       	ldi	r24, 0xC8	; 200
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	98 a3       	std	Y+32, r25	; 0x20
    3c4e:	8f 8f       	std	Y+31, r24	; 0x1f
    3c50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c52:	98 a1       	ldd	r25, Y+32	; 0x20
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <LCD_vidInit+0x1c4>
    3c58:	98 a3       	std	Y+32, r25	; 0x20
    3c5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	9a a3       	std	Y+34, r25	; 0x22
    3c64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c66:	89 a1       	ldd	r24, Y+33	; 0x21
    3c68:	9a a1       	ldd	r25, Y+34	; 0x22
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	69 f7       	brne	.-38     	; 0x3c48 <LCD_vidInit+0x1b8>
    3c6e:	14 c0       	rjmp	.+40     	; 0x3c98 <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c70:	6b a1       	ldd	r22, Y+35	; 0x23
    3c72:	7c a1       	ldd	r23, Y+36	; 0x24
    3c74:	8d a1       	ldd	r24, Y+37	; 0x25
    3c76:	9e a1       	ldd	r25, Y+38	; 0x26
    3c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	9a a3       	std	Y+34, r25	; 0x22
    3c82:	89 a3       	std	Y+33, r24	; 0x21
    3c84:	89 a1       	ldd	r24, Y+33	; 0x21
    3c86:	9a a1       	ldd	r25, Y+34	; 0x22
    3c88:	9e 8f       	std	Y+30, r25	; 0x1e
    3c8a:	8d 8f       	std	Y+29, r24	; 0x1d
    3c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <LCD_vidInit+0x200>
    3c94:	9e 8f       	std	Y+30, r25	; 0x1e
    3c96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidWriteCmd(0b00001100);
    3c98:	8c e0       	ldi	r24, 0x0C	; 12
    3c9a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	a0 e0       	ldi	r26, 0x00	; 0
    3ca4:	b0 e4       	ldi	r27, 0x40	; 64
    3ca6:	89 8f       	std	Y+25, r24	; 0x19
    3ca8:	9a 8f       	std	Y+26, r25	; 0x1a
    3caa:	ab 8f       	std	Y+27, r26	; 0x1b
    3cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cae:	69 8d       	ldd	r22, Y+25	; 0x19
    3cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	4a ef       	ldi	r20, 0xFA	; 250
    3cbc:	54 e4       	ldi	r21, 0x44	; 68
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	8d 8b       	std	Y+21, r24	; 0x15
    3cc8:	9e 8b       	std	Y+22, r25	; 0x16
    3cca:	af 8b       	std	Y+23, r26	; 0x17
    3ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3cce:	6d 89       	ldd	r22, Y+21	; 0x15
    3cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    3cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e8       	ldi	r20, 0x80	; 128
    3cdc:	5f e3       	ldi	r21, 0x3F	; 63
    3cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce2:	88 23       	and	r24, r24
    3ce4:	2c f4       	brge	.+10     	; 0x3cf0 <LCD_vidInit+0x260>
		__ticks = 1;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	9c 8b       	std	Y+20, r25	; 0x14
    3cec:	8b 8b       	std	Y+19, r24	; 0x13
    3cee:	3f c0       	rjmp	.+126    	; 0x3d6e <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    3cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    3cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	3f ef       	ldi	r19, 0xFF	; 255
    3cfc:	4f e7       	ldi	r20, 0x7F	; 127
    3cfe:	57 e4       	ldi	r21, 0x47	; 71
    3d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d04:	18 16       	cp	r1, r24
    3d06:	4c f5       	brge	.+82     	; 0x3d5a <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d08:	69 8d       	ldd	r22, Y+25	; 0x19
    3d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e2       	ldi	r20, 0x20	; 32
    3d16:	51 e4       	ldi	r21, 0x41	; 65
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	bc 01       	movw	r22, r24
    3d22:	cd 01       	movw	r24, r26
    3d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	9c 8b       	std	Y+20, r25	; 0x14
    3d2e:	8b 8b       	std	Y+19, r24	; 0x13
    3d30:	0f c0       	rjmp	.+30     	; 0x3d50 <LCD_vidInit+0x2c0>
    3d32:	88 ec       	ldi	r24, 0xC8	; 200
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	9a 8b       	std	Y+18, r25	; 0x12
    3d38:	89 8b       	std	Y+17, r24	; 0x11
    3d3a:	89 89       	ldd	r24, Y+17	; 0x11
    3d3c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <LCD_vidInit+0x2ae>
    3d42:	9a 8b       	std	Y+18, r25	; 0x12
    3d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d46:	8b 89       	ldd	r24, Y+19	; 0x13
    3d48:	9c 89       	ldd	r25, Y+20	; 0x14
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	9c 8b       	std	Y+20, r25	; 0x14
    3d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d50:	8b 89       	ldd	r24, Y+19	; 0x13
    3d52:	9c 89       	ldd	r25, Y+20	; 0x14
    3d54:	00 97       	sbiw	r24, 0x00	; 0
    3d56:	69 f7       	brne	.-38     	; 0x3d32 <LCD_vidInit+0x2a2>
    3d58:	14 c0       	rjmp	.+40     	; 0x3d82 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    3d60:	98 8d       	ldd	r25, Y+24	; 0x18
    3d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	9c 8b       	std	Y+20, r25	; 0x14
    3d6c:	8b 8b       	std	Y+19, r24	; 0x13
    3d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d70:	9c 89       	ldd	r25, Y+20	; 0x14
    3d72:	98 8b       	std	Y+16, r25	; 0x10
    3d74:	8f 87       	std	Y+15, r24	; 0x0f
    3d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d78:	98 89       	ldd	r25, Y+16	; 0x10
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <LCD_vidInit+0x2ea>
    3d7e:	98 8b       	std	Y+16, r25	; 0x10
    3d80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000001);
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	a0 e0       	ldi	r26, 0x00	; 0
    3d8e:	b0 e4       	ldi	r27, 0x40	; 64
    3d90:	8b 87       	std	Y+11, r24	; 0x0b
    3d92:	9c 87       	std	Y+12, r25	; 0x0c
    3d94:	ad 87       	std	Y+13, r26	; 0x0d
    3d96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da0:	20 e0       	ldi	r18, 0x00	; 0
    3da2:	30 e0       	ldi	r19, 0x00	; 0
    3da4:	4a ef       	ldi	r20, 0xFA	; 250
    3da6:	54 e4       	ldi	r21, 0x44	; 68
    3da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	8f 83       	std	Y+7, r24	; 0x07
    3db2:	98 87       	std	Y+8, r25	; 0x08
    3db4:	a9 87       	std	Y+9, r26	; 0x09
    3db6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3db8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dba:	78 85       	ldd	r23, Y+8	; 0x08
    3dbc:	89 85       	ldd	r24, Y+9	; 0x09
    3dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	40 e8       	ldi	r20, 0x80	; 128
    3dc6:	5f e3       	ldi	r21, 0x3F	; 63
    3dc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dcc:	88 23       	and	r24, r24
    3dce:	2c f4       	brge	.+10     	; 0x3dda <LCD_vidInit+0x34a>
		__ticks = 1;
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	9e 83       	std	Y+6, r25	; 0x06
    3dd6:	8d 83       	std	Y+5, r24	; 0x05
    3dd8:	3f c0       	rjmp	.+126    	; 0x3e58 <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    3dda:	6f 81       	ldd	r22, Y+7	; 0x07
    3ddc:	78 85       	ldd	r23, Y+8	; 0x08
    3dde:	89 85       	ldd	r24, Y+9	; 0x09
    3de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de2:	20 e0       	ldi	r18, 0x00	; 0
    3de4:	3f ef       	ldi	r19, 0xFF	; 255
    3de6:	4f e7       	ldi	r20, 0x7F	; 127
    3de8:	57 e4       	ldi	r21, 0x47	; 71
    3dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dee:	18 16       	cp	r1, r24
    3df0:	4c f5       	brge	.+82     	; 0x3e44 <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e2       	ldi	r20, 0x20	; 32
    3e00:	51 e4       	ldi	r21, 0x41	; 65
    3e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e06:	dc 01       	movw	r26, r24
    3e08:	cb 01       	movw	r24, r22
    3e0a:	bc 01       	movw	r22, r24
    3e0c:	cd 01       	movw	r24, r26
    3e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	9e 83       	std	Y+6, r25	; 0x06
    3e18:	8d 83       	std	Y+5, r24	; 0x05
    3e1a:	0f c0       	rjmp	.+30     	; 0x3e3a <LCD_vidInit+0x3aa>
    3e1c:	88 ec       	ldi	r24, 0xC8	; 200
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	9c 83       	std	Y+4, r25	; 0x04
    3e22:	8b 83       	std	Y+3, r24	; 0x03
    3e24:	8b 81       	ldd	r24, Y+3	; 0x03
    3e26:	9c 81       	ldd	r25, Y+4	; 0x04
    3e28:	01 97       	sbiw	r24, 0x01	; 1
    3e2a:	f1 f7       	brne	.-4      	; 0x3e28 <LCD_vidInit+0x398>
    3e2c:	9c 83       	std	Y+4, r25	; 0x04
    3e2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e30:	8d 81       	ldd	r24, Y+5	; 0x05
    3e32:	9e 81       	ldd	r25, Y+6	; 0x06
    3e34:	01 97       	sbiw	r24, 0x01	; 1
    3e36:	9e 83       	std	Y+6, r25	; 0x06
    3e38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	00 97       	sbiw	r24, 0x00	; 0
    3e40:	69 f7       	brne	.-38     	; 0x3e1c <LCD_vidInit+0x38c>
    3e42:	14 c0       	rjmp	.+40     	; 0x3e6c <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e44:	6f 81       	ldd	r22, Y+7	; 0x07
    3e46:	78 85       	ldd	r23, Y+8	; 0x08
    3e48:	89 85       	ldd	r24, Y+9	; 0x09
    3e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	9e 83       	std	Y+6, r25	; 0x06
    3e56:	8d 83       	std	Y+5, r24	; 0x05
    3e58:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5c:	9a 83       	std	Y+2, r25	; 0x02
    3e5e:	89 83       	std	Y+1, r24	; 0x01
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	9a 81       	ldd	r25, Y+2	; 0x02
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <LCD_vidInit+0x3d4>
    3e68:	9a 83       	std	Y+2, r25	; 0x02
    3e6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000110);
    3e6c:	86 e0       	ldi	r24, 0x06	; 6
    3e6e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
}
    3e72:	e8 96       	adiw	r28, 0x38	; 56
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	f8 94       	cli
    3e78:	de bf       	out	0x3e, r29	; 62
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	cd bf       	out	0x3d, r28	; 61
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <LCD_vidDisplayString>:

void LCD_vidDisplayString(uint8_t * string)
{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <LCD_vidDisplayString+0x6>
    3e8a:	0f 92       	push	r0
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	9b 83       	std	Y+3, r25	; 0x03
    3e92:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; string[i]!='\0'; i++)
    3e94:	19 82       	std	Y+1, r1	; 0x01
    3e96:	14 c0       	rjmp	.+40     	; 0x3ec0 <LCD_vidDisplayString+0x3c>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	80 31       	cpi	r24, 0x10	; 16
    3e9c:	19 f4       	brne	.+6      	; 0x3ea4 <LCD_vidDisplayString+0x20>
    3e9e:	80 ec       	ldi	r24, 0xC0	; 192
    3ea0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
		LCD_vidWriteData(string[i]);
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	28 2f       	mov	r18, r24
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	9b 81       	ldd	r25, Y+3	; 0x03
    3eae:	fc 01       	movw	r30, r24
    3eb0:	e2 0f       	add	r30, r18
    3eb2:	f3 1f       	adc	r31, r19
    3eb4:	80 81       	ld	r24, Z
    3eb6:	0e 94 0c 1c 	call	0x3818	; 0x3818 <LCD_vidWriteData>
	LCD_vidWriteCmd(0b00000110);
}

void LCD_vidDisplayString(uint8_t * string)
{
	for(uint8_t i=0; string[i]!='\0'; i++)
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	8f 5f       	subi	r24, 0xFF	; 255
    3ebe:	89 83       	std	Y+1, r24	; 0x01
    3ec0:	89 81       	ldd	r24, Y+1	; 0x01
    3ec2:	28 2f       	mov	r18, r24
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eca:	fc 01       	movw	r30, r24
    3ecc:	e2 0f       	add	r30, r18
    3ece:	f3 1f       	adc	r31, r19
    3ed0:	80 81       	ld	r24, Z
    3ed2:	88 23       	and	r24, r24
    3ed4:	09 f7       	brne	.-62     	; 0x3e98 <LCD_vidDisplayString+0x14>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
		LCD_vidWriteData(string[i]);
	}
}
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	cf 91       	pop	r28
    3ede:	df 91       	pop	r29
    3ee0:	08 95       	ret

00003ee2 <LCD_vidNewLine>:
void LCD_vidNewLine()
{
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	cd b7       	in	r28, 0x3d	; 61
    3ee8:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b11000000);
    3eea:	80 ec       	ldi	r24, 0xC0	; 192
    3eec:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
}
    3ef0:	cf 91       	pop	r28
    3ef2:	df 91       	pop	r29
    3ef4:	08 95       	ret

00003ef6 <LCD_vidDisplayStringLeftShift>:
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
    3ef6:	df 93       	push	r29
    3ef8:	cf 93       	push	r28
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	62 97       	sbiw	r28, 0x12	; 18
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	9a 8b       	std	Y+18, r25	; 0x12
    3f0c:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3f0e:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3f10:	18 8a       	std	Y+16, r1	; 0x10
    3f12:	0e c0       	rjmp	.+28     	; 0x3f30 <LCD_vidDisplayStringLeftShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3f14:	88 89       	ldd	r24, Y+16	; 0x10
    3f16:	28 2f       	mov	r18, r24
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	89 89       	ldd	r24, Y+17	; 0x11
    3f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f1e:	fc 01       	movw	r30, r24
    3f20:	e2 0f       	add	r30, r18
    3f22:	f3 1f       	adc	r31, r19
    3f24:	80 81       	ld	r24, Z
    3f26:	0e 94 0c 1c 	call	0x3818	; 0x3818 <LCD_vidWriteData>
	LCD_vidWriteCmd(0b11000000);
}
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3f2a:	88 89       	ldd	r24, Y+16	; 0x10
    3f2c:	8f 5f       	subi	r24, 0xFF	; 255
    3f2e:	88 8b       	std	Y+16, r24	; 0x10
    3f30:	88 89       	ldd	r24, Y+16	; 0x10
    3f32:	28 2f       	mov	r18, r24
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	89 89       	ldd	r24, Y+17	; 0x11
    3f38:	9a 89       	ldd	r25, Y+18	; 0x12
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	e2 0f       	add	r30, r18
    3f3e:	f3 1f       	adc	r31, r19
    3f40:	80 81       	ld	r24, Z
    3f42:	88 23       	and	r24, r24
    3f44:	39 f7       	brne	.-50     	; 0x3f14 <LCD_vidDisplayStringLeftShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3f46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f48:	98 89       	ldd	r25, Y+16	; 0x10
    3f4a:	69 2f       	mov	r22, r25
    3f4c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <__udivmodqi4>
    3f50:	89 2f       	mov	r24, r25
    3f52:	80 31       	cpi	r24, 0x10	; 16
    3f54:	19 f4       	brne	.+6      	; 0x3f5c <LCD_vidDisplayStringLeftShift+0x66>
    3f56:	80 e8       	ldi	r24, 0x80	; 128
    3f58:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011000);
    3f5c:	88 e1       	ldi	r24, 0x18	; 24
    3f5e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	aa ef       	ldi	r26, 0xFA	; 250
    3f68:	b3 e4       	ldi	r27, 0x43	; 67
    3f6a:	8b 87       	std	Y+11, r24	; 0x0b
    3f6c:	9c 87       	std	Y+12, r25	; 0x0c
    3f6e:	ad 87       	std	Y+13, r26	; 0x0d
    3f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	4a ef       	ldi	r20, 0xFA	; 250
    3f80:	54 e4       	ldi	r21, 0x44	; 68
    3f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	8f 83       	std	Y+7, r24	; 0x07
    3f8c:	98 87       	std	Y+8, r25	; 0x08
    3f8e:	a9 87       	std	Y+9, r26	; 0x09
    3f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f92:	6f 81       	ldd	r22, Y+7	; 0x07
    3f94:	78 85       	ldd	r23, Y+8	; 0x08
    3f96:	89 85       	ldd	r24, Y+9	; 0x09
    3f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	40 e8       	ldi	r20, 0x80	; 128
    3fa0:	5f e3       	ldi	r21, 0x3F	; 63
    3fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fa6:	88 23       	and	r24, r24
    3fa8:	2c f4       	brge	.+10     	; 0x3fb4 <LCD_vidDisplayStringLeftShift+0xbe>
		__ticks = 1;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
    3fb2:	3f c0       	rjmp	.+126    	; 0x4032 <LCD_vidDisplayStringLeftShift+0x13c>
	else if (__tmp > 65535)
    3fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb6:	78 85       	ldd	r23, Y+8	; 0x08
    3fb8:	89 85       	ldd	r24, Y+9	; 0x09
    3fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	3f ef       	ldi	r19, 0xFF	; 255
    3fc0:	4f e7       	ldi	r20, 0x7F	; 127
    3fc2:	57 e4       	ldi	r21, 0x47	; 71
    3fc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fc8:	18 16       	cp	r1, r24
    3fca:	4c f5       	brge	.+82     	; 0x401e <LCD_vidDisplayStringLeftShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e2       	ldi	r20, 0x20	; 32
    3fda:	51 e4       	ldi	r21, 0x41	; 65
    3fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	9e 83       	std	Y+6, r25	; 0x06
    3ff2:	8d 83       	std	Y+5, r24	; 0x05
    3ff4:	0f c0       	rjmp	.+30     	; 0x4014 <LCD_vidDisplayStringLeftShift+0x11e>
    3ff6:	88 ec       	ldi	r24, 0xC8	; 200
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	9c 83       	std	Y+4, r25	; 0x04
    3ffc:	8b 83       	std	Y+3, r24	; 0x03
    3ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    4000:	9c 81       	ldd	r25, Y+4	; 0x04
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	f1 f7       	brne	.-4      	; 0x4002 <LCD_vidDisplayStringLeftShift+0x10c>
    4006:	9c 83       	std	Y+4, r25	; 0x04
    4008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    400a:	8d 81       	ldd	r24, Y+5	; 0x05
    400c:	9e 81       	ldd	r25, Y+6	; 0x06
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	9e 83       	std	Y+6, r25	; 0x06
    4012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4014:	8d 81       	ldd	r24, Y+5	; 0x05
    4016:	9e 81       	ldd	r25, Y+6	; 0x06
    4018:	00 97       	sbiw	r24, 0x00	; 0
    401a:	69 f7       	brne	.-38     	; 0x3ff6 <LCD_vidDisplayStringLeftShift+0x100>
    401c:	14 c0       	rjmp	.+40     	; 0x4046 <LCD_vidDisplayStringLeftShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    401e:	6f 81       	ldd	r22, Y+7	; 0x07
    4020:	78 85       	ldd	r23, Y+8	; 0x08
    4022:	89 85       	ldd	r24, Y+9	; 0x09
    4024:	9a 85       	ldd	r25, Y+10	; 0x0a
    4026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402a:	dc 01       	movw	r26, r24
    402c:	cb 01       	movw	r24, r22
    402e:	9e 83       	std	Y+6, r25	; 0x06
    4030:	8d 83       	std	Y+5, r24	; 0x05
    4032:	8d 81       	ldd	r24, Y+5	; 0x05
    4034:	9e 81       	ldd	r25, Y+6	; 0x06
    4036:	9a 83       	std	Y+2, r25	; 0x02
    4038:	89 83       	std	Y+1, r24	; 0x01
    403a:	89 81       	ldd	r24, Y+1	; 0x01
    403c:	9a 81       	ldd	r25, Y+2	; 0x02
    403e:	01 97       	sbiw	r24, 0x01	; 1
    4040:	f1 f7       	brne	.-4      	; 0x403e <LCD_vidDisplayStringLeftShift+0x148>
    4042:	9a 83       	std	Y+2, r25	; 0x02
    4044:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    4046:	8f 85       	ldd	r24, Y+15	; 0x0f
    4048:	8f 5f       	subi	r24, 0xFF	; 255
    404a:	8f 87       	std	Y+15, r24	; 0x0f
    404c:	7c cf       	rjmp	.-264    	; 0x3f46 <LCD_vidDisplayStringLeftShift+0x50>

0000404e <LCD_vidDisplayStringRightShift>:
	}
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	62 97       	sbiw	r28, 0x12	; 18
    4058:	0f b6       	in	r0, 0x3f	; 63
    405a:	f8 94       	cli
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	cd bf       	out	0x3d, r28	; 61
    4062:	9a 8b       	std	Y+18, r25	; 0x12
    4064:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    4066:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    4068:	18 8a       	std	Y+16, r1	; 0x10
    406a:	0e c0       	rjmp	.+28     	; 0x4088 <LCD_vidDisplayStringRightShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    406c:	88 89       	ldd	r24, Y+16	; 0x10
    406e:	28 2f       	mov	r18, r24
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	89 89       	ldd	r24, Y+17	; 0x11
    4074:	9a 89       	ldd	r25, Y+18	; 0x12
    4076:	fc 01       	movw	r30, r24
    4078:	e2 0f       	add	r30, r18
    407a:	f3 1f       	adc	r31, r19
    407c:	80 81       	ld	r24, Z
    407e:	0e 94 0c 1c 	call	0x3818	; 0x3818 <LCD_vidWriteData>
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    4082:	88 89       	ldd	r24, Y+16	; 0x10
    4084:	8f 5f       	subi	r24, 0xFF	; 255
    4086:	88 8b       	std	Y+16, r24	; 0x10
    4088:	88 89       	ldd	r24, Y+16	; 0x10
    408a:	28 2f       	mov	r18, r24
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	89 89       	ldd	r24, Y+17	; 0x11
    4090:	9a 89       	ldd	r25, Y+18	; 0x12
    4092:	fc 01       	movw	r30, r24
    4094:	e2 0f       	add	r30, r18
    4096:	f3 1f       	adc	r31, r19
    4098:	80 81       	ld	r24, Z
    409a:	88 23       	and	r24, r24
    409c:	39 f7       	brne	.-50     	; 0x406c <LCD_vidDisplayStringRightShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    409e:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a0:	98 89       	ldd	r25, Y+16	; 0x10
    40a2:	69 2f       	mov	r22, r25
    40a4:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <__udivmodqi4>
    40a8:	89 2f       	mov	r24, r25
    40aa:	80 31       	cpi	r24, 0x10	; 16
    40ac:	19 f4       	brne	.+6      	; 0x40b4 <LCD_vidDisplayStringRightShift+0x66>
    40ae:	80 e8       	ldi	r24, 0x80	; 128
    40b0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011100);
    40b4:	8c e1       	ldi	r24, 0x1C	; 28
    40b6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	aa ef       	ldi	r26, 0xFA	; 250
    40c0:	b3 e4       	ldi	r27, 0x43	; 67
    40c2:	8b 87       	std	Y+11, r24	; 0x0b
    40c4:	9c 87       	std	Y+12, r25	; 0x0c
    40c6:	ad 87       	std	Y+13, r26	; 0x0d
    40c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    40cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    40d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	4a ef       	ldi	r20, 0xFA	; 250
    40d8:	54 e4       	ldi	r21, 0x44	; 68
    40da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	8f 83       	std	Y+7, r24	; 0x07
    40e4:	98 87       	std	Y+8, r25	; 0x08
    40e6:	a9 87       	std	Y+9, r26	; 0x09
    40e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40ea:	6f 81       	ldd	r22, Y+7	; 0x07
    40ec:	78 85       	ldd	r23, Y+8	; 0x08
    40ee:	89 85       	ldd	r24, Y+9	; 0x09
    40f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	40 e8       	ldi	r20, 0x80	; 128
    40f8:	5f e3       	ldi	r21, 0x3F	; 63
    40fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40fe:	88 23       	and	r24, r24
    4100:	2c f4       	brge	.+10     	; 0x410c <LCD_vidDisplayStringRightShift+0xbe>
		__ticks = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	9e 83       	std	Y+6, r25	; 0x06
    4108:	8d 83       	std	Y+5, r24	; 0x05
    410a:	3f c0       	rjmp	.+126    	; 0x418a <LCD_vidDisplayStringRightShift+0x13c>
	else if (__tmp > 65535)
    410c:	6f 81       	ldd	r22, Y+7	; 0x07
    410e:	78 85       	ldd	r23, Y+8	; 0x08
    4110:	89 85       	ldd	r24, Y+9	; 0x09
    4112:	9a 85       	ldd	r25, Y+10	; 0x0a
    4114:	20 e0       	ldi	r18, 0x00	; 0
    4116:	3f ef       	ldi	r19, 0xFF	; 255
    4118:	4f e7       	ldi	r20, 0x7F	; 127
    411a:	57 e4       	ldi	r21, 0x47	; 71
    411c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4120:	18 16       	cp	r1, r24
    4122:	4c f5       	brge	.+82     	; 0x4176 <LCD_vidDisplayStringRightShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4124:	6b 85       	ldd	r22, Y+11	; 0x0b
    4126:	7c 85       	ldd	r23, Y+12	; 0x0c
    4128:	8d 85       	ldd	r24, Y+13	; 0x0d
    412a:	9e 85       	ldd	r25, Y+14	; 0x0e
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e2       	ldi	r20, 0x20	; 32
    4132:	51 e4       	ldi	r21, 0x41	; 65
    4134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4138:	dc 01       	movw	r26, r24
    413a:	cb 01       	movw	r24, r22
    413c:	bc 01       	movw	r22, r24
    413e:	cd 01       	movw	r24, r26
    4140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4144:	dc 01       	movw	r26, r24
    4146:	cb 01       	movw	r24, r22
    4148:	9e 83       	std	Y+6, r25	; 0x06
    414a:	8d 83       	std	Y+5, r24	; 0x05
    414c:	0f c0       	rjmp	.+30     	; 0x416c <LCD_vidDisplayStringRightShift+0x11e>
    414e:	88 ec       	ldi	r24, 0xC8	; 200
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	9c 83       	std	Y+4, r25	; 0x04
    4154:	8b 83       	std	Y+3, r24	; 0x03
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	9c 81       	ldd	r25, Y+4	; 0x04
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	f1 f7       	brne	.-4      	; 0x415a <LCD_vidDisplayStringRightShift+0x10c>
    415e:	9c 83       	std	Y+4, r25	; 0x04
    4160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4162:	8d 81       	ldd	r24, Y+5	; 0x05
    4164:	9e 81       	ldd	r25, Y+6	; 0x06
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416c:	8d 81       	ldd	r24, Y+5	; 0x05
    416e:	9e 81       	ldd	r25, Y+6	; 0x06
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	69 f7       	brne	.-38     	; 0x414e <LCD_vidDisplayStringRightShift+0x100>
    4174:	14 c0       	rjmp	.+40     	; 0x419e <LCD_vidDisplayStringRightShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4176:	6f 81       	ldd	r22, Y+7	; 0x07
    4178:	78 85       	ldd	r23, Y+8	; 0x08
    417a:	89 85       	ldd	r24, Y+9	; 0x09
    417c:	9a 85       	ldd	r25, Y+10	; 0x0a
    417e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	f1 f7       	brne	.-4      	; 0x4196 <LCD_vidDisplayStringRightShift+0x148>
    419a:	9a 83       	std	Y+2, r25	; 0x02
    419c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    419e:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a0:	8f 5f       	subi	r24, 0xFF	; 255
    41a2:	8f 87       	std	Y+15, r24	; 0x0f
    41a4:	7c cf       	rjmp	.-264    	; 0x409e <LCD_vidDisplayStringRightShift+0x50>

000041a6 <LCD_vidClearDisplay>:
	}
}

void LCD_vidClearDisplay()
{
    41a6:	df 93       	push	r29
    41a8:	cf 93       	push	r28
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b00000001);
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
}
    41b4:	cf 91       	pop	r28
    41b6:	df 91       	pop	r29
    41b8:	08 95       	ret

000041ba <LCD_vidGoTo>:

void LCD_vidGoTo(uint8_t x,uint8_t y)
{
    41ba:	df 93       	push	r29
    41bc:	cf 93       	push	r28
    41be:	00 d0       	rcall	.+0      	; 0x41c0 <LCD_vidGoTo+0x6>
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	89 83       	std	Y+1, r24	; 0x01
    41c6:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1&&y<=39)LCD_vidWriteCmd((0b10000000+y));
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	81 30       	cpi	r24, 0x01	; 1
    41cc:	41 f4       	brne	.+16     	; 0x41de <LCD_vidGoTo+0x24>
    41ce:	8a 81       	ldd	r24, Y+2	; 0x02
    41d0:	88 32       	cpi	r24, 0x28	; 40
    41d2:	28 f4       	brcc	.+10     	; 0x41de <LCD_vidGoTo+0x24>
    41d4:	8a 81       	ldd	r24, Y+2	; 0x02
    41d6:	80 58       	subi	r24, 0x80	; 128
    41d8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <LCD_vidGoTo+0x42>
	else if(x==2&&(y+64)<103) LCD_vidWriteCmd((0b11000000+y));
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	82 30       	cpi	r24, 0x02	; 2
    41e2:	61 f4       	brne	.+24     	; 0x41fc <LCD_vidGoTo+0x42>
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	88 2f       	mov	r24, r24
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	80 5c       	subi	r24, 0xC0	; 192
    41ec:	9f 4f       	sbci	r25, 0xFF	; 255
    41ee:	87 36       	cpi	r24, 0x67	; 103
    41f0:	91 05       	cpc	r25, r1
    41f2:	24 f4       	brge	.+8      	; 0x41fc <LCD_vidGoTo+0x42>
    41f4:	8a 81       	ldd	r24, Y+2	; 0x02
    41f6:	80 54       	subi	r24, 0x40	; 64
    41f8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
}
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	cf 91       	pop	r28
    4202:	df 91       	pop	r29
    4204:	08 95       	ret

00004206 <LCD_vidSetCursor>:

void LCD_vidSetCursor(uint8_t x,uint8_t y)
{
    4206:	df 93       	push	r29
    4208:	cf 93       	push	r28
    420a:	00 d0       	rcall	.+0      	; 0x420c <LCD_vidSetCursor+0x6>
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	89 83       	std	Y+1, r24	; 0x01
    4212:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vidGoTo(x,y);
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	6a 81       	ldd	r22, Y+2	; 0x02
    4218:	0e 94 dd 20 	call	0x41ba	; 0x41ba <LCD_vidGoTo>
	LCD_vidWriteCmd(0b00001111);
    421c:	8f e0       	ldi	r24, 0x0F	; 15
    421e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
}
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	cf 91       	pop	r28
    4228:	df 91       	pop	r29
    422a:	08 95       	ret

0000422c <LCD_vidWriteInteger>:

void LCD_vidWriteInteger(uint16_ number)
{
    422c:	df 93       	push	r29
    422e:	cf 93       	push	r28
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	28 97       	sbiw	r28, 0x08	; 8
    4236:	0f b6       	in	r0, 0x3f	; 63
    4238:	f8 94       	cli
    423a:	de bf       	out	0x3e, r29	; 62
    423c:	0f be       	out	0x3f, r0	; 63
    423e:	cd bf       	out	0x3d, r28	; 61
    4240:	98 87       	std	Y+8, r25	; 0x08
    4242:	8f 83       	std	Y+7, r24	; 0x07
	uint16_ num_mask=number,p=1;
    4244:	8f 81       	ldd	r24, Y+7	; 0x07
    4246:	98 85       	ldd	r25, Y+8	; 0x08
    4248:	9e 83       	std	Y+6, r25	; 0x06
    424a:	8d 83       	std	Y+5, r24	; 0x05
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	9c 83       	std	Y+4, r25	; 0x04
    4252:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i=0;
    4254:	1a 82       	std	Y+2, r1	; 0x02
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
    4256:	8d 81       	ldd	r24, Y+5	; 0x05
    4258:	9e 81       	ldd	r25, Y+6	; 0x06
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	f9 f4       	brne	.+62     	; 0x429c <LCD_vidWriteInteger+0x70>
    425e:	80 e3       	ldi	r24, 0x30	; 48
    4260:	0e 94 0c 1c 	call	0x3818	; 0x3818 <LCD_vidWriteData>
    4264:	1b c0       	rjmp	.+54     	; 0x429c <LCD_vidWriteInteger+0x70>
	for(;num_mask!=0;i++)
	{
		num_mask/=10;
    4266:	8d 81       	ldd	r24, Y+5	; 0x05
    4268:	9e 81       	ldd	r25, Y+6	; 0x06
    426a:	2a e0       	ldi	r18, 0x0A	; 10
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	b9 01       	movw	r22, r18
    4270:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__udivmodhi4>
    4274:	cb 01       	movw	r24, r22
    4276:	9e 83       	std	Y+6, r25	; 0x06
    4278:	8d 83       	std	Y+5, r24	; 0x05
		p*=10;
    427a:	8b 81       	ldd	r24, Y+3	; 0x03
    427c:	9c 81       	ldd	r25, Y+4	; 0x04
    427e:	9c 01       	movw	r18, r24
    4280:	22 0f       	add	r18, r18
    4282:	33 1f       	adc	r19, r19
    4284:	c9 01       	movw	r24, r18
    4286:	88 0f       	add	r24, r24
    4288:	99 1f       	adc	r25, r25
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	82 0f       	add	r24, r18
    4290:	93 1f       	adc	r25, r19
    4292:	9c 83       	std	Y+4, r25	; 0x04
    4294:	8b 83       	std	Y+3, r24	; 0x03
{
	uint16_ num_mask=number,p=1;
	uint8_t i=0;
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
	for(;num_mask!=0;i++)
    4296:	8a 81       	ldd	r24, Y+2	; 0x02
    4298:	8f 5f       	subi	r24, 0xFF	; 255
    429a:	8a 83       	std	Y+2, r24	; 0x02
    429c:	8d 81       	ldd	r24, Y+5	; 0x05
    429e:	9e 81       	ldd	r25, Y+6	; 0x06
    42a0:	00 97       	sbiw	r24, 0x00	; 0
    42a2:	09 f7       	brne	.-62     	; 0x4266 <LCD_vidWriteInteger+0x3a>
	{
		num_mask/=10;
		p*=10;
	}

	p/=10;
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	9c 81       	ldd	r25, Y+4	; 0x04
    42a8:	2a e0       	ldi	r18, 0x0A	; 10
    42aa:	30 e0       	ldi	r19, 0x00	; 0
    42ac:	b9 01       	movw	r22, r18
    42ae:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__udivmodhi4>
    42b2:	cb 01       	movw	r24, r22
    42b4:	9c 83       	std	Y+4, r25	; 0x04
    42b6:	8b 83       	std	Y+3, r24	; 0x03
	nxtl = i - 16;
    42b8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ba:	80 51       	subi	r24, 0x10	; 16
    42bc:	89 83       	std	Y+1, r24	; 0x01
	if(nxtl < 0) nxtl =0;
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	88 23       	and	r24, r24
    42c2:	0c f0       	brlt	.+2      	; 0x42c6 <LCD_vidWriteInteger+0x9a>
    42c4:	3e c0       	rjmp	.+124    	; 0x4342 <LCD_vidWriteInteger+0x116>
    42c6:	19 82       	std	Y+1, r1	; 0x01
    42c8:	3c c0       	rjmp	.+120    	; 0x4342 <LCD_vidWriteInteger+0x116>
	for(;i>0;i--)
	{
		if(i==nxtl)LCD_vidWriteCmd(0b11000000);
    42ca:	8a 81       	ldd	r24, Y+2	; 0x02
    42cc:	28 2f       	mov	r18, r24
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	99 27       	eor	r25, r25
    42d4:	87 fd       	sbrc	r24, 7
    42d6:	90 95       	com	r25
    42d8:	28 17       	cp	r18, r24
    42da:	39 07       	cpc	r19, r25
    42dc:	19 f4       	brne	.+6      	; 0x42e4 <LCD_vidWriteInteger+0xb8>
    42de:	80 ec       	ldi	r24, 0xC0	; 192
    42e0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <LCD_vidWriteCmd>
		num_mask= (uint8_t)(number/p);
    42e4:	8f 81       	ldd	r24, Y+7	; 0x07
    42e6:	98 85       	ldd	r25, Y+8	; 0x08
    42e8:	2b 81       	ldd	r18, Y+3	; 0x03
    42ea:	3c 81       	ldd	r19, Y+4	; 0x04
    42ec:	b9 01       	movw	r22, r18
    42ee:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__udivmodhi4>
    42f2:	cb 01       	movw	r24, r22
    42f4:	88 2f       	mov	r24, r24
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	9e 83       	std	Y+6, r25	; 0x06
    42fa:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData((uint8_t)'0'+num_mask);
    42fc:	8d 81       	ldd	r24, Y+5	; 0x05
    42fe:	80 5d       	subi	r24, 0xD0	; 208
    4300:	0e 94 0c 1c 	call	0x3818	; 0x3818 <LCD_vidWriteData>
		number -= num_mask*p;
    4304:	2d 81       	ldd	r18, Y+5	; 0x05
    4306:	3e 81       	ldd	r19, Y+6	; 0x06
    4308:	8b 81       	ldd	r24, Y+3	; 0x03
    430a:	9c 81       	ldd	r25, Y+4	; 0x04
    430c:	a9 01       	movw	r20, r18
    430e:	48 9f       	mul	r20, r24
    4310:	90 01       	movw	r18, r0
    4312:	49 9f       	mul	r20, r25
    4314:	30 0d       	add	r19, r0
    4316:	58 9f       	mul	r21, r24
    4318:	30 0d       	add	r19, r0
    431a:	11 24       	eor	r1, r1
    431c:	8f 81       	ldd	r24, Y+7	; 0x07
    431e:	98 85       	ldd	r25, Y+8	; 0x08
    4320:	82 1b       	sub	r24, r18
    4322:	93 0b       	sbc	r25, r19
    4324:	98 87       	std	Y+8, r25	; 0x08
    4326:	8f 83       	std	Y+7, r24	; 0x07
		p/=10;
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	9c 81       	ldd	r25, Y+4	; 0x04
    432c:	2a e0       	ldi	r18, 0x0A	; 10
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	b9 01       	movw	r22, r18
    4332:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__udivmodhi4>
    4336:	cb 01       	movw	r24, r22
    4338:	9c 83       	std	Y+4, r25	; 0x04
    433a:	8b 83       	std	Y+3, r24	; 0x03
	}

	p/=10;
	nxtl = i - 16;
	if(nxtl < 0) nxtl =0;
	for(;i>0;i--)
    433c:	8a 81       	ldd	r24, Y+2	; 0x02
    433e:	81 50       	subi	r24, 0x01	; 1
    4340:	8a 83       	std	Y+2, r24	; 0x02
    4342:	8a 81       	ldd	r24, Y+2	; 0x02
    4344:	88 23       	and	r24, r24
    4346:	09 f6       	brne	.-126    	; 0x42ca <LCD_vidWriteInteger+0x9e>
		num_mask= (uint8_t)(number/p);
		LCD_vidWriteData((uint8_t)'0'+num_mask);
		number -= num_mask*p;
		p/=10;
	}
}
    4348:	28 96       	adiw	r28, 0x08	; 8
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	cf 91       	pop	r28
    4356:	df 91       	pop	r29
    4358:	08 95       	ret

0000435a <FLEX_vidFlexInit>:
#include"../../mcal/adc_driver/adc_int.h"
#include"flex_sensor_int.h"


void FLEX_vidFlexInit(uint8_t sensor_pin)
{
    435a:	df 93       	push	r29
    435c:	cf 93       	push	r28
    435e:	0f 92       	push	r0
    4360:	cd b7       	in	r28, 0x3d	; 61
    4362:	de b7       	in	r29, 0x3e	; 62
    4364:	89 83       	std	Y+1, r24	; 0x01

	ADC_vidAdcInit(AREF_VOLTAGE);
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <ADC_vidAdcInit>
	ADC_vidAdcPinInit(sensor_pin);
    436c:	89 81       	ldd	r24, Y+1	; 0x01
    436e:	0e 94 75 12 	call	0x24ea	; 0x24ea <ADC_vidAdcPinInit>

}
    4372:	0f 90       	pop	r0
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	08 95       	ret

0000437a <FLEX_vidGetFlexRead>:

void FLEX_vidGetFlexRead(uint16_* sensor_read, uint8_t sensor_pin)
{
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	00 d0       	rcall	.+0      	; 0x4380 <FLEX_vidGetFlexRead+0x6>
    4380:	0f 92       	push	r0
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	9a 83       	std	Y+2, r25	; 0x02
    4388:	89 83       	std	Y+1, r24	; 0x01
    438a:	6b 83       	std	Y+3, r22	; 0x03
	ADC_vidSetReadingVariable(sensor_read);
    438c:	89 81       	ldd	r24, Y+1	; 0x01
    438e:	9a 81       	ldd	r25, Y+2	; 0x02
    4390:	0e 94 fd 12 	call	0x25fa	; 0x25fa <ADC_vidSetReadingVariable>
	ADC_vidAdcGetRead(sensor_pin);
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	0e 94 bd 12 	call	0x257a	; 0x257a <ADC_vidAdcGetRead>
}
    439a:	0f 90       	pop	r0
    439c:	0f 90       	pop	r0
    439e:	0f 90       	pop	r0
    43a0:	cf 91       	pop	r28
    43a2:	df 91       	pop	r29
    43a4:	08 95       	ret

000043a6 <FLEX_vidSetCallBack>:

void FLEX_vidSetCallBack(void (*func)(void))
{
    43a6:	df 93       	push	r29
    43a8:	cf 93       	push	r28
    43aa:	00 d0       	rcall	.+0      	; 0x43ac <FLEX_vidSetCallBack+0x6>
    43ac:	cd b7       	in	r28, 0x3d	; 61
    43ae:	de b7       	in	r29, 0x3e	; 62
    43b0:	9a 83       	std	Y+2, r25	; 0x02
    43b2:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetCallBack(func);
    43b4:	89 81       	ldd	r24, Y+1	; 0x01
    43b6:	9a 81       	ldd	r25, Y+2	; 0x02
    43b8:	0e 94 0f 13 	call	0x261e	; 0x261e <ADC_vidSetCallBack>
}
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	cf 91       	pop	r28
    43c2:	df 91       	pop	r29
    43c4:	08 95       	ret

000043c6 <M16P_vidInit>:

static uint8_t send_buf[SERIAL_BUFF_SIZE] = {0x7E, 0xFF, 06, 00, 00, 00, 00, 00, 00, 0xEF};
static uint8_t recv_buf[SERIAL_BUFF_SIZE];
static uint8_t is_reply = 0;

void M16P_vidInit(uint16_ baud) {
    43c6:	df 93       	push	r29
    43c8:	cf 93       	push	r28
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <M16P_vidInit+0x6>
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	9a 83       	std	Y+2, r25	; 0x02
    43d2:	89 83       	std	Y+1, r24	; 0x01
    is_reply = 0;
    43d4:	10 92 2c 04 	sts	0x042C, r1
    UART_Init(baud);
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	9a 81       	ldd	r25, Y+2	; 0x02
    43dc:	0e 94 cb 14 	call	0x2996	; 0x2996 <UART_Init>
}
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <M16P_vidSetReply>:

void M16P_vidSetReply(uint8_t state) {
    43ea:	df 93       	push	r29
    43ec:	cf 93       	push	r28
    43ee:	0f 92       	push	r0
    43f0:	cd b7       	in	r28, 0x3d	; 61
    43f2:	de b7       	in	r29, 0x3e	; 62
    43f4:	89 83       	std	Y+1, r24	; 0x01
    is_reply = state;
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	80 93 2c 04 	sts	0x042C, r24
    send_buf[4] = is_reply;
    43fc:	80 91 2c 04 	lds	r24, 0x042C
    4400:	80 93 0d 04 	sts	0x040D, r24
}
    4404:	0f 90       	pop	r0
    4406:	cf 91       	pop	r28
    4408:	df 91       	pop	r29
    440a:	08 95       	ret

0000440c <M16P_vidFillBufUint16>:

static void M16P_vidFillBufUint16(uint8_t *thebuf, uint16_ data) {
    440c:	df 93       	push	r29
    440e:	cf 93       	push	r28
    4410:	00 d0       	rcall	.+0      	; 0x4412 <M16P_vidFillBufUint16+0x6>
    4412:	00 d0       	rcall	.+0      	; 0x4414 <M16P_vidFillBufUint16+0x8>
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	9a 83       	std	Y+2, r25	; 0x02
    441a:	89 83       	std	Y+1, r24	; 0x01
    441c:	7c 83       	std	Y+4, r23	; 0x04
    441e:	6b 83       	std	Y+3, r22	; 0x03
    *thebuf = (uint8_t)(data >> 8);
    4420:	8b 81       	ldd	r24, Y+3	; 0x03
    4422:	9c 81       	ldd	r25, Y+4	; 0x04
    4424:	89 2f       	mov	r24, r25
    4426:	99 27       	eor	r25, r25
    4428:	e9 81       	ldd	r30, Y+1	; 0x01
    442a:	fa 81       	ldd	r31, Y+2	; 0x02
    442c:	80 83       	st	Z, r24
    *(thebuf + 1) = (uint8_t)data;
    442e:	89 81       	ldd	r24, Y+1	; 0x01
    4430:	9a 81       	ldd	r25, Y+2	; 0x02
    4432:	fc 01       	movw	r30, r24
    4434:	31 96       	adiw	r30, 0x01	; 1
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	80 83       	st	Z, r24
}
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	cf 91       	pop	r28
    4444:	df 91       	pop	r29
    4446:	08 95       	ret

00004448 <M16P_Uu16GetCheckSum>:

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	00 d0       	rcall	.+0      	; 0x444e <M16P_Uu16GetCheckSum+0x6>
    444e:	00 d0       	rcall	.+0      	; 0x4450 <M16P_Uu16GetCheckSum+0x8>
    4450:	00 d0       	rcall	.+0      	; 0x4452 <M16P_Uu16GetCheckSum+0xa>
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	9e 83       	std	Y+6, r25	; 0x06
    4458:	8d 83       	std	Y+5, r24	; 0x05
    uint16_ sum = 0;
    445a:	1c 82       	std	Y+4, r1	; 0x04
    445c:	1b 82       	std	Y+3, r1	; 0x03
    for (int i = 1; i < 7; i++) {
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	9a 83       	std	Y+2, r25	; 0x02
    4464:	89 83       	std	Y+1, r24	; 0x01
    4466:	15 c0       	rjmp	.+42     	; 0x4492 <M16P_Uu16GetCheckSum+0x4a>
        sum += thebuf[i];
    4468:	29 81       	ldd	r18, Y+1	; 0x01
    446a:	3a 81       	ldd	r19, Y+2	; 0x02
    446c:	8d 81       	ldd	r24, Y+5	; 0x05
    446e:	9e 81       	ldd	r25, Y+6	; 0x06
    4470:	fc 01       	movw	r30, r24
    4472:	e2 0f       	add	r30, r18
    4474:	f3 1f       	adc	r31, r19
    4476:	80 81       	ld	r24, Z
    4478:	28 2f       	mov	r18, r24
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	82 0f       	add	r24, r18
    4482:	93 1f       	adc	r25, r19
    4484:	9c 83       	std	Y+4, r25	; 0x04
    4486:	8b 83       	std	Y+3, r24	; 0x03
    *(thebuf + 1) = (uint8_t)data;
}

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    uint16_ sum = 0;
    for (int i = 1; i < 7; i++) {
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	9a 81       	ldd	r25, Y+2	; 0x02
    448c:	01 96       	adiw	r24, 0x01	; 1
    448e:	9a 83       	std	Y+2, r25	; 0x02
    4490:	89 83       	std	Y+1, r24	; 0x01
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	9a 81       	ldd	r25, Y+2	; 0x02
    4496:	87 30       	cpi	r24, 0x07	; 7
    4498:	91 05       	cpc	r25, r1
    449a:	34 f3       	brlt	.-52     	; 0x4468 <M16P_Uu16GetCheckSum+0x20>
        sum += thebuf[i];
    }
    return -sum;
    449c:	8b 81       	ldd	r24, Y+3	; 0x03
    449e:	9c 81       	ldd	r25, Y+4	; 0x04
    44a0:	90 95       	com	r25
    44a2:	81 95       	neg	r24
    44a4:	9f 4f       	sbci	r25, 0xFF	; 255
}
    44a6:	26 96       	adiw	r28, 0x06	; 6
    44a8:	0f b6       	in	r0, 0x3f	; 63
    44aa:	f8 94       	cli
    44ac:	de bf       	out	0x3e, r29	; 62
    44ae:	0f be       	out	0x3f, r0	; 63
    44b0:	cd bf       	out	0x3d, r28	; 61
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <M16P_vidFillCheckSum>:

static void M16P_vidFillCheckSum() {
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	00 d0       	rcall	.+0      	; 0x44be <M16P_vidFillCheckSum+0x6>
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    44c2:	89 e0       	ldi	r24, 0x09	; 9
    44c4:	94 e0       	ldi	r25, 0x04	; 4
    44c6:	0e 94 24 22 	call	0x4448	; 0x4448 <M16P_Uu16GetCheckSum>
    44ca:	9a 83       	std	Y+2, r25	; 0x02
    44cc:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidFillBufUint16(send_buf + 7, checksum);
    44ce:	80 e1       	ldi	r24, 0x10	; 16
    44d0:	94 e0       	ldi	r25, 0x04	; 4
    44d2:	29 81       	ldd	r18, Y+1	; 0x01
    44d4:	3a 81       	ldd	r19, Y+2	; 0x02
    44d6:	b9 01       	movw	r22, r18
    44d8:	0e 94 06 22 	call	0x440c	; 0x440c <M16P_vidFillBufUint16>
}
    44dc:	0f 90       	pop	r0
    44de:	0f 90       	pop	r0
    44e0:	cf 91       	pop	r28
    44e2:	df 91       	pop	r29
    44e4:	08 95       	ret

000044e6 <M16P_vidSendFunc>:

static void M16P_vidSendFunc() {
    44e6:	df 93       	push	r29
    44e8:	cf 93       	push	r28
    44ea:	00 d0       	rcall	.+0      	; 0x44ec <M16P_vidSendFunc+0x6>
    44ec:	cd b7       	in	r28, 0x3d	; 61
    44ee:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    44f0:	1a 82       	std	Y+2, r1	; 0x02
    44f2:	19 82       	std	Y+1, r1	; 0x01
    44f4:	0d c0       	rjmp	.+26     	; 0x4510 <M16P_vidSendFunc+0x2a>
        UART_Transmit(send_buf[i]);
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	9a 81       	ldd	r25, Y+2	; 0x02
    44fa:	fc 01       	movw	r30, r24
    44fc:	e7 5f       	subi	r30, 0xF7	; 247
    44fe:	fb 4f       	sbci	r31, 0xFB	; 251
    4500:	80 81       	ld	r24, Z
    4502:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_Transmit>
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    M16P_vidFillBufUint16(send_buf + 7, checksum);
}

static void M16P_vidSendFunc() {
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    4506:	89 81       	ldd	r24, Y+1	; 0x01
    4508:	9a 81       	ldd	r25, Y+2	; 0x02
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	9a 81       	ldd	r25, Y+2	; 0x02
    4514:	8a 30       	cpi	r24, 0x0A	; 10
    4516:	91 05       	cpc	r25, r1
    4518:	74 f3       	brlt	.-36     	; 0x44f6 <M16P_vidSendFunc+0x10>
        UART_Transmit(send_buf[i]);
    }
}
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	08 95       	ret

00004524 <M16P_vidSendCmd>:

static void M16P_vidSendCmd(uint8_t cmd, uint16_ arg1, uint16_ arg2) {
    4524:	df 93       	push	r29
    4526:	cf 93       	push	r28
    4528:	00 d0       	rcall	.+0      	; 0x452a <M16P_vidSendCmd+0x6>
    452a:	00 d0       	rcall	.+0      	; 0x452c <M16P_vidSendCmd+0x8>
    452c:	0f 92       	push	r0
    452e:	cd b7       	in	r28, 0x3d	; 61
    4530:	de b7       	in	r29, 0x3e	; 62
    4532:	89 83       	std	Y+1, r24	; 0x01
    4534:	7b 83       	std	Y+3, r23	; 0x03
    4536:	6a 83       	std	Y+2, r22	; 0x02
    4538:	5d 83       	std	Y+5, r21	; 0x05
    453a:	4c 83       	std	Y+4, r20	; 0x04
    send_buf[3] = cmd;
    453c:	89 81       	ldd	r24, Y+1	; 0x01
    453e:	80 93 0c 04 	sts	0x040C, r24
    send_buf[5] = arg1;
    4542:	8a 81       	ldd	r24, Y+2	; 0x02
    4544:	80 93 0e 04 	sts	0x040E, r24
    send_buf[6] = arg2;
    4548:	8c 81       	ldd	r24, Y+4	; 0x04
    454a:	80 93 0f 04 	sts	0x040F, r24
    M16P_vidFillCheckSum();
    454e:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4552:	0e 94 73 22 	call	0x44e6	; 0x44e6 <M16P_vidSendFunc>
}
    4556:	0f 90       	pop	r0
    4558:	0f 90       	pop	r0
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	08 95       	ret

00004566 <M16P_vidSendCmdSingleArg>:

static void M16P_vidSendCmdSingleArg(uint8_t cmd, uint16_ arg) {
    4566:	df 93       	push	r29
    4568:	cf 93       	push	r28
    456a:	00 d0       	rcall	.+0      	; 0x456c <M16P_vidSendCmdSingleArg+0x6>
    456c:	0f 92       	push	r0
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	89 83       	std	Y+1, r24	; 0x01
    4574:	7b 83       	std	Y+3, r23	; 0x03
    4576:	6a 83       	std	Y+2, r22	; 0x02
    send_buf[3] = cmd;
    4578:	89 81       	ldd	r24, Y+1	; 0x01
    457a:	80 93 0c 04 	sts	0x040C, r24
    M16P_vidFillBufUint16((send_buf + 5), arg);
    457e:	8e e0       	ldi	r24, 0x0E	; 14
    4580:	94 e0       	ldi	r25, 0x04	; 4
    4582:	2a 81       	ldd	r18, Y+2	; 0x02
    4584:	3b 81       	ldd	r19, Y+3	; 0x03
    4586:	b9 01       	movw	r22, r18
    4588:	0e 94 06 22 	call	0x440c	; 0x440c <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    458c:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4590:	0e 94 73 22 	call	0x44e6	; 0x44e6 <M16P_vidSendFunc>
}
    4594:	0f 90       	pop	r0
    4596:	0f 90       	pop	r0
    4598:	0f 90       	pop	r0
    459a:	cf 91       	pop	r28
    459c:	df 91       	pop	r29
    459e:	08 95       	ret

000045a0 <M16P_vidSendCmdNoArg>:

static void M16P_vidSendCmdNoArg(uint8_t cmd) {
    45a0:	df 93       	push	r29
    45a2:	cf 93       	push	r28
    45a4:	0f 92       	push	r0
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	89 83       	std	Y+1, r24	; 0x01
    send_buf[3] = cmd;
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
    45ae:	80 93 0c 04 	sts	0x040C, r24
    M16P_vidFillBufUint16((send_buf + 5), 0);
    45b2:	8e e0       	ldi	r24, 0x0E	; 14
    45b4:	94 e0       	ldi	r25, 0x04	; 4
    45b6:	60 e0       	ldi	r22, 0x00	; 0
    45b8:	70 e0       	ldi	r23, 0x00	; 0
    45ba:	0e 94 06 22 	call	0x440c	; 0x440c <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    45be:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    45c2:	0e 94 73 22 	call	0x44e6	; 0x44e6 <M16P_vidSendFunc>
}
    45c6:	0f 90       	pop	r0
    45c8:	cf 91       	pop	r28
    45ca:	df 91       	pop	r29
    45cc:	08 95       	ret

000045ce <M16P_vidPlayTrack>:

void M16P_vidPlayTrack(uint16_ num) {
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	00 d0       	rcall	.+0      	; 0x45d4 <M16P_vidPlayTrack+0x6>
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	9a 83       	std	Y+2, r25	; 0x02
    45da:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x03, num);
    45dc:	29 81       	ldd	r18, Y+1	; 0x01
    45de:	3a 81       	ldd	r19, Y+2	; 0x02
    45e0:	83 e0       	ldi	r24, 0x03	; 3
    45e2:	b9 01       	movw	r22, r18
    45e4:	0e 94 b3 22 	call	0x4566	; 0x4566 <M16P_vidSendCmdSingleArg>
}
    45e8:	0f 90       	pop	r0
    45ea:	0f 90       	pop	r0
    45ec:	cf 91       	pop	r28
    45ee:	df 91       	pop	r29
    45f0:	08 95       	ret

000045f2 <M16P_vidNextTrack>:

void M16P_vidNextTrack() {
    45f2:	df 93       	push	r29
    45f4:	cf 93       	push	r28
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x01);
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    4600:	cf 91       	pop	r28
    4602:	df 91       	pop	r29
    4604:	08 95       	ret

00004606 <M16P_vidPreviousTrack>:

void M16P_vidPreviousTrack() {
    4606:	df 93       	push	r29
    4608:	cf 93       	push	r28
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x02);
    460e:	82 e0       	ldi	r24, 0x02	; 2
    4610:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    4614:	cf 91       	pop	r28
    4616:	df 91       	pop	r29
    4618:	08 95       	ret

0000461a <M16P_vidSetVolume>:

void M16P_vidSetVolume(uint16_ volume) {
    461a:	df 93       	push	r29
    461c:	cf 93       	push	r28
    461e:	00 d0       	rcall	.+0      	; 0x4620 <M16P_vidSetVolume+0x6>
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x06, volume);
    4628:	29 81       	ldd	r18, Y+1	; 0x01
    462a:	3a 81       	ldd	r19, Y+2	; 0x02
    462c:	86 e0       	ldi	r24, 0x06	; 6
    462e:	b9 01       	movw	r22, r18
    4630:	0e 94 b3 22 	call	0x4566	; 0x4566 <M16P_vidSendCmdSingleArg>
}
    4634:	0f 90       	pop	r0
    4636:	0f 90       	pop	r0
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	08 95       	ret

0000463e <M16P_vidSetEQ>:

void M16P_vidSetEQ(uint16_ eq) {
    463e:	df 93       	push	r29
    4640:	cf 93       	push	r28
    4642:	00 d0       	rcall	.+0      	; 0x4644 <M16P_vidSetEQ+0x6>
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	9a 83       	std	Y+2, r25	; 0x02
    464a:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x07, eq);
    464c:	29 81       	ldd	r18, Y+1	; 0x01
    464e:	3a 81       	ldd	r19, Y+2	; 0x02
    4650:	87 e0       	ldi	r24, 0x07	; 7
    4652:	b9 01       	movw	r22, r18
    4654:	0e 94 b3 22 	call	0x4566	; 0x4566 <M16P_vidSendCmdSingleArg>
}
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	cf 91       	pop	r28
    465e:	df 91       	pop	r29
    4660:	08 95       	ret

00004662 <M16P_vidSetPlaybackSource>:

void M16P_vidSetPlaybackSource(uint16_ device) {
    4662:	df 93       	push	r29
    4664:	cf 93       	push	r28
    4666:	00 d0       	rcall	.+0      	; 0x4668 <M16P_vidSetPlaybackSource+0x6>
    4668:	cd b7       	in	r28, 0x3d	; 61
    466a:	de b7       	in	r29, 0x3e	; 62
    466c:	9a 83       	std	Y+2, r25	; 0x02
    466e:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x09, device);
    4670:	29 81       	ldd	r18, Y+1	; 0x01
    4672:	3a 81       	ldd	r19, Y+2	; 0x02
    4674:	89 e0       	ldi	r24, 0x09	; 9
    4676:	b9 01       	movw	r22, r18
    4678:	0e 94 b3 22 	call	0x4566	; 0x4566 <M16P_vidSendCmdSingleArg>
}
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	cf 91       	pop	r28
    4682:	df 91       	pop	r29
    4684:	08 95       	ret

00004686 <M16P_vidSleep>:

void M16P_vidSleep() {
    4686:	df 93       	push	r29
    4688:	cf 93       	push	r28
    468a:	cd b7       	in	r28, 0x3d	; 61
    468c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0a);
    468e:	8a e0       	ldi	r24, 0x0A	; 10
    4690:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    4694:	cf 91       	pop	r28
    4696:	df 91       	pop	r29
    4698:	08 95       	ret

0000469a <M16P_vidReset>:

void M16P_vidReset() {
    469a:	df 93       	push	r29
    469c:	cf 93       	push	r28
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0c);
    46a2:	8c e0       	ldi	r24, 0x0C	; 12
    46a4:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    46a8:	cf 91       	pop	r28
    46aa:	df 91       	pop	r29
    46ac:	08 95       	ret

000046ae <M16P_vidPlayback>:

void M16P_vidPlayback() {
    46ae:	df 93       	push	r29
    46b0:	cf 93       	push	r28
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0d);
    46b6:	8d e0       	ldi	r24, 0x0D	; 13
    46b8:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    46bc:	cf 91       	pop	r28
    46be:	df 91       	pop	r29
    46c0:	08 95       	ret

000046c2 <M16P_vidPause>:

void M16P_vidPause() {
    46c2:	df 93       	push	r29
    46c4:	cf 93       	push	r28
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0e);
    46ca:	8e e0       	ldi	r24, 0x0E	; 14
    46cc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    46d0:	cf 91       	pop	r28
    46d2:	df 91       	pop	r29
    46d4:	08 95       	ret

000046d6 <M16P_vidPlayFileInFolder>:

void M16P_vidPlayFileInFolder(uint16_ folder, uint16_ file) {
    46d6:	df 93       	push	r29
    46d8:	cf 93       	push	r28
    46da:	00 d0       	rcall	.+0      	; 0x46dc <M16P_vidPlayFileInFolder+0x6>
    46dc:	00 d0       	rcall	.+0      	; 0x46de <M16P_vidPlayFileInFolder+0x8>
    46de:	cd b7       	in	r28, 0x3d	; 61
    46e0:	de b7       	in	r29, 0x3e	; 62
    46e2:	9a 83       	std	Y+2, r25	; 0x02
    46e4:	89 83       	std	Y+1, r24	; 0x01
    46e6:	7c 83       	std	Y+4, r23	; 0x04
    46e8:	6b 83       	std	Y+3, r22	; 0x03
    M16P_vidSendCmd(0x0f, folder, file);
    46ea:	29 81       	ldd	r18, Y+1	; 0x01
    46ec:	3a 81       	ldd	r19, Y+2	; 0x02
    46ee:	4b 81       	ldd	r20, Y+3	; 0x03
    46f0:	5c 81       	ldd	r21, Y+4	; 0x04
    46f2:	8f e0       	ldi	r24, 0x0F	; 15
    46f4:	b9 01       	movw	r22, r18
    46f6:	0e 94 92 22 	call	0x4524	; 0x4524 <M16P_vidSendCmd>
}
    46fa:	0f 90       	pop	r0
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	cf 91       	pop	r28
    4704:	df 91       	pop	r29
    4706:	08 95       	ret

00004708 <M16P_vidPlayByNumber>:

void M16P_vidPlayByNumber(uint16_ num) {
    4708:	df 93       	push	r29
    470a:	cf 93       	push	r28
    470c:	00 d0       	rcall	.+0      	; 0x470e <M16P_vidPlayByNumber+0x6>
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
    4712:	9a 83       	std	Y+2, r25	; 0x02
    4714:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x12, num);
    4716:	29 81       	ldd	r18, Y+1	; 0x01
    4718:	3a 81       	ldd	r19, Y+2	; 0x02
    471a:	82 e1       	ldi	r24, 0x12	; 18
    471c:	b9 01       	movw	r22, r18
    471e:	0e 94 b3 22 	call	0x4566	; 0x4566 <M16P_vidSendCmdSingleArg>
}
    4722:	0f 90       	pop	r0
    4724:	0f 90       	pop	r0
    4726:	cf 91       	pop	r28
    4728:	df 91       	pop	r29
    472a:	08 95       	ret

0000472c <M16P_vidGetState>:

/*---------------------------------------------------------------------------*/



void M16P_vidGetState() {
    472c:	df 93       	push	r29
    472e:	cf 93       	push	r28
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x42);
    4734:	82 e4       	ldi	r24, 0x42	; 66
    4736:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    473a:	cf 91       	pop	r28
    473c:	df 91       	pop	r29
    473e:	08 95       	ret

00004740 <M16P_vidGetVolume>:

void M16P_vidGetVolume() {
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x43);
    4748:	83 e4       	ldi	r24, 0x43	; 67
    474a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    474e:	cf 91       	pop	r28
    4750:	df 91       	pop	r29
    4752:	08 95       	ret

00004754 <M16P_vidGetUSum>:

void M16P_vidGetUSum() {
    4754:	df 93       	push	r29
    4756:	cf 93       	push	r28
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x47);
    475c:	87 e4       	ldi	r24, 0x47	; 71
    475e:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	08 95       	ret

00004768 <M16P_vidGetTFSum>:

void M16P_vidGetTFSum() {
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x48);
    4770:	88 e4       	ldi	r24, 0x48	; 72
    4772:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    4776:	cf 91       	pop	r28
    4778:	df 91       	pop	r29
    477a:	08 95       	ret

0000477c <M16P_vidGetFlashSum>:

void M16P_vidGetFlashSum() {
    477c:	df 93       	push	r29
    477e:	cf 93       	push	r28
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x49);
    4784:	89 e4       	ldi	r24, 0x49	; 73
    4786:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    478a:	cf 91       	pop	r28
    478c:	df 91       	pop	r29
    478e:	08 95       	ret

00004790 <M16P_vidGetTFCurrent>:

void M16P_vidGetTFCurrent() {
    4790:	df 93       	push	r29
    4792:	cf 93       	push	r28
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4c);
    4798:	8c e4       	ldi	r24, 0x4C	; 76
    479a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    479e:	cf 91       	pop	r28
    47a0:	df 91       	pop	r29
    47a2:	08 95       	ret

000047a4 <M16P_vidGetUCurrent>:

void M16P_vidGetUCurrent() {
    47a4:	df 93       	push	r29
    47a6:	cf 93       	push	r28
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4b);
    47ac:	8b e4       	ldi	r24, 0x4B	; 75
    47ae:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    47b2:	cf 91       	pop	r28
    47b4:	df 91       	pop	r29
    47b6:	08 95       	ret

000047b8 <M16P_vidGetFlashCurrent>:

void M16P_vidGetFlashCurrent() {
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4d);
    47c0:	8d e4       	ldi	r24, 0x4D	; 77
    47c2:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <M16P_vidSendCmdNoArg>
}
    47c6:	cf 91       	pop	r28
    47c8:	df 91       	pop	r29
    47ca:	08 95       	ret

000047cc <M16P_u8GetDataBuffer>:

uint8_t M16P_u8GetDataBuffer() {
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	df 93       	push	r29
    47d2:	cf 93       	push	r28
    47d4:	00 d0       	rcall	.+0      	; 0x47d6 <M16P_u8GetDataBuffer+0xa>
    47d6:	0f 92       	push	r0
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    if (UART_Receive() != 0x7E) {
    47dc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <UART_Receive>
    47e0:	8e 37       	cpi	r24, 0x7E	; 126
    47e2:	11 f0       	breq	.+4      	; 0x47e8 <M16P_u8GetDataBuffer+0x1c>
        return 0;
    47e4:	1b 82       	std	Y+3, r1	; 0x03
    47e6:	1c c0       	rjmp	.+56     	; 0x4820 <M16P_u8GetDataBuffer+0x54>
    }else{
    	recv_buf[0] = 0x7E;
    47e8:	8e e7       	ldi	r24, 0x7E	; 126
    47ea:	80 93 2d 04 	sts	0x042D, r24
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	9a 83       	std	Y+2, r25	; 0x02
    47f4:	89 83       	std	Y+1, r24	; 0x01
    47f6:	0d c0       	rjmp	.+26     	; 0x4812 <M16P_u8GetDataBuffer+0x46>
    		recv_buf[i] = UART_Receive();
    47f8:	09 81       	ldd	r16, Y+1	; 0x01
    47fa:	1a 81       	ldd	r17, Y+2	; 0x02
    47fc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <UART_Receive>
    4800:	f8 01       	movw	r30, r16
    4802:	e3 5d       	subi	r30, 0xD3	; 211
    4804:	fb 4f       	sbci	r31, 0xFB	; 251
    4806:	80 83       	st	Z, r24
uint8_t M16P_u8GetDataBuffer() {
    if (UART_Receive() != 0x7E) {
        return 0;
    }else{
    	recv_buf[0] = 0x7E;
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	9a 81       	ldd	r25, Y+2	; 0x02
    480c:	01 96       	adiw	r24, 0x01	; 1
    480e:	9a 83       	std	Y+2, r25	; 0x02
    4810:	89 83       	std	Y+1, r24	; 0x01
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	9a 81       	ldd	r25, Y+2	; 0x02
    4816:	8a 30       	cpi	r24, 0x0A	; 10
    4818:	91 05       	cpc	r25, r1
    481a:	74 f3       	brlt	.-36     	; 0x47f8 <M16P_u8GetDataBuffer+0x2c>
    		recv_buf[i] = UART_Receive();
    	}
    	return 1;
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	8b 83       	std	Y+3, r24	; 0x03
    4820:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    4822:	0f 90       	pop	r0
    4824:	0f 90       	pop	r0
    4826:	0f 90       	pop	r0
    4828:	cf 91       	pop	r28
    482a:	df 91       	pop	r29
    482c:	1f 91       	pop	r17
    482e:	0f 91       	pop	r16
    4830:	08 95       	ret

00004832 <main>:

extern uint16_ compare_cnt1;
void get_word();

int main()
{
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	00 d0       	rcall	.+0      	; 0x4838 <main+0x6>
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
	uint8_t compare_value;
	GLOVE_vidSensorsInit();
    4842:	0e 94 72 09 	call	0x12e4	; 0x12e4 <GLOVE_vidSensorsInit>
	SHOW_vidShowAndPlayInit(&ready_flag);
    4846:	87 e3       	ldi	r24, 0x37	; 55
    4848:	94 e0       	ldi	r25, 0x04	; 4
    484a:	0e 94 17 07 	call	0xe2e	; 0xe2e <SHOW_vidShowAndPlayInit>
	GLOVE_vidSetGloveParams(&sensor_reads[0],7);
    484e:	8b e5       	ldi	r24, 0x5B	; 91
    4850:	94 e0       	ldi	r25, 0x04	; 4
    4852:	67 e0       	ldi	r22, 0x07	; 7
    4854:	0e 94 86 09 	call	0x130c	; 0x130c <GLOVE_vidSetGloveParams>
	TIMER1_voidInit();
    4858:	0e 94 32 15 	call	0x2a64	; 0x2a64 <TIMER1_voidInit>
	TIMER1_voidGetNumCountCTC(1000, &compare_cnt1, &compare_value);
    485c:	29 e5       	ldi	r18, 0x59	; 89
    485e:	34 e0       	ldi	r19, 0x04	; 4
    4860:	ae 01       	movw	r20, r28
    4862:	4e 5f       	subi	r20, 0xFE	; 254
    4864:	5f 4f       	sbci	r21, 0xFF	; 255
    4866:	88 ee       	ldi	r24, 0xE8	; 232
    4868:	93 e0       	ldi	r25, 0x03	; 3
    486a:	b9 01       	movw	r22, r18
    486c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <TIMER1_voidGetNumCountCTC>
	TIMER1_voidSetCTCTime(compare_value);
    4870:	8a 81       	ldd	r24, Y+2	; 0x02
    4872:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <TIMER1_voidSetCTCTime>
	TIMER1_voidSetCallBackCTC(&get_word);
    4876:	89 e6       	ldi	r24, 0x69	; 105
    4878:	94 e2       	ldi	r25, 0x24	; 36
    487a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <TIMER1_voidSetCallBackCTC>
	GLOVE_vidGetHandRead();
    487e:	0e 94 a2 09 	call	0x1344	; 0x1344 <GLOVE_vidGetHandRead>
	while(1)
	{
		while(ready_flag || get_another_read_flag);
    4882:	80 91 37 04 	lds	r24, 0x0437
    4886:	88 23       	and	r24, r24
    4888:	e1 f7       	brne	.-8      	; 0x4882 <main+0x50>
    488a:	80 91 13 04 	lds	r24, 0x0413
    488e:	88 23       	and	r24, r24
    4890:	c1 f7       	brne	.-16     	; 0x4882 <main+0x50>
		for(uint8_t i=0;i<10;i++)
    4892:	19 82       	std	Y+1, r1	; 0x01
    4894:	11 c0       	rjmp	.+34     	; 0x48b8 <main+0x86>
		{
			word_location[i]=word_location_buffer[i];
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	28 2f       	mov	r18, r24
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	88 2f       	mov	r24, r24
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	fc 01       	movw	r30, r24
    48a4:	e5 59       	subi	r30, 0x95	; 149
    48a6:	fb 4f       	sbci	r31, 0xFB	; 251
    48a8:	80 81       	ld	r24, Z
    48aa:	f9 01       	movw	r30, r18
    48ac:	eb 58       	subi	r30, 0x8B	; 139
    48ae:	fb 4f       	sbci	r31, 0xFB	; 251
    48b0:	80 83       	st	Z, r24
	TIMER1_voidSetCallBackCTC(&get_word);
	GLOVE_vidGetHandRead();
	while(1)
	{
		while(ready_flag || get_another_read_flag);
		for(uint8_t i=0;i<10;i++)
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	8f 5f       	subi	r24, 0xFF	; 255
    48b6:	89 83       	std	Y+1, r24	; 0x01
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	8a 30       	cpi	r24, 0x0A	; 10
    48bc:	60 f3       	brcs	.-40     	; 0x4896 <main+0x64>
		{
			word_location[i]=word_location_buffer[i];
		}
		get_another_read_flag = 1;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	80 93 13 04 	sts	0x0413, r24
		GLOVE_vidGetHandRead();
    48c4:	0e 94 a2 09 	call	0x1344	; 0x1344 <GLOVE_vidGetHandRead>
		SHOW_vidShowAndPlay(&word_location[0]);
    48c8:	85 e7       	ldi	r24, 0x75	; 117
    48ca:	94 e0       	ldi	r25, 0x04	; 4
    48cc:	0e 94 66 07 	call	0xecc	; 0xecc <SHOW_vidShowAndPlay>
    48d0:	d8 cf       	rjmp	.-80     	; 0x4882 <main+0x50>

000048d2 <get_word>:

	return 0;
}

void get_word()
{
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	cd b7       	in	r28, 0x3d	; 61
    48d8:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0;
	if(i<5 && sensor_reads[7] && get_another_read_flag)
    48da:	80 91 38 04 	lds	r24, 0x0438
    48de:	85 30       	cpi	r24, 0x05	; 5
    48e0:	08 f0       	brcs	.+2      	; 0x48e4 <get_word+0x12>
    48e2:	61 c0       	rjmp	.+194    	; 0x49a6 <get_word+0xd4>
    48e4:	80 91 69 04 	lds	r24, 0x0469
    48e8:	90 91 6a 04 	lds	r25, 0x046A
    48ec:	00 97       	sbiw	r24, 0x00	; 0
    48ee:	09 f4       	brne	.+2      	; 0x48f2 <get_word+0x20>
    48f0:	5a c0       	rjmp	.+180    	; 0x49a6 <get_word+0xd4>
    48f2:	80 91 13 04 	lds	r24, 0x0413
    48f6:	88 23       	and	r24, r24
    48f8:	09 f4       	brne	.+2      	; 0x48fc <get_word+0x2a>
    48fa:	55 c0       	rjmp	.+170    	; 0x49a6 <get_word+0xd4>
	{
		LED_u8LedToggle(PORT_D, PIN_7);
    48fc:	83 e0       	ldi	r24, 0x03	; 3
    48fe:	67 e0       	ldi	r22, 0x07	; 7
    4900:	0e 94 ed 18 	call	0x31da	; 0x31da <LED_u8LedToggle>
		GET_vidGetWordAndSound(&sensor_reads[0], &word_location_buffer[i*2]);
    4904:	80 91 38 04 	lds	r24, 0x0438
    4908:	88 2f       	mov	r24, r24
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	88 0f       	add	r24, r24
    490e:	99 1f       	adc	r25, r25
    4910:	9c 01       	movw	r18, r24
    4912:	25 59       	subi	r18, 0x95	; 149
    4914:	3b 4f       	sbci	r19, 0xFB	; 251
    4916:	8b e5       	ldi	r24, 0x5B	; 91
    4918:	94 e0       	ldi	r25, 0x04	; 4
    491a:	b9 01       	movw	r22, r18
    491c:	0e 94 41 0c 	call	0x1882	; 0x1882 <GET_vidGetWordAndSound>
		if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 1 )i--;
    4920:	80 91 38 04 	lds	r24, 0x0438
    4924:	88 2f       	mov	r24, r24
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	88 0f       	add	r24, r24
    492a:	99 1f       	adc	r25, r25
    492c:	fc 01       	movw	r30, r24
    492e:	e5 59       	subi	r30, 0x95	; 149
    4930:	fb 4f       	sbci	r31, 0xFB	; 251
    4932:	80 81       	ld	r24, Z
    4934:	88 23       	and	r24, r24
    4936:	99 f4       	brne	.+38     	; 0x495e <get_word+0x8c>
    4938:	80 91 38 04 	lds	r24, 0x0438
    493c:	88 2f       	mov	r24, r24
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	88 0f       	add	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	01 96       	adiw	r24, 0x01	; 1
    4946:	fc 01       	movw	r30, r24
    4948:	e5 59       	subi	r30, 0x95	; 149
    494a:	fb 4f       	sbci	r31, 0xFB	; 251
    494c:	80 81       	ld	r24, Z
    494e:	81 30       	cpi	r24, 0x01	; 1
    4950:	31 f4       	brne	.+12     	; 0x495e <get_word+0x8c>
    4952:	80 91 38 04 	lds	r24, 0x0438
    4956:	81 50       	subi	r24, 0x01	; 1
    4958:	80 93 38 04 	sts	0x0438, r24
    495c:	1c c0       	rjmp	.+56     	; 0x4996 <get_word+0xc4>
		else if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 0 )i=5;
    495e:	80 91 38 04 	lds	r24, 0x0438
    4962:	88 2f       	mov	r24, r24
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	88 0f       	add	r24, r24
    4968:	99 1f       	adc	r25, r25
    496a:	fc 01       	movw	r30, r24
    496c:	e5 59       	subi	r30, 0x95	; 149
    496e:	fb 4f       	sbci	r31, 0xFB	; 251
    4970:	80 81       	ld	r24, Z
    4972:	88 23       	and	r24, r24
    4974:	81 f4       	brne	.+32     	; 0x4996 <get_word+0xc4>
    4976:	80 91 38 04 	lds	r24, 0x0438
    497a:	88 2f       	mov	r24, r24
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	88 0f       	add	r24, r24
    4980:	99 1f       	adc	r25, r25
    4982:	01 96       	adiw	r24, 0x01	; 1
    4984:	fc 01       	movw	r30, r24
    4986:	e5 59       	subi	r30, 0x95	; 149
    4988:	fb 4f       	sbci	r31, 0xFB	; 251
    498a:	80 81       	ld	r24, Z
    498c:	88 23       	and	r24, r24
    498e:	19 f4       	brne	.+6      	; 0x4996 <get_word+0xc4>
    4990:	85 e0       	ldi	r24, 0x05	; 5
    4992:	80 93 38 04 	sts	0x0438, r24
		GLOVE_vidGetHandRead();
    4996:	0e 94 a2 09 	call	0x1344	; 0x1344 <GLOVE_vidGetHandRead>
		i++;
    499a:	80 91 38 04 	lds	r24, 0x0438
    499e:	8f 5f       	subi	r24, 0xFF	; 255
    49a0:	80 93 38 04 	sts	0x0438, r24
    49a4:	04 c0       	rjmp	.+8      	; 0x49ae <get_word+0xdc>
	}else {
		i = 0;
    49a6:	10 92 38 04 	sts	0x0438, r1
		get_another_read_flag = 0;
    49aa:	10 92 13 04 	sts	0x0413, r1

	}

}
    49ae:	cf 91       	pop	r28
    49b0:	df 91       	pop	r29
    49b2:	08 95       	ret

000049b4 <__mulsi3>:
    49b4:	62 9f       	mul	r22, r18
    49b6:	d0 01       	movw	r26, r0
    49b8:	73 9f       	mul	r23, r19
    49ba:	f0 01       	movw	r30, r0
    49bc:	82 9f       	mul	r24, r18
    49be:	e0 0d       	add	r30, r0
    49c0:	f1 1d       	adc	r31, r1
    49c2:	64 9f       	mul	r22, r20
    49c4:	e0 0d       	add	r30, r0
    49c6:	f1 1d       	adc	r31, r1
    49c8:	92 9f       	mul	r25, r18
    49ca:	f0 0d       	add	r31, r0
    49cc:	83 9f       	mul	r24, r19
    49ce:	f0 0d       	add	r31, r0
    49d0:	74 9f       	mul	r23, r20
    49d2:	f0 0d       	add	r31, r0
    49d4:	65 9f       	mul	r22, r21
    49d6:	f0 0d       	add	r31, r0
    49d8:	99 27       	eor	r25, r25
    49da:	72 9f       	mul	r23, r18
    49dc:	b0 0d       	add	r27, r0
    49de:	e1 1d       	adc	r30, r1
    49e0:	f9 1f       	adc	r31, r25
    49e2:	63 9f       	mul	r22, r19
    49e4:	b0 0d       	add	r27, r0
    49e6:	e1 1d       	adc	r30, r1
    49e8:	f9 1f       	adc	r31, r25
    49ea:	bd 01       	movw	r22, r26
    49ec:	cf 01       	movw	r24, r30
    49ee:	11 24       	eor	r1, r1
    49f0:	08 95       	ret

000049f2 <__udivmodqi4>:
    49f2:	99 1b       	sub	r25, r25
    49f4:	79 e0       	ldi	r23, 0x09	; 9
    49f6:	04 c0       	rjmp	.+8      	; 0x4a00 <__udivmodqi4_ep>

000049f8 <__udivmodqi4_loop>:
    49f8:	99 1f       	adc	r25, r25
    49fa:	96 17       	cp	r25, r22
    49fc:	08 f0       	brcs	.+2      	; 0x4a00 <__udivmodqi4_ep>
    49fe:	96 1b       	sub	r25, r22

00004a00 <__udivmodqi4_ep>:
    4a00:	88 1f       	adc	r24, r24
    4a02:	7a 95       	dec	r23
    4a04:	c9 f7       	brne	.-14     	; 0x49f8 <__udivmodqi4_loop>
    4a06:	80 95       	com	r24
    4a08:	08 95       	ret

00004a0a <__udivmodhi4>:
    4a0a:	aa 1b       	sub	r26, r26
    4a0c:	bb 1b       	sub	r27, r27
    4a0e:	51 e1       	ldi	r21, 0x11	; 17
    4a10:	07 c0       	rjmp	.+14     	; 0x4a20 <__udivmodhi4_ep>

00004a12 <__udivmodhi4_loop>:
    4a12:	aa 1f       	adc	r26, r26
    4a14:	bb 1f       	adc	r27, r27
    4a16:	a6 17       	cp	r26, r22
    4a18:	b7 07       	cpc	r27, r23
    4a1a:	10 f0       	brcs	.+4      	; 0x4a20 <__udivmodhi4_ep>
    4a1c:	a6 1b       	sub	r26, r22
    4a1e:	b7 0b       	sbc	r27, r23

00004a20 <__udivmodhi4_ep>:
    4a20:	88 1f       	adc	r24, r24
    4a22:	99 1f       	adc	r25, r25
    4a24:	5a 95       	dec	r21
    4a26:	a9 f7       	brne	.-22     	; 0x4a12 <__udivmodhi4_loop>
    4a28:	80 95       	com	r24
    4a2a:	90 95       	com	r25
    4a2c:	bc 01       	movw	r22, r24
    4a2e:	cd 01       	movw	r24, r26
    4a30:	08 95       	ret

00004a32 <__udivmodsi4>:
    4a32:	a1 e2       	ldi	r26, 0x21	; 33
    4a34:	1a 2e       	mov	r1, r26
    4a36:	aa 1b       	sub	r26, r26
    4a38:	bb 1b       	sub	r27, r27
    4a3a:	fd 01       	movw	r30, r26
    4a3c:	0d c0       	rjmp	.+26     	; 0x4a58 <__udivmodsi4_ep>

00004a3e <__udivmodsi4_loop>:
    4a3e:	aa 1f       	adc	r26, r26
    4a40:	bb 1f       	adc	r27, r27
    4a42:	ee 1f       	adc	r30, r30
    4a44:	ff 1f       	adc	r31, r31
    4a46:	a2 17       	cp	r26, r18
    4a48:	b3 07       	cpc	r27, r19
    4a4a:	e4 07       	cpc	r30, r20
    4a4c:	f5 07       	cpc	r31, r21
    4a4e:	20 f0       	brcs	.+8      	; 0x4a58 <__udivmodsi4_ep>
    4a50:	a2 1b       	sub	r26, r18
    4a52:	b3 0b       	sbc	r27, r19
    4a54:	e4 0b       	sbc	r30, r20
    4a56:	f5 0b       	sbc	r31, r21

00004a58 <__udivmodsi4_ep>:
    4a58:	66 1f       	adc	r22, r22
    4a5a:	77 1f       	adc	r23, r23
    4a5c:	88 1f       	adc	r24, r24
    4a5e:	99 1f       	adc	r25, r25
    4a60:	1a 94       	dec	r1
    4a62:	69 f7       	brne	.-38     	; 0x4a3e <__udivmodsi4_loop>
    4a64:	60 95       	com	r22
    4a66:	70 95       	com	r23
    4a68:	80 95       	com	r24
    4a6a:	90 95       	com	r25
    4a6c:	9b 01       	movw	r18, r22
    4a6e:	ac 01       	movw	r20, r24
    4a70:	bd 01       	movw	r22, r26
    4a72:	cf 01       	movw	r24, r30
    4a74:	08 95       	ret

00004a76 <__prologue_saves__>:
    4a76:	2f 92       	push	r2
    4a78:	3f 92       	push	r3
    4a7a:	4f 92       	push	r4
    4a7c:	5f 92       	push	r5
    4a7e:	6f 92       	push	r6
    4a80:	7f 92       	push	r7
    4a82:	8f 92       	push	r8
    4a84:	9f 92       	push	r9
    4a86:	af 92       	push	r10
    4a88:	bf 92       	push	r11
    4a8a:	cf 92       	push	r12
    4a8c:	df 92       	push	r13
    4a8e:	ef 92       	push	r14
    4a90:	ff 92       	push	r15
    4a92:	0f 93       	push	r16
    4a94:	1f 93       	push	r17
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    4a9e:	ca 1b       	sub	r28, r26
    4aa0:	db 0b       	sbc	r29, r27
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	09 94       	ijmp

00004aae <__epilogue_restores__>:
    4aae:	2a 88       	ldd	r2, Y+18	; 0x12
    4ab0:	39 88       	ldd	r3, Y+17	; 0x11
    4ab2:	48 88       	ldd	r4, Y+16	; 0x10
    4ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    4abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    4ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    4ac4:	df 80       	ldd	r13, Y+7	; 0x07
    4ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    4ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    4aca:	0c 81       	ldd	r16, Y+4	; 0x04
    4acc:	1b 81       	ldd	r17, Y+3	; 0x03
    4ace:	aa 81       	ldd	r26, Y+2	; 0x02
    4ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    4ad2:	ce 0f       	add	r28, r30
    4ad4:	d1 1d       	adc	r29, r1
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	f8 94       	cli
    4ada:	de bf       	out	0x3e, r29	; 62
    4adc:	0f be       	out	0x3f, r0	; 63
    4ade:	cd bf       	out	0x3d, r28	; 61
    4ae0:	ed 01       	movw	r28, r26
    4ae2:	08 95       	ret

00004ae4 <_exit>:
    4ae4:	f8 94       	cli

00004ae6 <__stop_program>:
    4ae6:	ff cf       	rjmp	.-2      	; 0x4ae6 <__stop_program>
