
Glove_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d4  00800060  000048d0  00004964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  00800434  00800434  00004d38  2**0
                  ALLOC
  3 .stab         00005640  00000000  00000000  00004d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000256f  00000000  00000000  0000a378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000c8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000cc3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ec49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000fdb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00010f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0001121d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011acb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__vector_9>
      28:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 22 	call	0x4522	; 0x4522 <main>
      8a:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 23 	jmp	0x479e	; 0x479e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 23 	jmp	0x479e	; 0x479e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 23 	jmp	0x4786	; 0x4786 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 23 	jmp	0x47be	; 0x47be <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 d7 23 	jmp	0x47ae	; 0x47ae <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <SHOW_vidShowAndPlayInit>:
uint8_t sentences_length[7] = {2, 1, 3, 4, 4, 2, 4};

void callback();

void SHOW_vidShowAndPlayInit (uint8_t * ready_flag)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <SHOW_vidShowAndPlayInit+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	ready_flag_glob = ready_flag;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	90 93 79 04 	sts	0x0479, r25
     cec:	80 93 78 04 	sts	0x0478, r24
	(*ready_flag)=0;
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	10 82       	st	Z, r1
	LCD_vidInit();
     cf6:	0e 94 b8 1b 	call	0x3770	; 0x3770 <LCD_vidInit>
	M16P_vidInit(9600);
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	95 e2       	ldi	r25, 0x25	; 37
     cfe:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <M16P_vidInit>
	TMR0_Init();
     d02:	0e 94 ff 14 	call	0x29fe	; 0x29fe <TMR0_Init>
	TMR0_SetCallback(&callback);
     d06:	8b eb       	ldi	r24, 0xBB	; 187
     d08:	97 e0       	ldi	r25, 0x07	; 7
     d0a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <TMR0_SetCallback>
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <SHOW_u8CalcTrackNumber>:

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <SHOW_u8CalcTrackNumber+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <SHOW_u8CalcTrackNumber+0x8>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t track_number = 0;
     d28:	1a 82       	std	Y+2, r1	; 0x02

	for(uint8_t i = 1; i<folder; i++)
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	0e c0       	rjmp	.+28     	; 0xd4c <SHOW_u8CalcTrackNumber+0x34>
	{
		track_number += sentences_length[i-1];
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	fc 01       	movw	r30, r24
     d3a:	eb 55       	subi	r30, 0x5B	; 91
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	90 81       	ld	r25, Z
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	89 0f       	add	r24, r25
     d44:	8a 83       	std	Y+2, r24	; 0x02

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
	uint8_t track_number = 0;

	for(uint8_t i = 1; i<folder; i++)
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	99 81       	ldd	r25, Y+1	; 0x01
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	98 17       	cp	r25, r24
     d52:	70 f3       	brcs	.-36     	; 0xd30 <SHOW_u8CalcTrackNumber+0x18>
	{
		track_number += sentences_length[i-1];
	}
	track_number += file;
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	89 0f       	add	r24, r25
     d5a:	8a 83       	std	Y+2, r24	; 0x02

	return track_number;
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <SHOW_vidShowAndPlay>:

void SHOW_vidShowAndPlay (uint8_t * words)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	e5 97       	sbiw	r28, 0x35	; 53
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	98 ab       	std	Y+48, r25	; 0x30
     d82:	8f a7       	std	Y+47, r24	; 0x2f
	uint8_t string_output[32] ={'\0'};
     d84:	80 e2       	ldi	r24, 0x20	; 32
     d86:	fe 01       	movw	r30, r28
     d88:	35 96       	adiw	r30, 0x05	; 5
     d8a:	df 01       	movw	r26, r30
     d8c:	98 2f       	mov	r25, r24
     d8e:	1d 92       	st	X+, r1
     d90:	9a 95       	dec	r25
     d92:	e9 f7       	brne	.-6      	; 0xd8e <SHOW_vidShowAndPlay+0x22>
	uint8_t words_cpy[10];
	uint8_t l = 0;
     d94:	1c 82       	std	Y+4, r1	; 0x04
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	15 c0       	rjmp	.+42     	; 0xdc4 <SHOW_vidShowAndPlay+0x58>
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	48 2f       	mov	r20, r24
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	8f a5       	ldd	r24, Y+47	; 0x2f
     da8:	98 a9       	ldd	r25, Y+48	; 0x30
     daa:	fc 01       	movw	r30, r24
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	20 81       	ld	r18, Z
     db2:	ce 01       	movw	r24, r28
     db4:	85 96       	adiw	r24, 0x25	; 37
     db6:	fc 01       	movw	r30, r24
     db8:	e4 0f       	add	r30, r20
     dba:	f5 1f       	adc	r31, r21
     dbc:	20 83       	st	Z, r18
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	8a 83       	std	Y+2, r24	; 0x02
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	8a 30       	cpi	r24, 0x0A	; 10
     dc8:	40 f3       	brcs	.-48     	; 0xd9a <SHOW_vidShowAndPlay+0x2e>
	LCD_vidClearDisplay();
     dca:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <LCD_vidClearDisplay>
	(*ready_flag_glob) = 1;
     dce:	e0 91 78 04 	lds	r30, 0x0478
     dd2:	f0 91 79 04 	lds	r31, 0x0479
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 83       	st	Z, r24
	uint8_t j=0;
     dda:	1b 82       	std	Y+3, r1	; 0x03
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     ddc:	19 82       	std	Y+1, r1	; 0x01
     dde:	90 c0       	rjmp	.+288    	; 0xf00 <SHOW_vidShowAndPlay+0x194>
	{
		for(j =0; j<NO_OF_WORDS; j++)
     de0:	1b 82       	std	Y+3, r1	; 0x03
     de2:	41 c0       	rjmp	.+130    	; 0xe66 <SHOW_vidShowAndPlay+0xfa>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	ce 01       	movw	r24, r28
     dec:	85 96       	adiw	r24, 0x25	; 37
     dee:	fc 01       	movw	r30, r24
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	c9 01       	movw	r24, r18
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	fc 01       	movw	r30, r24
     e12:	e8 59       	subi	r30, 0x98	; 152
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	48 17       	cp	r20, r24
     e1c:	59 07       	cpc	r21, r25
     e1e:	01 f5       	brne	.+64     	; 0xe60 <SHOW_vidShowAndPlay+0xf4>
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9c 01       	movw	r18, r24
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	ce 01       	movw	r24, r28
     e2e:	85 96       	adiw	r24, 0x25	; 37
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	c9 01       	movw	r24, r18
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	82 0f       	add	r24, r18
     e4a:	93 1f       	adc	r25, r19
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	fc 01       	movw	r30, r24
     e52:	e4 59       	subi	r30, 0x94	; 148
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	48 17       	cp	r20, r24
     e5c:	59 07       	cpc	r21, r25
     e5e:	39 f0       	breq	.+14     	; 0xe6e <SHOW_vidShowAndPlay+0x102>
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
	{
		for(j =0; j<NO_OF_WORDS; j++)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	84 31       	cpi	r24, 0x14	; 20
     e6a:	08 f4       	brcc	.+2      	; 0xe6e <SHOW_vidShowAndPlay+0x102>
     e6c:	bb cf       	rjmp	.-138    	; 0xde4 <SHOW_vidShowAndPlay+0x78>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
     e6e:	80 91 34 04 	lds	r24, 0x0434
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 93 34 04 	sts	0x0434, r24
		sound_buffer[i]=outputs[j];
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	48 2f       	mov	r20, r24
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	c9 01       	movw	r24, r18
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	9c 01       	movw	r18, r24
     e94:	26 5a       	subi	r18, 0xA6	; 166
     e96:	3b 4f       	sbci	r19, 0xFB	; 251
     e98:	ca 01       	movw	r24, r20
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	84 0f       	add	r24, r20
     ea0:	95 1f       	adc	r25, r21
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	88 59       	subi	r24, 0x98	; 152
     ea8:	9e 4f       	sbci	r25, 0xFE	; 254
     eaa:	3a ab       	std	Y+50, r19	; 0x32
     eac:	29 ab       	std	Y+49, r18	; 0x31
     eae:	9c ab       	std	Y+52, r25	; 0x34
     eb0:	8b ab       	std	Y+51, r24	; 0x33
     eb2:	a6 e0       	ldi	r26, 0x06	; 6
     eb4:	ad ab       	std	Y+53, r26	; 0x35
     eb6:	eb a9       	ldd	r30, Y+51	; 0x33
     eb8:	fc a9       	ldd	r31, Y+52	; 0x34
     eba:	00 80       	ld	r0, Z
     ebc:	8b a9       	ldd	r24, Y+51	; 0x33
     ebe:	9c a9       	ldd	r25, Y+52	; 0x34
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	9c ab       	std	Y+52, r25	; 0x34
     ec4:	8b ab       	std	Y+51, r24	; 0x33
     ec6:	a9 a9       	ldd	r26, Y+49	; 0x31
     ec8:	ba a9       	ldd	r27, Y+50	; 0x32
     eca:	0c 92       	st	X, r0
     ecc:	e9 a9       	ldd	r30, Y+49	; 0x31
     ece:	fa a9       	ldd	r31, Y+50	; 0x32
     ed0:	31 96       	adiw	r30, 0x01	; 1
     ed2:	fa ab       	std	Y+50, r31	; 0x32
     ed4:	e9 ab       	std	Y+49, r30	; 0x31
     ed6:	fd a9       	ldd	r31, Y+53	; 0x35
     ed8:	f1 50       	subi	r31, 0x01	; 1
     eda:	fd ab       	std	Y+53, r31	; 0x35
     edc:	8d a9       	ldd	r24, Y+53	; 0x35
     ede:	88 23       	and	r24, r24
     ee0:	51 f7       	brne	.-44     	; 0xeb6 <SHOW_vidShowAndPlay+0x14a>
		LCD_vidDisplayString(strings[j]);
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	fc 01       	movw	r30, r24
     eee:	e7 59       	subi	r30, 0x97	; 151
     ef0:	fd 4f       	sbci	r31, 0xFD	; 253
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <LCD_vidDisplayString>
	uint8_t l = 0;
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8e 5f       	subi	r24, 0xFE	; 254
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	ce 01       	movw	r24, r28
     f08:	85 96       	adiw	r24, 0x25	; 37
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	80 81       	ld	r24, Z
     f12:	88 23       	and	r24, r24
     f14:	79 f0       	breq	.+30     	; 0xf34 <SHOW_vidShowAndPlay+0x1c8>
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9c 01       	movw	r18, r24
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	ce 01       	movw	r24, r28
     f24:	85 96       	adiw	r24, 0x25	; 37
     f26:	fc 01       	movw	r30, r24
     f28:	e2 0f       	add	r30, r18
     f2a:	f3 1f       	adc	r31, r19
     f2c:	80 81       	ld	r24, Z
     f2e:	88 23       	and	r24, r24
     f30:	09 f0       	breq	.+2      	; 0xf34 <SHOW_vidShowAndPlay+0x1c8>
     f32:	56 cf       	rjmp	.-340    	; 0xde0 <SHOW_vidShowAndPlay+0x74>
		}
		sound_buffer_size++;
		sound_buffer[i]=outputs[j];
		LCD_vidDisplayString(strings[j]);
	}
	TMR0_Start(sound_buffer[0].sound_duration);
     f34:	80 91 5a 04 	lds	r24, 0x045A
     f38:	90 91 5b 04 	lds	r25, 0x045B
     f3c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <TMR0_Start>
	//M16P_vidPlayFileInFolder(sound_buffer[0].folder, sound_buffer[0].file);
	M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[0].folder, sound_buffer[0].file));
     f40:	80 91 5c 04 	lds	r24, 0x045C
     f44:	90 91 5d 04 	lds	r25, 0x045D
     f48:	28 2f       	mov	r18, r24
     f4a:	80 91 5e 04 	lds	r24, 0x045E
     f4e:	90 91 5f 04 	lds	r25, 0x045F
     f52:	98 2f       	mov	r25, r24
     f54:	82 2f       	mov	r24, r18
     f56:	69 2f       	mov	r22, r25
     f58:	0e 94 8c 06 	call	0xd18	; 0xd18 <SHOW_u8CalcTrackNumber>
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 5f 21 	call	0x42be	; 0x42be <M16P_vidPlayTrack>
}
     f64:	e5 96       	adiw	r28, 0x35	; 53
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <callback>:

void callback()
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	M16P_vidPause();
     f7e:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <M16P_vidPause>
	static uint8_t current_file = 1;
	if(current_file < sound_buffer_size)
     f82:	90 91 ac 02 	lds	r25, 0x02AC
     f86:	80 91 34 04 	lds	r24, 0x0434
     f8a:	98 17       	cp	r25, r24
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <callback+0x1a>
     f8e:	43 c0       	rjmp	.+134    	; 0x1016 <callback+0xa0>
	{
		M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[current_file].folder, sound_buffer[current_file].file));
     f90:	80 91 ac 02 	lds	r24, 0x02AC
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	c9 01       	movw	r24, r18
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	fc 01       	movw	r30, r24
     faa:	e6 5a       	subi	r30, 0xA6	; 166
     fac:	fb 4f       	sbci	r31, 0xFB	; 251
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	48 2f       	mov	r20, r24
     fb4:	80 91 ac 02 	lds	r24, 0x02AC
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	c9 01       	movw	r24, r18
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	fc 01       	movw	r30, r24
     fcc:	e2 5a       	subi	r30, 0xA2	; 162
     fce:	fb 4f       	sbci	r31, 0xFB	; 251
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	98 2f       	mov	r25, r24
     fd6:	84 2f       	mov	r24, r20
     fd8:	69 2f       	mov	r22, r25
     fda:	0e 94 8c 06 	call	0xd18	; 0xd18 <SHOW_u8CalcTrackNumber>
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 5f 21 	call	0x42be	; 0x42be <M16P_vidPlayTrack>
		//M16P_vidPlayFileInFolder(sound_buffer[current_file].folder, sound_buffer[current_file].file);
		TMR0_Start(sound_buffer[current_file].sound_duration);
     fe6:	80 91 ac 02 	lds	r24, 0x02AC
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	c9 01       	movw	r24, r18
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	82 0f       	add	r24, r18
     ff6:	93 1f       	adc	r25, r19
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	fc 01       	movw	r30, r24
     ffe:	e6 5a       	subi	r30, 0xA6	; 166
    1000:	fb 4f       	sbci	r31, 0xFB	; 251
    1002:	80 81       	ld	r24, Z
    1004:	91 81       	ldd	r25, Z+1	; 0x01
    1006:	0e 94 22 15 	call	0x2a44	; 0x2a44 <TMR0_Start>
		current_file++;
    100a:	80 91 ac 02 	lds	r24, 0x02AC
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 93 ac 02 	sts	0x02AC, r24
    1014:	0a c0       	rjmp	.+20     	; 0x102a <callback+0xb4>

	}else{
		current_file = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 ac 02 	sts	0x02AC, r24
		sound_buffer_size = 0;
    101c:	10 92 34 04 	sts	0x0434, r1
		(*ready_flag_glob) = 0;
    1020:	e0 91 78 04 	lds	r30, 0x0478
    1024:	f0 91 79 04 	lds	r31, 0x0479
    1028:	10 82       	st	Z, r1
	}
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GLOVE_vidCallBack>:
uint16_ i = 0;

uint8_t FLEX_SENSORS[8] = {FLEX_0, FLEX_1, FLEX_2, FLEX_3, FLEX_4, FLEX_5, FLEX_6, FLEX_7};

void GLOVE_vidCallBack()
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	SENSOR_READ[i]=READ;
    1038:	20 91 35 04 	lds	r18, 0x0435
    103c:	30 91 36 04 	lds	r19, 0x0436
    1040:	80 91 3a 04 	lds	r24, 0x043A
    1044:	90 91 3b 04 	lds	r25, 0x043B
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	f9 01       	movw	r30, r18
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	80 91 38 04 	lds	r24, 0x0438
    1056:	90 91 39 04 	lds	r25, 0x0439
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
	if(i < NO_OF_FLEX_SENSORS-1)
    105e:	80 91 37 04 	lds	r24, 0x0437
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9c 01       	movw	r18, r24
    106a:	80 91 3a 04 	lds	r24, 0x043A
    106e:	90 91 3b 04 	lds	r25, 0x043B
    1072:	82 17       	cp	r24, r18
    1074:	93 07       	cpc	r25, r19
    1076:	58 f5       	brcc	.+86     	; 0x10ce <GLOVE_vidCallBack+0x9e>
	{
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=0;
    1078:	20 91 35 04 	lds	r18, 0x0435
    107c:	30 91 36 04 	lds	r19, 0x0436
    1080:	80 91 37 04 	lds	r24, 0x0437
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 96       	adiw	r24, 0x02	; 2
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	f9 01       	movw	r30, r18
    1090:	e8 0f       	add	r30, r24
    1092:	f9 1f       	adc	r31, r25
    1094:	11 82       	std	Z+1, r1	; 0x01
    1096:	10 82       	st	Z, r1
		i++;
    1098:	80 91 3a 04 	lds	r24, 0x043A
    109c:	90 91 3b 04 	lds	r25, 0x043B
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	90 93 3b 04 	sts	0x043B, r25
    10a6:	80 93 3a 04 	sts	0x043A, r24
		READ=0;
    10aa:	10 92 39 04 	sts	0x0439, r1
    10ae:	10 92 38 04 	sts	0x0438, r1
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    10b2:	80 91 3a 04 	lds	r24, 0x043A
    10b6:	90 91 3b 04 	lds	r25, 0x043B
    10ba:	fc 01       	movw	r30, r24
    10bc:	e3 55       	subi	r30, 0x53	; 83
    10be:	fd 4f       	sbci	r31, 0xFD	; 253
    10c0:	20 81       	ld	r18, Z
    10c2:	88 e3       	ldi	r24, 0x38	; 56
    10c4:	94 e0       	ldi	r25, 0x04	; 4
    10c6:	62 2f       	mov	r22, r18
    10c8:	0e 94 35 20 	call	0x406a	; 0x406a <FLEX_vidGetFlexRead>
    10cc:	27 c0       	rjmp	.+78     	; 0x111c <GLOVE_vidCallBack+0xec>
	}else if(i == NO_OF_FLEX_SENSORS-1)
    10ce:	80 91 37 04 	lds	r24, 0x0437
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9c 01       	movw	r18, r24
    10da:	80 91 3a 04 	lds	r24, 0x043A
    10de:	90 91 3b 04 	lds	r25, 0x043B
    10e2:	28 17       	cp	r18, r24
    10e4:	39 07       	cpc	r19, r25
    10e6:	d1 f4       	brne	.+52     	; 0x111c <GLOVE_vidCallBack+0xec>
	{
		i=0;
    10e8:	10 92 3b 04 	sts	0x043B, r1
    10ec:	10 92 3a 04 	sts	0x043A, r1
		READ=0;
    10f0:	10 92 39 04 	sts	0x0439, r1
    10f4:	10 92 38 04 	sts	0x0438, r1
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=1;
    10f8:	20 91 35 04 	lds	r18, 0x0435
    10fc:	30 91 36 04 	lds	r19, 0x0436
    1100:	80 91 37 04 	lds	r24, 0x0437
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 96       	adiw	r24, 0x02	; 2
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	f9 01       	movw	r30, r18
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
	}
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <GLOVE_vidSensorsInit>:

void GLOVE_vidSensorsInit()
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	FLEX_vidFlexInit(FLEX_ALL);
    112a:	88 e0       	ldi	r24, 0x08	; 8
    112c:	0e 94 25 20 	call	0x404a	; 0x404a <FLEX_vidFlexInit>
	TILT_vidInit(TILT_2);
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	0e 94 34 16 	call	0x2c68	; 0x2c68 <TILT_vidInit>
	TILT_vidInit(TILT_3);
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	0e 94 34 16 	call	0x2c68	; 0x2c68 <TILT_vidInit>
	FLEX_vidSetCallBack(&GLOVE_vidCallBack);
    113c:	88 e1       	ldi	r24, 0x18	; 24
    113e:	98 e0       	ldi	r25, 0x08	; 8
    1140:	0e 94 4b 20 	call	0x4096	; 0x4096 <FLEX_vidSetCallBack>
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <GLOVE_vidSetGloveParams>:

void GLOVE_vidSetGloveParams(uint16_* sensor_read, uint8_t no_of_sensors)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <GLOVE_vidSetGloveParams+0x6>
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	6b 83       	std	Y+3, r22	; 0x03
	SENSOR_READ = sensor_read;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	90 93 36 04 	sts	0x0436, r25
    1164:	80 93 35 04 	sts	0x0435, r24
	if(no_of_sensors<=8)NO_OF_FLEX_SENSORS = no_of_sensors - 2;
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	89 30       	cpi	r24, 0x09	; 9
    116c:	20 f4       	brcc	.+8      	; 0x1176 <GLOVE_vidSetGloveParams+0x2c>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	82 50       	subi	r24, 0x02	; 2
    1172:	80 93 37 04 	sts	0x0437, r24
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <GLOVE_vidGetHandRead>:

void GLOVE_vidGetHandRead()
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	if(i==0)
    118a:	80 91 3a 04 	lds	r24, 0x043A
    118e:	90 91 3b 04 	lds	r25, 0x043B
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	69 f5       	brne	.+90     	; 0x11f0 <GLOVE_vidGetHandRead+0x6e>
	{
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS],TILT_2);
    1196:	80 91 35 04 	lds	r24, 0x0435
    119a:	90 91 36 04 	lds	r25, 0x0436
    119e:	9c 01       	movw	r18, r24
    11a0:	80 91 37 04 	lds	r24, 0x0437
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	62 e0       	ldi	r22, 0x02	; 2
    11b2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <TILT_vidGetTiltRead>
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS + 1],TILT_3);
    11b6:	20 91 35 04 	lds	r18, 0x0435
    11ba:	30 91 36 04 	lds	r19, 0x0436
    11be:	80 91 37 04 	lds	r24, 0x0437
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	63 e0       	ldi	r22, 0x03	; 3
    11d2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <TILT_vidGetTiltRead>
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    11d6:	80 91 3a 04 	lds	r24, 0x043A
    11da:	90 91 3b 04 	lds	r25, 0x043B
    11de:	fc 01       	movw	r30, r24
    11e0:	e3 55       	subi	r30, 0x53	; 83
    11e2:	fd 4f       	sbci	r31, 0xFD	; 253
    11e4:	20 81       	ld	r18, Z
    11e6:	88 e3       	ldi	r24, 0x38	; 56
    11e8:	94 e0       	ldi	r25, 0x04	; 4
    11ea:	62 2f       	mov	r22, r18
    11ec:	0e 94 35 20 	call	0x406a	; 0x406a <FLEX_vidGetFlexRead>
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <GET_float32CalculateDistance>:
									  STOPPING_WORD, NOT_FOUND};

// HELPING FUNCTIONS 

// 1. Function to calculate Euclidean distance between two sensor readings
float32_t GET_float32CalculateDistance(uint16_* sensor_reads, word* word) {
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	28 97       	sbiw	r28, 0x08	; 8
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	78 87       	std	Y+8, r23	; 0x08
    1210:	6f 83       	std	Y+7, r22	; 0x07

    float32_t distance = 0.0;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	ab 83       	std	Y+3, r26	; 0x03
    1220:	bc 83       	std	Y+4, r27	; 0x04

    distance += pow((float32_t)(sensor_reads[0] - word->thumb), 2);
    1222:	ed 81       	ldd	r30, Y+5	; 0x05
    1224:	fe 81       	ldd	r31, Y+6	; 0x06
    1226:	20 81       	ld	r18, Z
    1228:	31 81       	ldd	r19, Z+1	; 0x01
    122a:	ef 81       	ldd	r30, Y+7	; 0x07
    122c:	f8 85       	ldd	r31, Y+8	; 0x08
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	a9 01       	movw	r20, r18
    1234:	48 1b       	sub	r20, r24
    1236:	59 0b       	sbc	r21, r25
    1238:	ca 01       	movw	r24, r20
    123a:	cc 01       	movw	r24, r24
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	ca 01       	movw	r24, r20
    124e:	b9 01       	movw	r22, r18
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9c 01       	movw	r18, r24
    125a:	ad 01       	movw	r20, r26
    125c:	69 81       	ldd	r22, Y+1	; 0x01
    125e:	7a 81       	ldd	r23, Y+2	; 0x02
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	9a 83       	std	Y+2, r25	; 0x02
    1270:	ab 83       	std	Y+3, r26	; 0x03
    1272:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[1] - word->finger_1), 2);
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	fc 01       	movw	r30, r24
    127a:	32 96       	adiw	r30, 0x02	; 2
    127c:	20 81       	ld	r18, Z
    127e:	31 81       	ldd	r19, Z+1	; 0x01
    1280:	ef 81       	ldd	r30, Y+7	; 0x07
    1282:	f8 85       	ldd	r31, Y+8	; 0x08
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	a9 01       	movw	r20, r18
    128a:	48 1b       	sub	r20, r24
    128c:	59 0b       	sbc	r21, r25
    128e:	ca 01       	movw	r24, r20
    1290:	cc 01       	movw	r24, r24
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	ca 01       	movw	r24, r20
    12a4:	b9 01       	movw	r22, r18
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9c 01       	movw	r18, r24
    12b0:	ad 01       	movw	r20, r26
    12b2:	69 81       	ldd	r22, Y+1	; 0x01
    12b4:	7a 81       	ldd	r23, Y+2	; 0x02
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	ab 83       	std	Y+3, r26	; 0x03
    12c8:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[2] - word->finger_2), 2);
    12ca:	8d 81       	ldd	r24, Y+5	; 0x05
    12cc:	9e 81       	ldd	r25, Y+6	; 0x06
    12ce:	fc 01       	movw	r30, r24
    12d0:	34 96       	adiw	r30, 0x04	; 4
    12d2:	20 81       	ld	r18, Z
    12d4:	31 81       	ldd	r19, Z+1	; 0x01
    12d6:	ef 81       	ldd	r30, Y+7	; 0x07
    12d8:	f8 85       	ldd	r31, Y+8	; 0x08
    12da:	84 81       	ldd	r24, Z+4	; 0x04
    12dc:	95 81       	ldd	r25, Z+5	; 0x05
    12de:	a9 01       	movw	r20, r18
    12e0:	48 1b       	sub	r20, r24
    12e2:	59 0b       	sbc	r21, r25
    12e4:	ca 01       	movw	r24, r20
    12e6:	cc 01       	movw	r24, r24
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	ca 01       	movw	r24, r20
    12fa:	b9 01       	movw	r22, r18
    12fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9c 01       	movw	r18, r24
    1306:	ad 01       	movw	r20, r26
    1308:	69 81       	ldd	r22, Y+1	; 0x01
    130a:	7a 81       	ldd	r23, Y+2	; 0x02
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	ab 83       	std	Y+3, r26	; 0x03
    131e:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[3] - word->finger_3), 2);
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	fc 01       	movw	r30, r24
    1326:	36 96       	adiw	r30, 0x06	; 6
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	ef 81       	ldd	r30, Y+7	; 0x07
    132e:	f8 85       	ldd	r31, Y+8	; 0x08
    1330:	86 81       	ldd	r24, Z+6	; 0x06
    1332:	97 81       	ldd	r25, Z+7	; 0x07
    1334:	a9 01       	movw	r20, r18
    1336:	48 1b       	sub	r20, r24
    1338:	59 0b       	sbc	r21, r25
    133a:	ca 01       	movw	r24, r20
    133c:	cc 01       	movw	r24, r24
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	ca 01       	movw	r24, r20
    1350:	b9 01       	movw	r22, r18
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9c 01       	movw	r18, r24
    135c:	ad 01       	movw	r20, r26
    135e:	69 81       	ldd	r22, Y+1	; 0x01
    1360:	7a 81       	ldd	r23, Y+2	; 0x02
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	9a 83       	std	Y+2, r25	; 0x02
    1372:	ab 83       	std	Y+3, r26	; 0x03
    1374:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[4] - word->finger_4), 2);
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	fc 01       	movw	r30, r24
    137c:	38 96       	adiw	r30, 0x08	; 8
    137e:	20 81       	ld	r18, Z
    1380:	31 81       	ldd	r19, Z+1	; 0x01
    1382:	ef 81       	ldd	r30, Y+7	; 0x07
    1384:	f8 85       	ldd	r31, Y+8	; 0x08
    1386:	80 85       	ldd	r24, Z+8	; 0x08
    1388:	91 85       	ldd	r25, Z+9	; 0x09
    138a:	a9 01       	movw	r20, r18
    138c:	48 1b       	sub	r20, r24
    138e:	59 0b       	sbc	r21, r25
    1390:	ca 01       	movw	r24, r20
    1392:	cc 01       	movw	r24, r24
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    13a0:	9b 01       	movw	r18, r22
    13a2:	ac 01       	movw	r20, r24
    13a4:	ca 01       	movw	r24, r20
    13a6:	b9 01       	movw	r22, r18
    13a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9c 01       	movw	r18, r24
    13b2:	ad 01       	movw	r20, r26
    13b4:	69 81       	ldd	r22, Y+1	; 0x01
    13b6:	7a 81       	ldd	r23, Y+2	; 0x02
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	ab 83       	std	Y+3, r26	; 0x03
    13ca:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[5] - word->tilt0), 2);
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	fc 01       	movw	r30, r24
    13d2:	3a 96       	adiw	r30, 0x0a	; 10
    13d4:	20 81       	ld	r18, Z
    13d6:	31 81       	ldd	r19, Z+1	; 0x01
    13d8:	ef 81       	ldd	r30, Y+7	; 0x07
    13da:	f8 85       	ldd	r31, Y+8	; 0x08
    13dc:	82 85       	ldd	r24, Z+10	; 0x0a
    13de:	93 85       	ldd	r25, Z+11	; 0x0b
    13e0:	a9 01       	movw	r20, r18
    13e2:	48 1b       	sub	r20, r24
    13e4:	59 0b       	sbc	r21, r25
    13e6:	ca 01       	movw	r24, r20
    13e8:	cc 01       	movw	r24, r24
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    13f6:	9b 01       	movw	r18, r22
    13f8:	ac 01       	movw	r20, r24
    13fa:	ca 01       	movw	r24, r20
    13fc:	b9 01       	movw	r22, r18
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9c 01       	movw	r18, r24
    1408:	ad 01       	movw	r20, r26
    140a:	69 81       	ldd	r22, Y+1	; 0x01
    140c:	7a 81       	ldd	r23, Y+2	; 0x02
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	ab 83       	std	Y+3, r26	; 0x03
    1420:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[6] - word->tilt1), 2);
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	fc 01       	movw	r30, r24
    1428:	3c 96       	adiw	r30, 0x0c	; 12
    142a:	20 81       	ld	r18, Z
    142c:	31 81       	ldd	r19, Z+1	; 0x01
    142e:	ef 81       	ldd	r30, Y+7	; 0x07
    1430:	f8 85       	ldd	r31, Y+8	; 0x08
    1432:	84 85       	ldd	r24, Z+12	; 0x0c
    1434:	95 85       	ldd	r25, Z+13	; 0x0d
    1436:	a9 01       	movw	r20, r18
    1438:	48 1b       	sub	r20, r24
    143a:	59 0b       	sbc	r21, r25
    143c:	ca 01       	movw	r24, r20
    143e:	cc 01       	movw	r24, r24
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	ca 01       	movw	r24, r20
    1452:	b9 01       	movw	r22, r18
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9c 01       	movw	r18, r24
    145e:	ad 01       	movw	r20, r26
    1460:	69 81       	ldd	r22, Y+1	; 0x01
    1462:	7a 81       	ldd	r23, Y+2	; 0x02
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	9a 83       	std	Y+2, r25	; 0x02
    1474:	ab 83       	std	Y+3, r26	; 0x03
    1476:	bc 83       	std	Y+4, r27	; 0x04

    return sqrt(distance);
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	ab 81       	ldd	r26, Y+3	; 0x03
    147e:	bc 81       	ldd	r27, Y+4	; 0x04
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	0e 94 ee 23 	call	0x47dc	; 0x47dc <sqrt>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22

}
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	28 96       	adiw	r28, 0x08	; 8
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <GET_u8FindClosestSensor>:


// 2. Function to find the closest predefined sensor data
uint8_t GET_u8FindClosestSensor(word* words, uint16_* sensor_reads, uint8_t num_words) {
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	2f 97       	sbiw	r28, 0x0f	; 15
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	9c 87       	std	Y+12, r25	; 0x0c
    14b8:	8b 87       	std	Y+11, r24	; 0x0b
    14ba:	7e 87       	std	Y+14, r23	; 0x0e
    14bc:	6d 87       	std	Y+13, r22	; 0x0d
    14be:	4f 87       	std	Y+15, r20	; 0x0f

    uint8_t closest_index = 0;
    14c0:	1a 86       	std	Y+10, r1	; 0x0a

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);
    14c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    14c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <GET_float32CalculateDistance>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8e 83       	std	Y+6, r24	; 0x06
    14d6:	9f 83       	std	Y+7, r25	; 0x07
    14d8:	a8 87       	std	Y+8, r26	; 0x08
    14da:	b9 87       	std	Y+9, r27	; 0x09

    for (uint8_t i = 1; i < num_words; i++) {
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	32 c0       	rjmp	.+100    	; 0x1546 <GET_u8FindClosestSensor+0xa4>
        float32_t distance = GET_float32CalculateDistance(sensor_reads, &words[i]);
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 01       	movw	r18, r24
    14ea:	22 95       	swap	r18
    14ec:	32 95       	swap	r19
    14ee:	30 7f       	andi	r19, 0xF0	; 240
    14f0:	32 27       	eor	r19, r18
    14f2:	20 7f       	andi	r18, 0xF0	; 240
    14f4:	32 27       	eor	r19, r18
    14f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14fa:	28 0f       	add	r18, r24
    14fc:	39 1f       	adc	r19, r25
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	9e 85       	ldd	r25, Y+14	; 0x0e
    1502:	b9 01       	movw	r22, r18
    1504:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <GET_float32CalculateDistance>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	ab 83       	std	Y+3, r26	; 0x03
    1512:	bc 83       	std	Y+4, r27	; 0x04
        if (distance < min_distance) {
    1514:	69 81       	ldd	r22, Y+1	; 0x01
    1516:	7a 81       	ldd	r23, Y+2	; 0x02
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	2e 81       	ldd	r18, Y+6	; 0x06
    151e:	3f 81       	ldd	r19, Y+7	; 0x07
    1520:	48 85       	ldd	r20, Y+8	; 0x08
    1522:	59 85       	ldd	r21, Y+9	; 0x09
    1524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1528:	88 23       	and	r24, r24
    152a:	54 f4       	brge	.+20     	; 0x1540 <GET_u8FindClosestSensor+0x9e>
            min_distance = distance;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	ab 81       	ldd	r26, Y+3	; 0x03
    1532:	bc 81       	ldd	r27, Y+4	; 0x04
    1534:	8e 83       	std	Y+6, r24	; 0x06
    1536:	9f 83       	std	Y+7, r25	; 0x07
    1538:	a8 87       	std	Y+8, r26	; 0x08
    153a:	b9 87       	std	Y+9, r27	; 0x09
            closest_index = i;
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	8a 87       	std	Y+10, r24	; 0x0a

    uint8_t closest_index = 0;

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);

    for (uint8_t i = 1; i < num_words; i++) {
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	8d 83       	std	Y+5, r24	; 0x05
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	98 17       	cp	r25, r24
    154c:	50 f2       	brcs	.-108    	; 0x14e2 <GET_u8FindClosestSensor+0x40>
            min_distance = distance;
            closest_index = i;
        }
    }

    return closest_index;
    154e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1550:	2f 96       	adiw	r28, 0x0f	; 15
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <GET_vidGetWordAndSound>:


// Main Function 
void GET_vidGetWordAndSound(uint16_ * sensor_reads, uint8_t * word_location )
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <GET_vidGetWordAndSound+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <GET_vidGetWordAndSound+0x8>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	9b 83       	std	Y+3, r25	; 0x03
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	7d 83       	std	Y+5, r23	; 0x05
    1576:	6c 83       	std	Y+4, r22	; 0x04
	
uint8_t i = GET_u8FindClosestSensor(words, sensor_reads, TOTAL_NO_OF_WORDS);
    1578:	85 eb       	ldi	r24, 0xB5	; 181
    157a:	92 e0       	ldi	r25, 0x02	; 2
    157c:	2a 81       	ldd	r18, Y+2	; 0x02
    157e:	3b 81       	ldd	r19, Y+3	; 0x03
    1580:	b9 01       	movw	r22, r18
    1582:	46 e1       	ldi	r20, 0x16	; 22
    1584:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <GET_u8FindClosestSensor>
    1588:	89 83       	std	Y+1, r24	; 0x01

word_location[0] = words[i].sentence;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	82 95       	swap	r24
    1592:	92 95       	swap	r25
    1594:	90 7f       	andi	r25, 0xF0	; 240
    1596:	98 27       	eor	r25, r24
    1598:	80 7f       	andi	r24, 0xF0	; 240
    159a:	98 27       	eor	r25, r24
    159c:	fc 01       	movw	r30, r24
    159e:	ed 53       	subi	r30, 0x3D	; 61
    15a0:	fd 4f       	sbci	r31, 0xFD	; 253
    15a2:	80 81       	ld	r24, Z
    15a4:	ec 81       	ldd	r30, Y+4	; 0x04
    15a6:	fd 81       	ldd	r31, Y+5	; 0x05
    15a8:	80 83       	st	Z, r24
word_location[1] = words[i].word;
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	dc 01       	movw	r26, r24
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	82 95       	swap	r24
    15ba:	92 95       	swap	r25
    15bc:	90 7f       	andi	r25, 0xF0	; 240
    15be:	98 27       	eor	r25, r24
    15c0:	80 7f       	andi	r24, 0xF0	; 240
    15c2:	98 27       	eor	r25, r24
    15c4:	fc 01       	movw	r30, r24
    15c6:	ec 53       	subi	r30, 0x3C	; 60
    15c8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ca:	80 81       	ld	r24, Z
    15cc:	8c 93       	st	X, r24

}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>:
#include"../../libraries/bit_math.h"
#include "../global_interrupt_driver/global_interrupt_int.h"
#include "../global_interrupt_driver/global_interrupt_register.h"

void GLOBAL_INTERRUPT_vidGlobalInterruptEnable(uint8_t mode)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x6>
    15e4:	0f 92       	push	r0
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3b 83       	std	Y+3, r19	; 0x03
    15f4:	2a 83       	std	Y+2, r18	; 0x02
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	69 f0       	breq	.+26     	; 0x1618 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x3a>
    15fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1600:	3b 81       	ldd	r19, Y+3	; 0x03
    1602:	21 30       	cpi	r18, 0x01	; 1
    1604:	31 05       	cpc	r19, r1
    1606:	79 f4       	brne	.+30     	; 0x1626 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
	{
		case ENABLED:
			SET_BIT(SREG,7);
    1608:	af e5       	ldi	r26, 0x5F	; 95
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ef e5       	ldi	r30, 0x5F	; 95
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	8c 93       	st	X, r24
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
			break;
		case DISABLED:
			CLR_BIT(SREG,7);
    1618:	af e5       	ldi	r26, 0x5F	; 95
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ef e5       	ldi	r30, 0x5F	; 95
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8f 77       	andi	r24, 0x7F	; 127
    1624:	8c 93       	st	X, r24
			break;
	}
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <DIO_u8SetPinMode>:
#include"../../libraries/bit_math.h"
#include"dio_register.h"
#include"dio_int.h"

uint8_t DIO_u8SetPinMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_u8SetPinMode+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_u8SetPinMode+0x8>
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_u8SetPinMode+0xa>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	8a 83       	std	Y+2, r24	; 0x02
    1642:	6b 83       	std	Y+3, r22	; 0x03
    1644:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1646:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3e 83       	std	Y+6, r19	; 0x06
    1650:	2d 83       	std	Y+5, r18	; 0x05
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	9e 81       	ldd	r25, Y+6	; 0x06
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <DIO_u8SetPinMode+0x2c>
    165c:	49 c0       	rjmp	.+146    	; 0x16f0 <DIO_u8SetPinMode+0xbe>
    165e:	2d 81       	ldd	r18, Y+5	; 0x05
    1660:	3e 81       	ldd	r19, Y+6	; 0x06
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <DIO_u8SetPinMode+0x40>
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	71 f0       	breq	.+28     	; 0x168c <DIO_u8SetPinMode+0x5a>
    1670:	d5 c0       	rjmp	.+426    	; 0x181c <DIO_u8SetPinMode+0x1ea>
    1672:	2d 81       	ldd	r18, Y+5	; 0x05
    1674:	3e 81       	ldd	r19, Y+6	; 0x06
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <DIO_u8SetPinMode+0x4c>
    167c:	6b c0       	rjmp	.+214    	; 0x1754 <DIO_u8SetPinMode+0x122>
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <DIO_u8SetPinMode+0x58>
    1688:	97 c0       	rjmp	.+302    	; 0x17b8 <DIO_u8SetPinMode+0x186>
    168a:	c8 c0       	rjmp	.+400    	; 0x181c <DIO_u8SetPinMode+0x1ea>
		{
		case PORT_A:
			if(mode==INPUT)CLR_BIT(DDRA_REG,pin_no);
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	88 23       	and	r24, r24
    1690:	a9 f4       	brne	.+42     	; 0x16bc <DIO_u8SetPinMode+0x8a>
    1692:	aa e3       	ldi	r26, 0x3A	; 58
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e3       	ldi	r30, 0x3A	; 58
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8SetPinMode+0x7e>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8SetPinMode+0x7a>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
    16ba:	b2 c0       	rjmp	.+356    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRA_REG,pin_no);
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	a1 f4       	brne	.+40     	; 0x16ea <DIO_u8SetPinMode+0xb8>
    16c2:	aa e3       	ldi	r26, 0x3A	; 58
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	ea e3       	ldi	r30, 0x3A	; 58
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_u8SetPinMode+0xae>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_u8SetPinMode+0xaa>
    16e4:	84 2b       	or	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	9b c0       	rjmp	.+310    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	98 c0       	rjmp	.+304    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_B:
			if(mode==INPUT)CLR_BIT(DDRB_REG,pin_no);
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	88 23       	and	r24, r24
    16f4:	a9 f4       	brne	.+42     	; 0x1720 <DIO_u8SetPinMode+0xee>
    16f6:	a7 e3       	ldi	r26, 0x37	; 55
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e7 e3       	ldi	r30, 0x37	; 55
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_u8SetPinMode+0xe2>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_u8SetPinMode+0xde>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	80 c0       	rjmp	.+256    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRB_REG,pin_no);
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	a1 f4       	brne	.+40     	; 0x174e <DIO_u8SetPinMode+0x11c>
    1726:	a7 e3       	ldi	r26, 0x37	; 55
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e7 e3       	ldi	r30, 0x37	; 55
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_u8SetPinMode+0x112>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_u8SetPinMode+0x10e>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	69 c0       	rjmp	.+210    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	66 c0       	rjmp	.+204    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_C:
			if(mode==INPUT)CLR_BIT(DDRC_REG,pin_no);
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	88 23       	and	r24, r24
    1758:	a9 f4       	brne	.+42     	; 0x1784 <DIO_u8SetPinMode+0x152>
    175a:	a4 e3       	ldi	r26, 0x34	; 52
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e4 e3       	ldi	r30, 0x34	; 52
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_u8SetPinMode+0x146>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_u8SetPinMode+0x142>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	4e c0       	rjmp	.+156    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRC_REG,pin_no);
    1784:	8c 81       	ldd	r24, Y+4	; 0x04
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	a1 f4       	brne	.+40     	; 0x17b2 <DIO_u8SetPinMode+0x180>
    178a:	a4 e3       	ldi	r26, 0x34	; 52
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e4 e3       	ldi	r30, 0x34	; 52
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8SetPinMode+0x176>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8SetPinMode+0x172>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	37 c0       	rjmp	.+110    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	34 c0       	rjmp	.+104    	; 0x1820 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_D:
			if(mode==INPUT)CLR_BIT(DDRD_REG,pin_no);
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	88 23       	and	r24, r24
    17bc:	a9 f4       	brne	.+42     	; 0x17e8 <DIO_u8SetPinMode+0x1b6>
    17be:	a1 e3       	ldi	r26, 0x31	; 49
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e1 e3       	ldi	r30, 0x31	; 49
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_u8SetPinMode+0x1aa>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_u8SetPinMode+0x1a6>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	1c c0       	rjmp	.+56     	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRD_REG,pin_no);
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <DIO_u8SetPinMode+0x1e4>
    17ee:	a1 e3       	ldi	r26, 0x31	; 49
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e1 e3       	ldi	r30, 0x31	; 49
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_u8SetPinMode+0x1da>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_u8SetPinMode+0x1d6>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_u8SetPinMode+0x1ee>
		break;
		default : error_status = E_NOK; break;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1820:	89 81       	ldd	r24, Y+1	; 0x01
}
    1822:	26 96       	adiw	r28, 0x06	; 6
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <DIO_u8SetPinValue>:
uint8_t DIO_u8SetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t value)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <DIO_u8SetPinValue+0x6>
    183a:	00 d0       	rcall	.+0      	; 0x183c <DIO_u8SetPinValue+0x8>
    183c:	00 d0       	rcall	.+0      	; 0x183e <DIO_u8SetPinValue+0xa>
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	8a 83       	std	Y+2, r24	; 0x02
    1844:	6b 83       	std	Y+3, r22	; 0x03
    1846:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1848:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3e 83       	std	Y+6, r19	; 0x06
    1852:	2d 83       	std	Y+5, r18	; 0x05
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	91 05       	cpc	r25, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <DIO_u8SetPinValue+0x2c>
    185e:	49 c0       	rjmp	.+146    	; 0x18f2 <DIO_u8SetPinValue+0xbe>
    1860:	2d 81       	ldd	r18, Y+5	; 0x05
    1862:	3e 81       	ldd	r19, Y+6	; 0x06
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <DIO_u8SetPinValue+0x40>
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	71 f0       	breq	.+28     	; 0x188e <DIO_u8SetPinValue+0x5a>
    1872:	d5 c0       	rjmp	.+426    	; 0x1a1e <DIO_u8SetPinValue+0x1ea>
    1874:	2d 81       	ldd	r18, Y+5	; 0x05
    1876:	3e 81       	ldd	r19, Y+6	; 0x06
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <DIO_u8SetPinValue+0x4c>
    187e:	6b c0       	rjmp	.+214    	; 0x1956 <DIO_u8SetPinValue+0x122>
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <DIO_u8SetPinValue+0x58>
    188a:	97 c0       	rjmp	.+302    	; 0x19ba <DIO_u8SetPinValue+0x186>
    188c:	c8 c0       	rjmp	.+400    	; 0x1a1e <DIO_u8SetPinValue+0x1ea>
		{
		case PORT_A:
			if(value==LOW)CLR_BIT(PORTA_REG,pin_no);
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	88 23       	and	r24, r24
    1892:	a9 f4       	brne	.+42     	; 0x18be <DIO_u8SetPinValue+0x8a>
    1894:	ab e3       	ldi	r26, 0x3B	; 59
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e3       	ldi	r30, 0x3B	; 59
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_u8SetPinValue+0x7e>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_u8SetPinValue+0x7a>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	b2 c0       	rjmp	.+356    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTA_REG,pin_no);
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	a1 f4       	brne	.+40     	; 0x18ec <DIO_u8SetPinValue+0xb8>
    18c4:	ab e3       	ldi	r26, 0x3B	; 59
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	eb e3       	ldi	r30, 0x3B	; 59
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_u8SetPinValue+0xae>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_u8SetPinValue+0xaa>
    18e6:	84 2b       	or	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	9b c0       	rjmp	.+310    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	98 c0       	rjmp	.+304    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_B:
			if(value==LOW)CLR_BIT(PORTB_REG,pin_no);
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	88 23       	and	r24, r24
    18f6:	a9 f4       	brne	.+42     	; 0x1922 <DIO_u8SetPinValue+0xee>
    18f8:	a8 e3       	ldi	r26, 0x38	; 56
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_u8SetPinValue+0xe2>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_u8SetPinValue+0xde>
    191a:	80 95       	com	r24
    191c:	84 23       	and	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	80 c0       	rjmp	.+256    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTB_REG,pin_no);
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <DIO_u8SetPinValue+0x11c>
    1928:	a8 e3       	ldi	r26, 0x38	; 56
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e8 e3       	ldi	r30, 0x38	; 56
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8SetPinValue+0x112>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_u8SetPinValue+0x10e>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	69 c0       	rjmp	.+210    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	66 c0       	rjmp	.+204    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_C:
			if(value==LOW)CLR_BIT(PORTC_REG,pin_no);
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	88 23       	and	r24, r24
    195a:	a9 f4       	brne	.+42     	; 0x1986 <DIO_u8SetPinValue+0x152>
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <DIO_u8SetPinValue+0x146>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <DIO_u8SetPinValue+0x142>
    197e:	80 95       	com	r24
    1980:	84 23       	and	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	4e c0       	rjmp	.+156    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTC_REG,pin_no);
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	a1 f4       	brne	.+40     	; 0x19b4 <DIO_u8SetPinValue+0x180>
    198c:	a5 e3       	ldi	r26, 0x35	; 53
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_u8SetPinValue+0x176>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_u8SetPinValue+0x172>
    19ae:	84 2b       	or	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	37 c0       	rjmp	.+110    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	34 c0       	rjmp	.+104    	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_D:
			if(value==LOW)CLR_BIT(PORTD_REG,pin_no);
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	88 23       	and	r24, r24
    19be:	a9 f4       	brne	.+42     	; 0x19ea <DIO_u8SetPinValue+0x1b6>
    19c0:	a2 e3       	ldi	r26, 0x32	; 50
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_u8SetPinValue+0x1aa>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_u8SetPinValue+0x1a6>
    19e2:	80 95       	com	r24
    19e4:	84 23       	and	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	1c c0       	rjmp	.+56     	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTD_REG,pin_no);
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	a1 f4       	brne	.+40     	; 0x1a18 <DIO_u8SetPinValue+0x1e4>
    19f0:	a2 e3       	ldi	r26, 0x32	; 50
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e2 e3       	ldi	r30, 0x32	; 50
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	48 2f       	mov	r20, r24
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 2e       	mov	r0, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <DIO_u8SetPinValue+0x1da>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	0a 94       	dec	r0
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <DIO_u8SetPinValue+0x1d6>
    1a12:	84 2b       	or	r24, r20
    1a14:	8c 93       	st	X, r24
    1a16:	05 c0       	rjmp	.+10     	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_u8SetPinValue+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a24:	26 96       	adiw	r28, 0x06	; 6
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <DIO_u8GetPinValue>:
uint8_t DIO_u8GetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	27 97       	sbiw	r28, 0x07	; 7
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	6b 83       	std	Y+3, r22	; 0x03
    1a4e:	5d 83       	std	Y+5, r21	; 0x05
    1a50:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1a52:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	88 30       	cpi	r24, 0x08	; 8
    1a58:	08 f0       	brcs	.+2      	; 0x1a5c <DIO_u8GetPinValue+0x26>
    1a5a:	74 c0       	rjmp	.+232    	; 0x1b44 <DIO_u8GetPinValue+0x10e>
	{
		switch(port_id)
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	3f 83       	std	Y+7, r19	; 0x07
    1a64:	2e 83       	std	Y+6, r18	; 0x06
    1a66:	4e 81       	ldd	r20, Y+6	; 0x06
    1a68:	5f 81       	ldd	r21, Y+7	; 0x07
    1a6a:	41 30       	cpi	r20, 0x01	; 1
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	59 f1       	breq	.+86     	; 0x1ac6 <DIO_u8GetPinValue+0x90>
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	9f 81       	ldd	r25, Y+7	; 0x07
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	91 05       	cpc	r25, r1
    1a78:	34 f4       	brge	.+12     	; 0x1a86 <DIO_u8GetPinValue+0x50>
    1a7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7e:	21 15       	cp	r18, r1
    1a80:	31 05       	cpc	r19, r1
    1a82:	69 f0       	breq	.+26     	; 0x1a9e <DIO_u8GetPinValue+0x68>
    1a84:	5c c0       	rjmp	.+184    	; 0x1b3e <DIO_u8GetPinValue+0x108>
    1a86:	4e 81       	ldd	r20, Y+6	; 0x06
    1a88:	5f 81       	ldd	r21, Y+7	; 0x07
    1a8a:	42 30       	cpi	r20, 0x02	; 2
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	79 f1       	breq	.+94     	; 0x1aee <DIO_u8GetPinValue+0xb8>
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	9f 81       	ldd	r25, Y+7	; 0x07
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <DIO_u8GetPinValue+0x66>
    1a9a:	3d c0       	rjmp	.+122    	; 0x1b16 <DIO_u8GetPinValue+0xe0>
    1a9c:	50 c0       	rjmp	.+160    	; 0x1b3e <DIO_u8GetPinValue+0x108>
		{
		case PORT_A: *value = GET_BIT(PINA_REG,pin_no); break;
    1a9e:	e9 e3       	ldi	r30, 0x39	; 57
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a9 01       	movw	r20, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_u8GetPinValue+0x80>
    1ab2:	55 95       	asr	r21
    1ab4:	47 95       	ror	r20
    1ab6:	8a 95       	dec	r24
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_u8GetPinValue+0x7c>
    1aba:	ca 01       	movw	r24, r20
    1abc:	81 70       	andi	r24, 0x01	; 1
    1abe:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac2:	80 83       	st	Z, r24
    1ac4:	41 c0       	rjmp	.+130    	; 0x1b48 <DIO_u8GetPinValue+0x112>
		case PORT_B: *value = GET_BIT(PINB_REG,pin_no); break;
    1ac6:	e6 e3       	ldi	r30, 0x36	; 54
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a9 01       	movw	r20, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_u8GetPinValue+0xa8>
    1ada:	55 95       	asr	r21
    1adc:	47 95       	ror	r20
    1ade:	8a 95       	dec	r24
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_u8GetPinValue+0xa4>
    1ae2:	ca 01       	movw	r24, r20
    1ae4:	81 70       	andi	r24, 0x01	; 1
    1ae6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae8:	fd 81       	ldd	r31, Y+5	; 0x05
    1aea:	80 83       	st	Z, r24
    1aec:	2d c0       	rjmp	.+90     	; 0x1b48 <DIO_u8GetPinValue+0x112>
		case PORT_C: *value = GET_BIT(PINC_REG,pin_no); break;
    1aee:	e3 e3       	ldi	r30, 0x33	; 51
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	88 2f       	mov	r24, r24
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a9 01       	movw	r20, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_u8GetPinValue+0xd0>
    1b02:	55 95       	asr	r21
    1b04:	47 95       	ror	r20
    1b06:	8a 95       	dec	r24
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_u8GetPinValue+0xcc>
    1b0a:	ca 01       	movw	r24, r20
    1b0c:	81 70       	andi	r24, 0x01	; 1
    1b0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b10:	fd 81       	ldd	r31, Y+5	; 0x05
    1b12:	80 83       	st	Z, r24
    1b14:	19 c0       	rjmp	.+50     	; 0x1b48 <DIO_u8GetPinValue+0x112>
		case PORT_D: *value = GET_BIT(PIND_REG,pin_no); break;
    1b16:	e0 e3       	ldi	r30, 0x30	; 48
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a9 01       	movw	r20, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_u8GetPinValue+0xf8>
    1b2a:	55 95       	asr	r21
    1b2c:	47 95       	ror	r20
    1b2e:	8a 95       	dec	r24
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_u8GetPinValue+0xf4>
    1b32:	ca 01       	movw	r24, r20
    1b34:	81 70       	andi	r24, 0x01	; 1
    1b36:	ec 81       	ldd	r30, Y+4	; 0x04
    1b38:	fd 81       	ldd	r31, Y+5	; 0x05
    1b3a:	80 83       	st	Z, r24
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <DIO_u8GetPinValue+0x112>
		default : error_status = E_NOK; break;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_u8GetPinValue+0x112>
		}
	}else error_status = E_NOK;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4a:	27 96       	adiw	r28, 0x07	; 7
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <DIO_u8IsPinOutPut>:
uint8_t DIO_u8IsPinOutPut(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	27 97       	sbiw	r28, 0x07	; 7
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	8a 83       	std	Y+2, r24	; 0x02
    1b72:	6b 83       	std	Y+3, r22	; 0x03
    1b74:	5d 83       	std	Y+5, r21	; 0x05
    1b76:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1b78:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	88 30       	cpi	r24, 0x08	; 8
    1b7e:	08 f0       	brcs	.+2      	; 0x1b82 <DIO_u8IsPinOutPut+0x26>
    1b80:	74 c0       	rjmp	.+232    	; 0x1c6a <DIO_u8IsPinOutPut+0x10e>
		{
			switch(port_id)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3f 83       	std	Y+7, r19	; 0x07
    1b8a:	2e 83       	std	Y+6, r18	; 0x06
    1b8c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b8e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b90:	41 30       	cpi	r20, 0x01	; 1
    1b92:	51 05       	cpc	r21, r1
    1b94:	59 f1       	breq	.+86     	; 0x1bec <DIO_u8IsPinOutPut+0x90>
    1b96:	8e 81       	ldd	r24, Y+6	; 0x06
    1b98:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9a:	82 30       	cpi	r24, 0x02	; 2
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	34 f4       	brge	.+12     	; 0x1bac <DIO_u8IsPinOutPut+0x50>
    1ba0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba4:	21 15       	cp	r18, r1
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	69 f0       	breq	.+26     	; 0x1bc4 <DIO_u8IsPinOutPut+0x68>
    1baa:	5c c0       	rjmp	.+184    	; 0x1c64 <DIO_u8IsPinOutPut+0x108>
    1bac:	4e 81       	ldd	r20, Y+6	; 0x06
    1bae:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb0:	42 30       	cpi	r20, 0x02	; 2
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	79 f1       	breq	.+94     	; 0x1c14 <DIO_u8IsPinOutPut+0xb8>
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <DIO_u8IsPinOutPut+0x66>
    1bc0:	3d c0       	rjmp	.+122    	; 0x1c3c <DIO_u8IsPinOutPut+0xe0>
    1bc2:	50 c0       	rjmp	.+160    	; 0x1c64 <DIO_u8IsPinOutPut+0x108>
			{
			case PORT_A: *value = GET_BIT(DDRA_REG,pin_no); break;
    1bc4:	ea e3       	ldi	r30, 0x3A	; 58
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a9 01       	movw	r20, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_u8IsPinOutPut+0x80>
    1bd8:	55 95       	asr	r21
    1bda:	47 95       	ror	r20
    1bdc:	8a 95       	dec	r24
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <DIO_u8IsPinOutPut+0x7c>
    1be0:	ca 01       	movw	r24, r20
    1be2:	81 70       	andi	r24, 0x01	; 1
    1be4:	ec 81       	ldd	r30, Y+4	; 0x04
    1be6:	fd 81       	ldd	r31, Y+5	; 0x05
    1be8:	80 83       	st	Z, r24
    1bea:	41 c0       	rjmp	.+130    	; 0x1c6e <DIO_u8IsPinOutPut+0x112>
			case PORT_B: *value = GET_BIT(DDRB_REG,pin_no); break;
    1bec:	e7 e3       	ldi	r30, 0x37	; 55
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_u8IsPinOutPut+0xa8>
    1c00:	55 95       	asr	r21
    1c02:	47 95       	ror	r20
    1c04:	8a 95       	dec	r24
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_u8IsPinOutPut+0xa4>
    1c08:	ca 01       	movw	r24, r20
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c10:	80 83       	st	Z, r24
    1c12:	2d c0       	rjmp	.+90     	; 0x1c6e <DIO_u8IsPinOutPut+0x112>
			case PORT_C: *value = GET_BIT(DDRC_REG,pin_no); break;
    1c14:	e4 e3       	ldi	r30, 0x34	; 52
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_u8IsPinOutPut+0xd0>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_u8IsPinOutPut+0xcc>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	ec 81       	ldd	r30, Y+4	; 0x04
    1c36:	fd 81       	ldd	r31, Y+5	; 0x05
    1c38:	80 83       	st	Z, r24
    1c3a:	19 c0       	rjmp	.+50     	; 0x1c6e <DIO_u8IsPinOutPut+0x112>
			case PORT_D: *value = GET_BIT(DDRD_REG,pin_no); break;
    1c3c:	e1 e3       	ldi	r30, 0x31	; 49
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_u8IsPinOutPut+0xf8>
    1c50:	55 95       	asr	r21
    1c52:	47 95       	ror	r20
    1c54:	8a 95       	dec	r24
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_u8IsPinOutPut+0xf4>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c60:	80 83       	st	Z, r24
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <DIO_u8IsPinOutPut+0x112>
			default : error_status = E_NOK; break;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_u8IsPinOutPut+0x112>
			}
		}else error_status = E_NOK;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c70:	27 96       	adiw	r28, 0x07	; 7
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <DIO_u8SetPullUpMode>:
uint8_t DIO_u8SetPullUpMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	8a 83       	std	Y+2, r24	; 0x02
    1c98:	6b 83       	std	Y+3, r22	; 0x03
    1c9a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	88 30       	cpi	r24, 0x08	; 8
    1ca2:	08 f0       	brcs	.+2      	; 0x1ca6 <DIO_u8SetPullUpMode+0x24>
    1ca4:	db c0       	rjmp	.+438    	; 0x1e5c <DIO_u8SetPullUpMode+0x1da>
	{
	switch(port_id)
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3e 87       	std	Y+14, r19	; 0x0e
    1cae:	2d 87       	std	Y+13, r18	; 0x0d
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <DIO_u8SetPullUpMode+0x3a>
    1cba:	44 c0       	rjmp	.+136    	; 0x1d44 <DIO_u8SetPullUpMode+0xc2>
    1cbc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cbe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <DIO_u8SetPullUpMode+0x4e>
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	71 f0       	breq	.+28     	; 0x1cea <DIO_u8SetPullUpMode+0x68>
    1cce:	c3 c0       	rjmp	.+390    	; 0x1e56 <DIO_u8SetPullUpMode+0x1d4>
    1cd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <DIO_u8SetPullUpMode+0x5a>
    1cda:	62 c0       	rjmp	.+196    	; 0x1da0 <DIO_u8SetPullUpMode+0x11e>
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <DIO_u8SetPullUpMode+0x66>
    1ce6:	89 c0       	rjmp	.+274    	; 0x1dfa <DIO_u8SetPullUpMode+0x178>
    1ce8:	b6 c0       	rjmp	.+364    	; 0x1e56 <DIO_u8SetPullUpMode+0x1d4>
	{
	case PORT_A: mode==Enabled?SET_BIT(PORTA_REG,pin_no):CLR_BIT(PORTA_REG,pin_no); break;
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	a9 f4       	brne	.+42     	; 0x1d1a <DIO_u8SetPullUpMode+0x98>
    1cf0:	ab e3       	ldi	r26, 0x3B	; 59
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	eb e3       	ldi	r30, 0x3B	; 59
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8SetPullUpMode+0x8c>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_u8SetPullUpMode+0x88>
    1d12:	84 2b       	or	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	9c 91       	ld	r25, X
    1d18:	a3 c0       	rjmp	.+326    	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
    1d1a:	ab e3       	ldi	r26, 0x3B	; 59
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	eb e3       	ldi	r30, 0x3B	; 59
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_u8SetPullUpMode+0xb4>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	2a 95       	dec	r18
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_u8SetPullUpMode+0xb0>
    1d3a:	80 95       	com	r24
    1d3c:	84 23       	and	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	2c 91       	ld	r18, X
    1d42:	8e c0       	rjmp	.+284    	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
	case PORT_B: mode==Enabled?SET_BIT(PORTB_REG,pin_no):CLR_BIT(PORTB_REG,pin_no); break;
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	a9 f4       	brne	.+42     	; 0x1d74 <DIO_u8SetPullUpMode+0xf2>
    1d4a:	a8 e3       	ldi	r26, 0x38	; 56
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e8 e3       	ldi	r30, 0x38	; 56
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <DIO_u8SetPullUpMode+0xe6>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <DIO_u8SetPullUpMode+0xe2>
    1d6c:	84 2b       	or	r24, r20
    1d6e:	8c 93       	st	X, r24
    1d70:	3c 91       	ld	r19, X
    1d72:	76 c0       	rjmp	.+236    	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
    1d74:	a8 e3       	ldi	r26, 0x38	; 56
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e8 e3       	ldi	r30, 0x38	; 56
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8SetPullUpMode+0x110>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8SetPullUpMode+0x10c>
    1d96:	80 95       	com	r24
    1d98:	84 23       	and	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	8c 91       	ld	r24, X
    1d9e:	60 c0       	rjmp	.+192    	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
	case PORT_C: mode==Enabled?SET_BIT(PORTC_REG,pin_no):CLR_BIT(PORTC_REG,pin_no); break;
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	a9 f4       	brne	.+42     	; 0x1dd0 <DIO_u8SetPullUpMode+0x14e>
    1da6:	a5 e3       	ldi	r26, 0x35	; 53
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e3       	ldi	r30, 0x35	; 53
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_u8SetPullUpMode+0x142>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_u8SetPullUpMode+0x13e>
    1dc8:	84 2b       	or	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	9c 91       	ld	r25, X
    1dce:	48 c0       	rjmp	.+144    	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
    1dd0:	a5 e3       	ldi	r26, 0x35	; 53
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e3       	ldi	r30, 0x35	; 53
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_u8SetPullUpMode+0x16a>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	2a 95       	dec	r18
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <DIO_u8SetPullUpMode+0x166>
    1df0:	80 95       	com	r24
    1df2:	84 23       	and	r24, r20
    1df4:	8c 93       	st	X, r24
    1df6:	2c 91       	ld	r18, X
    1df8:	33 c0       	rjmp	.+102    	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
	case PORT_D: mode==Enabled?SET_BIT(PORTD_REG,pin_no):CLR_BIT(PORTD_REG,pin_no); break;
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	a9 f4       	brne	.+42     	; 0x1e2a <DIO_u8SetPullUpMode+0x1a8>
    1e00:	a2 e3       	ldi	r26, 0x32	; 50
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e2 e3       	ldi	r30, 0x32	; 50
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_u8SetPullUpMode+0x19c>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_u8SetPullUpMode+0x198>
    1e22:	84 2b       	or	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	3c 91       	ld	r19, X
    1e28:	1b c0       	rjmp	.+54     	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
    1e2a:	a2 e3       	ldi	r26, 0x32	; 50
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e2 e3       	ldi	r30, 0x32	; 50
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <DIO_u8SetPullUpMode+0x1c6>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <DIO_u8SetPullUpMode+0x1c2>
    1e4c:	80 95       	com	r24
    1e4e:	84 23       	and	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	8c 91       	ld	r24, X
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
	default : error_status = E_NOK; break;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <DIO_u8SetPullUpMode+0x1de>
	}
	}else error_status=E_NOK;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e62:	2e 96       	adiw	r28, 0x0e	; 14
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <DIO_u8SetPortMode>:

uint8_t DIO_u8SetPortMode(uint8_t port_id,uint8_t mode)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <DIO_u8SetPortMode+0x6>
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <DIO_u8SetPortMode+0x8>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1e86:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	8c 81       	ldd	r24, Y+4	; 0x04
    1e94:	9d 81       	ldd	r25, Y+5	; 0x05
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	91 05       	cpc	r25, r1
    1e9a:	d1 f0       	breq	.+52     	; 0x1ed0 <DIO_u8SetPortMode+0x5c>
    1e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea0:	22 30       	cpi	r18, 0x02	; 2
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <DIO_u8SetPortMode+0x3c>
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	61 f0       	breq	.+24     	; 0x1ec6 <DIO_u8SetPortMode+0x52>
    1eae:	1f c0       	rjmp	.+62     	; 0x1eee <DIO_u8SetPortMode+0x7a>
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb4:	22 30       	cpi	r18, 0x02	; 2
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	81 f0       	breq	.+32     	; 0x1eda <DIO_u8SetPortMode+0x66>
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ebe:	83 30       	cpi	r24, 0x03	; 3
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <DIO_u8SetPortMode+0x70>
    1ec4:	14 c0       	rjmp	.+40     	; 0x1eee <DIO_u8SetPortMode+0x7a>
	{
	case PORT_A: DDRA_REG = mode; break;
    1ec6:	ea e3       	ldi	r30, 0x3A	; 58
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	80 83       	st	Z, r24
    1ece:	11 c0       	rjmp	.+34     	; 0x1ef2 <DIO_u8SetPortMode+0x7e>
	case PORT_B: DDRB_REG = mode; break;
    1ed0:	e7 e3       	ldi	r30, 0x37	; 55
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	80 83       	st	Z, r24
    1ed8:	0c c0       	rjmp	.+24     	; 0x1ef2 <DIO_u8SetPortMode+0x7e>
	case PORT_C: DDRC_REG = mode; break;
    1eda:	e4 e3       	ldi	r30, 0x34	; 52
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	80 83       	st	Z, r24
    1ee2:	07 c0       	rjmp	.+14     	; 0x1ef2 <DIO_u8SetPortMode+0x7e>
	case PORT_D: DDRD_REG = mode; break;
    1ee4:	e1 e3       	ldi	r30, 0x31	; 49
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	80 83       	st	Z, r24
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_u8SetPortMode+0x7e>
	default : error_status = E_NOK; break;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <DIO_u8SetPortValue>:
uint8_t DIO_u8SetPortValue(uint8_t port_id,uint8_t value)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <DIO_u8SetPortValue+0x6>
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <DIO_u8SetPortValue+0x8>
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	8a 83       	std	Y+2, r24	; 0x02
    1f14:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1f16:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	3d 83       	std	Y+5, r19	; 0x05
    1f20:	2c 83       	std	Y+4, r18	; 0x04
    1f22:	8c 81       	ldd	r24, Y+4	; 0x04
    1f24:	9d 81       	ldd	r25, Y+5	; 0x05
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	91 05       	cpc	r25, r1
    1f2a:	d1 f0       	breq	.+52     	; 0x1f60 <DIO_u8SetPortValue+0x5c>
    1f2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f30:	22 30       	cpi	r18, 0x02	; 2
    1f32:	31 05       	cpc	r19, r1
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <DIO_u8SetPortValue+0x3c>
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	61 f0       	breq	.+24     	; 0x1f56 <DIO_u8SetPortValue+0x52>
    1f3e:	1f c0       	rjmp	.+62     	; 0x1f7e <DIO_u8SetPortValue+0x7a>
    1f40:	2c 81       	ldd	r18, Y+4	; 0x04
    1f42:	3d 81       	ldd	r19, Y+5	; 0x05
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	81 f0       	breq	.+32     	; 0x1f6a <DIO_u8SetPortValue+0x66>
    1f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4e:	83 30       	cpi	r24, 0x03	; 3
    1f50:	91 05       	cpc	r25, r1
    1f52:	81 f0       	breq	.+32     	; 0x1f74 <DIO_u8SetPortValue+0x70>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A: PORTA_REG = value; break;
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	80 83       	st	Z, r24
    1f5e:	11 c0       	rjmp	.+34     	; 0x1f82 <DIO_u8SetPortValue+0x7e>
		case PORT_B: PORTB_REG = value; break;
    1f60:	e8 e3       	ldi	r30, 0x38	; 56
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	80 83       	st	Z, r24
    1f68:	0c c0       	rjmp	.+24     	; 0x1f82 <DIO_u8SetPortValue+0x7e>
		case PORT_C: PORTC_REG = value; break;
    1f6a:	e5 e3       	ldi	r30, 0x35	; 53
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	80 83       	st	Z, r24
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <DIO_u8SetPortValue+0x7e>
		case PORT_D: PORTD_REG = value; break;
    1f74:	e2 e3       	ldi	r30, 0x32	; 50
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	80 83       	st	Z, r24
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <DIO_u8SetPortValue+0x7e>
		default : error_status = E_NOK; break;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <DIO_u8GetPortValue>:
uint8_t DIO_u8GetPortValue(uint8_t port_id,uint8_t * value)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <DIO_u8GetPortValue+0x6>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <DIO_u8GetPortValue+0x8>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <DIO_u8GetPortValue+0xa>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	8a 83       	std	Y+2, r24	; 0x02
    1fa4:	7c 83       	std	Y+4, r23	; 0x04
    1fa6:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1fa8:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	3e 83       	std	Y+6, r19	; 0x06
    1fb2:	2d 83       	std	Y+5, r18	; 0x05
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	e1 f0       	breq	.+56     	; 0x1ff6 <DIO_u8GetPortValue+0x62>
    1fbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <DIO_u8GetPortValue+0x3e>
    1fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fca:	9e 81       	ldd	r25, Y+6	; 0x06
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <DIO_u8GetPortValue+0x54>
    1fd0:	27 c0       	rjmp	.+78     	; 0x2020 <DIO_u8GetPortValue+0x8c>
    1fd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	a1 f0       	breq	.+40     	; 0x2004 <DIO_u8GetPortValue+0x70>
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	83 30       	cpi	r24, 0x03	; 3
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	b1 f0       	breq	.+44     	; 0x2012 <DIO_u8GetPortValue+0x7e>
    1fe6:	1c c0       	rjmp	.+56     	; 0x2020 <DIO_u8GetPortValue+0x8c>
		{
		case PORT_A: *value = PINA_REG; break;
    1fe8:	e9 e3       	ldi	r30, 0x39	; 57
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff2:	80 83       	st	Z, r24
    1ff4:	17 c0       	rjmp	.+46     	; 0x2024 <DIO_u8GetPortValue+0x90>
		case PORT_B: *value = PINB_REG; break;
    1ff6:	e6 e3       	ldi	r30, 0x36	; 54
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ffe:	fc 81       	ldd	r31, Y+4	; 0x04
    2000:	80 83       	st	Z, r24
    2002:	10 c0       	rjmp	.+32     	; 0x2024 <DIO_u8GetPortValue+0x90>
		case PORT_C: *value = PINC_REG; break;
    2004:	e3 e3       	ldi	r30, 0x33	; 51
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	eb 81       	ldd	r30, Y+3	; 0x03
    200c:	fc 81       	ldd	r31, Y+4	; 0x04
    200e:	80 83       	st	Z, r24
    2010:	09 c0       	rjmp	.+18     	; 0x2024 <DIO_u8GetPortValue+0x90>
		case PORT_D: *value = PIND_REG; break;
    2012:	e0 e3       	ldi	r30, 0x30	; 48
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	80 83       	st	Z, r24
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <DIO_u8GetPortValue+0x90>
		default : error_status = E_NOK; break;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
}
    2026:	26 96       	adiw	r28, 0x06	; 6
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <DIO_u8SetPortPullUpMode>:

uint8_t DIO_u8SetPortPullUpMode(uint8_t port_id,uint8_t mode)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <DIO_u8SetPortPullUpMode+0x6>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <DIO_u8SetPortPullUpMode+0x8>
    2040:	0f 92       	push	r0
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    204a:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	3d 83       	std	Y+5, r19	; 0x05
    2054:	2c 83       	std	Y+4, r18	; 0x04
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	9d 81       	ldd	r25, Y+5	; 0x05
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	91 05       	cpc	r25, r1
    205e:	d1 f0       	breq	.+52     	; 0x2094 <DIO_u8SetPortPullUpMode+0x5c>
    2060:	2c 81       	ldd	r18, Y+4	; 0x04
    2062:	3d 81       	ldd	r19, Y+5	; 0x05
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	2c f4       	brge	.+10     	; 0x2074 <DIO_u8SetPortPullUpMode+0x3c>
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	61 f0       	breq	.+24     	; 0x208a <DIO_u8SetPortPullUpMode+0x52>
    2072:	1f c0       	rjmp	.+62     	; 0x20b2 <DIO_u8SetPortPullUpMode+0x7a>
    2074:	2c 81       	ldd	r18, Y+4	; 0x04
    2076:	3d 81       	ldd	r19, Y+5	; 0x05
    2078:	22 30       	cpi	r18, 0x02	; 2
    207a:	31 05       	cpc	r19, r1
    207c:	81 f0       	breq	.+32     	; 0x209e <DIO_u8SetPortPullUpMode+0x66>
    207e:	8c 81       	ldd	r24, Y+4	; 0x04
    2080:	9d 81       	ldd	r25, Y+5	; 0x05
    2082:	83 30       	cpi	r24, 0x03	; 3
    2084:	91 05       	cpc	r25, r1
    2086:	81 f0       	breq	.+32     	; 0x20a8 <DIO_u8SetPortPullUpMode+0x70>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <DIO_u8SetPortPullUpMode+0x7a>
	{
	case PORT_A: PORTA_REG=mode; break;
    208a:	eb e3       	ldi	r30, 0x3B	; 59
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	80 83       	st	Z, r24
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_B: PORTB_REG=mode; break;
    2094:	e8 e3       	ldi	r30, 0x38	; 56
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	80 83       	st	Z, r24
    209c:	0c c0       	rjmp	.+24     	; 0x20b6 <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_C: PORTC_REG=mode; break;
    209e:	e5 e3       	ldi	r30, 0x35	; 53
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	80 83       	st	Z, r24
    20a6:	07 c0       	rjmp	.+14     	; 0x20b6 <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_D: PORTD_REG=mode; break;
    20a8:	e2 e3       	ldi	r30, 0x32	; 50
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	80 83       	st	Z, r24
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <DIO_u8SetPortPullUpMode+0x7e>
	default : error_status = E_NOK; break;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <ADC_vidAdcInit>:
uint16_* ADC_READ=NULL;

static void ADC_vidSetMultiPlexer(uint8_t adc_pin);

void ADC_vidAdcInit(uint8_t voltage_reference)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <ADC_vidAdcInit+0x6>
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,7);
    20d6:	a6 e2       	ldi	r26, 0x26	; 38
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e6 e2       	ldi	r30, 0x26	; 38
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 68       	ori	r24, 0x80	; 128
    20e2:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,2);
    20e4:	a6 e2       	ldi	r26, 0x26	; 38
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e6 e2       	ldi	r30, 0x26	; 38
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8b 7f       	andi	r24, 0xFB	; 251
    20f0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    20f2:	a6 e2       	ldi	r26, 0x26	; 38
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e6 e2       	ldi	r30, 0x26	; 38
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	82 60       	ori	r24, 0x02	; 2
    20fe:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    2100:	a6 e2       	ldi	r26, 0x26	; 38
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e2       	ldi	r30, 0x26	; 38
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8e 7f       	andi	r24, 0xFE	; 254
    210c:	8c 93       	st	X, r24
	switch(voltage_reference)
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	3b 83       	std	Y+3, r19	; 0x03
    2116:	2a 83       	std	Y+2, r18	; 0x02
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	9b 81       	ldd	r25, Y+3	; 0x03
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	91 05       	cpc	r25, r1
    2120:	c9 f0       	breq	.+50     	; 0x2154 <ADC_vidAdcInit+0x8c>
    2122:	2a 81       	ldd	r18, Y+2	; 0x02
    2124:	3b 81       	ldd	r19, Y+3	; 0x03
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	31 05       	cpc	r19, r1
    212a:	29 f0       	breq	.+10     	; 0x2136 <ADC_vidAdcInit+0x6e>
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	f9 f0       	breq	.+62     	; 0x2172 <ADC_vidAdcInit+0xaa>
    2134:	2c c0       	rjmp	.+88     	; 0x218e <ADC_vidAdcInit+0xc6>
	{
	case AREF_VOLTAGE:
		CLR_BIT(ADMUX,7);
    2136:	a7 e2       	ldi	r26, 0x27	; 39
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e7 e2       	ldi	r30, 0x27	; 39
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 77       	andi	r24, 0x7F	; 127
    2142:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,6);
    2144:	a7 e2       	ldi	r26, 0x27	; 39
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e7 e2       	ldi	r30, 0x27	; 39
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7b       	andi	r24, 0xBF	; 191
    2150:	8c 93       	st	X, r24
    2152:	1d c0       	rjmp	.+58     	; 0x218e <ADC_vidAdcInit+0xc6>
		break;
	case VCC:
		CLR_BIT(ADMUX,7);
    2154:	a7 e2       	ldi	r26, 0x27	; 39
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e7 e2       	ldi	r30, 0x27	; 39
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8f 77       	andi	r24, 0x7F	; 127
    2160:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2162:	a7 e2       	ldi	r26, 0x27	; 39
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 e2       	ldi	r30, 0x27	; 39
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 64       	ori	r24, 0x40	; 64
    216e:	8c 93       	st	X, r24
    2170:	0e c0       	rjmp	.+28     	; 0x218e <ADC_vidAdcInit+0xc6>
		break;
	case INTERNAL_2_56_:
		SET_BIT(ADMUX,7);
    2172:	a7 e2       	ldi	r26, 0x27	; 39
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e7 e2       	ldi	r30, 0x27	; 39
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	80 68       	ori	r24, 0x80	; 128
    217e:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2180:	a7 e2       	ldi	r26, 0x27	; 39
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e7 e2       	ldi	r30, 0x27	; 39
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	80 64       	ori	r24, 0x40	; 64
    218c:	8c 93       	st	X, r24
	ADC_vidAdcPinInit(ADC_AUTO_TRIGGER_PIN);
	ADC_vidSetMultiPlexer(ADC_AUTO_TRIGGER_PIN);
	ADC_VIDSetAutoTriggerMode(INT_0);
	SET_BIT(ADCSRA,5);
#elif ADC_TRIGGERING_MODE == 1
	CLR_BIT(ADCSRA,5);
    218e:	a6 e2       	ldi	r26, 0x26	; 38
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e6 e2       	ldi	r30, 0x26	; 38
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 7d       	andi	r24, 0xDF	; 223
    219a:	8c 93       	st	X, r24
#endif

#if ADC_READING_TECHNIQUE == 0
	SET_BIT(ADCSRA,3);
    219c:	a6 e2       	ldi	r26, 0x26	; 38
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e6 e2       	ldi	r30, 0x26	; 38
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	88 60       	ori	r24, 0x08	; 8
    21a8:	8c 93       	st	X, r24
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	0e 94 ef 0a 	call	0x15de	; 0x15de <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
#endif

#if ADC_READING_NO_OF_BITS == 0
	SET_BIT(ADMUX,5);
#elif ADC_READING_NO_OF_BITS == 1
	CLR_BIT(ADMUX,5);
    21b0:	a7 e2       	ldi	r26, 0x27	; 39
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e7 e2       	ldi	r30, 0x27	; 39
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 7d       	andi	r24, 0xDF	; 223
    21bc:	8c 93       	st	X, r24
#endif

}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <ADC_vidAdcPinInit>:

void ADC_vidAdcPinInit(uint8_t adc_pin)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <ADC_vidAdcPinInit+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	8a 83       	std	Y+2, r24	; 0x02
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	88 30       	cpi	r24, 0x08	; 8
    21da:	c0 f4       	brcc	.+48     	; 0x220c <ADC_vidAdcPinInit+0x42>
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	fc 01       	movw	r30, r24
    21e8:	eb 5e       	subi	r30, 0xEB	; 235
    21ea:	fb 4f       	sbci	r31, 0xFB	; 251
    21ec:	20 81       	ld	r18, Z
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	fc 01       	movw	r30, r24
    21fa:	ea 5e       	subi	r30, 0xEA	; 234
    21fc:	fb 4f       	sbci	r31, 0xFB	; 251
    21fe:	90 81       	ld	r25, Z
    2200:	82 2f       	mov	r24, r18
    2202:	69 2f       	mov	r22, r25
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
    220a:	22 c0       	rjmp	.+68     	; 0x2250 <ADC_vidAdcPinInit+0x86>
	else if(adc_pin==8)
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	88 30       	cpi	r24, 0x08	; 8
    2210:	f9 f4       	brne	.+62     	; 0x2250 <ADC_vidAdcPinInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2212:	19 82       	std	Y+1, r1	; 0x01
    2214:	1a c0       	rjmp	.+52     	; 0x224a <ADC_vidAdcPinInit+0x80>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	fc 01       	movw	r30, r24
    2222:	eb 5e       	subi	r30, 0xEB	; 235
    2224:	fb 4f       	sbci	r31, 0xFB	; 251
    2226:	20 81       	ld	r18, Z
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	88 2f       	mov	r24, r24
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	fc 01       	movw	r30, r24
    2234:	ea 5e       	subi	r30, 0xEA	; 234
    2236:	fb 4f       	sbci	r31, 0xFB	; 251
    2238:	90 81       	ld	r25, Z
    223a:	82 2f       	mov	r24, r18
    223c:	69 2f       	mov	r22, r25
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
void ADC_vidAdcPinInit(uint8_t adc_pin)
{
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
	else if(adc_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	8f 5f       	subi	r24, 0xFF	; 255
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	88 30       	cpi	r24, 0x08	; 8
    224e:	18 f3       	brcs	.-58     	; 0x2216 <ADC_vidAdcPinInit+0x4c>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
		}
	}
}
    2250:	0f 90       	pop	r0
    2252:	0f 90       	pop	r0
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <ADC_vidAdcGetRead>:

void ADC_vidAdcGetRead(uint8_t adc_pin)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	0f 92       	push	r0
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetMultiPlexer(adc_pin);
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	0e 94 d5 11 	call	0x23aa	; 0x23aa <ADC_vidSetMultiPlexer>
	SET_BIT(ADCSRA,6);
    226c:	a6 e2       	ldi	r26, 0x26	; 38
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e6 e2       	ldi	r30, 0x26	; 38
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 64       	ori	r24, 0x40	; 64
    2278:	8c 93       	st	X, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <ADC_vidGetAutoTriggerRead>:

void ADC_vidGetAutoTriggerRead()
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <ADC_VIDSetAutoTriggerMode>:

void ADC_VIDSetAutoTriggerMode(uint8_t mode)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	0f 92       	push	r0
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	91 05       	cpc	r25, r1
    22a6:	a9 f4       	brne	.+42     	; 0x22d2 <ADC_VIDSetAutoTriggerMode+0x42>
	{
	case INT_0:
		CLR_BIT(SFIOR,5);
    22a8:	a0 e5       	ldi	r26, 0x50	; 80
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e0 e5       	ldi	r30, 0x50	; 80
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	8f 7d       	andi	r24, 0xDF	; 223
    22b4:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    22b6:	a0 e5       	ldi	r26, 0x50	; 80
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e0 e5       	ldi	r30, 0x50	; 80
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	80 64       	ori	r24, 0x40	; 64
    22c2:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,7);
    22c4:	a0 e5       	ldi	r26, 0x50	; 80
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e0 e5       	ldi	r30, 0x50	; 80
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 77       	andi	r24, 0x7F	; 127
    22d0:	8c 93       	st	X, r24
		break;
	}
}
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <ADC_vidSetReadingVariable>:

void ADC_vidSetReadingVariable(uint16_* adc_read)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <ADC_vidSetReadingVariable+0x6>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
	ADC_READ=adc_read;
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	90 93 3f 04 	sts	0x043F, r25
    22f0:	80 93 3e 04 	sts	0x043E, r24
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <ADC_vidSetCallBack>:

void ADC_vidSetCallBack(void (*func)(void))
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <ADC_vidSetCallBack+0x6>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
	vector_16=func;
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	90 93 3d 04 	sts	0x043D, r25
    2314:	80 93 3c 04 	sts	0x043C, r24
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2322:	1f 92       	push	r1
    2324:	0f 92       	push	r0
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	0f 92       	push	r0
    232a:	11 24       	eor	r1, r1
    232c:	2f 93       	push	r18
    232e:	3f 93       	push	r19
    2330:	4f 93       	push	r20
    2332:	5f 93       	push	r21
    2334:	6f 93       	push	r22
    2336:	7f 93       	push	r23
    2338:	8f 93       	push	r24
    233a:	9f 93       	push	r25
    233c:	af 93       	push	r26
    233e:	bf 93       	push	r27
    2340:	ef 93       	push	r30
    2342:	ff 93       	push	r31
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
#if ADC_READING_TECHNIQUE == 0
	if(ADC_READ!=NULL)
    234c:	80 91 3e 04 	lds	r24, 0x043E
    2350:	90 91 3f 04 	lds	r25, 0x043F
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	59 f0       	breq	.+22     	; 0x236e <__vector_16+0x4c>
	{
#if ADC_READING_NO_OF_BITS == 1
	*ADC_READ=ADCL16;
    2358:	e0 91 3e 04 	lds	r30, 0x043E
    235c:	f0 91 3f 04 	lds	r31, 0x043F
    2360:	a4 e2       	ldi	r26, 0x24	; 36
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	8d 91       	ld	r24, X+
    2366:	9c 91       	ld	r25, X
    2368:	11 97       	sbiw	r26, 0x01	; 1
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	80 83       	st	Z, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	}
	if(vector_16!=NULL)vector_16();
    236e:	80 91 3c 04 	lds	r24, 0x043C
    2372:	90 91 3d 04 	lds	r25, 0x043D
    2376:	00 97       	sbiw	r24, 0x00	; 0
    2378:	29 f0       	breq	.+10     	; 0x2384 <__vector_16+0x62>
    237a:	e0 91 3c 04 	lds	r30, 0x043C
    237e:	f0 91 3d 04 	lds	r31, 0x043D
    2382:	09 95       	icall
#endif
}
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	ff 91       	pop	r31
    238a:	ef 91       	pop	r30
    238c:	bf 91       	pop	r27
    238e:	af 91       	pop	r26
    2390:	9f 91       	pop	r25
    2392:	8f 91       	pop	r24
    2394:	7f 91       	pop	r23
    2396:	6f 91       	pop	r22
    2398:	5f 91       	pop	r21
    239a:	4f 91       	pop	r20
    239c:	3f 91       	pop	r19
    239e:	2f 91       	pop	r18
    23a0:	0f 90       	pop	r0
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	0f 90       	pop	r0
    23a6:	1f 90       	pop	r1
    23a8:	18 95       	reti

000023aa <ADC_vidSetMultiPlexer>:

static void ADC_vidSetMultiPlexer(uint8_t adc_pin)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <ADC_vidSetMultiPlexer+0x6>
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	89 83       	std	Y+1, r24	; 0x01
	switch(adc_pin)
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3b 83       	std	Y+3, r19	; 0x03
    23c0:	2a 83       	std	Y+2, r18	; 0x02
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	83 30       	cpi	r24, 0x03	; 3
    23c8:	91 05       	cpc	r25, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <ADC_vidSetMultiPlexer+0x24>
    23cc:	9b c0       	rjmp	.+310    	; 0x2504 <ADC_vidSetMultiPlexer+0x15a>
    23ce:	2a 81       	ldd	r18, Y+2	; 0x02
    23d0:	3b 81       	ldd	r19, Y+3	; 0x03
    23d2:	24 30       	cpi	r18, 0x04	; 4
    23d4:	31 05       	cpc	r19, r1
    23d6:	8c f4       	brge	.+34     	; 0x23fa <ADC_vidSetMultiPlexer+0x50>
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <ADC_vidSetMultiPlexer+0x3a>
    23e2:	48 c0       	rjmp	.+144    	; 0x2474 <ADC_vidSetMultiPlexer+0xca>
    23e4:	2a 81       	ldd	r18, Y+2	; 0x02
    23e6:	3b 81       	ldd	r19, Y+3	; 0x03
    23e8:	22 30       	cpi	r18, 0x02	; 2
    23ea:	31 05       	cpc	r19, r1
    23ec:	0c f0       	brlt	.+2      	; 0x23f0 <ADC_vidSetMultiPlexer+0x46>
    23ee:	66 c0       	rjmp	.+204    	; 0x24bc <ADC_vidSetMultiPlexer+0x112>
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	00 97       	sbiw	r24, 0x00	; 0
    23f6:	d1 f0       	breq	.+52     	; 0x242c <ADC_vidSetMultiPlexer+0x82>
    23f8:	38 c1       	rjmp	.+624    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
    23fa:	2a 81       	ldd	r18, Y+2	; 0x02
    23fc:	3b 81       	ldd	r19, Y+3	; 0x03
    23fe:	25 30       	cpi	r18, 0x05	; 5
    2400:	31 05       	cpc	r19, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <ADC_vidSetMultiPlexer+0x5c>
    2404:	c7 c0       	rjmp	.+398    	; 0x2594 <ADC_vidSetMultiPlexer+0x1ea>
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	9b 81       	ldd	r25, Y+3	; 0x03
    240a:	85 30       	cpi	r24, 0x05	; 5
    240c:	91 05       	cpc	r25, r1
    240e:	0c f4       	brge	.+2      	; 0x2412 <ADC_vidSetMultiPlexer+0x68>
    2410:	9d c0       	rjmp	.+314    	; 0x254c <ADC_vidSetMultiPlexer+0x1a2>
    2412:	2a 81       	ldd	r18, Y+2	; 0x02
    2414:	3b 81       	ldd	r19, Y+3	; 0x03
    2416:	26 30       	cpi	r18, 0x06	; 6
    2418:	31 05       	cpc	r19, r1
    241a:	09 f4       	brne	.+2      	; 0x241e <ADC_vidSetMultiPlexer+0x74>
    241c:	df c0       	rjmp	.+446    	; 0x25dc <ADC_vidSetMultiPlexer+0x232>
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	9b 81       	ldd	r25, Y+3	; 0x03
    2422:	87 30       	cpi	r24, 0x07	; 7
    2424:	91 05       	cpc	r25, r1
    2426:	09 f4       	brne	.+2      	; 0x242a <ADC_vidSetMultiPlexer+0x80>
    2428:	fd c0       	rjmp	.+506    	; 0x2624 <ADC_vidSetMultiPlexer+0x27a>
    242a:	1f c1       	rjmp	.+574    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
	{
	case ADC_0:
			CLR_BIT(ADMUX,4);
    242c:	a7 e2       	ldi	r26, 0x27	; 39
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e7 e2       	ldi	r30, 0x27	; 39
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 7e       	andi	r24, 0xEF	; 239
    2438:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    243a:	a7 e2       	ldi	r26, 0x27	; 39
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e7 e2       	ldi	r30, 0x27	; 39
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	87 7f       	andi	r24, 0xF7	; 247
    2446:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2448:	a7 e2       	ldi	r26, 0x27	; 39
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e7 e2       	ldi	r30, 0x27	; 39
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8b 7f       	andi	r24, 0xFB	; 251
    2454:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2456:	a7 e2       	ldi	r26, 0x27	; 39
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e7 e2       	ldi	r30, 0x27	; 39
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8d 7f       	andi	r24, 0xFD	; 253
    2462:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    2464:	a7 e2       	ldi	r26, 0x27	; 39
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e7 e2       	ldi	r30, 0x27	; 39
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8e 7f       	andi	r24, 0xFE	; 254
    2470:	8c 93       	st	X, r24
    2472:	fb c0       	rjmp	.+502    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_1:
			CLR_BIT(ADMUX,4);
    2474:	a7 e2       	ldi	r26, 0x27	; 39
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e7 e2       	ldi	r30, 0x27	; 39
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	8f 7e       	andi	r24, 0xEF	; 239
    2480:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2482:	a7 e2       	ldi	r26, 0x27	; 39
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e2       	ldi	r30, 0x27	; 39
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	87 7f       	andi	r24, 0xF7	; 247
    248e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2490:	a7 e2       	ldi	r26, 0x27	; 39
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e7 e2       	ldi	r30, 0x27	; 39
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8b 7f       	andi	r24, 0xFB	; 251
    249c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    249e:	a7 e2       	ldi	r26, 0x27	; 39
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e7 e2       	ldi	r30, 0x27	; 39
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8d 7f       	andi	r24, 0xFD	; 253
    24aa:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    24ac:	a7 e2       	ldi	r26, 0x27	; 39
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e7 e2       	ldi	r30, 0x27	; 39
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	81 60       	ori	r24, 0x01	; 1
    24b8:	8c 93       	st	X, r24
    24ba:	d7 c0       	rjmp	.+430    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_2:
			CLR_BIT(ADMUX,4);
    24bc:	a7 e2       	ldi	r26, 0x27	; 39
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e7 e2       	ldi	r30, 0x27	; 39
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 7e       	andi	r24, 0xEF	; 239
    24c8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    24ca:	a7 e2       	ldi	r26, 0x27	; 39
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e7 e2       	ldi	r30, 0x27	; 39
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	87 7f       	andi	r24, 0xF7	; 247
    24d6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    24d8:	a7 e2       	ldi	r26, 0x27	; 39
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e7 e2       	ldi	r30, 0x27	; 39
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8b 7f       	andi	r24, 0xFB	; 251
    24e4:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    24e6:	a7 e2       	ldi	r26, 0x27	; 39
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e7 e2       	ldi	r30, 0x27	; 39
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	82 60       	ori	r24, 0x02	; 2
    24f2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    24f4:	a7 e2       	ldi	r26, 0x27	; 39
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e7 e2       	ldi	r30, 0x27	; 39
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8e 7f       	andi	r24, 0xFE	; 254
    2500:	8c 93       	st	X, r24
    2502:	b3 c0       	rjmp	.+358    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_3:
			CLR_BIT(ADMUX,4);
    2504:	a7 e2       	ldi	r26, 0x27	; 39
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e7 e2       	ldi	r30, 0x27	; 39
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8f 7e       	andi	r24, 0xEF	; 239
    2510:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2512:	a7 e2       	ldi	r26, 0x27	; 39
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e7 e2       	ldi	r30, 0x27	; 39
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	87 7f       	andi	r24, 0xF7	; 247
    251e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2520:	a7 e2       	ldi	r26, 0x27	; 39
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e7 e2       	ldi	r30, 0x27	; 39
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	8b 7f       	andi	r24, 0xFB	; 251
    252c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    252e:	a7 e2       	ldi	r26, 0x27	; 39
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e7 e2       	ldi	r30, 0x27	; 39
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	82 60       	ori	r24, 0x02	; 2
    253a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    253c:	a7 e2       	ldi	r26, 0x27	; 39
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e7 e2       	ldi	r30, 0x27	; 39
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	81 60       	ori	r24, 0x01	; 1
    2548:	8c 93       	st	X, r24
    254a:	8f c0       	rjmp	.+286    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_4:
			CLR_BIT(ADMUX,4);
    254c:	a7 e2       	ldi	r26, 0x27	; 39
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e7 e2       	ldi	r30, 0x27	; 39
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7e       	andi	r24, 0xEF	; 239
    2558:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    255a:	a7 e2       	ldi	r26, 0x27	; 39
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e7 e2       	ldi	r30, 0x27	; 39
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	87 7f       	andi	r24, 0xF7	; 247
    2566:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2568:	a7 e2       	ldi	r26, 0x27	; 39
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e7 e2       	ldi	r30, 0x27	; 39
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	84 60       	ori	r24, 0x04	; 4
    2574:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2576:	a7 e2       	ldi	r26, 0x27	; 39
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e7 e2       	ldi	r30, 0x27	; 39
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8d 7f       	andi	r24, 0xFD	; 253
    2582:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    2584:	a7 e2       	ldi	r26, 0x27	; 39
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e7 e2       	ldi	r30, 0x27	; 39
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8e 7f       	andi	r24, 0xFE	; 254
    2590:	8c 93       	st	X, r24
    2592:	6b c0       	rjmp	.+214    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_5:
			CLR_BIT(ADMUX,4);
    2594:	a7 e2       	ldi	r26, 0x27	; 39
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e7 e2       	ldi	r30, 0x27	; 39
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	8f 7e       	andi	r24, 0xEF	; 239
    25a0:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    25a2:	a7 e2       	ldi	r26, 0x27	; 39
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e7 e2       	ldi	r30, 0x27	; 39
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	87 7f       	andi	r24, 0xF7	; 247
    25ae:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    25b0:	a7 e2       	ldi	r26, 0x27	; 39
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e7 e2       	ldi	r30, 0x27	; 39
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	84 60       	ori	r24, 0x04	; 4
    25bc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    25be:	a7 e2       	ldi	r26, 0x27	; 39
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e7 e2       	ldi	r30, 0x27	; 39
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	8d 7f       	andi	r24, 0xFD	; 253
    25ca:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    25cc:	a7 e2       	ldi	r26, 0x27	; 39
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e7 e2       	ldi	r30, 0x27	; 39
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	81 60       	ori	r24, 0x01	; 1
    25d8:	8c 93       	st	X, r24
    25da:	47 c0       	rjmp	.+142    	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_6:
			CLR_BIT(ADMUX,4);
    25dc:	a7 e2       	ldi	r26, 0x27	; 39
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e7 e2       	ldi	r30, 0x27	; 39
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	8f 7e       	andi	r24, 0xEF	; 239
    25e8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    25ea:	a7 e2       	ldi	r26, 0x27	; 39
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e7 e2       	ldi	r30, 0x27	; 39
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	87 7f       	andi	r24, 0xF7	; 247
    25f6:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    25f8:	a7 e2       	ldi	r26, 0x27	; 39
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e7 e2       	ldi	r30, 0x27	; 39
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	84 60       	ori	r24, 0x04	; 4
    2604:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2606:	a7 e2       	ldi	r26, 0x27	; 39
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e7 e2       	ldi	r30, 0x27	; 39
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	82 60       	ori	r24, 0x02	; 2
    2612:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    2614:	a7 e2       	ldi	r26, 0x27	; 39
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	e7 e2       	ldi	r30, 0x27	; 39
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8e 7f       	andi	r24, 0xFE	; 254
    2620:	8c 93       	st	X, r24
    2622:	23 c0       	rjmp	.+70     	; 0x266a <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_7:
			CLR_BIT(ADMUX,4);
    2624:	a7 e2       	ldi	r26, 0x27	; 39
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e7 e2       	ldi	r30, 0x27	; 39
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	8f 7e       	andi	r24, 0xEF	; 239
    2630:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2632:	a7 e2       	ldi	r26, 0x27	; 39
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e7 e2       	ldi	r30, 0x27	; 39
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	87 7f       	andi	r24, 0xF7	; 247
    263e:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2640:	a7 e2       	ldi	r26, 0x27	; 39
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e7 e2       	ldi	r30, 0x27	; 39
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	84 60       	ori	r24, 0x04	; 4
    264c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    264e:	a7 e2       	ldi	r26, 0x27	; 39
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e7 e2       	ldi	r30, 0x27	; 39
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	82 60       	ori	r24, 0x02	; 2
    265a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    265c:	a7 e2       	ldi	r26, 0x27	; 39
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e7 e2       	ldi	r30, 0x27	; 39
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	81 60       	ori	r24, 0x01	; 1
    2668:	8c 93       	st	X, r24
			break;
	}
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <UART_Init>:
#include "../../libraries/std_types.h"
#include "../../libraries/bit_math.h"
#include "UART.h"
#include "UART_REGISTERS.h"

void UART_Init(uint16_ baud) {
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	00 d0       	rcall	.+0      	; 0x267c <UART_Init+0x6>
    267c:	00 d0       	rcall	.+0      	; 0x267e <UART_Init+0x8>
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
    uint16_ ubrr = (uint16_)(((uint32_t)8000000/16)/baud-1);
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	9c 01       	movw	r18, r24
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	50 e0       	ldi	r21, 0x00	; 0
    2690:	80 e2       	ldi	r24, 0x20	; 32
    2692:	91 ea       	ldi	r25, 0xA1	; 161
    2694:	a7 e0       	ldi	r26, 0x07	; 7
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 91 23 	call	0x4722	; 0x4722 <__udivmodsi4>
    26a0:	da 01       	movw	r26, r20
    26a2:	c9 01       	movw	r24, r18
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01

    UBRRH = (uint8_t)(ubrr>>8);
    26aa:	e0 e4       	ldi	r30, 0x40	; 64
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	89 2f       	mov	r24, r25
    26b4:	99 27       	eor	r25, r25
    26b6:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr;
    26b8:	e9 e2       	ldi	r30, 0x29	; 41
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	80 83       	st	Z, r24
    SET_BIT(UCSRB,4);
    26c0:	aa e2       	ldi	r26, 0x2A	; 42
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	ea e2       	ldi	r30, 0x2A	; 42
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	80 61       	ori	r24, 0x10	; 16
    26cc:	8c 93       	st	X, r24
    SET_BIT(UCSRB,3);
    26ce:	aa e2       	ldi	r26, 0x2A	; 42
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	ea e2       	ldi	r30, 0x2A	; 42
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	88 60       	ori	r24, 0x08	; 8
    26da:	8c 93       	st	X, r24
    UCSRC = (1<<7) | (3<<1);
    26dc:	e0 e4       	ldi	r30, 0x40	; 64
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	86 e8       	ldi	r24, 0x86	; 134
    26e2:	80 83       	st	Z, r24
}
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <UART_Transmit>:

void UART_Transmit(uint8_t data) {
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	0f 92       	push	r0
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	89 83       	std	Y+1, r24	; 0x01
    while (!GET_BIT(UCSRA,5));
    26fe:	eb e2       	ldi	r30, 0x2B	; 43
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	82 95       	swap	r24
    2706:	86 95       	lsr	r24
    2708:	87 70       	andi	r24, 0x07	; 7
    270a:	88 2f       	mov	r24, r24
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	81 70       	andi	r24, 0x01	; 1
    2710:	90 70       	andi	r25, 0x00	; 0
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	a1 f3       	breq	.-24     	; 0x26fe <UART_Transmit+0xc>
    UDR = data;
    2716:	ec e2       	ldi	r30, 0x2C	; 44
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	80 83       	st	Z, r24
}
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <UART_Receive>:

uint8_t UART_Receive(void) {
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA,7));
    272e:	eb e2       	ldi	r30, 0x2B	; 43
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 23       	and	r24, r24
    2736:	dc f7       	brge	.-10     	; 0x272e <UART_Receive+0x8>
    return UDR;
    2738:	ec e2       	ldi	r30, 0x2C	; 44
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <TIMER1_voidInit>:

void (* TIMER1_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt1;

void TIMER1_voidInit(void){
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
	TCCR1B |= TIMER1_PRESCALER;

#elif TIMER1_MODE == CTC_T_MODE

	CLR_BIT(TCCR1A , WGM10);
    274c:	af e4       	ldi	r26, 0x4F	; 79
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	ef e4       	ldi	r30, 0x4F	; 79
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8e 7f       	andi	r24, 0xFE	; 254
    2758:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , WGM11);
    275a:	af e4       	ldi	r26, 0x4F	; 79
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	ef e4       	ldi	r30, 0x4F	; 79
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	8d 7f       	andi	r24, 0xFD	; 253
    2766:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    2768:	ae e4       	ldi	r26, 0x4E	; 78
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ee e4       	ldi	r30, 0x4E	; 78
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	88 60       	ori	r24, 0x08	; 8
    2774:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , WGM13);
    2776:	ae e4       	ldi	r26, 0x4E	; 78
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ee e4       	ldi	r30, 0x4E	; 78
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	8f 7e       	andi	r24, 0xEF	; 239
    2782:	8c 93       	st	X, r24

	//Enabling timer flag;
	SET_BIT(TIMSK , OCIE1A);
    2784:	a9 e5       	ldi	r26, 0x59	; 89
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e9 e5       	ldi	r30, 0x59	; 89
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	80 61       	ori	r24, 0x10	; 16
    2790:	8c 93       	st	X, r24

	//selecting prescaler;
	TCCR1B &= 0b11111000;
    2792:	ae e4       	ldi	r26, 0x4E	; 78
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ee e4       	ldi	r30, 0x4E	; 78
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 7f       	andi	r24, 0xF8	; 248
    279e:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER;
    27a0:	ae e4       	ldi	r26, 0x4E	; 78
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ee e4       	ldi	r30, 0x4E	; 78
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	85 60       	ori	r24, 0x05	; 5
    27ac:	8c 93       	st	X, r24
#else

#error "wrong timer mode"

#endif
}
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <TIMER1_voidDisable>:

void TIMER1_voidDisable(void){
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62

	TCCR1B &= 0b11111000;
    27bc:	ae e4       	ldi	r26, 0x4E	; 78
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ee e4       	ldi	r30, 0x4E	; 78
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	88 7f       	andi	r24, 0xF8	; 248
    27c8:	8c 93       	st	X, r24

}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <TIMER1_uint8SetPrescaler>:

uint8_t TIMER1_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <TIMER1_uint8SetPrescaler+0x6>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    27dc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	88 30       	cpi	r24, 0x08	; 8
    27e2:	80 f4       	brcc	.+32     	; 0x2804 <TIMER1_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR1B &= 0b11111000;
    27e4:	ae e4       	ldi	r26, 0x4E	; 78
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	ee e4       	ldi	r30, 0x4E	; 78
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	88 7f       	andi	r24, 0xF8	; 248
    27f0:	8c 93       	st	X, r24
		TCCR1B |= Copy_uint8Prescaler;
    27f2:	ae e4       	ldi	r26, 0x4E	; 78
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	ee e4       	ldi	r30, 0x4E	; 78
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	90 81       	ld	r25, Z
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	89 2b       	or	r24, r25
    2800:	8c 93       	st	X, r24
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <TIMER1_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    2808:	89 81       	ldd	r24, Y+1	; 0x01

}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <TIMER1_voidSetCounterRegister>:
void TIMER1_voidSetCounterRegister(uint8_t Copy_uint8Counter1Start){
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	89 83       	std	Y+1, r24	; 0x01

	TCNT1L = Copy_uint8Counter1Start;
    2820:	ec e4       	ldi	r30, 0x4C	; 76
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	80 83       	st	Z, r24
}
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <TIMER1_voidSetCTCTime>:

void TIMER1_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	0f 92       	push	r0
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	89 83       	std	Y+1, r24	; 0x01

	 OCR1AL = Copy_uint8CompareTime;
    283c:	ea e4       	ldi	r30, 0x4A	; 74
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	80 83       	st	Z, r24

}
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <TIMER1_voidGetNumCountCTC>:

void TIMER1_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <TIMER1_voidGetNumCountCTC+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <TIMER1_voidGetNumCountCTC+0x8>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <TIMER1_voidGetNumCountCTC+0xa>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	7c 83       	std	Y+4, r23	; 0x04
    2860:	6b 83       	std	Y+3, r22	; 0x03
    2862:	5e 83       	std	Y+6, r21	; 0x06
    2864:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER1_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	cc 01       	movw	r24, r24
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	28 ee       	ldi	r18, 0xE8	; 232
    2872:	33 e0       	ldi	r19, 0x03	; 3
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__mulsi3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3d e7       	ldi	r19, 0x7D	; 125
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 91 23 	call	0x4722	; 0x4722 <__udivmodsi4>
    2894:	da 01       	movw	r26, r20
    2896:	c9 01       	movw	r24, r18
    2898:	eb 81       	ldd	r30, Y+3	; 0x03
    289a:	fc 81       	ldd	r31, Y+4	; 0x04
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    28a0:	ed 81       	ldd	r30, Y+5	; 0x05
    28a2:	fe 81       	ldd	r31, Y+6	; 0x06
    28a4:	8a ef       	ldi	r24, 0xFA	; 250
    28a6:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    28a8:	26 96       	adiw	r28, 0x06	; 6
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <TIMER1_voidSetCallBackNormal>:


void TIMER1_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal1)(void)){
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <TIMER1_voidSetCallBackNormal+0x6>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal1;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a 81       	ldd	r25, Y+2	; 0x02
    28cc:	90 93 41 04 	sts	0x0441, r25
    28d0:	80 93 40 04 	sts	0x0440, r24

}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC1)(void)){
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <TIMER1_voidSetCallBackCTC+0x6>
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC1;
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	90 93 43 04 	sts	0x0443, r25
    28f4:	80 93 42 04 	sts	0x0442, r24

}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	2f 93       	push	r18
    290e:	3f 93       	push	r19
    2910:	4f 93       	push	r20
    2912:	5f 93       	push	r21
    2914:	6f 93       	push	r22
    2916:	7f 93       	push	r23
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
    291c:	af 93       	push	r26
    291e:	bf 93       	push	r27
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62

	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    292c:	80 91 44 04 	lds	r24, 0x0444
    2930:	90 91 45 04 	lds	r25, 0x0445
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	90 93 45 04 	sts	0x0445, r25
    293a:	80 93 44 04 	sts	0x0444, r24
	if(cnt == compare_cnt1){
    293e:	20 91 44 04 	lds	r18, 0x0444
    2942:	30 91 45 04 	lds	r19, 0x0445
    2946:	80 91 7a 04 	lds	r24, 0x047A
    294a:	90 91 7b 04 	lds	r25, 0x047B
    294e:	28 17       	cp	r18, r24
    2950:	39 07       	cpc	r19, r25
    2952:	79 f4       	brne	.+30     	; 0x2972 <__vector_7+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER1_voidpSetCallBackCTC != NULL){
    2954:	80 91 42 04 	lds	r24, 0x0442
    2958:	90 91 43 04 	lds	r25, 0x0443
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	49 f0       	breq	.+18     	; 0x2972 <__vector_7+0x70>

			TIMER1_voidpSetCallBackCTC();
    2960:	e0 91 42 04 	lds	r30, 0x0442
    2964:	f0 91 43 04 	lds	r31, 0x0443
    2968:	09 95       	icall
			cnt = 0;
    296a:	10 92 45 04 	sts	0x0445, r1
    296e:	10 92 44 04 	sts	0x0444, r1
		}

	}


}
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	bf 91       	pop	r27
    297c:	af 91       	pop	r26
    297e:	9f 91       	pop	r25
    2980:	8f 91       	pop	r24
    2982:	7f 91       	pop	r23
    2984:	6f 91       	pop	r22
    2986:	5f 91       	pop	r21
    2988:	4f 91       	pop	r20
    298a:	3f 91       	pop	r19
    298c:	2f 91       	pop	r18
    298e:	0f 90       	pop	r0
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	0f 90       	pop	r0
    2994:	1f 90       	pop	r1
    2996:	18 95       	reti

00002998 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    2998:	1f 92       	push	r1
    299a:	0f 92       	push	r0
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	0f 92       	push	r0
    29a0:	11 24       	eor	r1, r1
    29a2:	2f 93       	push	r18
    29a4:	3f 93       	push	r19
    29a6:	4f 93       	push	r20
    29a8:	5f 93       	push	r21
    29aa:	6f 93       	push	r22
    29ac:	7f 93       	push	r23
    29ae:	8f 93       	push	r24
    29b0:	9f 93       	push	r25
    29b2:	af 93       	push	r26
    29b4:	bf 93       	push	r27
    29b6:	ef 93       	push	r30
    29b8:	ff 93       	push	r31
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_voidpSetCallBackNormal != NULL){
    29c2:	80 91 40 04 	lds	r24, 0x0440
    29c6:	90 91 41 04 	lds	r25, 0x0441
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	29 f0       	breq	.+10     	; 0x29d8 <__vector_9+0x40>

		TIMER1_voidpSetCallBackNormal();
    29ce:	e0 91 40 04 	lds	r30, 0x0440
    29d2:	f0 91 41 04 	lds	r31, 0x0441
    29d6:	09 95       	icall

		//do nothing;

	}

}
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	ff 91       	pop	r31
    29de:	ef 91       	pop	r30
    29e0:	bf 91       	pop	r27
    29e2:	af 91       	pop	r26
    29e4:	9f 91       	pop	r25
    29e6:	8f 91       	pop	r24
    29e8:	7f 91       	pop	r23
    29ea:	6f 91       	pop	r22
    29ec:	5f 91       	pop	r21
    29ee:	4f 91       	pop	r20
    29f0:	3f 91       	pop	r19
    29f2:	2f 91       	pop	r18
    29f4:	0f 90       	pop	r0
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	0f 90       	pop	r0
    29fa:	1f 90       	pop	r1
    29fc:	18 95       	reti

000029fe <TMR0_Init>:

// Function prototypes
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds);

void TMR0_Init(void)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
	// Set mode based on configuration
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
	TCCR0_REG &= ~(1 << TCCR0_WGM01);  // Normal mode
	#elif TMR0_MODE == TMR0_MODE_CTC
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
    2a06:	a3 e5       	ldi	r26, 0x53	; 83
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e3 e5       	ldi	r30, 0x53	; 83
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	8f 7b       	andi	r24, 0xBF	; 191
    2a12:	8c 93       	st	X, r24
	TCCR0_REG |= (1 << TCCR0_WGM01);   // CTC mode
    2a14:	a3 e5       	ldi	r26, 0x53	; 83
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e3 e5       	ldi	r30, 0x53	; 83
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	88 60       	ori	r24, 0x08	; 8
    2a20:	8c 93       	st	X, r24

	// Enable Timer interrupt based on the mode
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TIMSK_REG |= (1 << TIMSK_TOIE0);   // Enable Overflow Interrupt
	#elif TMR0_MODE == TMR0_MODE_CTC
	TIMSK_REG |= (1 << TIMSK_OCIE0);   // Enable Compare Match Interrupt
    2a22:	a9 e5       	ldi	r26, 0x59	; 89
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e9 e5       	ldi	r30, 0x59	; 89
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	82 60       	ori	r24, 0x02	; 2
    2a2e:	8c 93       	st	X, r24
	#endif
	// Enable global interrupts
	SREG |= (1 << 7);
    2a30:	af e5       	ldi	r26, 0x5F	; 95
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	ef e5       	ldi	r30, 0x5F	; 95
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	80 68       	ori	r24, 0x80	; 128
    2a3c:	8c 93       	st	X, r24
}
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <TMR0_Start>:

void TMR0_Start(uint16_ milliseconds)
{
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <TMR0_Start+0x6>
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <TMR0_Start+0x8>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
	uint16_ ticks = TMR0_CalculateTicks(milliseconds);
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <TMR0_CalculateTicks>
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01

	// Set compare value for CTC mode
	if (TMR0_MODE == TMR0_MODE_CTC)
	{
		OCR0_REG = ticks;
    2a60:	ec e5       	ldi	r30, 0x5C	; 92
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	80 83       	st	Z, r24
	}

	// Reset the match counter
	TMR0_CurrentMatches = 0;
    2a68:	10 92 4b 04 	sts	0x044B, r1
    2a6c:	10 92 4a 04 	sts	0x044A, r1
		break;
		case TMR0_PRESCALER_8:
		TCCR0_REG |= (1 << TCCR0_CS01);
		break;
		case TMR0_PRESCALER_64:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS01);
    2a70:	a3 e5       	ldi	r26, 0x53	; 83
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e3 e5       	ldi	r30, 0x53	; 83
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	83 60       	ori	r24, 0x03	; 3
    2a7c:	8c 93       	st	X, r24
		break;
		case TMR0_PRESCALER_1024:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS02);
		break;
	}
}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <TMR0_Stop>:

void TMR0_Stop(void)
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
	// Stop the timer by clearing the clock source bits
	TCCR0_REG &= ~((1 << TCCR0_CS00) | (1 << TCCR0_CS01) | (1 << TCCR0_CS02));
    2a94:	a3 e5       	ldi	r26, 0x53	; 83
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e3 e5       	ldi	r30, 0x53	; 83
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	88 7f       	andi	r24, 0xF8	; 248
    2aa0:	8c 93       	st	X, r24
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <TMR0_SetCallback>:

void TMR0_SetCallback(void (*callbackFunc)(void))
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <TMR0_SetCallback+0x6>
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	9a 83       	std	Y+2, r25	; 0x02
    2ab4:	89 83       	std	Y+1, r24	; 0x01
	TMR0_Callback = callbackFunc;
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aba:	90 93 47 04 	sts	0x0447, r25
    2abe:	80 93 46 04 	sts	0x0446, r24
}
    2ac2:	0f 90       	pop	r0
    2ac4:	0f 90       	pop	r0
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <__vector_10>:

// Interrupt Service Routine for Timer0 Compare Match
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	2f 93       	push	r18
    2ad8:	3f 93       	push	r19
    2ada:	4f 93       	push	r20
    2adc:	5f 93       	push	r21
    2ade:	6f 93       	push	r22
    2ae0:	7f 93       	push	r23
    2ae2:	8f 93       	push	r24
    2ae4:	9f 93       	push	r25
    2ae6:	af 93       	push	r26
    2ae8:	bf 93       	push	r27
    2aea:	ef 93       	push	r30
    2aec:	ff 93       	push	r31
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62

	TMR0_CurrentMatches++;
    2af6:	80 91 4a 04 	lds	r24, 0x044A
    2afa:	90 91 4b 04 	lds	r25, 0x044B
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	90 93 4b 04 	sts	0x044B, r25
    2b04:	80 93 4a 04 	sts	0x044A, r24
	
	// Check if we've reached the required number of matches
	if (TMR0_CurrentMatches >= TMR0_RequiredMatches)
    2b08:	20 91 4a 04 	lds	r18, 0x044A
    2b0c:	30 91 4b 04 	lds	r19, 0x044B
    2b10:	80 91 48 04 	lds	r24, 0x0448
    2b14:	90 91 49 04 	lds	r25, 0x0449
    2b18:	28 17       	cp	r18, r24
    2b1a:	39 07       	cpc	r19, r25
    2b1c:	78 f0       	brcs	.+30     	; 0x2b3c <__vector_10+0x70>
	{
		if (TMR0_Callback != 0)
    2b1e:	80 91 46 04 	lds	r24, 0x0446
    2b22:	90 91 47 04 	lds	r25, 0x0447
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	29 f0       	breq	.+10     	; 0x2b34 <__vector_10+0x68>
		{
			TMR0_Callback();
    2b2a:	e0 91 46 04 	lds	r30, 0x0446
    2b2e:	f0 91 47 04 	lds	r31, 0x0447
    2b32:	09 95       	icall
		}
		TMR0_CurrentMatches = 0;  // Reset matches for the next cycle
    2b34:	10 92 4b 04 	sts	0x044B, r1
    2b38:	10 92 4a 04 	sts	0x044A, r1
	}
}
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	ff 91       	pop	r31
    2b42:	ef 91       	pop	r30
    2b44:	bf 91       	pop	r27
    2b46:	af 91       	pop	r26
    2b48:	9f 91       	pop	r25
    2b4a:	8f 91       	pop	r24
    2b4c:	7f 91       	pop	r23
    2b4e:	6f 91       	pop	r22
    2b50:	5f 91       	pop	r21
    2b52:	4f 91       	pop	r20
    2b54:	3f 91       	pop	r19
    2b56:	2f 91       	pop	r18
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <TMR0_CalculateTicks>:

// Function to calculate ticks based on the desired time in milliseconds and the configured prescaler
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds)
{
    2b62:	ef 92       	push	r14
    2b64:	ff 92       	push	r15
    2b66:	0f 93       	push	r16
    2b68:	1f 93       	push	r17
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	2a 97       	sbiw	r28, 0x0a	; 10
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	9a 87       	std	Y+10, r25	; 0x0a
    2b80:	89 87       	std	Y+9, r24	; 0x09
	uint32_t prescaler_value = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	8d 83       	std	Y+5, r24	; 0x05
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	af 83       	std	Y+7, r26	; 0x07
    2b90:	b8 87       	std	Y+8, r27	; 0x08
		break;
		case TMR0_PRESCALER_8:
		prescaler_value = 8;
		break;
		case TMR0_PRESCALER_64:
		prescaler_value = 64;
    2b92:	80 e4       	ldi	r24, 0x40	; 64
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a0 e0       	ldi	r26, 0x00	; 0
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	af 83       	std	Y+7, r26	; 0x07
    2ba0:	b8 87       	std	Y+8, r27	; 0x08
		prescaler_value = 1024;
		break;
	}

	// Calculate ticks based on prescaler and the desired time in milliseconds
	uint32_t ticks = ((8000000 / (prescaler_value * 1000)) * milliseconds);
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	af 81       	ldd	r26, Y+7	; 0x07
    2ba8:	b8 85       	ldd	r27, Y+8	; 0x08
    2baa:	28 ee       	ldi	r18, 0xE8	; 232
    2bac:	33 e0       	ldi	r19, 0x03	; 3
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__mulsi3>
    2bba:	9b 01       	movw	r18, r22
    2bbc:	ac 01       	movw	r20, r24
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	92 e1       	ldi	r25, 0x12	; 18
    2bc2:	aa e7       	ldi	r26, 0x7A	; 122
    2bc4:	b0 e0       	ldi	r27, 0x00	; 0
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 91 23 	call	0x4722	; 0x4722 <__udivmodsi4>
    2bce:	da 01       	movw	r26, r20
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	7c 01       	movw	r14, r24
    2bd4:	8d 01       	movw	r16, r26
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	9c 01       	movw	r18, r24
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	c8 01       	movw	r24, r16
    2be2:	b7 01       	movw	r22, r14
    2be4:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__mulsi3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	ab 83       	std	Y+3, r26	; 0x03
    2bf2:	bc 83       	std	Y+4, r27	; 0x04

	// If the number of ticks exceeds 255 (the max value for an 8-bit timer), calculate how many compare matches are required
	if (ticks > 255)
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	ab 81       	ldd	r26, Y+3	; 0x03
    2bfa:	bc 81       	ldd	r27, Y+4	; 0x04
    2bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bfe:	91 05       	cpc	r25, r1
    2c00:	a1 05       	cpc	r26, r1
    2c02:	b1 05       	cpc	r27, r1
    2c04:	e1 f0       	breq	.+56     	; 0x2c3e <TMR0_CalculateTicks+0xdc>
    2c06:	d8 f0       	brcs	.+54     	; 0x2c3e <TMR0_CalculateTicks+0xdc>
	{
		TMR0_RequiredMatches = ticks / 255;
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	ab 81       	ldd	r26, Y+3	; 0x03
    2c0e:	bc 81       	ldd	r27, Y+4	; 0x04
    2c10:	2f ef       	ldi	r18, 0xFF	; 255
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 91 23 	call	0x4722	; 0x4722 <__udivmodsi4>
    2c20:	da 01       	movw	r26, r20
    2c22:	c9 01       	movw	r24, r18
    2c24:	90 93 49 04 	sts	0x0449, r25
    2c28:	80 93 48 04 	sts	0x0448, r24
		ticks = 255;  // Set the compare value to the maximum for the first match
    2c2c:	8f ef       	ldi	r24, 0xFF	; 255
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a0 e0       	ldi	r26, 0x00	; 0
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	9a 83       	std	Y+2, r25	; 0x02
    2c38:	ab 83       	std	Y+3, r26	; 0x03
    2c3a:	bc 83       	std	Y+4, r27	; 0x04
    2c3c:	06 c0       	rjmp	.+12     	; 0x2c4a <TMR0_CalculateTicks+0xe8>
	}
	else
	{
		TMR0_RequiredMatches = 1;  // Only one match is needed
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	90 93 49 04 	sts	0x0449, r25
    2c46:	80 93 48 04 	sts	0x0448, r24
	}

	return (uint16_)ticks;
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c4e:	2a 96       	adiw	r28, 0x0a	; 10
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	1f 91       	pop	r17
    2c60:	0f 91       	pop	r16
    2c62:	ff 90       	pop	r15
    2c64:	ef 90       	pop	r14
    2c66:	08 95       	ret

00002c68 <TILT_vidInit>:
TILT_SENSOR_PIN tilt_pins[NO_OF_SENSORS] ={TILT_1_PIN,TILT_2_PIN,TILT_3_PIN,TILT_4_PIN,
										TILT_5_PIN,TILT_6_PIN,TILT_7_PIN,TILT_8_PIN};


void TILT_vidInit(uint8_t tilt_pin)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <TILT_vidInit+0x6>
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	8a 83       	std	Y+2, r24	; 0x02
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	88 30       	cpi	r24, 0x08	; 8
    2c78:	c0 f4       	brcc	.+48     	; 0x2caa <TILT_vidInit+0x42>
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	fc 01       	movw	r30, r24
    2c86:	eb 5d       	subi	r30, 0xDB	; 219
    2c88:	fb 4f       	sbci	r31, 0xFB	; 251
    2c8a:	20 81       	ld	r18, Z
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	fc 01       	movw	r30, r24
    2c98:	ea 5d       	subi	r30, 0xDA	; 218
    2c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    2c9c:	90 81       	ld	r25, Z
    2c9e:	82 2f       	mov	r24, r18
    2ca0:	69 2f       	mov	r22, r25
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
    2ca8:	22 c0       	rjmp	.+68     	; 0x2cee <TILT_vidInit+0x86>
	else if(tilt_pin==8)
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	88 30       	cpi	r24, 0x08	; 8
    2cae:	f9 f4       	brne	.+62     	; 0x2cee <TILT_vidInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2cb0:	19 82       	std	Y+1, r1	; 0x01
    2cb2:	1a c0       	rjmp	.+52     	; 0x2ce8 <TILT_vidInit+0x80>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	88 2f       	mov	r24, r24
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	eb 5d       	subi	r30, 0xDB	; 219
    2cc2:	fb 4f       	sbci	r31, 0xFB	; 251
    2cc4:	20 81       	ld	r18, Z
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	ea 5d       	subi	r30, 0xDA	; 218
    2cd4:	fb 4f       	sbci	r31, 0xFB	; 251
    2cd6:	90 81       	ld	r25, Z
    2cd8:	82 2f       	mov	r24, r18
    2cda:	69 2f       	mov	r22, r25
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
void TILT_vidInit(uint8_t tilt_pin)
{
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
	else if(tilt_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	8f 5f       	subi	r24, 0xFF	; 255
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	88 30       	cpi	r24, 0x08	; 8
    2cec:	18 f3       	brcs	.-58     	; 0x2cb4 <TILT_vidInit+0x4c>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
		}
	}
}
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <TILT_vidGetTiltRead>:

void TILT_vidGetTiltRead(uint8_t * tilt_read, uint8_t tilt_pin)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <TILT_vidGetTiltRead+0x6>
    2cfe:	0f 92       	push	r0
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,tilt_read);
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	fc 01       	movw	r30, r24
    2d16:	eb 5d       	subi	r30, 0xDB	; 219
    2d18:	fb 4f       	sbci	r31, 0xFB	; 251
    2d1a:	40 81       	ld	r20, Z
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	fc 01       	movw	r30, r24
    2d28:	ea 5d       	subi	r30, 0xDA	; 218
    2d2a:	fb 4f       	sbci	r31, 0xFB	; 251
    2d2c:	90 81       	ld	r25, Z
    2d2e:	29 81       	ldd	r18, Y+1	; 0x01
    2d30:	3a 81       	ldd	r19, Y+2	; 0x02
    2d32:	84 2f       	mov	r24, r20
    2d34:	69 2f       	mov	r22, r25
    2d36:	a9 01       	movw	r20, r18
    2d38:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_u8GetPinValue>
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <TILT_vidGetAllTiltRead>:

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <TILT_vidGetAllTiltRead+0x6>
    2d4e:	0f 92       	push	r0
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	9b 83       	std	Y+3, r25	; 0x03
    2d56:	8a 83       	std	Y+2, r24	; 0x02
	tilt_read[NO_OF_SENSORS]=0;
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	32 96       	adiw	r30, 0x02	; 2
    2d60:	10 82       	st	Z, r1
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    2d62:	19 82       	std	Y+1, r1	; 0x01
    2d64:	21 c0       	rjmp	.+66     	; 0x2da8 <TILT_vidGetAllTiltRead+0x60>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	fc 01       	movw	r30, r24
    2d72:	eb 5d       	subi	r30, 0xDB	; 219
    2d74:	fb 4f       	sbci	r31, 0xFB	; 251
    2d76:	40 81       	ld	r20, Z
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	fc 01       	movw	r30, r24
    2d84:	ea 5d       	subi	r30, 0xDA	; 218
    2d86:	fb 4f       	sbci	r31, 0xFB	; 251
    2d88:	50 81       	ld	r21, Z
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	28 0f       	add	r18, r24
    2d96:	39 1f       	adc	r19, r25
    2d98:	84 2f       	mov	r24, r20
    2d9a:	65 2f       	mov	r22, r21
    2d9c:	a9 01       	movw	r20, r18
    2d9e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_u8GetPinValue>
}

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
	tilt_read[NO_OF_SENSORS]=0;
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	8f 5f       	subi	r24, 0xFF	; 255
    2da6:	89 83       	std	Y+1, r24	; 0x01
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	82 30       	cpi	r24, 0x02	; 2
    2dac:	e0 f2       	brcs	.-72     	; 0x2d66 <TILT_vidGetAllTiltRead+0x1e>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
	}
	tilt_read[NO_OF_SENSORS]=1;
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	9b 81       	ldd	r25, Y+3	; 0x03
    2db2:	fc 01       	movw	r30, r24
    2db4:	32 96       	adiw	r30, 0x02	; 2
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	80 83       	st	Z, r24
}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <LED_u8InitializeLed>:
#include"../../libraries/std_types.h"
#include "../../mcal/dio_driver/dio_int.h"

uint8_t LED_u8InitializeLed(uint8_t port_id,uint8_t led_pin)
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <LED_u8InitializeLed+0x6>
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
    2dd4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = DIO_u8SetPinMode(port_id,led_pin,OUTPUT);
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	6b 81       	ldd	r22, Y+3	; 0x03
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
    2de0:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LED_u8InitializeLedPort>:

uint8_t LED_u8InitializeLedPort(uint8_t port_id)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <LED_u8InitializeLedPort+0x6>
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t error_status = DIO_u8SetPortMode(port_id,255);
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	6f ef       	ldi	r22, 0xFF	; 255
    2e00:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DIO_u8SetPortMode>
    2e04:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <LED_u8LedOn>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"led_helper.h"

uint8_t LED_u8LedOn(uint8_t port_id,uint8_t led_pin)
{
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <LED_u8LedOn+0x6>
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <LED_u8LedOn+0x8>
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	8b 83       	std	Y+3, r24	; 0x03
    2e20:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2e22:	9e 01       	movw	r18, r28
    2e24:	2e 5f       	subi	r18, 0xFE	; 254
    2e26:	3f 4f       	sbci	r19, 0xFF	; 255
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	6c 81       	ldd	r22, Y+4	; 0x04
    2e2c:	a9 01       	movw	r20, r18
    2e2e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    2e32:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	88 23       	and	r24, r24
    2e38:	71 f4       	brne	.+28     	; 0x2e56 <LED_u8LedOn+0x44>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	88 23       	and	r24, r24
    2e3e:	29 f4       	brne	.+10     	; 0x2e4a <LED_u8LedOn+0x38>
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	6c 81       	ldd	r22, Y+4	; 0x04
    2e44:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <LED_u8InitializeLed>
    2e48:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPinValue(port_id,led_pin,HIGH);
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e4e:	41 e0       	ldi	r20, 0x01	; 1
    2e50:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
    2e54:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <LED_u8LedOff>:
uint8_t LED_u8LedOff(uint8_t port_id,uint8_t led_pin)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <LED_u8LedOff+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <LED_u8LedOff+0x8>
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2e76:	9e 01       	movw	r18, r28
    2e78:	2e 5f       	subi	r18, 0xFE	; 254
    2e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	6c 81       	ldd	r22, Y+4	; 0x04
    2e80:	a9 01       	movw	r20, r18
    2e82:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    2e86:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	88 23       	and	r24, r24
    2e8c:	71 f4       	brne	.+28     	; 0x2eaa <LED_u8LedOff+0x44>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	88 23       	and	r24, r24
    2e92:	29 f4       	brne	.+10     	; 0x2e9e <LED_u8LedOff+0x38>
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	6c 81       	ldd	r22, Y+4	; 0x04
    2e98:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <LED_u8InitializeLed>
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	    error_status = DIO_u8SetPinValue(port_id,led_pin,LOW);
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	6c 81       	ldd	r22, Y+4	; 0x04
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
    2ea8:	89 83       	std	Y+1, r24	; 0x01
		}
	return error_status;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <LED_u8LedToggle>:
uint8_t LED_u8LedToggle(uint8_t port_id,uint8_t led_pin)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <LED_u8LedToggle+0x6>
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <LED_u8LedToggle+0x8>
    2ec2:	0f 92       	push	r0
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	8c 83       	std	Y+4, r24	; 0x04
    2eca:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t value;
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2ecc:	9e 01       	movw	r18, r28
    2ece:	2d 5f       	subi	r18, 0xFD	; 253
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed4:	6d 81       	ldd	r22, Y+5	; 0x05
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    2edc:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	88 23       	and	r24, r24
    2ee2:	21 f5       	brne	.+72     	; 0x2f2c <LED_u8LedToggle+0x72>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	88 23       	and	r24, r24
    2ee8:	29 f4       	brne	.+10     	; 0x2ef4 <LED_u8LedToggle+0x3a>
    2eea:	8c 81       	ldd	r24, Y+4	; 0x04
    2eec:	6d 81       	ldd	r22, Y+5	; 0x05
    2eee:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <LED_u8InitializeLed>
    2ef2:	89 83       	std	Y+1, r24	; 0x01
		error_status = DIO_u8GetPinValue(port_id,led_pin,&value);
    2ef4:	9e 01       	movw	r18, r28
    2ef6:	2e 5f       	subi	r18, 0xFE	; 254
    2ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    2efa:	8c 81       	ldd	r24, Y+4	; 0x04
    2efc:	6d 81       	ldd	r22, Y+5	; 0x05
    2efe:	a9 01       	movw	r20, r18
    2f00:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <DIO_u8GetPinValue>
    2f04:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK){
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	88 23       	and	r24, r24
    2f0a:	81 f4       	brne	.+32     	; 0x2f2c <LED_u8LedToggle+0x72>
			if(value==HIGH)error_status=DIO_u8SetPinValue(port_id,led_pin,LOW);
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	81 30       	cpi	r24, 0x01	; 1
    2f10:	39 f4       	brne	.+14     	; 0x2f20 <LED_u8LedToggle+0x66>
    2f12:	8c 81       	ldd	r24, Y+4	; 0x04
    2f14:	6d 81       	ldd	r22, Y+5	; 0x05
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
    2f1c:	89 83       	std	Y+1, r24	; 0x01
    2f1e:	06 c0       	rjmp	.+12     	; 0x2f2c <LED_u8LedToggle+0x72>
			else error_status=DIO_u8SetPinValue(port_id,led_pin,HIGH);
    2f20:	8c 81       	ldd	r24, Y+4	; 0x04
    2f22:	6d 81       	ldd	r22, Y+5	; 0x05
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
    2f2a:	89 83       	std	Y+1, r24	; 0x01
		}
		}
	return error_status;
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <LED_u8LedBlink>:
uint8_t LED_u8LedBlink(uint8_t port_id,uint8_t led_pin,uint16_ delay_time_ms)
{
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	a2 97       	sbiw	r28, 0x22	; 34
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	8f 8f       	std	Y+31, r24	; 0x1f
    2f54:	68 a3       	std	Y+32, r22	; 0x20
    2f56:	5a a3       	std	Y+34, r21	; 0x22
    2f58:	49 a3       	std	Y+33, r20	; 0x21
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2f5a:	9e 01       	movw	r18, r28
    2f5c:	22 5e       	subi	r18, 0xE2	; 226
    2f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f62:	68 a1       	ldd	r22, Y+32	; 0x20
    2f64:	a9 01       	movw	r20, r18
    2f66:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    2f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	if(error_status==E_OK)
    2f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f6e:	88 23       	and	r24, r24
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <LED_u8LedBlink+0x36>
    2f72:	08 c1       	rjmp	.+528    	; 0x3184 <LED_u8LedBlink+0x246>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2f74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f76:	88 23       	and	r24, r24
    2f78:	29 f4       	brne	.+10     	; 0x2f84 <LED_u8LedBlink+0x46>
    2f7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f7c:	68 a1       	ldd	r22, Y+32	; 0x20
    2f7e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <LED_u8InitializeLed>
    2f82:	8d 8f       	std	Y+29, r24	; 0x1d
	error_status = LED_u8LedOn(port_id,led_pin);
    2f84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f86:	68 a1       	ldd	r22, Y+32	; 0x20
    2f88:	0e 94 09 17 	call	0x2e12	; 0x2e12 <LED_u8LedOn>
    2f8c:	8d 8f       	std	Y+29, r24	; 0x1d
 	 _delay_ms(delay_time_ms);
    2f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f90:	9a a1       	ldd	r25, Y+34	; 0x22
    2f92:	cc 01       	movw	r24, r24
    2f94:	a0 e0       	ldi	r26, 0x00	; 0
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	89 8f       	std	Y+25, r24	; 0x19
    2fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa8:	ab 8f       	std	Y+27, r26	; 0x1b
    2faa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fac:	69 8d       	ldd	r22, Y+25	; 0x19
    2fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a ef       	ldi	r20, 0xFA	; 250
    2fba:	54 e4       	ldi	r21, 0x44	; 68
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	8d 8b       	std	Y+21, r24	; 0x15
    2fc6:	9e 8b       	std	Y+22, r25	; 0x16
    2fc8:	af 8b       	std	Y+23, r26	; 0x17
    2fca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fce:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e8       	ldi	r20, 0x80	; 128
    2fda:	5f e3       	ldi	r21, 0x3F	; 63
    2fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe0:	88 23       	and	r24, r24
    2fe2:	2c f4       	brge	.+10     	; 0x2fee <LED_u8LedBlink+0xb0>
		__ticks = 1;
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9c 8b       	std	Y+20, r25	; 0x14
    2fea:	8b 8b       	std	Y+19, r24	; 0x13
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <LED_u8LedBlink+0x12e>
	else if (__tmp > 65535)
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	4c f5       	brge	.+82     	; 0x3058 <LED_u8LedBlink+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	69 8d       	ldd	r22, Y+25	; 0x19
    3008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    300a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	40 e2       	ldi	r20, 0x20	; 32
    3014:	51 e4       	ldi	r21, 0x41	; 65
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9c 8b       	std	Y+20, r25	; 0x14
    302c:	8b 8b       	std	Y+19, r24	; 0x13
    302e:	0f c0       	rjmp	.+30     	; 0x304e <LED_u8LedBlink+0x110>
    3030:	88 ec       	ldi	r24, 0xC8	; 200
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9a 8b       	std	Y+18, r25	; 0x12
    3036:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3038:	89 89       	ldd	r24, Y+17	; 0x11
    303a:	9a 89       	ldd	r25, Y+18	; 0x12
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <LED_u8LedBlink+0xfe>
    3040:	9a 8b       	std	Y+18, r25	; 0x12
    3042:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3044:	8b 89       	ldd	r24, Y+19	; 0x13
    3046:	9c 89       	ldd	r25, Y+20	; 0x14
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	9c 8b       	std	Y+20, r25	; 0x14
    304c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304e:	8b 89       	ldd	r24, Y+19	; 0x13
    3050:	9c 89       	ldd	r25, Y+20	; 0x14
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	69 f7       	brne	.-38     	; 0x3030 <LED_u8LedBlink+0xf2>
    3056:	14 c0       	rjmp	.+40     	; 0x3080 <LED_u8LedBlink+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3058:	6d 89       	ldd	r22, Y+21	; 0x15
    305a:	7e 89       	ldd	r23, Y+22	; 0x16
    305c:	8f 89       	ldd	r24, Y+23	; 0x17
    305e:	98 8d       	ldd	r25, Y+24	; 0x18
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9c 8b       	std	Y+20, r25	; 0x14
    306a:	8b 8b       	std	Y+19, r24	; 0x13
    306c:	8b 89       	ldd	r24, Y+19	; 0x13
    306e:	9c 89       	ldd	r25, Y+20	; 0x14
    3070:	98 8b       	std	Y+16, r25	; 0x10
    3072:	8f 87       	std	Y+15, r24	; 0x0f
    3074:	8f 85       	ldd	r24, Y+15	; 0x0f
    3076:	98 89       	ldd	r25, Y+16	; 0x10
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <LED_u8LedBlink+0x13a>
    307c:	98 8b       	std	Y+16, r25	; 0x10
    307e:	8f 87       	std	Y+15, r24	; 0x0f
	if(error_status==E_OK){
    3080:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3082:	88 23       	and	r24, r24
    3084:	09 f0       	breq	.+2      	; 0x3088 <LED_u8LedBlink+0x14a>
    3086:	7e c0       	rjmp	.+252    	; 0x3184 <LED_u8LedBlink+0x246>
	error_status = LED_u8LedOff(port_id,led_pin);
    3088:	8f 8d       	ldd	r24, Y+31	; 0x1f
    308a:	68 a1       	ldd	r22, Y+32	; 0x20
    308c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <LED_u8LedOff>
    3090:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(delay_time_ms);
    3092:	89 a1       	ldd	r24, Y+33	; 0x21
    3094:	9a a1       	ldd	r25, Y+34	; 0x22
    3096:	cc 01       	movw	r24, r24
    3098:	a0 e0       	ldi	r26, 0x00	; 0
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	8b 87       	std	Y+11, r24	; 0x0b
    30aa:	9c 87       	std	Y+12, r25	; 0x0c
    30ac:	ad 87       	std	Y+13, r26	; 0x0d
    30ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	4a ef       	ldi	r20, 0xFA	; 250
    30be:	54 e4       	ldi	r21, 0x44	; 68
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	8f 83       	std	Y+7, r24	; 0x07
    30ca:	98 87       	std	Y+8, r25	; 0x08
    30cc:	a9 87       	std	Y+9, r26	; 0x09
    30ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d0:	6f 81       	ldd	r22, Y+7	; 0x07
    30d2:	78 85       	ldd	r23, Y+8	; 0x08
    30d4:	89 85       	ldd	r24, Y+9	; 0x09
    30d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e8       	ldi	r20, 0x80	; 128
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e4:	88 23       	and	r24, r24
    30e6:	2c f4       	brge	.+10     	; 0x30f2 <LED_u8LedBlink+0x1b4>
		__ticks = 1;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	3f c0       	rjmp	.+126    	; 0x3170 <LED_u8LedBlink+0x232>
	else if (__tmp > 65535)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	4c f5       	brge	.+82     	; 0x315c <LED_u8LedBlink+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310a:	6b 85       	ldd	r22, Y+11	; 0x0b
    310c:	7c 85       	ldd	r23, Y+12	; 0x0c
    310e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3110:	9e 85       	ldd	r25, Y+14	; 0x0e
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9e 83       	std	Y+6, r25	; 0x06
    3130:	8d 83       	std	Y+5, r24	; 0x05
    3132:	0f c0       	rjmp	.+30     	; 0x3152 <LED_u8LedBlink+0x214>
    3134:	88 ec       	ldi	r24, 0xC8	; 200
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <LED_u8LedBlink+0x202>
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3152:	8d 81       	ldd	r24, Y+5	; 0x05
    3154:	9e 81       	ldd	r25, Y+6	; 0x06
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	69 f7       	brne	.-38     	; 0x3134 <LED_u8LedBlink+0x1f6>
    315a:	14 c0       	rjmp	.+40     	; 0x3184 <LED_u8LedBlink+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LED_u8LedBlink+0x23e>
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    3184:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3186:	a2 96       	adiw	r28, 0x22	; 34
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <LED_u8LedPortOn>:


uint8_t LED_u8LedPortOn(uint8_t port_id)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <LED_u8LedPortOn+0x6>
    319e:	0f 92       	push	r0
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    31a6:	9e 01       	movw	r18, r28
    31a8:	2e 5f       	subi	r18, 0xFE	; 254
    31aa:	3f 4f       	sbci	r19, 0xFF	; 255
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	a9 01       	movw	r20, r18
    31b2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    31b6:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	88 23       	and	r24, r24
    31bc:	61 f4       	brne	.+24     	; 0x31d6 <LED_u8LedPortOn+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	88 23       	and	r24, r24
    31c2:	21 f4       	brne	.+8      	; 0x31cc <LED_u8LedPortOn+0x34>
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LED_u8InitializeLedPort>
    31ca:	89 83       	std	Y+1, r24	; 0x01
    error_status = DIO_u8SetPortValue(port_id,255);
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	6f ef       	ldi	r22, 0xFF	; 255
    31d0:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_u8SetPortValue>
    31d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <LED_u8LedPortOff>:
uint8_t LED_u8LedPortOff(uint8_t port_id)
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <LED_u8LedPortOff+0x6>
    31ea:	0f 92       	push	r0
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    31f2:	9e 01       	movw	r18, r28
    31f4:	2e 5f       	subi	r18, 0xFE	; 254
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	a9 01       	movw	r20, r18
    31fe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    3202:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	88 23       	and	r24, r24
    3208:	61 f4       	brne	.+24     	; 0x3222 <LED_u8LedPortOff+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	88 23       	and	r24, r24
    320e:	21 f4       	brne	.+8      	; 0x3218 <LED_u8LedPortOff+0x34>
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LED_u8InitializeLedPort>
    3216:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPortValue(port_id,LOW);
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_u8SetPortValue>
    3220:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    3222:	89 81       	ldd	r24, Y+1	; 0x01
}
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <LED_u8LedPortToggle>:
uint8_t LED_u8LedPortToggle(uint8_t port_id)
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	00 d0       	rcall	.+0      	; 0x3236 <LED_u8LedPortToggle+0x6>
    3236:	00 d0       	rcall	.+0      	; 0x3238 <LED_u8LedPortToggle+0x8>
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t value;
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    323e:	9e 01       	movw	r18, r28
    3240:	2d 5f       	subi	r18, 0xFD	; 253
    3242:	3f 4f       	sbci	r19, 0xFF	; 255
    3244:	8c 81       	ldd	r24, Y+4	; 0x04
    3246:	60 e0       	ldi	r22, 0x00	; 0
    3248:	a9 01       	movw	r20, r18
    324a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    324e:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	88 23       	and	r24, r24
    3254:	01 f5       	brne	.+64     	; 0x3296 <LED_u8LedPortToggle+0x66>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	88 23       	and	r24, r24
    325a:	21 f4       	brne	.+8      	; 0x3264 <LED_u8LedPortToggle+0x34>
    325c:	8c 81       	ldd	r24, Y+4	; 0x04
    325e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LED_u8InitializeLedPort>
    3262:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8GetPortValue(port_id,&value);
    3264:	9e 01       	movw	r18, r28
    3266:	2e 5f       	subi	r18, 0xFE	; 254
    3268:	3f 4f       	sbci	r19, 0xFF	; 255
    326a:	8c 81       	ldd	r24, Y+4	; 0x04
    326c:	b9 01       	movw	r22, r18
    326e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <DIO_u8GetPortValue>
    3272:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK){
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	88 23       	and	r24, r24
    3278:	71 f4       	brne	.+28     	; 0x3296 <LED_u8LedPortToggle+0x66>
		if(value==HIGH)error_status=DIO_u8SetPortValue(port_id,LOW);
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	81 30       	cpi	r24, 0x01	; 1
    327e:	31 f4       	brne	.+12     	; 0x328c <LED_u8LedPortToggle+0x5c>
    3280:	8c 81       	ldd	r24, Y+4	; 0x04
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_u8SetPortValue>
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	05 c0       	rjmp	.+10     	; 0x3296 <LED_u8LedPortToggle+0x66>
		else error_status=DIO_u8SetPortValue(port_id,255);
    328c:	8c 81       	ldd	r24, Y+4	; 0x04
    328e:	6f ef       	ldi	r22, 0xFF	; 255
    3290:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_u8SetPortValue>
    3294:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
}
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <LED_u8LedPortBlink>:
uint8_t LED_u8LedPortBlink(uint8_t port_id,uint16_ delay_time_ms)
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	a1 97       	sbiw	r28, 0x21	; 33
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	8f 8f       	std	Y+31, r24	; 0x1f
    32bc:	79 a3       	std	Y+33, r23	; 0x21
    32be:	68 a3       	std	Y+32, r22	; 0x20
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    32c0:	9e 01       	movw	r18, r28
    32c2:	22 5e       	subi	r18, 0xE2	; 226
    32c4:	3f 4f       	sbci	r19, 0xFF	; 255
    32c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c8:	60 e0       	ldi	r22, 0x00	; 0
    32ca:	a9 01       	movw	r20, r18
    32cc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_u8IsPinOutPut>
    32d0:	8d 8f       	std	Y+29, r24	; 0x1d
		if(error_status==E_OK)
    32d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32d4:	88 23       	and	r24, r24
    32d6:	09 f0       	breq	.+2      	; 0x32da <LED_u8LedPortBlink+0x34>
    32d8:	05 c1       	rjmp	.+522    	; 0x34e4 <LED_u8LedPortBlink+0x23e>
		{
		if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    32da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32dc:	88 23       	and	r24, r24
    32de:	21 f4       	brne	.+8      	; 0x32e8 <LED_u8LedPortBlink+0x42>
    32e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e2:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LED_u8InitializeLedPort>
    32e6:	8d 8f       	std	Y+29, r24	; 0x1d
		error_status = LED_u8LedPortOn(port_id);
    32e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32ea:	0e 94 cc 18 	call	0x3198	; 0x3198 <LED_u8LedPortOn>
    32ee:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    32f0:	88 a1       	ldd	r24, Y+32	; 0x20
    32f2:	99 a1       	ldd	r25, Y+33	; 0x21
    32f4:	cc 01       	movw	r24, r24
    32f6:	a0 e0       	ldi	r26, 0x00	; 0
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	89 8f       	std	Y+25, r24	; 0x19
    3308:	9a 8f       	std	Y+26, r25	; 0x1a
    330a:	ab 8f       	std	Y+27, r26	; 0x1b
    330c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330e:	69 8d       	ldd	r22, Y+25	; 0x19
    3310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a ef       	ldi	r20, 0xFA	; 250
    331c:	54 e4       	ldi	r21, 0x44	; 68
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	8d 8b       	std	Y+21, r24	; 0x15
    3328:	9e 8b       	std	Y+22, r25	; 0x16
    332a:	af 8b       	std	Y+23, r26	; 0x17
    332c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    332e:	6d 89       	ldd	r22, Y+21	; 0x15
    3330:	7e 89       	ldd	r23, Y+22	; 0x16
    3332:	8f 89       	ldd	r24, Y+23	; 0x17
    3334:	98 8d       	ldd	r25, Y+24	; 0x18
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e8       	ldi	r20, 0x80	; 128
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3342:	88 23       	and	r24, r24
    3344:	2c f4       	brge	.+10     	; 0x3350 <LED_u8LedPortBlink+0xaa>
		__ticks = 1;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9c 8b       	std	Y+20, r25	; 0x14
    334c:	8b 8b       	std	Y+19, r24	; 0x13
    334e:	3f c0       	rjmp	.+126    	; 0x33ce <LED_u8LedPortBlink+0x128>
	else if (__tmp > 65535)
    3350:	6d 89       	ldd	r22, Y+21	; 0x15
    3352:	7e 89       	ldd	r23, Y+22	; 0x16
    3354:	8f 89       	ldd	r24, Y+23	; 0x17
    3356:	98 8d       	ldd	r25, Y+24	; 0x18
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	4c f5       	brge	.+82     	; 0x33ba <LED_u8LedPortBlink+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3368:	69 8d       	ldd	r22, Y+25	; 0x19
    336a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    336c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    336e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e2       	ldi	r20, 0x20	; 32
    3376:	51 e4       	ldi	r21, 0x41	; 65
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	9c 8b       	std	Y+20, r25	; 0x14
    338e:	8b 8b       	std	Y+19, r24	; 0x13
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <LED_u8LedPortBlink+0x10a>
    3392:	88 ec       	ldi	r24, 0xC8	; 200
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9a 8b       	std	Y+18, r25	; 0x12
    3398:	89 8b       	std	Y+17, r24	; 0x11
    339a:	89 89       	ldd	r24, Y+17	; 0x11
    339c:	9a 89       	ldd	r25, Y+18	; 0x12
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <LED_u8LedPortBlink+0xf8>
    33a2:	9a 8b       	std	Y+18, r25	; 0x12
    33a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a6:	8b 89       	ldd	r24, Y+19	; 0x13
    33a8:	9c 89       	ldd	r25, Y+20	; 0x14
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	9c 8b       	std	Y+20, r25	; 0x14
    33ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b0:	8b 89       	ldd	r24, Y+19	; 0x13
    33b2:	9c 89       	ldd	r25, Y+20	; 0x14
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	69 f7       	brne	.-38     	; 0x3392 <LED_u8LedPortBlink+0xec>
    33b8:	14 c0       	rjmp	.+40     	; 0x33e2 <LED_u8LedPortBlink+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ba:	6d 89       	ldd	r22, Y+21	; 0x15
    33bc:	7e 89       	ldd	r23, Y+22	; 0x16
    33be:	8f 89       	ldd	r24, Y+23	; 0x17
    33c0:	98 8d       	ldd	r25, Y+24	; 0x18
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9c 8b       	std	Y+20, r25	; 0x14
    33cc:	8b 8b       	std	Y+19, r24	; 0x13
    33ce:	8b 89       	ldd	r24, Y+19	; 0x13
    33d0:	9c 89       	ldd	r25, Y+20	; 0x14
    33d2:	98 8b       	std	Y+16, r25	; 0x10
    33d4:	8f 87       	std	Y+15, r24	; 0x0f
    33d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d8:	98 89       	ldd	r25, Y+16	; 0x10
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <LED_u8LedPortBlink+0x134>
    33de:	98 8b       	std	Y+16, r25	; 0x10
    33e0:	8f 87       	std	Y+15, r24	; 0x0f
		if(error_status==E_OK){
    33e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33e4:	88 23       	and	r24, r24
    33e6:	09 f0       	breq	.+2      	; 0x33ea <LED_u8LedPortBlink+0x144>
    33e8:	7d c0       	rjmp	.+250    	; 0x34e4 <LED_u8LedPortBlink+0x23e>
		error_status = LED_u8LedPortOff(port_id);
    33ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33ec:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <LED_u8LedPortOff>
    33f0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    33f2:	88 a1       	ldd	r24, Y+32	; 0x20
    33f4:	99 a1       	ldd	r25, Y+33	; 0x21
    33f6:	cc 01       	movw	r24, r24
    33f8:	a0 e0       	ldi	r26, 0x00	; 0
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	8b 87       	std	Y+11, r24	; 0x0b
    340a:	9c 87       	std	Y+12, r25	; 0x0c
    340c:	ad 87       	std	Y+13, r26	; 0x0d
    340e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	4a ef       	ldi	r20, 0xFA	; 250
    341e:	54 e4       	ldi	r21, 0x44	; 68
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	8f 83       	std	Y+7, r24	; 0x07
    342a:	98 87       	std	Y+8, r25	; 0x08
    342c:	a9 87       	std	Y+9, r26	; 0x09
    342e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3430:	6f 81       	ldd	r22, Y+7	; 0x07
    3432:	78 85       	ldd	r23, Y+8	; 0x08
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	5f e3       	ldi	r21, 0x3F	; 63
    3440:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3444:	88 23       	and	r24, r24
    3446:	2c f4       	brge	.+10     	; 0x3452 <LED_u8LedPortBlink+0x1ac>
		__ticks = 1;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	9e 83       	std	Y+6, r25	; 0x06
    344e:	8d 83       	std	Y+5, r24	; 0x05
    3450:	3f c0       	rjmp	.+126    	; 0x34d0 <LED_u8LedPortBlink+0x22a>
	else if (__tmp > 65535)
    3452:	6f 81       	ldd	r22, Y+7	; 0x07
    3454:	78 85       	ldd	r23, Y+8	; 0x08
    3456:	89 85       	ldd	r24, Y+9	; 0x09
    3458:	9a 85       	ldd	r25, Y+10	; 0x0a
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	3f ef       	ldi	r19, 0xFF	; 255
    345e:	4f e7       	ldi	r20, 0x7F	; 127
    3460:	57 e4       	ldi	r21, 0x47	; 71
    3462:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3466:	18 16       	cp	r1, r24
    3468:	4c f5       	brge	.+82     	; 0x34bc <LED_u8LedPortBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346a:	6b 85       	ldd	r22, Y+11	; 0x0b
    346c:	7c 85       	ldd	r23, Y+12	; 0x0c
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e2       	ldi	r20, 0x20	; 32
    3478:	51 e4       	ldi	r21, 0x41	; 65
    347a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	bc 01       	movw	r22, r24
    3484:	cd 01       	movw	r24, r26
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9e 83       	std	Y+6, r25	; 0x06
    3490:	8d 83       	std	Y+5, r24	; 0x05
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <LED_u8LedPortBlink+0x20c>
    3494:	88 ec       	ldi	r24, 0xC8	; 200
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9c 83       	std	Y+4, r25	; 0x04
    349a:	8b 83       	std	Y+3, r24	; 0x03
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	9c 81       	ldd	r25, Y+4	; 0x04
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LED_u8LedPortBlink+0x1fa>
    34a4:	9c 83       	std	Y+4, r25	; 0x04
    34a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	9e 83       	std	Y+6, r25	; 0x06
    34b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b2:	8d 81       	ldd	r24, Y+5	; 0x05
    34b4:	9e 81       	ldd	r25, Y+6	; 0x06
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	69 f7       	brne	.-38     	; 0x3494 <LED_u8LedPortBlink+0x1ee>
    34ba:	14 c0       	rjmp	.+40     	; 0x34e4 <LED_u8LedPortBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34bc:	6f 81       	ldd	r22, Y+7	; 0x07
    34be:	78 85       	ldd	r23, Y+8	; 0x08
    34c0:	89 85       	ldd	r24, Y+9	; 0x09
    34c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	9e 83       	std	Y+6, r25	; 0x06
    34ce:	8d 83       	std	Y+5, r24	; 0x05
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	9a 81       	ldd	r25, Y+2	; 0x02
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <LED_u8LedPortBlink+0x236>
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
		}
		}

	return error_status;
    34e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    34e6:	a1 96       	adiw	r28, 0x21	; 33
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	08 95       	ret

000034f8 <LCD_vidWriteData>:
#include"lcd_cfg.h"

uint8_t next_char_position = 0;

void LCD_vidWriteData(uint8_t data)
{
    34f8:	df 93       	push	r29
    34fa:	cf 93       	push	r28
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	2f 97       	sbiw	r28, 0x0f	; 15
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	0f be       	out	0x3f, r0	; 63
    350a:	cd bf       	out	0x3d, r28	; 61
    350c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	67 e0       	ldi	r22, 0x07	; 7
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	65 e0       	ldi	r22, 0x05	; 5
    351c:	40 e0       	ldi	r20, 0x00	; 0
    351e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,data);
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	6f 85       	ldd	r22, Y+15	; 0x0f
    3526:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    352a:	82 e0       	ldi	r24, 0x02	; 2
    352c:	66 e0       	ldi	r22, 0x06	; 6
    352e:	41 e0       	ldi	r20, 0x01	; 1
    3530:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	a0 e0       	ldi	r26, 0x00	; 0
    353a:	b0 e4       	ldi	r27, 0x40	; 64
    353c:	8b 87       	std	Y+11, r24	; 0x0b
    353e:	9c 87       	std	Y+12, r25	; 0x0c
    3540:	ad 87       	std	Y+13, r26	; 0x0d
    3542:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3544:	6b 85       	ldd	r22, Y+11	; 0x0b
    3546:	7c 85       	ldd	r23, Y+12	; 0x0c
    3548:	8d 85       	ldd	r24, Y+13	; 0x0d
    354a:	9e 85       	ldd	r25, Y+14	; 0x0e
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a ef       	ldi	r20, 0xFA	; 250
    3552:	54 e4       	ldi	r21, 0x44	; 68
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	8f 83       	std	Y+7, r24	; 0x07
    355e:	98 87       	std	Y+8, r25	; 0x08
    3560:	a9 87       	std	Y+9, r26	; 0x09
    3562:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3564:	6f 81       	ldd	r22, Y+7	; 0x07
    3566:	78 85       	ldd	r23, Y+8	; 0x08
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	40 e8       	ldi	r20, 0x80	; 128
    3572:	5f e3       	ldi	r21, 0x3F	; 63
    3574:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3578:	88 23       	and	r24, r24
    357a:	2c f4       	brge	.+10     	; 0x3586 <LCD_vidWriteData+0x8e>
		__ticks = 1;
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	9e 83       	std	Y+6, r25	; 0x06
    3582:	8d 83       	std	Y+5, r24	; 0x05
    3584:	3f c0       	rjmp	.+126    	; 0x3604 <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    3586:	6f 81       	ldd	r22, Y+7	; 0x07
    3588:	78 85       	ldd	r23, Y+8	; 0x08
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	9a 85       	ldd	r25, Y+10	; 0x0a
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	3f ef       	ldi	r19, 0xFF	; 255
    3592:	4f e7       	ldi	r20, 0x7F	; 127
    3594:	57 e4       	ldi	r21, 0x47	; 71
    3596:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    359a:	18 16       	cp	r1, r24
    359c:	4c f5       	brge	.+82     	; 0x35f0 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359e:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e2       	ldi	r20, 0x20	; 32
    35ac:	51 e4       	ldi	r21, 0x41	; 65
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	bc 01       	movw	r22, r24
    35b8:	cd 01       	movw	r24, r26
    35ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	9e 83       	std	Y+6, r25	; 0x06
    35c4:	8d 83       	std	Y+5, r24	; 0x05
    35c6:	0f c0       	rjmp	.+30     	; 0x35e6 <LCD_vidWriteData+0xee>
    35c8:	88 ec       	ldi	r24, 0xC8	; 200
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9c 83       	std	Y+4, r25	; 0x04
    35ce:	8b 83       	std	Y+3, r24	; 0x03
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	9c 81       	ldd	r25, Y+4	; 0x04
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <LCD_vidWriteData+0xdc>
    35d8:	9c 83       	std	Y+4, r25	; 0x04
    35da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	01 97       	sbiw	r24, 0x01	; 1
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	69 f7       	brne	.-38     	; 0x35c8 <LCD_vidWriteData+0xd0>
    35ee:	14 c0       	rjmp	.+40     	; 0x3618 <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f0:	6f 81       	ldd	r22, Y+7	; 0x07
    35f2:	78 85       	ldd	r23, Y+8	; 0x08
    35f4:	89 85       	ldd	r24, Y+9	; 0x09
    35f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	8d 81       	ldd	r24, Y+5	; 0x05
    3606:	9e 81       	ldd	r25, Y+6	; 0x06
    3608:	9a 83       	std	Y+2, r25	; 0x02
    360a:	89 83       	std	Y+1, r24	; 0x01
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	01 97       	sbiw	r24, 0x01	; 1
    3612:	f1 f7       	brne	.-4      	; 0x3610 <LCD_vidWriteData+0x118>
    3614:	9a 83       	std	Y+2, r25	; 0x02
    3616:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	66 e0       	ldi	r22, 0x06	; 6
    361c:	40 e0       	ldi	r20, 0x00	; 0
    361e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
}
    3622:	2f 96       	adiw	r28, 0x0f	; 15
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8_t command)
{
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	2f 97       	sbiw	r28, 0x0f	; 15
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	67 e0       	ldi	r22, 0x07	; 7
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    3654:	82 e0       	ldi	r24, 0x02	; 2
    3656:	65 e0       	ldi	r22, 0x05	; 5
    3658:	40 e0       	ldi	r20, 0x00	; 0
    365a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,command);
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	6f 85       	ldd	r22, Y+15	; 0x0f
    3662:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3666:	82 e0       	ldi	r24, 0x02	; 2
    3668:	66 e0       	ldi	r22, 0x06	; 6
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	a0 e0       	ldi	r26, 0x00	; 0
    3676:	b0 e4       	ldi	r27, 0x40	; 64
    3678:	8b 87       	std	Y+11, r24	; 0x0b
    367a:	9c 87       	std	Y+12, r25	; 0x0c
    367c:	ad 87       	std	Y+13, r26	; 0x0d
    367e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3680:	6b 85       	ldd	r22, Y+11	; 0x0b
    3682:	7c 85       	ldd	r23, Y+12	; 0x0c
    3684:	8d 85       	ldd	r24, Y+13	; 0x0d
    3686:	9e 85       	ldd	r25, Y+14	; 0x0e
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	4a ef       	ldi	r20, 0xFA	; 250
    368e:	54 e4       	ldi	r21, 0x44	; 68
    3690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	8f 83       	std	Y+7, r24	; 0x07
    369a:	98 87       	std	Y+8, r25	; 0x08
    369c:	a9 87       	std	Y+9, r26	; 0x09
    369e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36a0:	6f 81       	ldd	r22, Y+7	; 0x07
    36a2:	78 85       	ldd	r23, Y+8	; 0x08
    36a4:	89 85       	ldd	r24, Y+9	; 0x09
    36a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e8       	ldi	r20, 0x80	; 128
    36ae:	5f e3       	ldi	r21, 0x3F	; 63
    36b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36b4:	88 23       	and	r24, r24
    36b6:	2c f4       	brge	.+10     	; 0x36c2 <LCD_vidWriteCmd+0x8e>
		__ticks = 1;
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	8d 83       	std	Y+5, r24	; 0x05
    36c0:	3f c0       	rjmp	.+126    	; 0x3740 <LCD_vidWriteCmd+0x10c>
	else if (__tmp > 65535)
    36c2:	6f 81       	ldd	r22, Y+7	; 0x07
    36c4:	78 85       	ldd	r23, Y+8	; 0x08
    36c6:	89 85       	ldd	r24, Y+9	; 0x09
    36c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	3f ef       	ldi	r19, 0xFF	; 255
    36ce:	4f e7       	ldi	r20, 0x7F	; 127
    36d0:	57 e4       	ldi	r21, 0x47	; 71
    36d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36d6:	18 16       	cp	r1, r24
    36d8:	4c f5       	brge	.+82     	; 0x372c <LCD_vidWriteCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36da:	6b 85       	ldd	r22, Y+11	; 0x0b
    36dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36de:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	40 e2       	ldi	r20, 0x20	; 32
    36e8:	51 e4       	ldi	r21, 0x41	; 65
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	9e 83       	std	Y+6, r25	; 0x06
    3700:	8d 83       	std	Y+5, r24	; 0x05
    3702:	0f c0       	rjmp	.+30     	; 0x3722 <LCD_vidWriteCmd+0xee>
    3704:	88 ec       	ldi	r24, 0xC8	; 200
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	8b 83       	std	Y+3, r24	; 0x03
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	9c 81       	ldd	r25, Y+4	; 0x04
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <LCD_vidWriteCmd+0xdc>
    3714:	9c 83       	std	Y+4, r25	; 0x04
    3716:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3718:	8d 81       	ldd	r24, Y+5	; 0x05
    371a:	9e 81       	ldd	r25, Y+6	; 0x06
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	9e 83       	std	Y+6, r25	; 0x06
    3720:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3722:	8d 81       	ldd	r24, Y+5	; 0x05
    3724:	9e 81       	ldd	r25, Y+6	; 0x06
    3726:	00 97       	sbiw	r24, 0x00	; 0
    3728:	69 f7       	brne	.-38     	; 0x3704 <LCD_vidWriteCmd+0xd0>
    372a:	14 c0       	rjmp	.+40     	; 0x3754 <LCD_vidWriteCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372c:	6f 81       	ldd	r22, Y+7	; 0x07
    372e:	78 85       	ldd	r23, Y+8	; 0x08
    3730:	89 85       	ldd	r24, Y+9	; 0x09
    3732:	9a 85       	ldd	r25, Y+10	; 0x0a
    3734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	9e 83       	std	Y+6, r25	; 0x06
    373e:	8d 83       	std	Y+5, r24	; 0x05
    3740:	8d 81       	ldd	r24, Y+5	; 0x05
    3742:	9e 81       	ldd	r25, Y+6	; 0x06
    3744:	9a 83       	std	Y+2, r25	; 0x02
    3746:	89 83       	std	Y+1, r24	; 0x01
    3748:	89 81       	ldd	r24, Y+1	; 0x01
    374a:	9a 81       	ldd	r25, Y+2	; 0x02
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	f1 f7       	brne	.-4      	; 0x374c <LCD_vidWriteCmd+0x118>
    3750:	9a 83       	std	Y+2, r25	; 0x02
    3752:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	66 e0       	ldi	r22, 0x06	; 6
    3758:	40 e0       	ldi	r20, 0x00	; 0
    375a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <DIO_u8SetPinValue>
}
    375e:	2f 96       	adiw	r28, 0x0f	; 15
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	de bf       	out	0x3e, r29	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	cd bf       	out	0x3d, r28	; 61
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <LCD_vidInit>:

void LCD_vidInit(void)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    3778:	e8 97       	sbiw	r28, 0x38	; 56
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	67 e0       	ldi	r22, 0x07	; 7
    3788:	41 e0       	ldi	r20, 0x01	; 1
    378a:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	65 e0       	ldi	r22, 0x05	; 5
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    3798:	82 e0       	ldi	r24, 0x02	; 2
    379a:	66 e0       	ldi	r22, 0x06	; 6
    379c:	41 e0       	ldi	r20, 0x01	; 1
    379e:	0e 94 19 0b 	call	0x1632	; 0x1632 <DIO_u8SetPinMode>
	DIO_u8SetPortMode(LCD_Data_PORT,255);
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	6f ef       	ldi	r22, 0xFF	; 255
    37a6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <DIO_u8SetPortMode>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 e2       	ldi	r26, 0x20	; 32
    37b0:	b2 e4       	ldi	r27, 0x42	; 66
    37b2:	8d ab       	std	Y+53, r24	; 0x35
    37b4:	9e ab       	std	Y+54, r25	; 0x36
    37b6:	af ab       	std	Y+55, r26	; 0x37
    37b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ba:	6d a9       	ldd	r22, Y+53	; 0x35
    37bc:	7e a9       	ldd	r23, Y+54	; 0x36
    37be:	8f a9       	ldd	r24, Y+55	; 0x37
    37c0:	98 ad       	ldd	r25, Y+56	; 0x38
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	4a ef       	ldi	r20, 0xFA	; 250
    37c8:	54 e4       	ldi	r21, 0x44	; 68
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	89 ab       	std	Y+49, r24	; 0x31
    37d4:	9a ab       	std	Y+50, r25	; 0x32
    37d6:	ab ab       	std	Y+51, r26	; 0x33
    37d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37da:	69 a9       	ldd	r22, Y+49	; 0x31
    37dc:	7a a9       	ldd	r23, Y+50	; 0x32
    37de:	8b a9       	ldd	r24, Y+51	; 0x33
    37e0:	9c a9       	ldd	r25, Y+52	; 0x34
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	2c f4       	brge	.+10     	; 0x37fc <LCD_vidInit+0x8c>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	98 ab       	std	Y+48, r25	; 0x30
    37f8:	8f a7       	std	Y+47, r24	; 0x2f
    37fa:	3f c0       	rjmp	.+126    	; 0x387a <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    37fc:	69 a9       	ldd	r22, Y+49	; 0x31
    37fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3800:	8b a9       	ldd	r24, Y+51	; 0x33
    3802:	9c a9       	ldd	r25, Y+52	; 0x34
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	3f ef       	ldi	r19, 0xFF	; 255
    3808:	4f e7       	ldi	r20, 0x7F	; 127
    380a:	57 e4       	ldi	r21, 0x47	; 71
    380c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3810:	18 16       	cp	r1, r24
    3812:	4c f5       	brge	.+82     	; 0x3866 <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3814:	6d a9       	ldd	r22, Y+53	; 0x35
    3816:	7e a9       	ldd	r23, Y+54	; 0x36
    3818:	8f a9       	ldd	r24, Y+55	; 0x37
    381a:	98 ad       	ldd	r25, Y+56	; 0x38
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e2       	ldi	r20, 0x20	; 32
    3822:	51 e4       	ldi	r21, 0x41	; 65
    3824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	98 ab       	std	Y+48, r25	; 0x30
    383a:	8f a7       	std	Y+47, r24	; 0x2f
    383c:	0f c0       	rjmp	.+30     	; 0x385c <LCD_vidInit+0xec>
    383e:	88 ec       	ldi	r24, 0xC8	; 200
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	9e a7       	std	Y+46, r25	; 0x2e
    3844:	8d a7       	std	Y+45, r24	; 0x2d
    3846:	8d a5       	ldd	r24, Y+45	; 0x2d
    3848:	9e a5       	ldd	r25, Y+46	; 0x2e
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCD_vidInit+0xda>
    384e:	9e a7       	std	Y+46, r25	; 0x2e
    3850:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3852:	8f a5       	ldd	r24, Y+47	; 0x2f
    3854:	98 a9       	ldd	r25, Y+48	; 0x30
    3856:	01 97       	sbiw	r24, 0x01	; 1
    3858:	98 ab       	std	Y+48, r25	; 0x30
    385a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385c:	8f a5       	ldd	r24, Y+47	; 0x2f
    385e:	98 a9       	ldd	r25, Y+48	; 0x30
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	69 f7       	brne	.-38     	; 0x383e <LCD_vidInit+0xce>
    3864:	14 c0       	rjmp	.+40     	; 0x388e <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3866:	69 a9       	ldd	r22, Y+49	; 0x31
    3868:	7a a9       	ldd	r23, Y+50	; 0x32
    386a:	8b a9       	ldd	r24, Y+51	; 0x33
    386c:	9c a9       	ldd	r25, Y+52	; 0x34
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	98 ab       	std	Y+48, r25	; 0x30
    3878:	8f a7       	std	Y+47, r24	; 0x2f
    387a:	8f a5       	ldd	r24, Y+47	; 0x2f
    387c:	98 a9       	ldd	r25, Y+48	; 0x30
    387e:	9c a7       	std	Y+44, r25	; 0x2c
    3880:	8b a7       	std	Y+43, r24	; 0x2b
    3882:	8b a5       	ldd	r24, Y+43	; 0x2b
    3884:	9c a5       	ldd	r25, Y+44	; 0x2c
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <LCD_vidInit+0x116>
    388a:	9c a7       	std	Y+44, r25	; 0x2c
    388c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_vidWriteCmd(0b00111000);
    388e:	88 e3       	ldi	r24, 0x38	; 56
    3890:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a0 e0       	ldi	r26, 0x00	; 0
    389a:	b0 e4       	ldi	r27, 0x40	; 64
    389c:	8f a3       	std	Y+39, r24	; 0x27
    389e:	98 a7       	std	Y+40, r25	; 0x28
    38a0:	a9 a7       	std	Y+41, r26	; 0x29
    38a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a4:	6f a1       	ldd	r22, Y+39	; 0x27
    38a6:	78 a5       	ldd	r23, Y+40	; 0x28
    38a8:	89 a5       	ldd	r24, Y+41	; 0x29
    38aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a ef       	ldi	r20, 0xFA	; 250
    38b2:	54 e4       	ldi	r21, 0x44	; 68
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	8b a3       	std	Y+35, r24	; 0x23
    38be:	9c a3       	std	Y+36, r25	; 0x24
    38c0:	ad a3       	std	Y+37, r26	; 0x25
    38c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38c4:	6b a1       	ldd	r22, Y+35	; 0x23
    38c6:	7c a1       	ldd	r23, Y+36	; 0x24
    38c8:	8d a1       	ldd	r24, Y+37	; 0x25
    38ca:	9e a1       	ldd	r25, Y+38	; 0x26
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	2c f4       	brge	.+10     	; 0x38e6 <LCD_vidInit+0x176>
		__ticks = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9a a3       	std	Y+34, r25	; 0x22
    38e2:	89 a3       	std	Y+33, r24	; 0x21
    38e4:	3f c0       	rjmp	.+126    	; 0x3964 <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    38e6:	6b a1       	ldd	r22, Y+35	; 0x23
    38e8:	7c a1       	ldd	r23, Y+36	; 0x24
    38ea:	8d a1       	ldd	r24, Y+37	; 0x25
    38ec:	9e a1       	ldd	r25, Y+38	; 0x26
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	3f ef       	ldi	r19, 0xFF	; 255
    38f2:	4f e7       	ldi	r20, 0x7F	; 127
    38f4:	57 e4       	ldi	r21, 0x47	; 71
    38f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38fa:	18 16       	cp	r1, r24
    38fc:	4c f5       	brge	.+82     	; 0x3950 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3900:	78 a5       	ldd	r23, Y+40	; 0x28
    3902:	89 a5       	ldd	r24, Y+41	; 0x29
    3904:	9a a5       	ldd	r25, Y+42	; 0x2a
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e2       	ldi	r20, 0x20	; 32
    390c:	51 e4       	ldi	r21, 0x41	; 65
    390e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	9a a3       	std	Y+34, r25	; 0x22
    3924:	89 a3       	std	Y+33, r24	; 0x21
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <LCD_vidInit+0x1d6>
    3928:	88 ec       	ldi	r24, 0xC8	; 200
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	98 a3       	std	Y+32, r25	; 0x20
    392e:	8f 8f       	std	Y+31, r24	; 0x1f
    3930:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3932:	98 a1       	ldd	r25, Y+32	; 0x20
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_vidInit+0x1c4>
    3938:	98 a3       	std	Y+32, r25	; 0x20
    393a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393c:	89 a1       	ldd	r24, Y+33	; 0x21
    393e:	9a a1       	ldd	r25, Y+34	; 0x22
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	9a a3       	std	Y+34, r25	; 0x22
    3944:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3946:	89 a1       	ldd	r24, Y+33	; 0x21
    3948:	9a a1       	ldd	r25, Y+34	; 0x22
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	69 f7       	brne	.-38     	; 0x3928 <LCD_vidInit+0x1b8>
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	6b a1       	ldd	r22, Y+35	; 0x23
    3952:	7c a1       	ldd	r23, Y+36	; 0x24
    3954:	8d a1       	ldd	r24, Y+37	; 0x25
    3956:	9e a1       	ldd	r25, Y+38	; 0x26
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9a a3       	std	Y+34, r25	; 0x22
    3962:	89 a3       	std	Y+33, r24	; 0x21
    3964:	89 a1       	ldd	r24, Y+33	; 0x21
    3966:	9a a1       	ldd	r25, Y+34	; 0x22
    3968:	9e 8f       	std	Y+30, r25	; 0x1e
    396a:	8d 8f       	std	Y+29, r24	; 0x1d
    396c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    396e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_vidInit+0x200>
    3974:	9e 8f       	std	Y+30, r25	; 0x1e
    3976:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidWriteCmd(0b00001100);
    3978:	8c e0       	ldi	r24, 0x0C	; 12
    397a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	90 e0       	ldi	r25, 0x00	; 0
    3982:	a0 e0       	ldi	r26, 0x00	; 0
    3984:	b0 e4       	ldi	r27, 0x40	; 64
    3986:	89 8f       	std	Y+25, r24	; 0x19
    3988:	9a 8f       	std	Y+26, r25	; 0x1a
    398a:	ab 8f       	std	Y+27, r26	; 0x1b
    398c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398e:	69 8d       	ldd	r22, Y+25	; 0x19
    3990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	4a ef       	ldi	r20, 0xFA	; 250
    399c:	54 e4       	ldi	r21, 0x44	; 68
    399e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	8d 8b       	std	Y+21, r24	; 0x15
    39a8:	9e 8b       	std	Y+22, r25	; 0x16
    39aa:	af 8b       	std	Y+23, r26	; 0x17
    39ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39ae:	6d 89       	ldd	r22, Y+21	; 0x15
    39b0:	7e 89       	ldd	r23, Y+22	; 0x16
    39b2:	8f 89       	ldd	r24, Y+23	; 0x17
    39b4:	98 8d       	ldd	r25, Y+24	; 0x18
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	40 e8       	ldi	r20, 0x80	; 128
    39bc:	5f e3       	ldi	r21, 0x3F	; 63
    39be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39c2:	88 23       	and	r24, r24
    39c4:	2c f4       	brge	.+10     	; 0x39d0 <LCD_vidInit+0x260>
		__ticks = 1;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	9c 8b       	std	Y+20, r25	; 0x14
    39cc:	8b 8b       	std	Y+19, r24	; 0x13
    39ce:	3f c0       	rjmp	.+126    	; 0x3a4e <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    39d0:	6d 89       	ldd	r22, Y+21	; 0x15
    39d2:	7e 89       	ldd	r23, Y+22	; 0x16
    39d4:	8f 89       	ldd	r24, Y+23	; 0x17
    39d6:	98 8d       	ldd	r25, Y+24	; 0x18
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	3f ef       	ldi	r19, 0xFF	; 255
    39dc:	4f e7       	ldi	r20, 0x7F	; 127
    39de:	57 e4       	ldi	r21, 0x47	; 71
    39e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39e4:	18 16       	cp	r1, r24
    39e6:	4c f5       	brge	.+82     	; 0x3a3a <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e8:	69 8d       	ldd	r22, Y+25	; 0x19
    39ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e2       	ldi	r20, 0x20	; 32
    39f6:	51 e4       	ldi	r21, 0x41	; 65
    39f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	bc 01       	movw	r22, r24
    3a02:	cd 01       	movw	r24, r26
    3a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	9c 8b       	std	Y+20, r25	; 0x14
    3a0e:	8b 8b       	std	Y+19, r24	; 0x13
    3a10:	0f c0       	rjmp	.+30     	; 0x3a30 <LCD_vidInit+0x2c0>
    3a12:	88 ec       	ldi	r24, 0xC8	; 200
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	9a 8b       	std	Y+18, r25	; 0x12
    3a18:	89 8b       	std	Y+17, r24	; 0x11
    3a1a:	89 89       	ldd	r24, Y+17	; 0x11
    3a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <LCD_vidInit+0x2ae>
    3a22:	9a 8b       	std	Y+18, r25	; 0x12
    3a24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a26:	8b 89       	ldd	r24, Y+19	; 0x13
    3a28:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	9c 8b       	std	Y+20, r25	; 0x14
    3a2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a30:	8b 89       	ldd	r24, Y+19	; 0x13
    3a32:	9c 89       	ldd	r25, Y+20	; 0x14
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	69 f7       	brne	.-38     	; 0x3a12 <LCD_vidInit+0x2a2>
    3a38:	14 c0       	rjmp	.+40     	; 0x3a62 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a40:	98 8d       	ldd	r25, Y+24	; 0x18
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9c 8b       	std	Y+20, r25	; 0x14
    3a4c:	8b 8b       	std	Y+19, r24	; 0x13
    3a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a50:	9c 89       	ldd	r25, Y+20	; 0x14
    3a52:	98 8b       	std	Y+16, r25	; 0x10
    3a54:	8f 87       	std	Y+15, r24	; 0x0f
    3a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a58:	98 89       	ldd	r25, Y+16	; 0x10
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <LCD_vidInit+0x2ea>
    3a5e:	98 8b       	std	Y+16, r25	; 0x10
    3a60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000001);
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a0 e0       	ldi	r26, 0x00	; 0
    3a6e:	b0 e4       	ldi	r27, 0x40	; 64
    3a70:	8b 87       	std	Y+11, r24	; 0x0b
    3a72:	9c 87       	std	Y+12, r25	; 0x0c
    3a74:	ad 87       	std	Y+13, r26	; 0x0d
    3a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	4a ef       	ldi	r20, 0xFA	; 250
    3a86:	54 e4       	ldi	r21, 0x44	; 68
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	8f 83       	std	Y+7, r24	; 0x07
    3a92:	98 87       	std	Y+8, r25	; 0x08
    3a94:	a9 87       	std	Y+9, r26	; 0x09
    3a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a98:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9a:	78 85       	ldd	r23, Y+8	; 0x08
    3a9c:	89 85       	ldd	r24, Y+9	; 0x09
    3a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	2c f4       	brge	.+10     	; 0x3aba <LCD_vidInit+0x34a>
		__ticks = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	3f c0       	rjmp	.+126    	; 0x3b38 <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    3aba:	6f 81       	ldd	r22, Y+7	; 0x07
    3abc:	78 85       	ldd	r23, Y+8	; 0x08
    3abe:	89 85       	ldd	r24, Y+9	; 0x09
    3ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	3f ef       	ldi	r19, 0xFF	; 255
    3ac6:	4f e7       	ldi	r20, 0x7F	; 127
    3ac8:	57 e4       	ldi	r21, 0x47	; 71
    3aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ace:	18 16       	cp	r1, r24
    3ad0:	4c f5       	brge	.+82     	; 0x3b24 <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e2       	ldi	r20, 0x20	; 32
    3ae0:	51 e4       	ldi	r21, 0x41	; 65
    3ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	bc 01       	movw	r22, r24
    3aec:	cd 01       	movw	r24, r26
    3aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	9e 83       	std	Y+6, r25	; 0x06
    3af8:	8d 83       	std	Y+5, r24	; 0x05
    3afa:	0f c0       	rjmp	.+30     	; 0x3b1a <LCD_vidInit+0x3aa>
    3afc:	88 ec       	ldi	r24, 0xC8	; 200
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9c 83       	std	Y+4, r25	; 0x04
    3b02:	8b 83       	std	Y+3, r24	; 0x03
    3b04:	8b 81       	ldd	r24, Y+3	; 0x03
    3b06:	9c 81       	ldd	r25, Y+4	; 0x04
    3b08:	01 97       	sbiw	r24, 0x01	; 1
    3b0a:	f1 f7       	brne	.-4      	; 0x3b08 <LCD_vidInit+0x398>
    3b0c:	9c 83       	std	Y+4, r25	; 0x04
    3b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	69 f7       	brne	.-38     	; 0x3afc <LCD_vidInit+0x38c>
    3b22:	14 c0       	rjmp	.+40     	; 0x3b4c <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b24:	6f 81       	ldd	r22, Y+7	; 0x07
    3b26:	78 85       	ldd	r23, Y+8	; 0x08
    3b28:	89 85       	ldd	r24, Y+9	; 0x09
    3b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	9e 83       	std	Y+6, r25	; 0x06
    3b36:	8d 83       	std	Y+5, r24	; 0x05
    3b38:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b3c:	9a 83       	std	Y+2, r25	; 0x02
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	9a 81       	ldd	r25, Y+2	; 0x02
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <LCD_vidInit+0x3d4>
    3b48:	9a 83       	std	Y+2, r25	; 0x02
    3b4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000110);
    3b4c:	86 e0       	ldi	r24, 0x06	; 6
    3b4e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
}
    3b52:	e8 96       	adiw	r28, 0x38	; 56
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <LCD_vidDisplayString>:

void LCD_vidDisplayString(uint8_t * string)
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	00 d0       	rcall	.+0      	; 0x3b6a <LCD_vidDisplayString+0x6>
    3b6a:	0f 92       	push	r0
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	9b 83       	std	Y+3, r25	; 0x03
    3b72:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; string[i]!='\0'; i++)
    3b74:	19 82       	std	Y+1, r1	; 0x01
    3b76:	1a c0       	rjmp	.+52     	; 0x3bac <LCD_vidDisplayString+0x48>
	{
		if(next_char_position==16)LCD_vidWriteCmd(0b11000000);
    3b78:	80 91 4c 04 	lds	r24, 0x044C
    3b7c:	80 31       	cpi	r24, 0x10	; 16
    3b7e:	19 f4       	brne	.+6      	; 0x3b86 <LCD_vidDisplayString+0x22>
    3b80:	80 ec       	ldi	r24, 0xC0	; 192
    3b82:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
		LCD_vidWriteData(string[i]);
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	28 2f       	mov	r18, r24
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b90:	fc 01       	movw	r30, r24
    3b92:	e2 0f       	add	r30, r18
    3b94:	f3 1f       	adc	r31, r19
    3b96:	80 81       	ld	r24, Z
    3b98:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <LCD_vidWriteData>
		next_char_position++;
    3b9c:	80 91 4c 04 	lds	r24, 0x044C
    3ba0:	8f 5f       	subi	r24, 0xFF	; 255
    3ba2:	80 93 4c 04 	sts	0x044C, r24
	LCD_vidWriteCmd(0b00000110);
}

void LCD_vidDisplayString(uint8_t * string)
{
	for(uint8_t i=0; string[i]!='\0'; i++)
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	8f 5f       	subi	r24, 0xFF	; 255
    3baa:	89 83       	std	Y+1, r24	; 0x01
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	28 2f       	mov	r18, r24
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	e2 0f       	add	r30, r18
    3bba:	f3 1f       	adc	r31, r19
    3bbc:	80 81       	ld	r24, Z
    3bbe:	88 23       	and	r24, r24
    3bc0:	d9 f6       	brne	.-74     	; 0x3b78 <LCD_vidDisplayString+0x14>
	{
		if(next_char_position==16)LCD_vidWriteCmd(0b11000000);
		LCD_vidWriteData(string[i]);
		next_char_position++;
	}
}
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <LCD_vidNewLine>:
void LCD_vidNewLine()
{
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b11000000);
    3bd6:	80 ec       	ldi	r24, 0xC0	; 192
    3bd8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
}
    3bdc:	cf 91       	pop	r28
    3bde:	df 91       	pop	r29
    3be0:	08 95       	ret

00003be2 <LCD_vidDisplayStringLeftShift>:
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	cd b7       	in	r28, 0x3d	; 61
    3be8:	de b7       	in	r29, 0x3e	; 62
    3bea:	62 97       	sbiw	r28, 0x12	; 18
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	9a 8b       	std	Y+18, r25	; 0x12
    3bf8:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3bfa:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3bfc:	18 8a       	std	Y+16, r1	; 0x10
    3bfe:	0e c0       	rjmp	.+28     	; 0x3c1c <LCD_vidDisplayStringLeftShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3c00:	88 89       	ldd	r24, Y+16	; 0x10
    3c02:	28 2f       	mov	r18, r24
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	89 89       	ldd	r24, Y+17	; 0x11
    3c08:	9a 89       	ldd	r25, Y+18	; 0x12
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e2 0f       	add	r30, r18
    3c0e:	f3 1f       	adc	r31, r19
    3c10:	80 81       	ld	r24, Z
    3c12:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <LCD_vidWriteData>
	LCD_vidWriteCmd(0b11000000);
}
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3c16:	88 89       	ldd	r24, Y+16	; 0x10
    3c18:	8f 5f       	subi	r24, 0xFF	; 255
    3c1a:	88 8b       	std	Y+16, r24	; 0x10
    3c1c:	88 89       	ldd	r24, Y+16	; 0x10
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	89 89       	ldd	r24, Y+17	; 0x11
    3c24:	9a 89       	ldd	r25, Y+18	; 0x12
    3c26:	fc 01       	movw	r30, r24
    3c28:	e2 0f       	add	r30, r18
    3c2a:	f3 1f       	adc	r31, r19
    3c2c:	80 81       	ld	r24, Z
    3c2e:	88 23       	and	r24, r24
    3c30:	39 f7       	brne	.-50     	; 0x3c00 <LCD_vidDisplayStringLeftShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c34:	98 89       	ldd	r25, Y+16	; 0x10
    3c36:	69 2f       	mov	r22, r25
    3c38:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__udivmodqi4>
    3c3c:	89 2f       	mov	r24, r25
    3c3e:	80 31       	cpi	r24, 0x10	; 16
    3c40:	19 f4       	brne	.+6      	; 0x3c48 <LCD_vidDisplayStringLeftShift+0x66>
    3c42:	80 e8       	ldi	r24, 0x80	; 128
    3c44:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011000);
    3c48:	88 e1       	ldi	r24, 0x18	; 24
    3c4a:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	aa ef       	ldi	r26, 0xFA	; 250
    3c54:	b3 e4       	ldi	r27, 0x43	; 67
    3c56:	8b 87       	std	Y+11, r24	; 0x0b
    3c58:	9c 87       	std	Y+12, r25	; 0x0c
    3c5a:	ad 87       	std	Y+13, r26	; 0x0d
    3c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	4a ef       	ldi	r20, 0xFA	; 250
    3c6c:	54 e4       	ldi	r21, 0x44	; 68
    3c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	8f 83       	std	Y+7, r24	; 0x07
    3c78:	98 87       	std	Y+8, r25	; 0x08
    3c7a:	a9 87       	std	Y+9, r26	; 0x09
    3c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c80:	78 85       	ldd	r23, Y+8	; 0x08
    3c82:	89 85       	ldd	r24, Y+9	; 0x09
    3c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e8       	ldi	r20, 0x80	; 128
    3c8c:	5f e3       	ldi	r21, 0x3F	; 63
    3c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c92:	88 23       	and	r24, r24
    3c94:	2c f4       	brge	.+10     	; 0x3ca0 <LCD_vidDisplayStringLeftShift+0xbe>
		__ticks = 1;
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	9e 83       	std	Y+6, r25	; 0x06
    3c9c:	8d 83       	std	Y+5, r24	; 0x05
    3c9e:	3f c0       	rjmp	.+126    	; 0x3d1e <LCD_vidDisplayStringLeftShift+0x13c>
	else if (__tmp > 65535)
    3ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca2:	78 85       	ldd	r23, Y+8	; 0x08
    3ca4:	89 85       	ldd	r24, Y+9	; 0x09
    3ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	3f ef       	ldi	r19, 0xFF	; 255
    3cac:	4f e7       	ldi	r20, 0x7F	; 127
    3cae:	57 e4       	ldi	r21, 0x47	; 71
    3cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cb4:	18 16       	cp	r1, r24
    3cb6:	4c f5       	brge	.+82     	; 0x3d0a <LCD_vidDisplayStringLeftShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e2       	ldi	r20, 0x20	; 32
    3cc6:	51 e4       	ldi	r21, 0x41	; 65
    3cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	9e 83       	std	Y+6, r25	; 0x06
    3cde:	8d 83       	std	Y+5, r24	; 0x05
    3ce0:	0f c0       	rjmp	.+30     	; 0x3d00 <LCD_vidDisplayStringLeftShift+0x11e>
    3ce2:	88 ec       	ldi	r24, 0xC8	; 200
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	9c 83       	std	Y+4, r25	; 0x04
    3ce8:	8b 83       	std	Y+3, r24	; 0x03
    3cea:	8b 81       	ldd	r24, Y+3	; 0x03
    3cec:	9c 81       	ldd	r25, Y+4	; 0x04
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	f1 f7       	brne	.-4      	; 0x3cee <LCD_vidDisplayStringLeftShift+0x10c>
    3cf2:	9c 83       	std	Y+4, r25	; 0x04
    3cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	9e 83       	std	Y+6, r25	; 0x06
    3cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d00:	8d 81       	ldd	r24, Y+5	; 0x05
    3d02:	9e 81       	ldd	r25, Y+6	; 0x06
    3d04:	00 97       	sbiw	r24, 0x00	; 0
    3d06:	69 f7       	brne	.-38     	; 0x3ce2 <LCD_vidDisplayStringLeftShift+0x100>
    3d08:	14 c0       	rjmp	.+40     	; 0x3d32 <LCD_vidDisplayStringLeftShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0c:	78 85       	ldd	r23, Y+8	; 0x08
    3d0e:	89 85       	ldd	r24, Y+9	; 0x09
    3d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	9e 83       	std	Y+6, r25	; 0x06
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	9e 81       	ldd	r25, Y+6	; 0x06
    3d22:	9a 83       	std	Y+2, r25	; 0x02
    3d24:	89 83       	std	Y+1, r24	; 0x01
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
    3d2c:	f1 f7       	brne	.-4      	; 0x3d2a <LCD_vidDisplayStringLeftShift+0x148>
    3d2e:	9a 83       	std	Y+2, r25	; 0x02
    3d30:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d34:	8f 5f       	subi	r24, 0xFF	; 255
    3d36:	8f 87       	std	Y+15, r24	; 0x0f
    3d38:	7c cf       	rjmp	.-264    	; 0x3c32 <LCD_vidDisplayStringLeftShift+0x50>

00003d3a <LCD_vidDisplayStringRightShift>:
	}
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	62 97       	sbiw	r28, 0x12	; 18
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
    3d4e:	9a 8b       	std	Y+18, r25	; 0x12
    3d50:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3d52:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3d54:	18 8a       	std	Y+16, r1	; 0x10
    3d56:	0e c0       	rjmp	.+28     	; 0x3d74 <LCD_vidDisplayStringRightShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3d58:	88 89       	ldd	r24, Y+16	; 0x10
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	89 89       	ldd	r24, Y+17	; 0x11
    3d60:	9a 89       	ldd	r25, Y+18	; 0x12
    3d62:	fc 01       	movw	r30, r24
    3d64:	e2 0f       	add	r30, r18
    3d66:	f3 1f       	adc	r31, r19
    3d68:	80 81       	ld	r24, Z
    3d6a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <LCD_vidWriteData>
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3d6e:	88 89       	ldd	r24, Y+16	; 0x10
    3d70:	8f 5f       	subi	r24, 0xFF	; 255
    3d72:	88 8b       	std	Y+16, r24	; 0x10
    3d74:	88 89       	ldd	r24, Y+16	; 0x10
    3d76:	28 2f       	mov	r18, r24
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	89 89       	ldd	r24, Y+17	; 0x11
    3d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d7e:	fc 01       	movw	r30, r24
    3d80:	e2 0f       	add	r30, r18
    3d82:	f3 1f       	adc	r31, r19
    3d84:	80 81       	ld	r24, Z
    3d86:	88 23       	and	r24, r24
    3d88:	39 f7       	brne	.-50     	; 0x3d58 <LCD_vidDisplayStringRightShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d8c:	98 89       	ldd	r25, Y+16	; 0x10
    3d8e:	69 2f       	mov	r22, r25
    3d90:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__udivmodqi4>
    3d94:	89 2f       	mov	r24, r25
    3d96:	80 31       	cpi	r24, 0x10	; 16
    3d98:	19 f4       	brne	.+6      	; 0x3da0 <LCD_vidDisplayStringRightShift+0x66>
    3d9a:	80 e8       	ldi	r24, 0x80	; 128
    3d9c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011100);
    3da0:	8c e1       	ldi	r24, 0x1C	; 28
    3da2:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	aa ef       	ldi	r26, 0xFA	; 250
    3dac:	b3 e4       	ldi	r27, 0x43	; 67
    3dae:	8b 87       	std	Y+11, r24	; 0x0b
    3db0:	9c 87       	std	Y+12, r25	; 0x0c
    3db2:	ad 87       	std	Y+13, r26	; 0x0d
    3db4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	4a ef       	ldi	r20, 0xFA	; 250
    3dc4:	54 e4       	ldi	r21, 0x44	; 68
    3dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	8f 83       	std	Y+7, r24	; 0x07
    3dd0:	98 87       	std	Y+8, r25	; 0x08
    3dd2:	a9 87       	std	Y+9, r26	; 0x09
    3dd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd8:	78 85       	ldd	r23, Y+8	; 0x08
    3dda:	89 85       	ldd	r24, Y+9	; 0x09
    3ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	40 e8       	ldi	r20, 0x80	; 128
    3de4:	5f e3       	ldi	r21, 0x3F	; 63
    3de6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dea:	88 23       	and	r24, r24
    3dec:	2c f4       	brge	.+10     	; 0x3df8 <LCD_vidDisplayStringRightShift+0xbe>
		__ticks = 1;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	9e 83       	std	Y+6, r25	; 0x06
    3df4:	8d 83       	std	Y+5, r24	; 0x05
    3df6:	3f c0       	rjmp	.+126    	; 0x3e76 <LCD_vidDisplayStringRightShift+0x13c>
	else if (__tmp > 65535)
    3df8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dfa:	78 85       	ldd	r23, Y+8	; 0x08
    3dfc:	89 85       	ldd	r24, Y+9	; 0x09
    3dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	3f ef       	ldi	r19, 0xFF	; 255
    3e04:	4f e7       	ldi	r20, 0x7F	; 127
    3e06:	57 e4       	ldi	r21, 0x47	; 71
    3e08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e0c:	18 16       	cp	r1, r24
    3e0e:	4c f5       	brge	.+82     	; 0x3e62 <LCD_vidDisplayStringRightShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e2       	ldi	r20, 0x20	; 32
    3e1e:	51 e4       	ldi	r21, 0x41	; 65
    3e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	bc 01       	movw	r22, r24
    3e2a:	cd 01       	movw	r24, r26
    3e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	9e 83       	std	Y+6, r25	; 0x06
    3e36:	8d 83       	std	Y+5, r24	; 0x05
    3e38:	0f c0       	rjmp	.+30     	; 0x3e58 <LCD_vidDisplayStringRightShift+0x11e>
    3e3a:	88 ec       	ldi	r24, 0xC8	; 200
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	9c 83       	std	Y+4, r25	; 0x04
    3e40:	8b 83       	std	Y+3, r24	; 0x03
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	9c 81       	ldd	r25, Y+4	; 0x04
    3e46:	01 97       	sbiw	r24, 0x01	; 1
    3e48:	f1 f7       	brne	.-4      	; 0x3e46 <LCD_vidDisplayStringRightShift+0x10c>
    3e4a:	9c 83       	std	Y+4, r25	; 0x04
    3e4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e50:	9e 81       	ldd	r25, Y+6	; 0x06
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	9e 83       	std	Y+6, r25	; 0x06
    3e56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e58:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e5c:	00 97       	sbiw	r24, 0x00	; 0
    3e5e:	69 f7       	brne	.-38     	; 0x3e3a <LCD_vidDisplayStringRightShift+0x100>
    3e60:	14 c0       	rjmp	.+40     	; 0x3e8a <LCD_vidDisplayStringRightShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e62:	6f 81       	ldd	r22, Y+7	; 0x07
    3e64:	78 85       	ldd	r23, Y+8	; 0x08
    3e66:	89 85       	ldd	r24, Y+9	; 0x09
    3e68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	9e 83       	std	Y+6, r25	; 0x06
    3e74:	8d 83       	std	Y+5, r24	; 0x05
    3e76:	8d 81       	ldd	r24, Y+5	; 0x05
    3e78:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7a:	9a 83       	std	Y+2, r25	; 0x02
    3e7c:	89 83       	std	Y+1, r24	; 0x01
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	9a 81       	ldd	r25, Y+2	; 0x02
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	f1 f7       	brne	.-4      	; 0x3e82 <LCD_vidDisplayStringRightShift+0x148>
    3e86:	9a 83       	std	Y+2, r25	; 0x02
    3e88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e8c:	8f 5f       	subi	r24, 0xFF	; 255
    3e8e:	8f 87       	std	Y+15, r24	; 0x0f
    3e90:	7c cf       	rjmp	.-264    	; 0x3d8a <LCD_vidDisplayStringRightShift+0x50>

00003e92 <LCD_vidClearDisplay>:
	}
}

void LCD_vidClearDisplay()
{
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b00000001);
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
	next_char_position = 0;
    3ea0:	10 92 4c 04 	sts	0x044C, r1
}
    3ea4:	cf 91       	pop	r28
    3ea6:	df 91       	pop	r29
    3ea8:	08 95       	ret

00003eaa <LCD_vidGoTo>:

void LCD_vidGoTo(uint8_t x,uint8_t y)
{
    3eaa:	df 93       	push	r29
    3eac:	cf 93       	push	r28
    3eae:	00 d0       	rcall	.+0      	; 0x3eb0 <LCD_vidGoTo+0x6>
    3eb0:	cd b7       	in	r28, 0x3d	; 61
    3eb2:	de b7       	in	r29, 0x3e	; 62
    3eb4:	89 83       	std	Y+1, r24	; 0x01
    3eb6:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1&&y<=39)LCD_vidWriteCmd((0b10000000+y));
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	81 30       	cpi	r24, 0x01	; 1
    3ebc:	41 f4       	brne	.+16     	; 0x3ece <LCD_vidGoTo+0x24>
    3ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec0:	88 32       	cpi	r24, 0x28	; 40
    3ec2:	28 f4       	brcc	.+10     	; 0x3ece <LCD_vidGoTo+0x24>
    3ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec6:	80 58       	subi	r24, 0x80	; 128
    3ec8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <LCD_vidGoTo+0x42>
	else if(x==2&&(y+64)<103) LCD_vidWriteCmd((0b11000000+y));
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	82 30       	cpi	r24, 0x02	; 2
    3ed2:	61 f4       	brne	.+24     	; 0x3eec <LCD_vidGoTo+0x42>
    3ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed6:	88 2f       	mov	r24, r24
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	80 5c       	subi	r24, 0xC0	; 192
    3edc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ede:	87 36       	cpi	r24, 0x67	; 103
    3ee0:	91 05       	cpc	r25, r1
    3ee2:	24 f4       	brge	.+8      	; 0x3eec <LCD_vidGoTo+0x42>
    3ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee6:	80 54       	subi	r24, 0x40	; 64
    3ee8:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
}
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	cf 91       	pop	r28
    3ef2:	df 91       	pop	r29
    3ef4:	08 95       	ret

00003ef6 <LCD_vidSetCursor>:

void LCD_vidSetCursor(uint8_t x,uint8_t y)
{
    3ef6:	df 93       	push	r29
    3ef8:	cf 93       	push	r28
    3efa:	00 d0       	rcall	.+0      	; 0x3efc <LCD_vidSetCursor+0x6>
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	89 83       	std	Y+1, r24	; 0x01
    3f02:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vidGoTo(x,y);
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	6a 81       	ldd	r22, Y+2	; 0x02
    3f08:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <LCD_vidGoTo>
	LCD_vidWriteCmd(0b00001111);
    3f0c:	8f e0       	ldi	r24, 0x0F	; 15
    3f0e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
}
    3f12:	0f 90       	pop	r0
    3f14:	0f 90       	pop	r0
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	08 95       	ret

00003f1c <LCD_vidWriteInteger>:

void LCD_vidWriteInteger(uint16_ number)
{
    3f1c:	df 93       	push	r29
    3f1e:	cf 93       	push	r28
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	28 97       	sbiw	r28, 0x08	; 8
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	98 87       	std	Y+8, r25	; 0x08
    3f32:	8f 83       	std	Y+7, r24	; 0x07
	uint16_ num_mask=number,p=1;
    3f34:	8f 81       	ldd	r24, Y+7	; 0x07
    3f36:	98 85       	ldd	r25, Y+8	; 0x08
    3f38:	9e 83       	std	Y+6, r25	; 0x06
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	9c 83       	std	Y+4, r25	; 0x04
    3f42:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i=0;
    3f44:	1a 82       	std	Y+2, r1	; 0x02
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
    3f46:	8d 81       	ldd	r24, Y+5	; 0x05
    3f48:	9e 81       	ldd	r25, Y+6	; 0x06
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	f9 f4       	brne	.+62     	; 0x3f8c <LCD_vidWriteInteger+0x70>
    3f4e:	80 e3       	ldi	r24, 0x30	; 48
    3f50:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <LCD_vidWriteData>
    3f54:	1b c0       	rjmp	.+54     	; 0x3f8c <LCD_vidWriteInteger+0x70>
	for(;num_mask!=0;i++)
	{
		num_mask/=10;
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	2a e0       	ldi	r18, 0x0A	; 10
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	b9 01       	movw	r22, r18
    3f60:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__udivmodhi4>
    3f64:	cb 01       	movw	r24, r22
    3f66:	9e 83       	std	Y+6, r25	; 0x06
    3f68:	8d 83       	std	Y+5, r24	; 0x05
		p*=10;
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	9c 01       	movw	r18, r24
    3f70:	22 0f       	add	r18, r18
    3f72:	33 1f       	adc	r19, r19
    3f74:	c9 01       	movw	r24, r18
    3f76:	88 0f       	add	r24, r24
    3f78:	99 1f       	adc	r25, r25
    3f7a:	88 0f       	add	r24, r24
    3f7c:	99 1f       	adc	r25, r25
    3f7e:	82 0f       	add	r24, r18
    3f80:	93 1f       	adc	r25, r19
    3f82:	9c 83       	std	Y+4, r25	; 0x04
    3f84:	8b 83       	std	Y+3, r24	; 0x03
{
	uint16_ num_mask=number,p=1;
	uint8_t i=0;
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
	for(;num_mask!=0;i++)
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	8f 5f       	subi	r24, 0xFF	; 255
    3f8a:	8a 83       	std	Y+2, r24	; 0x02
    3f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f90:	00 97       	sbiw	r24, 0x00	; 0
    3f92:	09 f7       	brne	.-62     	; 0x3f56 <LCD_vidWriteInteger+0x3a>
	{
		num_mask/=10;
		p*=10;
	}

	p/=10;
    3f94:	8b 81       	ldd	r24, Y+3	; 0x03
    3f96:	9c 81       	ldd	r25, Y+4	; 0x04
    3f98:	2a e0       	ldi	r18, 0x0A	; 10
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	b9 01       	movw	r22, r18
    3f9e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__udivmodhi4>
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9c 83       	std	Y+4, r25	; 0x04
    3fa6:	8b 83       	std	Y+3, r24	; 0x03
	nxtl = i - 16;
    3fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3faa:	80 51       	subi	r24, 0x10	; 16
    3fac:	89 83       	std	Y+1, r24	; 0x01
	if(nxtl < 0) nxtl =0;
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
    3fb0:	88 23       	and	r24, r24
    3fb2:	0c f0       	brlt	.+2      	; 0x3fb6 <LCD_vidWriteInteger+0x9a>
    3fb4:	3e c0       	rjmp	.+124    	; 0x4032 <LCD_vidWriteInteger+0x116>
    3fb6:	19 82       	std	Y+1, r1	; 0x01
    3fb8:	3c c0       	rjmp	.+120    	; 0x4032 <LCD_vidWriteInteger+0x116>
	for(;i>0;i--)
	{
		if(i==nxtl)LCD_vidWriteCmd(0b11000000);
    3fba:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	99 27       	eor	r25, r25
    3fc4:	87 fd       	sbrc	r24, 7
    3fc6:	90 95       	com	r25
    3fc8:	28 17       	cp	r18, r24
    3fca:	39 07       	cpc	r19, r25
    3fcc:	19 f4       	brne	.+6      	; 0x3fd4 <LCD_vidWriteInteger+0xb8>
    3fce:	80 ec       	ldi	r24, 0xC0	; 192
    3fd0:	0e 94 1a 1b 	call	0x3634	; 0x3634 <LCD_vidWriteCmd>
		num_mask= (uint8_t)(number/p);
    3fd4:	8f 81       	ldd	r24, Y+7	; 0x07
    3fd6:	98 85       	ldd	r25, Y+8	; 0x08
    3fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    3fda:	3c 81       	ldd	r19, Y+4	; 0x04
    3fdc:	b9 01       	movw	r22, r18
    3fde:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__udivmodhi4>
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	88 2f       	mov	r24, r24
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	9e 83       	std	Y+6, r25	; 0x06
    3fea:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData((uint8_t)'0'+num_mask);
    3fec:	8d 81       	ldd	r24, Y+5	; 0x05
    3fee:	80 5d       	subi	r24, 0xD0	; 208
    3ff0:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <LCD_vidWriteData>
		number -= num_mask*p;
    3ff4:	2d 81       	ldd	r18, Y+5	; 0x05
    3ff6:	3e 81       	ldd	r19, Y+6	; 0x06
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffc:	a9 01       	movw	r20, r18
    3ffe:	48 9f       	mul	r20, r24
    4000:	90 01       	movw	r18, r0
    4002:	49 9f       	mul	r20, r25
    4004:	30 0d       	add	r19, r0
    4006:	58 9f       	mul	r21, r24
    4008:	30 0d       	add	r19, r0
    400a:	11 24       	eor	r1, r1
    400c:	8f 81       	ldd	r24, Y+7	; 0x07
    400e:	98 85       	ldd	r25, Y+8	; 0x08
    4010:	82 1b       	sub	r24, r18
    4012:	93 0b       	sbc	r25, r19
    4014:	98 87       	std	Y+8, r25	; 0x08
    4016:	8f 83       	std	Y+7, r24	; 0x07
		p/=10;
    4018:	8b 81       	ldd	r24, Y+3	; 0x03
    401a:	9c 81       	ldd	r25, Y+4	; 0x04
    401c:	2a e0       	ldi	r18, 0x0A	; 10
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	b9 01       	movw	r22, r18
    4022:	0e 94 7d 23 	call	0x46fa	; 0x46fa <__udivmodhi4>
    4026:	cb 01       	movw	r24, r22
    4028:	9c 83       	std	Y+4, r25	; 0x04
    402a:	8b 83       	std	Y+3, r24	; 0x03
	}

	p/=10;
	nxtl = i - 16;
	if(nxtl < 0) nxtl =0;
	for(;i>0;i--)
    402c:	8a 81       	ldd	r24, Y+2	; 0x02
    402e:	81 50       	subi	r24, 0x01	; 1
    4030:	8a 83       	std	Y+2, r24	; 0x02
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	88 23       	and	r24, r24
    4036:	09 f6       	brne	.-126    	; 0x3fba <LCD_vidWriteInteger+0x9e>
		num_mask= (uint8_t)(number/p);
		LCD_vidWriteData((uint8_t)'0'+num_mask);
		number -= num_mask*p;
		p/=10;
	}
}
    4038:	28 96       	adiw	r28, 0x08	; 8
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	f8 94       	cli
    403e:	de bf       	out	0x3e, r29	; 62
    4040:	0f be       	out	0x3f, r0	; 63
    4042:	cd bf       	out	0x3d, r28	; 61
    4044:	cf 91       	pop	r28
    4046:	df 91       	pop	r29
    4048:	08 95       	ret

0000404a <FLEX_vidFlexInit>:
#include"../../mcal/adc_driver/adc_int.h"
#include"flex_sensor_int.h"


void FLEX_vidFlexInit(uint8_t sensor_pin)
{
    404a:	df 93       	push	r29
    404c:	cf 93       	push	r28
    404e:	0f 92       	push	r0
    4050:	cd b7       	in	r28, 0x3d	; 61
    4052:	de b7       	in	r29, 0x3e	; 62
    4054:	89 83       	std	Y+1, r24	; 0x01

	ADC_vidAdcInit(AREF_VOLTAGE);
    4056:	82 e0       	ldi	r24, 0x02	; 2
    4058:	0e 94 64 10 	call	0x20c8	; 0x20c8 <ADC_vidAdcInit>
	ADC_vidAdcPinInit(sensor_pin);
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <ADC_vidAdcPinInit>

}
    4062:	0f 90       	pop	r0
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	08 95       	ret

0000406a <FLEX_vidGetFlexRead>:

void FLEX_vidGetFlexRead(uint16_* sensor_read, uint8_t sensor_pin)
{
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	00 d0       	rcall	.+0      	; 0x4070 <FLEX_vidGetFlexRead+0x6>
    4070:	0f 92       	push	r0
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	9a 83       	std	Y+2, r25	; 0x02
    4078:	89 83       	std	Y+1, r24	; 0x01
    407a:	6b 83       	std	Y+3, r22	; 0x03
	ADC_vidSetReadingVariable(sensor_read);
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	9a 81       	ldd	r25, Y+2	; 0x02
    4080:	0e 94 6d 11 	call	0x22da	; 0x22da <ADC_vidSetReadingVariable>
	ADC_vidAdcGetRead(sensor_pin);
    4084:	8b 81       	ldd	r24, Y+3	; 0x03
    4086:	0e 94 2d 11 	call	0x225a	; 0x225a <ADC_vidAdcGetRead>
}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <FLEX_vidSetCallBack>:

void FLEX_vidSetCallBack(void (*func)(void))
{
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <FLEX_vidSetCallBack+0x6>
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
    40a0:	9a 83       	std	Y+2, r25	; 0x02
    40a2:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetCallBack(func);
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	9a 81       	ldd	r25, Y+2	; 0x02
    40a8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <ADC_vidSetCallBack>
}
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	08 95       	ret

000040b6 <M16P_vidInit>:

static uint8_t send_buf[SERIAL_BUFF_SIZE] = {0x7E, 0xFF, 06, 00, 00, 00, 00, 00, 00, 0xEF};
static uint8_t recv_buf[SERIAL_BUFF_SIZE];
static uint8_t is_reply = 0;

void M16P_vidInit(uint16_ baud) {
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	00 d0       	rcall	.+0      	; 0x40bc <M16P_vidInit+0x6>
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	9a 83       	std	Y+2, r25	; 0x02
    40c2:	89 83       	std	Y+1, r24	; 0x01
    is_reply = 0;
    40c4:	10 92 4d 04 	sts	0x044D, r1
    UART_Init(baud);
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	9a 81       	ldd	r25, Y+2	; 0x02
    40cc:	0e 94 3b 13 	call	0x2676	; 0x2676 <UART_Init>
}
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	cf 91       	pop	r28
    40d6:	df 91       	pop	r29
    40d8:	08 95       	ret

000040da <M16P_vidSetReply>:

void M16P_vidSetReply(uint8_t state) {
    40da:	df 93       	push	r29
    40dc:	cf 93       	push	r28
    40de:	0f 92       	push	r0
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	89 83       	std	Y+1, r24	; 0x01
    is_reply = state;
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	80 93 4d 04 	sts	0x044D, r24
    send_buf[4] = is_reply;
    40ec:	80 91 4d 04 	lds	r24, 0x044D
    40f0:	80 93 2d 04 	sts	0x042D, r24
}
    40f4:	0f 90       	pop	r0
    40f6:	cf 91       	pop	r28
    40f8:	df 91       	pop	r29
    40fa:	08 95       	ret

000040fc <M16P_vidFillBufUint16>:

static void M16P_vidFillBufUint16(uint8_t *thebuf, uint16_ data) {
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	00 d0       	rcall	.+0      	; 0x4102 <M16P_vidFillBufUint16+0x6>
    4102:	00 d0       	rcall	.+0      	; 0x4104 <M16P_vidFillBufUint16+0x8>
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    4108:	9a 83       	std	Y+2, r25	; 0x02
    410a:	89 83       	std	Y+1, r24	; 0x01
    410c:	7c 83       	std	Y+4, r23	; 0x04
    410e:	6b 83       	std	Y+3, r22	; 0x03
    *thebuf = (uint8_t)(data >> 8);
    4110:	8b 81       	ldd	r24, Y+3	; 0x03
    4112:	9c 81       	ldd	r25, Y+4	; 0x04
    4114:	89 2f       	mov	r24, r25
    4116:	99 27       	eor	r25, r25
    4118:	e9 81       	ldd	r30, Y+1	; 0x01
    411a:	fa 81       	ldd	r31, Y+2	; 0x02
    411c:	80 83       	st	Z, r24
    *(thebuf + 1) = (uint8_t)data;
    411e:	89 81       	ldd	r24, Y+1	; 0x01
    4120:	9a 81       	ldd	r25, Y+2	; 0x02
    4122:	fc 01       	movw	r30, r24
    4124:	31 96       	adiw	r30, 0x01	; 1
    4126:	8b 81       	ldd	r24, Y+3	; 0x03
    4128:	80 83       	st	Z, r24
}
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	cf 91       	pop	r28
    4134:	df 91       	pop	r29
    4136:	08 95       	ret

00004138 <M16P_Uu16GetCheckSum>:

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    4138:	df 93       	push	r29
    413a:	cf 93       	push	r28
    413c:	00 d0       	rcall	.+0      	; 0x413e <M16P_Uu16GetCheckSum+0x6>
    413e:	00 d0       	rcall	.+0      	; 0x4140 <M16P_Uu16GetCheckSum+0x8>
    4140:	00 d0       	rcall	.+0      	; 0x4142 <M16P_Uu16GetCheckSum+0xa>
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	9e 83       	std	Y+6, r25	; 0x06
    4148:	8d 83       	std	Y+5, r24	; 0x05
    uint16_ sum = 0;
    414a:	1c 82       	std	Y+4, r1	; 0x04
    414c:	1b 82       	std	Y+3, r1	; 0x03
    for (int i = 1; i < 7; i++) {
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	9a 83       	std	Y+2, r25	; 0x02
    4154:	89 83       	std	Y+1, r24	; 0x01
    4156:	15 c0       	rjmp	.+42     	; 0x4182 <M16P_Uu16GetCheckSum+0x4a>
        sum += thebuf[i];
    4158:	29 81       	ldd	r18, Y+1	; 0x01
    415a:	3a 81       	ldd	r19, Y+2	; 0x02
    415c:	8d 81       	ldd	r24, Y+5	; 0x05
    415e:	9e 81       	ldd	r25, Y+6	; 0x06
    4160:	fc 01       	movw	r30, r24
    4162:	e2 0f       	add	r30, r18
    4164:	f3 1f       	adc	r31, r19
    4166:	80 81       	ld	r24, Z
    4168:	28 2f       	mov	r18, r24
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	82 0f       	add	r24, r18
    4172:	93 1f       	adc	r25, r19
    4174:	9c 83       	std	Y+4, r25	; 0x04
    4176:	8b 83       	std	Y+3, r24	; 0x03
    *(thebuf + 1) = (uint8_t)data;
}

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    uint16_ sum = 0;
    for (int i = 1; i < 7; i++) {
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	9a 81       	ldd	r25, Y+2	; 0x02
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	9a 83       	std	Y+2, r25	; 0x02
    4180:	89 83       	std	Y+1, r24	; 0x01
    4182:	89 81       	ldd	r24, Y+1	; 0x01
    4184:	9a 81       	ldd	r25, Y+2	; 0x02
    4186:	87 30       	cpi	r24, 0x07	; 7
    4188:	91 05       	cpc	r25, r1
    418a:	34 f3       	brlt	.-52     	; 0x4158 <M16P_Uu16GetCheckSum+0x20>
        sum += thebuf[i];
    }
    return -sum;
    418c:	8b 81       	ldd	r24, Y+3	; 0x03
    418e:	9c 81       	ldd	r25, Y+4	; 0x04
    4190:	90 95       	com	r25
    4192:	81 95       	neg	r24
    4194:	9f 4f       	sbci	r25, 0xFF	; 255
}
    4196:	26 96       	adiw	r28, 0x06	; 6
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	de bf       	out	0x3e, r29	; 62
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <M16P_vidFillCheckSum>:

static void M16P_vidFillCheckSum() {
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <M16P_vidFillCheckSum+0x6>
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    41b2:	89 e2       	ldi	r24, 0x29	; 41
    41b4:	94 e0       	ldi	r25, 0x04	; 4
    41b6:	0e 94 9c 20 	call	0x4138	; 0x4138 <M16P_Uu16GetCheckSum>
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidFillBufUint16(send_buf + 7, checksum);
    41be:	80 e3       	ldi	r24, 0x30	; 48
    41c0:	94 e0       	ldi	r25, 0x04	; 4
    41c2:	29 81       	ldd	r18, Y+1	; 0x01
    41c4:	3a 81       	ldd	r19, Y+2	; 0x02
    41c6:	b9 01       	movw	r22, r18
    41c8:	0e 94 7e 20 	call	0x40fc	; 0x40fc <M16P_vidFillBufUint16>
}
    41cc:	0f 90       	pop	r0
    41ce:	0f 90       	pop	r0
    41d0:	cf 91       	pop	r28
    41d2:	df 91       	pop	r29
    41d4:	08 95       	ret

000041d6 <M16P_vidSendFunc>:

static void M16P_vidSendFunc() {
    41d6:	df 93       	push	r29
    41d8:	cf 93       	push	r28
    41da:	00 d0       	rcall	.+0      	; 0x41dc <M16P_vidSendFunc+0x6>
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    41e0:	1a 82       	std	Y+2, r1	; 0x02
    41e2:	19 82       	std	Y+1, r1	; 0x01
    41e4:	0d c0       	rjmp	.+26     	; 0x4200 <M16P_vidSendFunc+0x2a>
        UART_Transmit(send_buf[i]);
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ea:	fc 01       	movw	r30, r24
    41ec:	e7 5d       	subi	r30, 0xD7	; 215
    41ee:	fb 4f       	sbci	r31, 0xFB	; 251
    41f0:	80 81       	ld	r24, Z
    41f2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <UART_Transmit>
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    M16P_vidFillBufUint16(send_buf + 7, checksum);
}

static void M16P_vidSendFunc() {
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	9a 81       	ldd	r25, Y+2	; 0x02
    41fa:	01 96       	adiw	r24, 0x01	; 1
    41fc:	9a 83       	std	Y+2, r25	; 0x02
    41fe:	89 83       	std	Y+1, r24	; 0x01
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	8a 30       	cpi	r24, 0x0A	; 10
    4206:	91 05       	cpc	r25, r1
    4208:	74 f3       	brlt	.-36     	; 0x41e6 <M16P_vidSendFunc+0x10>
        UART_Transmit(send_buf[i]);
    }
}
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <M16P_vidSendCmd>:

static void M16P_vidSendCmd(uint8_t cmd, uint16_ arg1, uint16_ arg2) {
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	00 d0       	rcall	.+0      	; 0x421a <M16P_vidSendCmd+0x6>
    421a:	00 d0       	rcall	.+0      	; 0x421c <M16P_vidSendCmd+0x8>
    421c:	0f 92       	push	r0
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	89 83       	std	Y+1, r24	; 0x01
    4224:	7b 83       	std	Y+3, r23	; 0x03
    4226:	6a 83       	std	Y+2, r22	; 0x02
    4228:	5d 83       	std	Y+5, r21	; 0x05
    422a:	4c 83       	std	Y+4, r20	; 0x04
    send_buf[3] = cmd;
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	80 93 2c 04 	sts	0x042C, r24
    send_buf[5] = arg1;
    4232:	8a 81       	ldd	r24, Y+2	; 0x02
    4234:	80 93 2e 04 	sts	0x042E, r24
    send_buf[6] = arg2;
    4238:	8c 81       	ldd	r24, Y+4	; 0x04
    423a:	80 93 2f 04 	sts	0x042F, r24
    M16P_vidFillCheckSum();
    423e:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4242:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <M16P_vidSendFunc>
}
    4246:	0f 90       	pop	r0
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	cf 91       	pop	r28
    4252:	df 91       	pop	r29
    4254:	08 95       	ret

00004256 <M16P_vidSendCmdSingleArg>:

static void M16P_vidSendCmdSingleArg(uint8_t cmd, uint16_ arg) {
    4256:	df 93       	push	r29
    4258:	cf 93       	push	r28
    425a:	00 d0       	rcall	.+0      	; 0x425c <M16P_vidSendCmdSingleArg+0x6>
    425c:	0f 92       	push	r0
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	89 83       	std	Y+1, r24	; 0x01
    4264:	7b 83       	std	Y+3, r23	; 0x03
    4266:	6a 83       	std	Y+2, r22	; 0x02
    send_buf[3] = cmd;
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	80 93 2c 04 	sts	0x042C, r24
    M16P_vidFillBufUint16((send_buf + 5), arg);
    426e:	8e e2       	ldi	r24, 0x2E	; 46
    4270:	94 e0       	ldi	r25, 0x04	; 4
    4272:	2a 81       	ldd	r18, Y+2	; 0x02
    4274:	3b 81       	ldd	r19, Y+3	; 0x03
    4276:	b9 01       	movw	r22, r18
    4278:	0e 94 7e 20 	call	0x40fc	; 0x40fc <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    427c:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4280:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <M16P_vidSendFunc>
}
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <M16P_vidSendCmdNoArg>:

static void M16P_vidSendCmdNoArg(uint8_t cmd) {
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	0f 92       	push	r0
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	89 83       	std	Y+1, r24	; 0x01
    send_buf[3] = cmd;
    429c:	89 81       	ldd	r24, Y+1	; 0x01
    429e:	80 93 2c 04 	sts	0x042C, r24
    M16P_vidFillBufUint16((send_buf + 5), 0);
    42a2:	8e e2       	ldi	r24, 0x2E	; 46
    42a4:	94 e0       	ldi	r25, 0x04	; 4
    42a6:	60 e0       	ldi	r22, 0x00	; 0
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	0e 94 7e 20 	call	0x40fc	; 0x40fc <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    42ae:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    42b2:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <M16P_vidSendFunc>
}
    42b6:	0f 90       	pop	r0
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <M16P_vidPlayTrack>:

void M16P_vidPlayTrack(uint16_ num) {
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <M16P_vidPlayTrack+0x6>
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	9a 83       	std	Y+2, r25	; 0x02
    42ca:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x03, num);
    42cc:	29 81       	ldd	r18, Y+1	; 0x01
    42ce:	3a 81       	ldd	r19, Y+2	; 0x02
    42d0:	83 e0       	ldi	r24, 0x03	; 3
    42d2:	b9 01       	movw	r22, r18
    42d4:	0e 94 2b 21 	call	0x4256	; 0x4256 <M16P_vidSendCmdSingleArg>
}
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <M16P_vidNextTrack>:

void M16P_vidNextTrack() {
    42e2:	df 93       	push	r29
    42e4:	cf 93       	push	r28
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x01);
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    42f0:	cf 91       	pop	r28
    42f2:	df 91       	pop	r29
    42f4:	08 95       	ret

000042f6 <M16P_vidPreviousTrack>:

void M16P_vidPreviousTrack() {
    42f6:	df 93       	push	r29
    42f8:	cf 93       	push	r28
    42fa:	cd b7       	in	r28, 0x3d	; 61
    42fc:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x02);
    42fe:	82 e0       	ldi	r24, 0x02	; 2
    4300:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    4304:	cf 91       	pop	r28
    4306:	df 91       	pop	r29
    4308:	08 95       	ret

0000430a <M16P_vidSetVolume>:

void M16P_vidSetVolume(uint16_ volume) {
    430a:	df 93       	push	r29
    430c:	cf 93       	push	r28
    430e:	00 d0       	rcall	.+0      	; 0x4310 <M16P_vidSetVolume+0x6>
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	9a 83       	std	Y+2, r25	; 0x02
    4316:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x06, volume);
    4318:	29 81       	ldd	r18, Y+1	; 0x01
    431a:	3a 81       	ldd	r19, Y+2	; 0x02
    431c:	86 e0       	ldi	r24, 0x06	; 6
    431e:	b9 01       	movw	r22, r18
    4320:	0e 94 2b 21 	call	0x4256	; 0x4256 <M16P_vidSendCmdSingleArg>
}
    4324:	0f 90       	pop	r0
    4326:	0f 90       	pop	r0
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <M16P_vidSetEQ>:

void M16P_vidSetEQ(uint16_ eq) {
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	00 d0       	rcall	.+0      	; 0x4334 <M16P_vidSetEQ+0x6>
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
    4338:	9a 83       	std	Y+2, r25	; 0x02
    433a:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x07, eq);
    433c:	29 81       	ldd	r18, Y+1	; 0x01
    433e:	3a 81       	ldd	r19, Y+2	; 0x02
    4340:	87 e0       	ldi	r24, 0x07	; 7
    4342:	b9 01       	movw	r22, r18
    4344:	0e 94 2b 21 	call	0x4256	; 0x4256 <M16P_vidSendCmdSingleArg>
}
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	cf 91       	pop	r28
    434e:	df 91       	pop	r29
    4350:	08 95       	ret

00004352 <M16P_vidSetPlaybackSource>:

void M16P_vidSetPlaybackSource(uint16_ device) {
    4352:	df 93       	push	r29
    4354:	cf 93       	push	r28
    4356:	00 d0       	rcall	.+0      	; 0x4358 <M16P_vidSetPlaybackSource+0x6>
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
    435c:	9a 83       	std	Y+2, r25	; 0x02
    435e:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x09, device);
    4360:	29 81       	ldd	r18, Y+1	; 0x01
    4362:	3a 81       	ldd	r19, Y+2	; 0x02
    4364:	89 e0       	ldi	r24, 0x09	; 9
    4366:	b9 01       	movw	r22, r18
    4368:	0e 94 2b 21 	call	0x4256	; 0x4256 <M16P_vidSendCmdSingleArg>
}
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	cf 91       	pop	r28
    4372:	df 91       	pop	r29
    4374:	08 95       	ret

00004376 <M16P_vidSleep>:

void M16P_vidSleep() {
    4376:	df 93       	push	r29
    4378:	cf 93       	push	r28
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0a);
    437e:	8a e0       	ldi	r24, 0x0A	; 10
    4380:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    4384:	cf 91       	pop	r28
    4386:	df 91       	pop	r29
    4388:	08 95       	ret

0000438a <M16P_vidReset>:

void M16P_vidReset() {
    438a:	df 93       	push	r29
    438c:	cf 93       	push	r28
    438e:	cd b7       	in	r28, 0x3d	; 61
    4390:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0c);
    4392:	8c e0       	ldi	r24, 0x0C	; 12
    4394:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    4398:	cf 91       	pop	r28
    439a:	df 91       	pop	r29
    439c:	08 95       	ret

0000439e <M16P_vidPlayback>:

void M16P_vidPlayback() {
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0d);
    43a6:	8d e0       	ldi	r24, 0x0D	; 13
    43a8:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	08 95       	ret

000043b2 <M16P_vidPause>:

void M16P_vidPause() {
    43b2:	df 93       	push	r29
    43b4:	cf 93       	push	r28
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0e);
    43ba:	8e e0       	ldi	r24, 0x0E	; 14
    43bc:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    43c0:	cf 91       	pop	r28
    43c2:	df 91       	pop	r29
    43c4:	08 95       	ret

000043c6 <M16P_vidPlayFileInFolder>:

void M16P_vidPlayFileInFolder(uint16_ folder, uint16_ file) {
    43c6:	df 93       	push	r29
    43c8:	cf 93       	push	r28
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <M16P_vidPlayFileInFolder+0x6>
    43cc:	00 d0       	rcall	.+0      	; 0x43ce <M16P_vidPlayFileInFolder+0x8>
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
    43d2:	9a 83       	std	Y+2, r25	; 0x02
    43d4:	89 83       	std	Y+1, r24	; 0x01
    43d6:	7c 83       	std	Y+4, r23	; 0x04
    43d8:	6b 83       	std	Y+3, r22	; 0x03
    M16P_vidSendCmd(0x0f, folder, file);
    43da:	29 81       	ldd	r18, Y+1	; 0x01
    43dc:	3a 81       	ldd	r19, Y+2	; 0x02
    43de:	4b 81       	ldd	r20, Y+3	; 0x03
    43e0:	5c 81       	ldd	r21, Y+4	; 0x04
    43e2:	8f e0       	ldi	r24, 0x0F	; 15
    43e4:	b9 01       	movw	r22, r18
    43e6:	0e 94 0a 21 	call	0x4214	; 0x4214 <M16P_vidSendCmd>
}
    43ea:	0f 90       	pop	r0
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <M16P_vidPlayByNumber>:

void M16P_vidPlayByNumber(uint16_ num) {
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	00 d0       	rcall	.+0      	; 0x43fe <M16P_vidPlayByNumber+0x6>
    43fe:	cd b7       	in	r28, 0x3d	; 61
    4400:	de b7       	in	r29, 0x3e	; 62
    4402:	9a 83       	std	Y+2, r25	; 0x02
    4404:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x12, num);
    4406:	29 81       	ldd	r18, Y+1	; 0x01
    4408:	3a 81       	ldd	r19, Y+2	; 0x02
    440a:	82 e1       	ldi	r24, 0x12	; 18
    440c:	b9 01       	movw	r22, r18
    440e:	0e 94 2b 21 	call	0x4256	; 0x4256 <M16P_vidSendCmdSingleArg>
}
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	cf 91       	pop	r28
    4418:	df 91       	pop	r29
    441a:	08 95       	ret

0000441c <M16P_vidGetState>:

/*---------------------------------------------------------------------------*/



void M16P_vidGetState() {
    441c:	df 93       	push	r29
    441e:	cf 93       	push	r28
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x42);
    4424:	82 e4       	ldi	r24, 0x42	; 66
    4426:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    442a:	cf 91       	pop	r28
    442c:	df 91       	pop	r29
    442e:	08 95       	ret

00004430 <M16P_vidGetVolume>:

void M16P_vidGetVolume() {
    4430:	df 93       	push	r29
    4432:	cf 93       	push	r28
    4434:	cd b7       	in	r28, 0x3d	; 61
    4436:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x43);
    4438:	83 e4       	ldi	r24, 0x43	; 67
    443a:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    443e:	cf 91       	pop	r28
    4440:	df 91       	pop	r29
    4442:	08 95       	ret

00004444 <M16P_vidGetUSum>:

void M16P_vidGetUSum() {
    4444:	df 93       	push	r29
    4446:	cf 93       	push	r28
    4448:	cd b7       	in	r28, 0x3d	; 61
    444a:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x47);
    444c:	87 e4       	ldi	r24, 0x47	; 71
    444e:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    4452:	cf 91       	pop	r28
    4454:	df 91       	pop	r29
    4456:	08 95       	ret

00004458 <M16P_vidGetTFSum>:

void M16P_vidGetTFSum() {
    4458:	df 93       	push	r29
    445a:	cf 93       	push	r28
    445c:	cd b7       	in	r28, 0x3d	; 61
    445e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x48);
    4460:	88 e4       	ldi	r24, 0x48	; 72
    4462:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    4466:	cf 91       	pop	r28
    4468:	df 91       	pop	r29
    446a:	08 95       	ret

0000446c <M16P_vidGetFlashSum>:

void M16P_vidGetFlashSum() {
    446c:	df 93       	push	r29
    446e:	cf 93       	push	r28
    4470:	cd b7       	in	r28, 0x3d	; 61
    4472:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x49);
    4474:	89 e4       	ldi	r24, 0x49	; 73
    4476:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    447a:	cf 91       	pop	r28
    447c:	df 91       	pop	r29
    447e:	08 95       	ret

00004480 <M16P_vidGetTFCurrent>:

void M16P_vidGetTFCurrent() {
    4480:	df 93       	push	r29
    4482:	cf 93       	push	r28
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4c);
    4488:	8c e4       	ldi	r24, 0x4C	; 76
    448a:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    448e:	cf 91       	pop	r28
    4490:	df 91       	pop	r29
    4492:	08 95       	ret

00004494 <M16P_vidGetUCurrent>:

void M16P_vidGetUCurrent() {
    4494:	df 93       	push	r29
    4496:	cf 93       	push	r28
    4498:	cd b7       	in	r28, 0x3d	; 61
    449a:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4b);
    449c:	8b e4       	ldi	r24, 0x4B	; 75
    449e:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    44a2:	cf 91       	pop	r28
    44a4:	df 91       	pop	r29
    44a6:	08 95       	ret

000044a8 <M16P_vidGetFlashCurrent>:

void M16P_vidGetFlashCurrent() {
    44a8:	df 93       	push	r29
    44aa:	cf 93       	push	r28
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4d);
    44b0:	8d e4       	ldi	r24, 0x4D	; 77
    44b2:	0e 94 48 21 	call	0x4290	; 0x4290 <M16P_vidSendCmdNoArg>
}
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	08 95       	ret

000044bc <M16P_u8GetDataBuffer>:

uint8_t M16P_u8GetDataBuffer() {
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	df 93       	push	r29
    44c2:	cf 93       	push	r28
    44c4:	00 d0       	rcall	.+0      	; 0x44c6 <M16P_u8GetDataBuffer+0xa>
    44c6:	0f 92       	push	r0
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    if (UART_Receive() != 0x7E) {
    44cc:	0e 94 93 13 	call	0x2726	; 0x2726 <UART_Receive>
    44d0:	8e 37       	cpi	r24, 0x7E	; 126
    44d2:	11 f0       	breq	.+4      	; 0x44d8 <M16P_u8GetDataBuffer+0x1c>
        return 0;
    44d4:	1b 82       	std	Y+3, r1	; 0x03
    44d6:	1c c0       	rjmp	.+56     	; 0x4510 <M16P_u8GetDataBuffer+0x54>
    }else{
    	recv_buf[0] = 0x7E;
    44d8:	8e e7       	ldi	r24, 0x7E	; 126
    44da:	80 93 4e 04 	sts	0x044E, r24
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    44de:	81 e0       	ldi	r24, 0x01	; 1
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	9a 83       	std	Y+2, r25	; 0x02
    44e4:	89 83       	std	Y+1, r24	; 0x01
    44e6:	0d c0       	rjmp	.+26     	; 0x4502 <M16P_u8GetDataBuffer+0x46>
    		recv_buf[i] = UART_Receive();
    44e8:	09 81       	ldd	r16, Y+1	; 0x01
    44ea:	1a 81       	ldd	r17, Y+2	; 0x02
    44ec:	0e 94 93 13 	call	0x2726	; 0x2726 <UART_Receive>
    44f0:	f8 01       	movw	r30, r16
    44f2:	e2 5b       	subi	r30, 0xB2	; 178
    44f4:	fb 4f       	sbci	r31, 0xFB	; 251
    44f6:	80 83       	st	Z, r24
uint8_t M16P_u8GetDataBuffer() {
    if (UART_Receive() != 0x7E) {
        return 0;
    }else{
    	recv_buf[0] = 0x7E;
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	9a 81       	ldd	r25, Y+2	; 0x02
    44fc:	01 96       	adiw	r24, 0x01	; 1
    44fe:	9a 83       	std	Y+2, r25	; 0x02
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	8a 30       	cpi	r24, 0x0A	; 10
    4508:	91 05       	cpc	r25, r1
    450a:	74 f3       	brlt	.-36     	; 0x44e8 <M16P_u8GetDataBuffer+0x2c>
    		recv_buf[i] = UART_Receive();
    	}
    	return 1;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	8b 83       	std	Y+3, r24	; 0x03
    4510:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    4512:	0f 90       	pop	r0
    4514:	0f 90       	pop	r0
    4516:	0f 90       	pop	r0
    4518:	cf 91       	pop	r28
    451a:	df 91       	pop	r29
    451c:	1f 91       	pop	r17
    451e:	0f 91       	pop	r16
    4520:	08 95       	ret

00004522 <main>:

extern uint16_ compare_cnt1;
void get_word();

int main()
{
    4522:	df 93       	push	r29
    4524:	cf 93       	push	r28
    4526:	00 d0       	rcall	.+0      	; 0x4528 <main+0x6>
    4528:	cd b7       	in	r28, 0x3d	; 61
    452a:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	0e 94 ef 0a 	call	0x15de	; 0x15de <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
	uint8_t compare_value;
	GLOVE_vidSensorsInit();
    4532:	0e 94 91 08 	call	0x1122	; 0x1122 <GLOVE_vidSensorsInit>
	SHOW_vidShowAndPlayInit(&ready_flag);
    4536:	88 e5       	ldi	r24, 0x58	; 88
    4538:	94 e0       	ldi	r25, 0x04	; 4
    453a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SHOW_vidShowAndPlayInit>
	GLOVE_vidSetGloveParams(&sensor_reads[0],7);
    453e:	8c e7       	ldi	r24, 0x7C	; 124
    4540:	94 e0       	ldi	r25, 0x04	; 4
    4542:	67 e0       	ldi	r22, 0x07	; 7
    4544:	0e 94 a5 08 	call	0x114a	; 0x114a <GLOVE_vidSetGloveParams>
	TIMER1_voidInit();
    4548:	0e 94 a2 13 	call	0x2744	; 0x2744 <TIMER1_voidInit>
	TIMER1_voidGetNumCountCTC(1000, &compare_cnt1, &compare_value);
    454c:	2a e7       	ldi	r18, 0x7A	; 122
    454e:	34 e0       	ldi	r19, 0x04	; 4
    4550:	ae 01       	movw	r20, r28
    4552:	4e 5f       	subi	r20, 0xFE	; 254
    4554:	5f 4f       	sbci	r21, 0xFF	; 255
    4556:	88 ee       	ldi	r24, 0xE8	; 232
    4558:	93 e0       	ldi	r25, 0x03	; 3
    455a:	b9 01       	movw	r22, r18
    455c:	0e 94 26 14 	call	0x284c	; 0x284c <TIMER1_voidGetNumCountCTC>
	TIMER1_voidSetCTCTime(compare_value);
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	0e 94 18 14 	call	0x2830	; 0x2830 <TIMER1_voidSetCTCTime>
	TIMER1_voidSetCallBackCTC(&get_word);
    4566:	81 ee       	ldi	r24, 0xE1	; 225
    4568:	92 e2       	ldi	r25, 0x22	; 34
    456a:	0e 94 6f 14 	call	0x28de	; 0x28de <TIMER1_voidSetCallBackCTC>
	GLOVE_vidGetHandRead();
    456e:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLOVE_vidGetHandRead>
	while(1)
	{
		while(ready_flag || get_another_read_flag);
    4572:	80 91 58 04 	lds	r24, 0x0458
    4576:	88 23       	and	r24, r24
    4578:	e1 f7       	brne	.-8      	; 0x4572 <main+0x50>
    457a:	80 91 33 04 	lds	r24, 0x0433
    457e:	88 23       	and	r24, r24
    4580:	c1 f7       	brne	.-16     	; 0x4572 <main+0x50>
		for(uint8_t i=0;i<10;i++)
    4582:	19 82       	std	Y+1, r1	; 0x01
    4584:	11 c0       	rjmp	.+34     	; 0x45a8 <main+0x86>
		{
			word_location[i]=word_location_buffer[i];
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	28 2f       	mov	r18, r24
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	89 81       	ldd	r24, Y+1	; 0x01
    458e:	88 2f       	mov	r24, r24
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	fc 01       	movw	r30, r24
    4594:	e4 57       	subi	r30, 0x74	; 116
    4596:	fb 4f       	sbci	r31, 0xFB	; 251
    4598:	80 81       	ld	r24, Z
    459a:	f9 01       	movw	r30, r18
    459c:	ea 56       	subi	r30, 0x6A	; 106
    459e:	fb 4f       	sbci	r31, 0xFB	; 251
    45a0:	80 83       	st	Z, r24
	TIMER1_voidSetCallBackCTC(&get_word);
	GLOVE_vidGetHandRead();
	while(1)
	{
		while(ready_flag || get_another_read_flag);
		for(uint8_t i=0;i<10;i++)
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	8f 5f       	subi	r24, 0xFF	; 255
    45a6:	89 83       	std	Y+1, r24	; 0x01
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	8a 30       	cpi	r24, 0x0A	; 10
    45ac:	60 f3       	brcs	.-40     	; 0x4586 <main+0x64>
		{
			word_location[i]=word_location_buffer[i];
		}
		get_another_read_flag = 1;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	80 93 33 04 	sts	0x0433, r24
		GLOVE_vidGetHandRead();
    45b4:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLOVE_vidGetHandRead>
		SHOW_vidShowAndPlay(&word_location[0]);
    45b8:	86 e9       	ldi	r24, 0x96	; 150
    45ba:	94 e0       	ldi	r25, 0x04	; 4
    45bc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <SHOW_vidShowAndPlay>
    45c0:	d8 cf       	rjmp	.-80     	; 0x4572 <main+0x50>

000045c2 <get_word>:

	return 0;
}

void get_word()
{
    45c2:	df 93       	push	r29
    45c4:	cf 93       	push	r28
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0;
	if(i<5 && sensor_reads[7] && get_another_read_flag)
    45ca:	80 91 59 04 	lds	r24, 0x0459
    45ce:	85 30       	cpi	r24, 0x05	; 5
    45d0:	08 f0       	brcs	.+2      	; 0x45d4 <get_word+0x12>
    45d2:	61 c0       	rjmp	.+194    	; 0x4696 <get_word+0xd4>
    45d4:	80 91 8a 04 	lds	r24, 0x048A
    45d8:	90 91 8b 04 	lds	r25, 0x048B
    45dc:	00 97       	sbiw	r24, 0x00	; 0
    45de:	09 f4       	brne	.+2      	; 0x45e2 <get_word+0x20>
    45e0:	5a c0       	rjmp	.+180    	; 0x4696 <get_word+0xd4>
    45e2:	80 91 33 04 	lds	r24, 0x0433
    45e6:	88 23       	and	r24, r24
    45e8:	09 f4       	brne	.+2      	; 0x45ec <get_word+0x2a>
    45ea:	55 c0       	rjmp	.+170    	; 0x4696 <get_word+0xd4>
	{
		LED_u8LedToggle(PORT_D, PIN_7);
    45ec:	83 e0       	ldi	r24, 0x03	; 3
    45ee:	67 e0       	ldi	r22, 0x07	; 7
    45f0:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LED_u8LedToggle>
		GET_vidGetWordAndSound(&sensor_reads[0], &word_location_buffer[i*2]);
    45f4:	80 91 59 04 	lds	r24, 0x0459
    45f8:	88 2f       	mov	r24, r24
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	9c 01       	movw	r18, r24
    4602:	24 57       	subi	r18, 0x74	; 116
    4604:	3b 4f       	sbci	r19, 0xFB	; 251
    4606:	8c e7       	ldi	r24, 0x7C	; 124
    4608:	94 e0       	ldi	r25, 0x04	; 4
    460a:	b9 01       	movw	r22, r18
    460c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GET_vidGetWordAndSound>
		if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 1 )i--;
    4610:	80 91 59 04 	lds	r24, 0x0459
    4614:	88 2f       	mov	r24, r24
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	88 0f       	add	r24, r24
    461a:	99 1f       	adc	r25, r25
    461c:	fc 01       	movw	r30, r24
    461e:	e4 57       	subi	r30, 0x74	; 116
    4620:	fb 4f       	sbci	r31, 0xFB	; 251
    4622:	80 81       	ld	r24, Z
    4624:	88 23       	and	r24, r24
    4626:	99 f4       	brne	.+38     	; 0x464e <get_word+0x8c>
    4628:	80 91 59 04 	lds	r24, 0x0459
    462c:	88 2f       	mov	r24, r24
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	88 0f       	add	r24, r24
    4632:	99 1f       	adc	r25, r25
    4634:	01 96       	adiw	r24, 0x01	; 1
    4636:	fc 01       	movw	r30, r24
    4638:	e4 57       	subi	r30, 0x74	; 116
    463a:	fb 4f       	sbci	r31, 0xFB	; 251
    463c:	80 81       	ld	r24, Z
    463e:	81 30       	cpi	r24, 0x01	; 1
    4640:	31 f4       	brne	.+12     	; 0x464e <get_word+0x8c>
    4642:	80 91 59 04 	lds	r24, 0x0459
    4646:	81 50       	subi	r24, 0x01	; 1
    4648:	80 93 59 04 	sts	0x0459, r24
    464c:	1c c0       	rjmp	.+56     	; 0x4686 <get_word+0xc4>
		else if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 0 )i=5;
    464e:	80 91 59 04 	lds	r24, 0x0459
    4652:	88 2f       	mov	r24, r24
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	88 0f       	add	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	fc 01       	movw	r30, r24
    465c:	e4 57       	subi	r30, 0x74	; 116
    465e:	fb 4f       	sbci	r31, 0xFB	; 251
    4660:	80 81       	ld	r24, Z
    4662:	88 23       	and	r24, r24
    4664:	81 f4       	brne	.+32     	; 0x4686 <get_word+0xc4>
    4666:	80 91 59 04 	lds	r24, 0x0459
    466a:	88 2f       	mov	r24, r24
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	01 96       	adiw	r24, 0x01	; 1
    4674:	fc 01       	movw	r30, r24
    4676:	e4 57       	subi	r30, 0x74	; 116
    4678:	fb 4f       	sbci	r31, 0xFB	; 251
    467a:	80 81       	ld	r24, Z
    467c:	88 23       	and	r24, r24
    467e:	19 f4       	brne	.+6      	; 0x4686 <get_word+0xc4>
    4680:	85 e0       	ldi	r24, 0x05	; 5
    4682:	80 93 59 04 	sts	0x0459, r24
		GLOVE_vidGetHandRead();
    4686:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLOVE_vidGetHandRead>
		i++;
    468a:	80 91 59 04 	lds	r24, 0x0459
    468e:	8f 5f       	subi	r24, 0xFF	; 255
    4690:	80 93 59 04 	sts	0x0459, r24
    4694:	04 c0       	rjmp	.+8      	; 0x469e <get_word+0xdc>
	}else {
		i = 0;
    4696:	10 92 59 04 	sts	0x0459, r1
		get_another_read_flag = 0;
    469a:	10 92 33 04 	sts	0x0433, r1

	}

}
    469e:	cf 91       	pop	r28
    46a0:	df 91       	pop	r29
    46a2:	08 95       	ret

000046a4 <__mulsi3>:
    46a4:	62 9f       	mul	r22, r18
    46a6:	d0 01       	movw	r26, r0
    46a8:	73 9f       	mul	r23, r19
    46aa:	f0 01       	movw	r30, r0
    46ac:	82 9f       	mul	r24, r18
    46ae:	e0 0d       	add	r30, r0
    46b0:	f1 1d       	adc	r31, r1
    46b2:	64 9f       	mul	r22, r20
    46b4:	e0 0d       	add	r30, r0
    46b6:	f1 1d       	adc	r31, r1
    46b8:	92 9f       	mul	r25, r18
    46ba:	f0 0d       	add	r31, r0
    46bc:	83 9f       	mul	r24, r19
    46be:	f0 0d       	add	r31, r0
    46c0:	74 9f       	mul	r23, r20
    46c2:	f0 0d       	add	r31, r0
    46c4:	65 9f       	mul	r22, r21
    46c6:	f0 0d       	add	r31, r0
    46c8:	99 27       	eor	r25, r25
    46ca:	72 9f       	mul	r23, r18
    46cc:	b0 0d       	add	r27, r0
    46ce:	e1 1d       	adc	r30, r1
    46d0:	f9 1f       	adc	r31, r25
    46d2:	63 9f       	mul	r22, r19
    46d4:	b0 0d       	add	r27, r0
    46d6:	e1 1d       	adc	r30, r1
    46d8:	f9 1f       	adc	r31, r25
    46da:	bd 01       	movw	r22, r26
    46dc:	cf 01       	movw	r24, r30
    46de:	11 24       	eor	r1, r1
    46e0:	08 95       	ret

000046e2 <__udivmodqi4>:
    46e2:	99 1b       	sub	r25, r25
    46e4:	79 e0       	ldi	r23, 0x09	; 9
    46e6:	04 c0       	rjmp	.+8      	; 0x46f0 <__udivmodqi4_ep>

000046e8 <__udivmodqi4_loop>:
    46e8:	99 1f       	adc	r25, r25
    46ea:	96 17       	cp	r25, r22
    46ec:	08 f0       	brcs	.+2      	; 0x46f0 <__udivmodqi4_ep>
    46ee:	96 1b       	sub	r25, r22

000046f0 <__udivmodqi4_ep>:
    46f0:	88 1f       	adc	r24, r24
    46f2:	7a 95       	dec	r23
    46f4:	c9 f7       	brne	.-14     	; 0x46e8 <__udivmodqi4_loop>
    46f6:	80 95       	com	r24
    46f8:	08 95       	ret

000046fa <__udivmodhi4>:
    46fa:	aa 1b       	sub	r26, r26
    46fc:	bb 1b       	sub	r27, r27
    46fe:	51 e1       	ldi	r21, 0x11	; 17
    4700:	07 c0       	rjmp	.+14     	; 0x4710 <__udivmodhi4_ep>

00004702 <__udivmodhi4_loop>:
    4702:	aa 1f       	adc	r26, r26
    4704:	bb 1f       	adc	r27, r27
    4706:	a6 17       	cp	r26, r22
    4708:	b7 07       	cpc	r27, r23
    470a:	10 f0       	brcs	.+4      	; 0x4710 <__udivmodhi4_ep>
    470c:	a6 1b       	sub	r26, r22
    470e:	b7 0b       	sbc	r27, r23

00004710 <__udivmodhi4_ep>:
    4710:	88 1f       	adc	r24, r24
    4712:	99 1f       	adc	r25, r25
    4714:	5a 95       	dec	r21
    4716:	a9 f7       	brne	.-22     	; 0x4702 <__udivmodhi4_loop>
    4718:	80 95       	com	r24
    471a:	90 95       	com	r25
    471c:	bc 01       	movw	r22, r24
    471e:	cd 01       	movw	r24, r26
    4720:	08 95       	ret

00004722 <__udivmodsi4>:
    4722:	a1 e2       	ldi	r26, 0x21	; 33
    4724:	1a 2e       	mov	r1, r26
    4726:	aa 1b       	sub	r26, r26
    4728:	bb 1b       	sub	r27, r27
    472a:	fd 01       	movw	r30, r26
    472c:	0d c0       	rjmp	.+26     	; 0x4748 <__udivmodsi4_ep>

0000472e <__udivmodsi4_loop>:
    472e:	aa 1f       	adc	r26, r26
    4730:	bb 1f       	adc	r27, r27
    4732:	ee 1f       	adc	r30, r30
    4734:	ff 1f       	adc	r31, r31
    4736:	a2 17       	cp	r26, r18
    4738:	b3 07       	cpc	r27, r19
    473a:	e4 07       	cpc	r30, r20
    473c:	f5 07       	cpc	r31, r21
    473e:	20 f0       	brcs	.+8      	; 0x4748 <__udivmodsi4_ep>
    4740:	a2 1b       	sub	r26, r18
    4742:	b3 0b       	sbc	r27, r19
    4744:	e4 0b       	sbc	r30, r20
    4746:	f5 0b       	sbc	r31, r21

00004748 <__udivmodsi4_ep>:
    4748:	66 1f       	adc	r22, r22
    474a:	77 1f       	adc	r23, r23
    474c:	88 1f       	adc	r24, r24
    474e:	99 1f       	adc	r25, r25
    4750:	1a 94       	dec	r1
    4752:	69 f7       	brne	.-38     	; 0x472e <__udivmodsi4_loop>
    4754:	60 95       	com	r22
    4756:	70 95       	com	r23
    4758:	80 95       	com	r24
    475a:	90 95       	com	r25
    475c:	9b 01       	movw	r18, r22
    475e:	ac 01       	movw	r20, r24
    4760:	bd 01       	movw	r22, r26
    4762:	cf 01       	movw	r24, r30
    4764:	08 95       	ret

00004766 <__prologue_saves__>:
    4766:	2f 92       	push	r2
    4768:	3f 92       	push	r3
    476a:	4f 92       	push	r4
    476c:	5f 92       	push	r5
    476e:	6f 92       	push	r6
    4770:	7f 92       	push	r7
    4772:	8f 92       	push	r8
    4774:	9f 92       	push	r9
    4776:	af 92       	push	r10
    4778:	bf 92       	push	r11
    477a:	cf 92       	push	r12
    477c:	df 92       	push	r13
    477e:	ef 92       	push	r14
    4780:	ff 92       	push	r15
    4782:	0f 93       	push	r16
    4784:	1f 93       	push	r17
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
    478e:	ca 1b       	sub	r28, r26
    4790:	db 0b       	sbc	r29, r27
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	09 94       	ijmp

0000479e <__epilogue_restores__>:
    479e:	2a 88       	ldd	r2, Y+18	; 0x12
    47a0:	39 88       	ldd	r3, Y+17	; 0x11
    47a2:	48 88       	ldd	r4, Y+16	; 0x10
    47a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    47a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    47a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    47aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    47ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    47ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    47b0:	b9 84       	ldd	r11, Y+9	; 0x09
    47b2:	c8 84       	ldd	r12, Y+8	; 0x08
    47b4:	df 80       	ldd	r13, Y+7	; 0x07
    47b6:	ee 80       	ldd	r14, Y+6	; 0x06
    47b8:	fd 80       	ldd	r15, Y+5	; 0x05
    47ba:	0c 81       	ldd	r16, Y+4	; 0x04
    47bc:	1b 81       	ldd	r17, Y+3	; 0x03
    47be:	aa 81       	ldd	r26, Y+2	; 0x02
    47c0:	b9 81       	ldd	r27, Y+1	; 0x01
    47c2:	ce 0f       	add	r28, r30
    47c4:	d1 1d       	adc	r29, r1
    47c6:	0f b6       	in	r0, 0x3f	; 63
    47c8:	f8 94       	cli
    47ca:	de bf       	out	0x3e, r29	; 62
    47cc:	0f be       	out	0x3f, r0	; 63
    47ce:	cd bf       	out	0x3d, r28	; 61
    47d0:	ed 01       	movw	r28, r26
    47d2:	08 95       	ret
    47d4:	11 f4       	brne	.+4      	; 0x47da <__epilogue_restores__+0x3c>
    47d6:	0e f4       	brtc	.+2      	; 0x47da <__epilogue_restores__+0x3c>
    47d8:	4d c0       	rjmp	.+154    	; 0x4874 <__fp_nan>
    47da:	3e c0       	rjmp	.+124    	; 0x4858 <__fp_mpack>

000047dc <sqrt>:
    47dc:	5d d0       	rcall	.+186    	; 0x4898 <__fp_splitA>
    47de:	d0 f3       	brcs	.-12     	; 0x47d4 <__epilogue_restores__+0x36>
    47e0:	99 23       	and	r25, r25
    47e2:	d9 f3       	breq	.-10     	; 0x47da <__epilogue_restores__+0x3c>
    47e4:	ce f3       	brts	.-14     	; 0x47d8 <__epilogue_restores__+0x3a>
    47e6:	9f 57       	subi	r25, 0x7F	; 127
    47e8:	55 0b       	sbc	r21, r21
    47ea:	87 ff       	sbrs	r24, 7
    47ec:	46 d0       	rcall	.+140    	; 0x487a <__fp_norm2>
    47ee:	00 24       	eor	r0, r0
    47f0:	a0 e6       	ldi	r26, 0x60	; 96
    47f2:	40 ea       	ldi	r20, 0xA0	; 160
    47f4:	90 01       	movw	r18, r0
    47f6:	80 58       	subi	r24, 0x80	; 128
    47f8:	56 95       	lsr	r21
    47fa:	97 95       	ror	r25
    47fc:	28 f4       	brcc	.+10     	; 0x4808 <sqrt+0x2c>
    47fe:	80 5c       	subi	r24, 0xC0	; 192
    4800:	66 0f       	add	r22, r22
    4802:	77 1f       	adc	r23, r23
    4804:	88 1f       	adc	r24, r24
    4806:	20 f0       	brcs	.+8      	; 0x4810 <sqrt+0x34>
    4808:	26 17       	cp	r18, r22
    480a:	37 07       	cpc	r19, r23
    480c:	48 07       	cpc	r20, r24
    480e:	30 f4       	brcc	.+12     	; 0x481c <sqrt+0x40>
    4810:	62 1b       	sub	r22, r18
    4812:	73 0b       	sbc	r23, r19
    4814:	84 0b       	sbc	r24, r20
    4816:	20 29       	or	r18, r0
    4818:	31 29       	or	r19, r1
    481a:	4a 2b       	or	r20, r26
    481c:	a6 95       	lsr	r26
    481e:	17 94       	ror	r1
    4820:	07 94       	ror	r0
    4822:	20 25       	eor	r18, r0
    4824:	31 25       	eor	r19, r1
    4826:	4a 27       	eor	r20, r26
    4828:	58 f7       	brcc	.-42     	; 0x4800 <sqrt+0x24>
    482a:	66 0f       	add	r22, r22
    482c:	77 1f       	adc	r23, r23
    482e:	88 1f       	adc	r24, r24
    4830:	20 f0       	brcs	.+8      	; 0x483a <sqrt+0x5e>
    4832:	26 17       	cp	r18, r22
    4834:	37 07       	cpc	r19, r23
    4836:	48 07       	cpc	r20, r24
    4838:	30 f4       	brcc	.+12     	; 0x4846 <sqrt+0x6a>
    483a:	62 0b       	sbc	r22, r18
    483c:	73 0b       	sbc	r23, r19
    483e:	84 0b       	sbc	r24, r20
    4840:	20 0d       	add	r18, r0
    4842:	31 1d       	adc	r19, r1
    4844:	41 1d       	adc	r20, r1
    4846:	a0 95       	com	r26
    4848:	81 f7       	brne	.-32     	; 0x482a <sqrt+0x4e>
    484a:	b9 01       	movw	r22, r18
    484c:	84 2f       	mov	r24, r20
    484e:	91 58       	subi	r25, 0x81	; 129
    4850:	88 0f       	add	r24, r24
    4852:	96 95       	lsr	r25
    4854:	87 95       	ror	r24
    4856:	08 95       	ret

00004858 <__fp_mpack>:
    4858:	9f 3f       	cpi	r25, 0xFF	; 255
    485a:	31 f0       	breq	.+12     	; 0x4868 <__fp_mpack_finite+0xc>

0000485c <__fp_mpack_finite>:
    485c:	91 50       	subi	r25, 0x01	; 1
    485e:	20 f4       	brcc	.+8      	; 0x4868 <__fp_mpack_finite+0xc>
    4860:	87 95       	ror	r24
    4862:	77 95       	ror	r23
    4864:	67 95       	ror	r22
    4866:	b7 95       	ror	r27
    4868:	88 0f       	add	r24, r24
    486a:	91 1d       	adc	r25, r1
    486c:	96 95       	lsr	r25
    486e:	87 95       	ror	r24
    4870:	97 f9       	bld	r25, 7
    4872:	08 95       	ret

00004874 <__fp_nan>:
    4874:	9f ef       	ldi	r25, 0xFF	; 255
    4876:	80 ec       	ldi	r24, 0xC0	; 192
    4878:	08 95       	ret

0000487a <__fp_norm2>:
    487a:	91 50       	subi	r25, 0x01	; 1
    487c:	50 40       	sbci	r21, 0x00	; 0
    487e:	66 0f       	add	r22, r22
    4880:	77 1f       	adc	r23, r23
    4882:	88 1f       	adc	r24, r24
    4884:	d2 f7       	brpl	.-12     	; 0x487a <__fp_norm2>
    4886:	08 95       	ret

00004888 <__fp_split3>:
    4888:	57 fd       	sbrc	r21, 7
    488a:	90 58       	subi	r25, 0x80	; 128
    488c:	44 0f       	add	r20, r20
    488e:	55 1f       	adc	r21, r21
    4890:	59 f0       	breq	.+22     	; 0x48a8 <__fp_splitA+0x10>
    4892:	5f 3f       	cpi	r21, 0xFF	; 255
    4894:	71 f0       	breq	.+28     	; 0x48b2 <__fp_splitA+0x1a>
    4896:	47 95       	ror	r20

00004898 <__fp_splitA>:
    4898:	88 0f       	add	r24, r24
    489a:	97 fb       	bst	r25, 7
    489c:	99 1f       	adc	r25, r25
    489e:	61 f0       	breq	.+24     	; 0x48b8 <__fp_splitA+0x20>
    48a0:	9f 3f       	cpi	r25, 0xFF	; 255
    48a2:	79 f0       	breq	.+30     	; 0x48c2 <__fp_splitA+0x2a>
    48a4:	87 95       	ror	r24
    48a6:	08 95       	ret
    48a8:	12 16       	cp	r1, r18
    48aa:	13 06       	cpc	r1, r19
    48ac:	14 06       	cpc	r1, r20
    48ae:	55 1f       	adc	r21, r21
    48b0:	f2 cf       	rjmp	.-28     	; 0x4896 <__fp_split3+0xe>
    48b2:	46 95       	lsr	r20
    48b4:	f1 df       	rcall	.-30     	; 0x4898 <__fp_splitA>
    48b6:	08 c0       	rjmp	.+16     	; 0x48c8 <__fp_splitA+0x30>
    48b8:	16 16       	cp	r1, r22
    48ba:	17 06       	cpc	r1, r23
    48bc:	18 06       	cpc	r1, r24
    48be:	99 1f       	adc	r25, r25
    48c0:	f1 cf       	rjmp	.-30     	; 0x48a4 <__fp_splitA+0xc>
    48c2:	86 95       	lsr	r24
    48c4:	71 05       	cpc	r23, r1
    48c6:	61 05       	cpc	r22, r1
    48c8:	08 94       	sec
    48ca:	08 95       	ret

000048cc <_exit>:
    48cc:	f8 94       	cli

000048ce <__stop_program>:
    48ce:	ff cf       	rjmp	.-2      	; 0x48ce <__stop_program>
