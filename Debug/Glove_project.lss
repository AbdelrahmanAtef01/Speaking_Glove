
Glove_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d4  00800060  00004afe  00004b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  00800434  00800434  00004f66  2**0
                  ALLOC
  3 .stab         00005820  00000000  00000000  00004f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025e1  00000000  00000000  0000a788  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000cd69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000cf09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001088c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1c 16 	jmp	0x2c38	; 0x2c38 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__vector_9>
      28:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 24 24 	call	0x4848	; 0x4848 <main>
      8a:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 25 	jmp	0x4a8c	; 0x4a8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 25 	jmp	0x4a8c	; 0x4a8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 52 25 	jmp	0x4aa4	; 0x4aa4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 56 25 	jmp	0x4aac	; 0x4aac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SHOW_vidShowAndPlayInit>:
uint8_t sentences_length[7] = {2, 1, 3, 4, 4, 2, 4};

void callback();

void SHOW_vidShowAndPlayInit (uint8_t * ready_flag)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SHOW_vidShowAndPlayInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	ready_flag_glob = ready_flag;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 78 04 	sts	0x0478, r25
     e44:	80 93 77 04 	sts	0x0477, r24
	(*ready_flag)=0;
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	10 82       	st	Z, r1
	LCD_vidInit();
     e4e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <LCD_vidInit>
	M16P_vidInit(9600);
     e52:	80 e8       	ldi	r24, 0x80	; 128
     e54:	95 e2       	ldi	r25, 0x25	; 37
     e56:	0e 94 ee 21 	call	0x43dc	; 0x43dc <M16P_vidInit>
	TMR0_Init();
     e5a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <TMR0_Init>
	TMR0_SetCallback(&callback);
     e5e:	87 ea       	ldi	r24, 0xA7	; 167
     e60:	98 e0       	ldi	r25, 0x08	; 8
     e62:	0e 94 ef 16 	call	0x2dde	; 0x2dde <TMR0_SetCallback>
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <SHOW_u8CalcTrackNumber>:

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <SHOW_u8CalcTrackNumber+0x6>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <SHOW_u8CalcTrackNumber+0x8>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t track_number = 0;
     e80:	1a 82       	std	Y+2, r1	; 0x02

	for(uint8_t i = 1; i<folder; i++)
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	12 c0       	rjmp	.+36     	; 0xeac <SHOW_u8CalcTrackNumber+0x3c>
	{
		track_number += i*sentences_length[i-1];
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	fc 01       	movw	r30, r24
     e92:	eb 55       	subi	r30, 0x5B	; 91
     e94:	fd 4f       	sbci	r31, 0xFD	; 253
     e96:	90 81       	ld	r25, Z
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	98 9f       	mul	r25, r24
     e9c:	90 2d       	mov	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	89 0f       	add	r24, r25
     ea4:	8a 83       	std	Y+2, r24	; 0x02

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
	uint8_t track_number = 0;

	for(uint8_t i = 1; i<folder; i++)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	8f 5f       	subi	r24, 0xFF	; 255
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	99 81       	ldd	r25, Y+1	; 0x01
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	98 17       	cp	r25, r24
     eb2:	50 f3       	brcs	.-44     	; 0xe88 <SHOW_u8CalcTrackNumber+0x18>
	{
		track_number += i*sentences_length[i-1];
	}
	track_number += file;
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	89 0f       	add	r24, r25
     eba:	8a 83       	std	Y+2, r24	; 0x02

	return track_number;
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <SHOW_vidShowAndPlay>:

void SHOW_vidShowAndPlay (uint8_t * words)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	e8 97       	sbiw	r28, 0x38	; 56
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	9b ab       	std	Y+51, r25	; 0x33
     ee2:	8a ab       	std	Y+50, r24	; 0x32
	uint8_t string_output[32] ={'\0'};
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	fe 01       	movw	r30, r28
     ee8:	38 96       	adiw	r30, 0x08	; 8
     eea:	df 01       	movw	r26, r30
     eec:	98 2f       	mov	r25, r24
     eee:	1d 92       	st	X+, r1
     ef0:	9a 95       	dec	r25
     ef2:	e9 f7       	brne	.-6      	; 0xeee <SHOW_vidShowAndPlay+0x22>
	uint8_t words_cpy[10];
	uint8_t l = 0;
     ef4:	1f 82       	std	Y+7, r1	; 0x07
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
     ef6:	1d 82       	std	Y+5, r1	; 0x05
     ef8:	15 c0       	rjmp	.+42     	; 0xf24 <SHOW_vidShowAndPlay+0x58>
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	48 2f       	mov	r20, r24
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	8a a9       	ldd	r24, Y+50	; 0x32
     f08:	9b a9       	ldd	r25, Y+51	; 0x33
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	20 81       	ld	r18, Z
     f12:	ce 01       	movw	r24, r28
     f14:	88 96       	adiw	r24, 0x28	; 40
     f16:	fc 01       	movw	r30, r24
     f18:	e4 0f       	add	r30, r20
     f1a:	f5 1f       	adc	r31, r21
     f1c:	20 83       	st	Z, r18
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	8a 30       	cpi	r24, 0x0A	; 10
     f28:	40 f3       	brcs	.-48     	; 0xefa <SHOW_vidShowAndPlay+0x2e>
	LCD_vidClearDisplay();
     f2a:	0e 94 de 20 	call	0x41bc	; 0x41bc <LCD_vidClearDisplay>
	(*ready_flag_glob) = 1;
     f2e:	e0 91 77 04 	lds	r30, 0x0477
     f32:	f0 91 78 04 	lds	r31, 0x0478
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	80 83       	st	Z, r24
	uint8_t j=0;
     f3a:	1e 82       	std	Y+6, r1	; 0x06
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     f3c:	1c 82       	std	Y+4, r1	; 0x04
     f3e:	bf c0       	rjmp	.+382    	; 0x10be <SHOW_vidShowAndPlay+0x1f2>
	{
		for(j =0; j<NO_OF_WORDS; j++)
     f40:	1e 82       	std	Y+6, r1	; 0x06
     f42:	41 c0       	rjmp	.+130    	; 0xfc6 <SHOW_vidShowAndPlay+0xfa>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	88 96       	adiw	r24, 0x28	; 40
     f4e:	fc 01       	movw	r30, r24
     f50:	e2 0f       	add	r30, r18
     f52:	f3 1f       	adc	r31, r19
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	c9 01       	movw	r24, r18
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	82 0f       	add	r24, r18
     f68:	93 1f       	adc	r25, r19
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	fc 01       	movw	r30, r24
     f72:	e8 59       	subi	r30, 0x98	; 152
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	48 17       	cp	r20, r24
     f7c:	59 07       	cpc	r21, r25
     f7e:	01 f5       	brne	.+64     	; 0xfc0 <SHOW_vidShowAndPlay+0xf4>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	9c 01       	movw	r18, r24
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	ce 01       	movw	r24, r28
     f8e:	88 96       	adiw	r24, 0x28	; 40
     f90:	fc 01       	movw	r30, r24
     f92:	e2 0f       	add	r30, r18
     f94:	f3 1f       	adc	r31, r19
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	c9 01       	movw	r24, r18
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	fc 01       	movw	r30, r24
     fb2:	e4 59       	subi	r30, 0x94	; 148
     fb4:	fe 4f       	sbci	r31, 0xFE	; 254
     fb6:	80 81       	ld	r24, Z
     fb8:	91 81       	ldd	r25, Z+1	; 0x01
     fba:	48 17       	cp	r20, r24
     fbc:	59 07       	cpc	r21, r25
     fbe:	39 f0       	breq	.+14     	; 0xfce <SHOW_vidShowAndPlay+0x102>
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
	{
		for(j =0; j<NO_OF_WORDS; j++)
     fc0:	8e 81       	ldd	r24, Y+6	; 0x06
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8e 83       	std	Y+6, r24	; 0x06
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	84 31       	cpi	r24, 0x14	; 20
     fca:	08 f4       	brcc	.+2      	; 0xfce <SHOW_vidShowAndPlay+0x102>
     fcc:	bb cf       	rjmp	.-138    	; 0xf44 <SHOW_vidShowAndPlay+0x78>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
     fce:	80 91 34 04 	lds	r24, 0x0434
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	80 93 34 04 	sts	0x0434, r24
		sound_buffer[i]=outputs[j];
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8e 81       	ldd	r24, Y+6	; 0x06
     fe0:	48 2f       	mov	r20, r24
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	c9 01       	movw	r24, r18
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	9c 01       	movw	r18, r24
     ff4:	27 5a       	subi	r18, 0xA7	; 167
     ff6:	3b 4f       	sbci	r19, 0xFB	; 251
     ff8:	ca 01       	movw	r24, r20
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	84 0f       	add	r24, r20
    1000:	95 1f       	adc	r25, r21
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	88 59       	subi	r24, 0x98	; 152
    1008:	9e 4f       	sbci	r25, 0xFE	; 254
    100a:	3d ab       	std	Y+53, r19	; 0x35
    100c:	2c ab       	std	Y+52, r18	; 0x34
    100e:	9f ab       	std	Y+55, r25	; 0x37
    1010:	8e ab       	std	Y+54, r24	; 0x36
    1012:	a6 e0       	ldi	r26, 0x06	; 6
    1014:	a8 af       	std	Y+56, r26	; 0x38
    1016:	ee a9       	ldd	r30, Y+54	; 0x36
    1018:	ff a9       	ldd	r31, Y+55	; 0x37
    101a:	00 80       	ld	r0, Z
    101c:	8e a9       	ldd	r24, Y+54	; 0x36
    101e:	9f a9       	ldd	r25, Y+55	; 0x37
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	9f ab       	std	Y+55, r25	; 0x37
    1024:	8e ab       	std	Y+54, r24	; 0x36
    1026:	ac a9       	ldd	r26, Y+52	; 0x34
    1028:	bd a9       	ldd	r27, Y+53	; 0x35
    102a:	0c 92       	st	X, r0
    102c:	ec a9       	ldd	r30, Y+52	; 0x34
    102e:	fd a9       	ldd	r31, Y+53	; 0x35
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	fd ab       	std	Y+53, r31	; 0x35
    1034:	ec ab       	std	Y+52, r30	; 0x34
    1036:	f8 ad       	ldd	r31, Y+56	; 0x38
    1038:	f1 50       	subi	r31, 0x01	; 1
    103a:	f8 af       	std	Y+56, r31	; 0x38
    103c:	88 ad       	ldd	r24, Y+56	; 0x38
    103e:	88 23       	and	r24, r24
    1040:	51 f7       	brne	.-44     	; 0x1016 <SHOW_vidShowAndPlay+0x14a>
		uint8_t * ptr = strings[j];
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	fc 01       	movw	r30, r24
    104e:	e7 59       	subi	r30, 0x97	; 151
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
		for(uint8_t k = 0; k < strings_length[j] && ptr[k] != '\0'; k++)
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	18 c0       	rjmp	.+48     	; 0x108e <SHOW_vidShowAndPlay+0x1c2>
		{
			string_output[l++] = ptr[k];
    105e:	8f 81       	ldd	r24, Y+7	; 0x07
    1060:	48 2f       	mov	r20, r24
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	20 81       	ld	r18, Z
    1076:	ce 01       	movw	r24, r28
    1078:	08 96       	adiw	r24, 0x08	; 8
    107a:	fc 01       	movw	r30, r24
    107c:	e4 0f       	add	r30, r20
    107e:	f5 1f       	adc	r31, r21
    1080:	20 83       	st	Z, r18
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	8f 83       	std	Y+7, r24	; 0x07
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
		sound_buffer[i]=outputs[j];
		uint8_t * ptr = strings[j];
		for(uint8_t k = 0; k < strings_length[j] && ptr[k] != '\0'; k++)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	fc 01       	movw	r30, r24
    1096:	ef 56       	subi	r30, 0x6F	; 111
    1098:	fd 4f       	sbci	r31, 0xFD	; 253
    109a:	90 81       	ld	r25, Z
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	89 17       	cp	r24, r25
    10a0:	58 f4       	brcc	.+22     	; 0x10b8 <SHOW_vidShowAndPlay+0x1ec>
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	fc 01       	movw	r30, r24
    10ae:	e2 0f       	add	r30, r18
    10b0:	f3 1f       	adc	r31, r19
    10b2:	80 81       	ld	r24, Z
    10b4:	88 23       	and	r24, r24
    10b6:	99 f6       	brne	.-90     	; 0x105e <SHOW_vidShowAndPlay+0x192>
	uint8_t l = 0;
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	8e 5f       	subi	r24, 0xFE	; 254
    10bc:	8c 83       	std	Y+4, r24	; 0x04
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	ce 01       	movw	r24, r28
    10c6:	88 96       	adiw	r24, 0x28	; 40
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	80 81       	ld	r24, Z
    10d0:	88 23       	and	r24, r24
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <SHOW_vidShowAndPlay+0x226>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 01       	movw	r18, r24
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	ce 01       	movw	r24, r28
    10e2:	88 96       	adiw	r24, 0x28	; 40
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <SHOW_vidShowAndPlay+0x226>
    10f0:	27 cf       	rjmp	.-434    	; 0xf40 <SHOW_vidShowAndPlay+0x74>
		for(uint8_t k = 0; k < strings_length[j] && ptr[k] != '\0'; k++)
		{
			string_output[l++] = ptr[k];
		}
	}
	string_output[l]= '\0';
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	ce 01       	movw	r24, r28
    10fa:	08 96       	adiw	r24, 0x08	; 8
    10fc:	fc 01       	movw	r30, r24
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	10 82       	st	Z, r1
	LCD_vidDisplayString(&string_output[0]);
    1104:	ce 01       	movw	r24, r28
    1106:	08 96       	adiw	r24, 0x08	; 8
    1108:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <LCD_vidDisplayString>
	TMR0_Start(sound_buffer[0].sound_duration);
    110c:	80 91 59 04 	lds	r24, 0x0459
    1110:	90 91 5a 04 	lds	r25, 0x045A
    1114:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <TMR0_Start>
	//M16P_vidPlayFileInFolder(sound_buffer[0].folder, sound_buffer[0].file);
	M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[0].folder, sound_buffer[0].file));
    1118:	80 91 5b 04 	lds	r24, 0x045B
    111c:	90 91 5c 04 	lds	r25, 0x045C
    1120:	28 2f       	mov	r18, r24
    1122:	80 91 5d 04 	lds	r24, 0x045D
    1126:	90 91 5e 04 	lds	r25, 0x045E
    112a:	98 2f       	mov	r25, r24
    112c:	82 2f       	mov	r24, r18
    112e:	69 2f       	mov	r22, r25
    1130:	0e 94 38 07 	call	0xe70	; 0xe70 <SHOW_u8CalcTrackNumber>
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <M16P_vidPlayTrack>
}
    113c:	e8 96       	adiw	r28, 0x38	; 56
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <callback>:

void callback()
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	M16P_vidPause();
    1156:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <M16P_vidPause>
	static uint8_t current_file = 1;
	if(current_file < sound_buffer_size)
    115a:	90 91 ac 02 	lds	r25, 0x02AC
    115e:	80 91 34 04 	lds	r24, 0x0434
    1162:	98 17       	cp	r25, r24
    1164:	08 f0       	brcs	.+2      	; 0x1168 <callback+0x1a>
    1166:	43 c0       	rjmp	.+134    	; 0x11ee <callback+0xa0>
	{
		M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[current_file].folder, sound_buffer[current_file].file));
    1168:	80 91 ac 02 	lds	r24, 0x02AC
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	c9 01       	movw	r24, r18
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	82 0f       	add	r24, r18
    1178:	93 1f       	adc	r25, r19
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	fc 01       	movw	r30, r24
    1182:	e7 5a       	subi	r30, 0xA7	; 167
    1184:	fb 4f       	sbci	r31, 0xFB	; 251
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	48 2f       	mov	r20, r24
    118c:	80 91 ac 02 	lds	r24, 0x02AC
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	c9 01       	movw	r24, r18
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	fc 01       	movw	r30, r24
    11a4:	e3 5a       	subi	r30, 0xA3	; 163
    11a6:	fb 4f       	sbci	r31, 0xFB	; 251
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	98 2f       	mov	r25, r24
    11ae:	84 2f       	mov	r24, r20
    11b0:	69 2f       	mov	r22, r25
    11b2:	0e 94 38 07 	call	0xe70	; 0xe70 <SHOW_u8CalcTrackNumber>
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <M16P_vidPlayTrack>
		//M16P_vidPlayFileInFolder(sound_buffer[current_file].folder, sound_buffer[current_file].file);
		TMR0_Start(sound_buffer[current_file].sound_duration);
    11be:	80 91 ac 02 	lds	r24, 0x02AC
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	c9 01       	movw	r24, r18
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	82 0f       	add	r24, r18
    11ce:	93 1f       	adc	r25, r19
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	fc 01       	movw	r30, r24
    11d6:	e7 5a       	subi	r30, 0xA7	; 167
    11d8:	fb 4f       	sbci	r31, 0xFB	; 251
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <TMR0_Start>
		current_file++;
    11e2:	80 91 ac 02 	lds	r24, 0x02AC
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	80 93 ac 02 	sts	0x02AC, r24
    11ec:	0a c0       	rjmp	.+20     	; 0x1202 <callback+0xb4>

	}else{
		current_file = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	80 93 ac 02 	sts	0x02AC, r24
		sound_buffer_size = 0;
    11f4:	10 92 34 04 	sts	0x0434, r1
		(*ready_flag_glob) = 0;
    11f8:	e0 91 77 04 	lds	r30, 0x0477
    11fc:	f0 91 78 04 	lds	r31, 0x0478
    1200:	10 82       	st	Z, r1
	}
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <GLOVE_vidCallBack>:
uint16_ i = 0;

uint8_t FLEX_SENSORS[8] = {FLEX_0, FLEX_1, FLEX_2, FLEX_3, FLEX_4, FLEX_5, FLEX_6, FLEX_7};

void GLOVE_vidCallBack()
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	SENSOR_READ[i]=READ;
    1210:	20 91 35 04 	lds	r18, 0x0435
    1214:	30 91 36 04 	lds	r19, 0x0436
    1218:	80 91 3a 04 	lds	r24, 0x043A
    121c:	90 91 3b 04 	lds	r25, 0x043B
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	f9 01       	movw	r30, r18
    1226:	e8 0f       	add	r30, r24
    1228:	f9 1f       	adc	r31, r25
    122a:	80 91 38 04 	lds	r24, 0x0438
    122e:	90 91 39 04 	lds	r25, 0x0439
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
	if(i < NO_OF_FLEX_SENSORS-1)
    1236:	80 91 37 04 	lds	r24, 0x0437
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9c 01       	movw	r18, r24
    1242:	80 91 3a 04 	lds	r24, 0x043A
    1246:	90 91 3b 04 	lds	r25, 0x043B
    124a:	82 17       	cp	r24, r18
    124c:	93 07       	cpc	r25, r19
    124e:	58 f5       	brcc	.+86     	; 0x12a6 <GLOVE_vidCallBack+0x9e>
	{
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=0;
    1250:	20 91 35 04 	lds	r18, 0x0435
    1254:	30 91 36 04 	lds	r19, 0x0436
    1258:	80 91 37 04 	lds	r24, 0x0437
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 96       	adiw	r24, 0x02	; 2
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	f9 01       	movw	r30, r18
    1268:	e8 0f       	add	r30, r24
    126a:	f9 1f       	adc	r31, r25
    126c:	11 82       	std	Z+1, r1	; 0x01
    126e:	10 82       	st	Z, r1
		i++;
    1270:	80 91 3a 04 	lds	r24, 0x043A
    1274:	90 91 3b 04 	lds	r25, 0x043B
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	90 93 3b 04 	sts	0x043B, r25
    127e:	80 93 3a 04 	sts	0x043A, r24
		READ=0;
    1282:	10 92 39 04 	sts	0x0439, r1
    1286:	10 92 38 04 	sts	0x0438, r1
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    128a:	80 91 3a 04 	lds	r24, 0x043A
    128e:	90 91 3b 04 	lds	r25, 0x043B
    1292:	fc 01       	movw	r30, r24
    1294:	e3 55       	subi	r30, 0x53	; 83
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	20 81       	ld	r18, Z
    129a:	88 e3       	ldi	r24, 0x38	; 56
    129c:	94 e0       	ldi	r25, 0x04	; 4
    129e:	62 2f       	mov	r22, r18
    12a0:	0e 94 c8 21 	call	0x4390	; 0x4390 <FLEX_vidGetFlexRead>
    12a4:	27 c0       	rjmp	.+78     	; 0x12f4 <GLOVE_vidCallBack+0xec>
	}else if(i == NO_OF_FLEX_SENSORS-1)
    12a6:	80 91 37 04 	lds	r24, 0x0437
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	9c 01       	movw	r18, r24
    12b2:	80 91 3a 04 	lds	r24, 0x043A
    12b6:	90 91 3b 04 	lds	r25, 0x043B
    12ba:	28 17       	cp	r18, r24
    12bc:	39 07       	cpc	r19, r25
    12be:	d1 f4       	brne	.+52     	; 0x12f4 <GLOVE_vidCallBack+0xec>
	{
		i=0;
    12c0:	10 92 3b 04 	sts	0x043B, r1
    12c4:	10 92 3a 04 	sts	0x043A, r1
		READ=0;
    12c8:	10 92 39 04 	sts	0x0439, r1
    12cc:	10 92 38 04 	sts	0x0438, r1
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=1;
    12d0:	20 91 35 04 	lds	r18, 0x0435
    12d4:	30 91 36 04 	lds	r19, 0x0436
    12d8:	80 91 37 04 	lds	r24, 0x0437
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	f9 01       	movw	r30, r18
    12e8:	e8 0f       	add	r30, r24
    12ea:	f9 1f       	adc	r31, r25
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
	}
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <GLOVE_vidSensorsInit>:

void GLOVE_vidSensorsInit()
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	FLEX_vidFlexInit(FLEX_ALL);
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	0e 94 b8 21 	call	0x4370	; 0x4370 <FLEX_vidFlexInit>
	TILT_vidInit(TILT_2);
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <TILT_vidInit>
	TILT_vidInit(TILT_3);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <TILT_vidInit>
	FLEX_vidSetCallBack(&GLOVE_vidCallBack);
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	99 e0       	ldi	r25, 0x09	; 9
    1318:	0e 94 de 21 	call	0x43bc	; 0x43bc <FLEX_vidSetCallBack>
}
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <GLOVE_vidSetGloveParams>:

void GLOVE_vidSetGloveParams(uint16_* sensor_read, uint8_t no_of_sensors)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <GLOVE_vidSetGloveParams+0x6>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6b 83       	std	Y+3, r22	; 0x03
	SENSOR_READ = sensor_read;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	90 93 36 04 	sts	0x0436, r25
    133c:	80 93 35 04 	sts	0x0435, r24
	if(no_of_sensors<=8)NO_OF_FLEX_SENSORS = no_of_sensors - 2;
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	89 30       	cpi	r24, 0x09	; 9
    1344:	20 f4       	brcc	.+8      	; 0x134e <GLOVE_vidSetGloveParams+0x2c>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	82 50       	subi	r24, 0x02	; 2
    134a:	80 93 37 04 	sts	0x0437, r24
}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <GLOVE_vidGetHandRead>:

void GLOVE_vidGetHandRead()
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	if(i==0)
    1362:	80 91 3a 04 	lds	r24, 0x043A
    1366:	90 91 3b 04 	lds	r25, 0x043B
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f5       	brne	.+90     	; 0x13c8 <GLOVE_vidGetHandRead+0x6e>
	{
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS],TILT_2);
    136e:	80 91 35 04 	lds	r24, 0x0435
    1372:	90 91 36 04 	lds	r25, 0x0436
    1376:	9c 01       	movw	r18, r24
    1378:	80 91 37 04 	lds	r24, 0x0437
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	0e 94 17 18 	call	0x302e	; 0x302e <TILT_vidGetTiltRead>
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS + 1],TILT_3);
    138e:	20 91 35 04 	lds	r18, 0x0435
    1392:	30 91 36 04 	lds	r19, 0x0436
    1396:	80 91 37 04 	lds	r24, 0x0437
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	63 e0       	ldi	r22, 0x03	; 3
    13aa:	0e 94 17 18 	call	0x302e	; 0x302e <TILT_vidGetTiltRead>
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    13ae:	80 91 3a 04 	lds	r24, 0x043A
    13b2:	90 91 3b 04 	lds	r25, 0x043B
    13b6:	fc 01       	movw	r30, r24
    13b8:	e3 55       	subi	r30, 0x53	; 83
    13ba:	fd 4f       	sbci	r31, 0xFD	; 253
    13bc:	20 81       	ld	r18, Z
    13be:	88 e3       	ldi	r24, 0x38	; 56
    13c0:	94 e0       	ldi	r25, 0x04	; 4
    13c2:	62 2f       	mov	r22, r18
    13c4:	0e 94 c8 21 	call	0x4390	; 0x4390 <FLEX_vidGetFlexRead>
	}
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <GET_float32Pow>:
									  STOPPING_WORD, NOT_FOUND};

// HELPING FUNCTIONS 

// 1. Custom function to calculate power of a number
float32_t GET_float32Pow(float32_t base, uint8_t exp) {
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2a 97       	sbiw	r28, 0x0a	; 10
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	6e 83       	std	Y+6, r22	; 0x06
    13e4:	7f 83       	std	Y+7, r23	; 0x07
    13e6:	88 87       	std	Y+8, r24	; 0x08
    13e8:	99 87       	std	Y+9, r25	; 0x09
    13ea:	4a 87       	std	Y+10, r20	; 0x0a
    float32_t result = 1.0;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e8       	ldi	r26, 0x80	; 128
    13f2:	bf e3       	ldi	r27, 0x3F	; 63
    13f4:	8a 83       	std	Y+2, r24	; 0x02
    13f6:	9b 83       	std	Y+3, r25	; 0x03
    13f8:	ac 83       	std	Y+4, r26	; 0x04
    13fa:	bd 83       	std	Y+5, r27	; 0x05
    for (uint8_t i = 0; i < exp; i++) {
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <GET_float32Pow+0x58>
        result *= base;
    1400:	6a 81       	ldd	r22, Y+2	; 0x02
    1402:	7b 81       	ldd	r23, Y+3	; 0x03
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	2e 81       	ldd	r18, Y+6	; 0x06
    140a:	3f 81       	ldd	r19, Y+7	; 0x07
    140c:	48 85       	ldd	r20, Y+8	; 0x08
    140e:	59 85       	ldd	r21, Y+9	; 0x09
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	9b 83       	std	Y+3, r25	; 0x03
    141c:	ac 83       	std	Y+4, r26	; 0x04
    141e:	bd 83       	std	Y+5, r27	; 0x05
// HELPING FUNCTIONS 

// 1. Custom function to calculate power of a number
float32_t GET_float32Pow(float32_t base, uint8_t exp) {
    float32_t result = 1.0;
    for (uint8_t i = 0; i < exp; i++) {
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	99 81       	ldd	r25, Y+1	; 0x01
    1428:	8a 85       	ldd	r24, Y+10	; 0x0a
    142a:	98 17       	cp	r25, r24
    142c:	48 f3       	brcs	.-46     	; 0x1400 <GET_float32Pow+0x32>
        result *= base;
    }
    return result;
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	ac 81       	ldd	r26, Y+4	; 0x04
    1434:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	2a 96       	adiw	r28, 0x0a	; 10
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	de bf       	out	0x3e, r29	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <GET_float32Sqrt>:

// 2. Custom function to calculate square root using the Babylonian method
float32_t GET_float32Sqrt(float32_t num) {
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	60 97       	sbiw	r28, 0x10	; 16
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	6d 87       	std	Y+13, r22	; 0x0d
    1462:	7e 87       	std	Y+14, r23	; 0x0e
    1464:	8f 87       	std	Y+15, r24	; 0x0f
    1466:	98 8b       	std	Y+16, r25	; 0x10
    float32_t x = num;
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	af 85       	ldd	r26, Y+15	; 0x0f
    146e:	b8 89       	ldd	r27, Y+16	; 0x10
    1470:	89 87       	std	Y+9, r24	; 0x09
    1472:	9a 87       	std	Y+10, r25	; 0x0a
    1474:	ab 87       	std	Y+11, r26	; 0x0b
    1476:	bc 87       	std	Y+12, r27	; 0x0c
    float32_t y = 1.0;
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	af 83       	std	Y+7, r26	; 0x07
    1486:	b8 87       	std	Y+8, r27	; 0x08
    float32_t epsilon = 0.001;  // Accuracy
    1488:	8f e6       	ldi	r24, 0x6F	; 111
    148a:	92 e1       	ldi	r25, 0x12	; 18
    148c:	a3 e8       	ldi	r26, 0x83	; 131
    148e:	ba e3       	ldi	r27, 0x3A	; 58
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	ab 83       	std	Y+3, r26	; 0x03
    1496:	bc 83       	std	Y+4, r27	; 0x04
    1498:	2a c0       	rjmp	.+84     	; 0x14ee <GET_float32Sqrt+0xa2>

    while (x - y > epsilon) {
        x = (x + y) / 2.0;
    149a:	69 85       	ldd	r22, Y+9	; 0x09
    149c:	7a 85       	ldd	r23, Y+10	; 0x0a
    149e:	8b 85       	ldd	r24, Y+11	; 0x0b
    14a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14a2:	2d 81       	ldd	r18, Y+5	; 0x05
    14a4:	3e 81       	ldd	r19, Y+6	; 0x06
    14a6:	4f 81       	ldd	r20, Y+7	; 0x07
    14a8:	58 85       	ldd	r21, Y+8	; 0x08
    14aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	50 e4       	ldi	r21, 0x40	; 64
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	89 87       	std	Y+9, r24	; 0x09
    14c8:	9a 87       	std	Y+10, r25	; 0x0a
    14ca:	ab 87       	std	Y+11, r26	; 0x0b
    14cc:	bc 87       	std	Y+12, r27	; 0x0c
        y = num / x;
    14ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    14d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    14d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d4:	98 89       	ldd	r25, Y+16	; 0x10
    14d6:	29 85       	ldd	r18, Y+9	; 0x09
    14d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    14da:	4b 85       	ldd	r20, Y+11	; 0x0b
    14dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	af 83       	std	Y+7, r26	; 0x07
    14ec:	b8 87       	std	Y+8, r27	; 0x08
float32_t GET_float32Sqrt(float32_t num) {
    float32_t x = num;
    float32_t y = 1.0;
    float32_t epsilon = 0.001;  // Accuracy

    while (x - y > epsilon) {
    14ee:	69 85       	ldd	r22, Y+9	; 0x09
    14f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    14f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14f6:	2d 81       	ldd	r18, Y+5	; 0x05
    14f8:	3e 81       	ldd	r19, Y+6	; 0x06
    14fa:	4f 81       	ldd	r20, Y+7	; 0x07
    14fc:	58 85       	ldd	r21, Y+8	; 0x08
    14fe:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	bc 01       	movw	r22, r24
    1508:	cd 01       	movw	r24, r26
    150a:	29 81       	ldd	r18, Y+1	; 0x01
    150c:	3a 81       	ldd	r19, Y+2	; 0x02
    150e:	4b 81       	ldd	r20, Y+3	; 0x03
    1510:	5c 81       	ldd	r21, Y+4	; 0x04
    1512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	0c f4       	brge	.+2      	; 0x151c <GET_float32Sqrt+0xd0>
    151a:	bf cf       	rjmp	.-130    	; 0x149a <GET_float32Sqrt+0x4e>
        x = (x + y) / 2.0;
        y = num / x;
    }

    return x;
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	ab 85       	ldd	r26, Y+11	; 0x0b
    1522:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	60 96       	adiw	r28, 0x10	; 16
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <GET_float32CalculateDistance>:

// 3. Function to calculate Euclidean distance between two sensor readings
float32_t GET_float32CalculateDistance(uint16_* sensor_reads, word* word) {
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	28 97       	sbiw	r28, 0x08	; 8
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	78 87       	std	Y+8, r23	; 0x08
    1554:	6f 83       	std	Y+7, r22	; 0x07

    float32_t distance = 0.0;
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	ab 83       	std	Y+3, r26	; 0x03
    1564:	bc 83       	std	Y+4, r27	; 0x04

    distance += GET_float32Pow((float32_t)(sensor_reads[0] - word->thumb), 2);
    1566:	ed 81       	ldd	r30, Y+5	; 0x05
    1568:	fe 81       	ldd	r31, Y+6	; 0x06
    156a:	20 81       	ld	r18, Z
    156c:	31 81       	ldd	r19, Z+1	; 0x01
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	a9 01       	movw	r20, r18
    1578:	48 1b       	sub	r20, r24
    157a:	59 0b       	sbc	r21, r25
    157c:	ca 01       	movw	r24, r20
    157e:	cc 01       	movw	r24, r24
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	42 e0       	ldi	r20, 0x02	; 2
    1596:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    159a:	9b 01       	movw	r18, r22
    159c:	ac 01       	movw	r20, r24
    159e:	69 81       	ldd	r22, Y+1	; 0x01
    15a0:	7a 81       	ldd	r23, Y+2	; 0x02
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	ab 83       	std	Y+3, r26	; 0x03
    15b4:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[1] - word->finger_1), 2);
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	fc 01       	movw	r30, r24
    15bc:	32 96       	adiw	r30, 0x02	; 2
    15be:	20 81       	ld	r18, Z
    15c0:	31 81       	ldd	r19, Z+1	; 0x01
    15c2:	ef 81       	ldd	r30, Y+7	; 0x07
    15c4:	f8 85       	ldd	r31, Y+8	; 0x08
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	a9 01       	movw	r20, r18
    15cc:	48 1b       	sub	r20, r24
    15ce:	59 0b       	sbc	r21, r25
    15d0:	ca 01       	movw	r24, r20
    15d2:	cc 01       	movw	r24, r24
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	42 e0       	ldi	r20, 0x02	; 2
    15ea:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	69 81       	ldd	r22, Y+1	; 0x01
    15f4:	7a 81       	ldd	r23, Y+2	; 0x02
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	ab 83       	std	Y+3, r26	; 0x03
    1608:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[2] - word->finger_2), 2);
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	fc 01       	movw	r30, r24
    1610:	34 96       	adiw	r30, 0x04	; 4
    1612:	20 81       	ld	r18, Z
    1614:	31 81       	ldd	r19, Z+1	; 0x01
    1616:	ef 81       	ldd	r30, Y+7	; 0x07
    1618:	f8 85       	ldd	r31, Y+8	; 0x08
    161a:	84 81       	ldd	r24, Z+4	; 0x04
    161c:	95 81       	ldd	r25, Z+5	; 0x05
    161e:	a9 01       	movw	r20, r18
    1620:	48 1b       	sub	r20, r24
    1622:	59 0b       	sbc	r21, r25
    1624:	ca 01       	movw	r24, r20
    1626:	cc 01       	movw	r24, r24
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	42 e0       	ldi	r20, 0x02	; 2
    163e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    1642:	9b 01       	movw	r18, r22
    1644:	ac 01       	movw	r20, r24
    1646:	69 81       	ldd	r22, Y+1	; 0x01
    1648:	7a 81       	ldd	r23, Y+2	; 0x02
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	ab 83       	std	Y+3, r26	; 0x03
    165c:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[3] - word->finger_3), 2);
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	fc 01       	movw	r30, r24
    1664:	36 96       	adiw	r30, 0x06	; 6
    1666:	20 81       	ld	r18, Z
    1668:	31 81       	ldd	r19, Z+1	; 0x01
    166a:	ef 81       	ldd	r30, Y+7	; 0x07
    166c:	f8 85       	ldd	r31, Y+8	; 0x08
    166e:	86 81       	ldd	r24, Z+6	; 0x06
    1670:	97 81       	ldd	r25, Z+7	; 0x07
    1672:	a9 01       	movw	r20, r18
    1674:	48 1b       	sub	r20, r24
    1676:	59 0b       	sbc	r21, r25
    1678:	ca 01       	movw	r24, r20
    167a:	cc 01       	movw	r24, r24
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	42 e0       	ldi	r20, 0x02	; 2
    1692:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    1696:	9b 01       	movw	r18, r22
    1698:	ac 01       	movw	r20, r24
    169a:	69 81       	ldd	r22, Y+1	; 0x01
    169c:	7a 81       	ldd	r23, Y+2	; 0x02
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	9c 81       	ldd	r25, Y+4	; 0x04
    16a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	ab 83       	std	Y+3, r26	; 0x03
    16b0:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[4] - word->finger_4), 2);
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	fc 01       	movw	r30, r24
    16b8:	38 96       	adiw	r30, 0x08	; 8
    16ba:	20 81       	ld	r18, Z
    16bc:	31 81       	ldd	r19, Z+1	; 0x01
    16be:	ef 81       	ldd	r30, Y+7	; 0x07
    16c0:	f8 85       	ldd	r31, Y+8	; 0x08
    16c2:	80 85       	ldd	r24, Z+8	; 0x08
    16c4:	91 85       	ldd	r25, Z+9	; 0x09
    16c6:	a9 01       	movw	r20, r18
    16c8:	48 1b       	sub	r20, r24
    16ca:	59 0b       	sbc	r21, r25
    16cc:	ca 01       	movw	r24, r20
    16ce:	cc 01       	movw	r24, r24
    16d0:	a0 e0       	ldi	r26, 0x00	; 0
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	42 e0       	ldi	r20, 0x02	; 2
    16e6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	69 81       	ldd	r22, Y+1	; 0x01
    16f0:	7a 81       	ldd	r23, Y+2	; 0x02
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[5] - word->tilt0), 2);
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	fc 01       	movw	r30, r24
    170c:	3a 96       	adiw	r30, 0x0a	; 10
    170e:	20 81       	ld	r18, Z
    1710:	31 81       	ldd	r19, Z+1	; 0x01
    1712:	ef 81       	ldd	r30, Y+7	; 0x07
    1714:	f8 85       	ldd	r31, Y+8	; 0x08
    1716:	82 85       	ldd	r24, Z+10	; 0x0a
    1718:	93 85       	ldd	r25, Z+11	; 0x0b
    171a:	a9 01       	movw	r20, r18
    171c:	48 1b       	sub	r20, r24
    171e:	59 0b       	sbc	r21, r25
    1720:	ca 01       	movw	r24, r20
    1722:	cc 01       	movw	r24, r24
    1724:	a0 e0       	ldi	r26, 0x00	; 0
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	bc 01       	movw	r22, r24
    1736:	cd 01       	movw	r24, r26
    1738:	42 e0       	ldi	r20, 0x02	; 2
    173a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	69 81       	ldd	r22, Y+1	; 0x01
    1744:	7a 81       	ldd	r23, Y+2	; 0x02
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	ab 83       	std	Y+3, r26	; 0x03
    1758:	bc 83       	std	Y+4, r27	; 0x04
    distance += GET_float32Pow((float32_t)(sensor_reads[6] - word->tilt1), 2);
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	fc 01       	movw	r30, r24
    1760:	3c 96       	adiw	r30, 0x0c	; 12
    1762:	20 81       	ld	r18, Z
    1764:	31 81       	ldd	r19, Z+1	; 0x01
    1766:	ef 81       	ldd	r30, Y+7	; 0x07
    1768:	f8 85       	ldd	r31, Y+8	; 0x08
    176a:	84 85       	ldd	r24, Z+12	; 0x0c
    176c:	95 85       	ldd	r25, Z+13	; 0x0d
    176e:	a9 01       	movw	r20, r18
    1770:	48 1b       	sub	r20, r24
    1772:	59 0b       	sbc	r21, r25
    1774:	ca 01       	movw	r24, r20
    1776:	cc 01       	movw	r24, r24
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	42 e0       	ldi	r20, 0x02	; 2
    178e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GET_float32Pow>
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	69 81       	ldd	r22, Y+1	; 0x01
    1798:	7a 81       	ldd	r23, Y+2	; 0x02
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	ab 83       	std	Y+3, r26	; 0x03
    17ac:	bc 83       	std	Y+4, r27	; 0x04

    return GET_float32Sqrt(distance);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	ab 81       	ldd	r26, Y+3	; 0x03
    17b4:	bc 81       	ldd	r27, Y+4	; 0x04
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 26 0a 	call	0x144c	; 0x144c <GET_float32Sqrt>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22

}
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	28 96       	adiw	r28, 0x08	; 8
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <GET_u8FindClosestSensor>:


// 4. Function to find the closest predefined sensor data
uint8_t GET_u8FindClosestSensor(word* words, uint16_* sensor_reads, uint8_t num_words) {
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	2f 97       	sbiw	r28, 0x0f	; 15
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	9c 87       	std	Y+12, r25	; 0x0c
    17ee:	8b 87       	std	Y+11, r24	; 0x0b
    17f0:	7e 87       	std	Y+14, r23	; 0x0e
    17f2:	6d 87       	std	Y+13, r22	; 0x0d
    17f4:	4f 87       	std	Y+15, r20	; 0x0f

    uint8_t closest_index = 0;
    17f6:	1a 86       	std	Y+10, r1	; 0x0a

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);
    17f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    17fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    1800:	b9 01       	movw	r22, r18
    1802:	0e 94 9d 0a 	call	0x153a	; 0x153a <GET_float32CalculateDistance>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	9f 83       	std	Y+7, r25	; 0x07
    180e:	a8 87       	std	Y+8, r26	; 0x08
    1810:	b9 87       	std	Y+9, r27	; 0x09

    for (uint8_t i = 1; i < num_words; i++) {
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	32 c0       	rjmp	.+100    	; 0x187c <GET_u8FindClosestSensor+0xa4>
        float32_t distance = GET_float32CalculateDistance(sensor_reads, &words[i]);
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9c 01       	movw	r18, r24
    1820:	22 95       	swap	r18
    1822:	32 95       	swap	r19
    1824:	30 7f       	andi	r19, 0xF0	; 240
    1826:	32 27       	eor	r19, r18
    1828:	20 7f       	andi	r18, 0xF0	; 240
    182a:	32 27       	eor	r19, r18
    182c:	8b 85       	ldd	r24, Y+11	; 0x0b
    182e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1830:	28 0f       	add	r18, r24
    1832:	39 1f       	adc	r19, r25
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	b9 01       	movw	r22, r18
    183a:	0e 94 9d 0a 	call	0x153a	; 0x153a <GET_float32CalculateDistance>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	ab 83       	std	Y+3, r26	; 0x03
    1848:	bc 83       	std	Y+4, r27	; 0x04
        if (distance < min_distance) {
    184a:	69 81       	ldd	r22, Y+1	; 0x01
    184c:	7a 81       	ldd	r23, Y+2	; 0x02
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	2e 81       	ldd	r18, Y+6	; 0x06
    1854:	3f 81       	ldd	r19, Y+7	; 0x07
    1856:	48 85       	ldd	r20, Y+8	; 0x08
    1858:	59 85       	ldd	r21, Y+9	; 0x09
    185a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	54 f4       	brge	.+20     	; 0x1876 <GET_u8FindClosestSensor+0x9e>
            min_distance = distance;
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	ab 81       	ldd	r26, Y+3	; 0x03
    1868:	bc 81       	ldd	r27, Y+4	; 0x04
    186a:	8e 83       	std	Y+6, r24	; 0x06
    186c:	9f 83       	std	Y+7, r25	; 0x07
    186e:	a8 87       	std	Y+8, r26	; 0x08
    1870:	b9 87       	std	Y+9, r27	; 0x09
            closest_index = i;
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	8a 87       	std	Y+10, r24	; 0x0a

    uint8_t closest_index = 0;

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);

    for (uint8_t i = 1; i < num_words; i++) {
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1880:	98 17       	cp	r25, r24
    1882:	50 f2       	brcs	.-108    	; 0x1818 <GET_u8FindClosestSensor+0x40>
            min_distance = distance;
            closest_index = i;
        }
    }

    return closest_index;
    1884:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1886:	2f 96       	adiw	r28, 0x0f	; 15
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <GET_vidGetWordAndSound>:


// Main Function 
void GET_vidGetWordAndSound(uint16_ * sensor_reads, uint8_t * word_location )
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <GET_vidGetWordAndSound+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <GET_vidGetWordAndSound+0x8>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	9b 83       	std	Y+3, r25	; 0x03
    18a8:	8a 83       	std	Y+2, r24	; 0x02
    18aa:	7d 83       	std	Y+5, r23	; 0x05
    18ac:	6c 83       	std	Y+4, r22	; 0x04
	
uint8_t i = GET_u8FindClosestSensor(words, sensor_reads, TOTAL_NO_OF_WORDS);
    18ae:	85 eb       	ldi	r24, 0xB5	; 181
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	2a 81       	ldd	r18, Y+2	; 0x02
    18b4:	3b 81       	ldd	r19, Y+3	; 0x03
    18b6:	b9 01       	movw	r22, r18
    18b8:	46 e1       	ldi	r20, 0x16	; 22
    18ba:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <GET_u8FindClosestSensor>
    18be:	89 83       	std	Y+1, r24	; 0x01

word_location[0] = words[i].sentence;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	82 95       	swap	r24
    18c8:	92 95       	swap	r25
    18ca:	90 7f       	andi	r25, 0xF0	; 240
    18cc:	98 27       	eor	r25, r24
    18ce:	80 7f       	andi	r24, 0xF0	; 240
    18d0:	98 27       	eor	r25, r24
    18d2:	fc 01       	movw	r30, r24
    18d4:	ed 53       	subi	r30, 0x3D	; 61
    18d6:	fd 4f       	sbci	r31, 0xFD	; 253
    18d8:	80 81       	ld	r24, Z
    18da:	ec 81       	ldd	r30, Y+4	; 0x04
    18dc:	fd 81       	ldd	r31, Y+5	; 0x05
    18de:	80 83       	st	Z, r24
word_location[1] = words[i].word;
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	dc 01       	movw	r26, r24
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	82 95       	swap	r24
    18f0:	92 95       	swap	r25
    18f2:	90 7f       	andi	r25, 0xF0	; 240
    18f4:	98 27       	eor	r25, r24
    18f6:	80 7f       	andi	r24, 0xF0	; 240
    18f8:	98 27       	eor	r25, r24
    18fa:	fc 01       	movw	r30, r24
    18fc:	ec 53       	subi	r30, 0x3C	; 60
    18fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1900:	80 81       	ld	r24, Z
    1902:	8c 93       	st	X, r24

}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>:
#include"../../libraries/bit_math.h"
#include "../global_interrupt_driver/global_interrupt_int.h"
#include "../global_interrupt_driver/global_interrupt_register.h"

void GLOBAL_INTERRUPT_vidGlobalInterruptEnable(uint8_t mode)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x6>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3b 83       	std	Y+3, r19	; 0x03
    192a:	2a 83       	std	Y+2, r18	; 0x02
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	9b 81       	ldd	r25, Y+3	; 0x03
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f0       	breq	.+26     	; 0x194e <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x3a>
    1934:	2a 81       	ldd	r18, Y+2	; 0x02
    1936:	3b 81       	ldd	r19, Y+3	; 0x03
    1938:	21 30       	cpi	r18, 0x01	; 1
    193a:	31 05       	cpc	r19, r1
    193c:	79 f4       	brne	.+30     	; 0x195c <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
	{
		case ENABLED:
			SET_BIT(SREG,7);
    193e:	af e5       	ldi	r26, 0x5F	; 95
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
    194c:	07 c0       	rjmp	.+14     	; 0x195c <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
			break;
		case DISABLED:
			CLR_BIT(SREG,7);
    194e:	af e5       	ldi	r26, 0x5F	; 95
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ef e5       	ldi	r30, 0x5F	; 95
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8f 77       	andi	r24, 0x7F	; 127
    195a:	8c 93       	st	X, r24
			break;
	}
}
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <DIO_u8SetPinMode>:
#include"../../libraries/bit_math.h"
#include"dio_register.h"
#include"dio_int.h"

uint8_t DIO_u8SetPinMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <DIO_u8SetPinMode+0x6>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <DIO_u8SetPinMode+0x8>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <DIO_u8SetPinMode+0xa>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	8a 83       	std	Y+2, r24	; 0x02
    1978:	6b 83       	std	Y+3, r22	; 0x03
    197a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    197c:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	3e 83       	std	Y+6, r19	; 0x06
    1986:	2d 83       	std	Y+5, r18	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <DIO_u8SetPinMode+0x2c>
    1992:	49 c0       	rjmp	.+146    	; 0x1a26 <DIO_u8SetPinMode+0xbe>
    1994:	2d 81       	ldd	r18, Y+5	; 0x05
    1996:	3e 81       	ldd	r19, Y+6	; 0x06
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	2c f4       	brge	.+10     	; 0x19a8 <DIO_u8SetPinMode+0x40>
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	71 f0       	breq	.+28     	; 0x19c2 <DIO_u8SetPinMode+0x5a>
    19a6:	d5 c0       	rjmp	.+426    	; 0x1b52 <DIO_u8SetPinMode+0x1ea>
    19a8:	2d 81       	ldd	r18, Y+5	; 0x05
    19aa:	3e 81       	ldd	r19, Y+6	; 0x06
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <DIO_u8SetPinMode+0x4c>
    19b2:	6b c0       	rjmp	.+214    	; 0x1a8a <DIO_u8SetPinMode+0x122>
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <DIO_u8SetPinMode+0x58>
    19be:	97 c0       	rjmp	.+302    	; 0x1aee <DIO_u8SetPinMode+0x186>
    19c0:	c8 c0       	rjmp	.+400    	; 0x1b52 <DIO_u8SetPinMode+0x1ea>
		{
		case PORT_A:
			if(mode==INPUT)CLR_BIT(DDRA_REG,pin_no);
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	88 23       	and	r24, r24
    19c6:	a9 f4       	brne	.+42     	; 0x19f2 <DIO_u8SetPinMode+0x8a>
    19c8:	aa e3       	ldi	r26, 0x3A	; 58
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ea e3       	ldi	r30, 0x3A	; 58
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <DIO_u8SetPinMode+0x7e>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <DIO_u8SetPinMode+0x7a>
    19ea:	80 95       	com	r24
    19ec:	84 23       	and	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	b2 c0       	rjmp	.+356    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRA_REG,pin_no);
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	a1 f4       	brne	.+40     	; 0x1a20 <DIO_u8SetPinMode+0xb8>
    19f8:	aa e3       	ldi	r26, 0x3A	; 58
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	ea e3       	ldi	r30, 0x3A	; 58
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <DIO_u8SetPinMode+0xae>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <DIO_u8SetPinMode+0xaa>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	9b c0       	rjmp	.+310    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	98 c0       	rjmp	.+304    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_B:
			if(mode==INPUT)CLR_BIT(DDRB_REG,pin_no);
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	88 23       	and	r24, r24
    1a2a:	a9 f4       	brne	.+42     	; 0x1a56 <DIO_u8SetPinMode+0xee>
    1a2c:	a7 e3       	ldi	r26, 0x37	; 55
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e7 e3       	ldi	r30, 0x37	; 55
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 2e       	mov	r0, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_u8SetPinMode+0xe2>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	0a 94       	dec	r0
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_u8SetPinMode+0xde>
    1a4e:	80 95       	com	r24
    1a50:	84 23       	and	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	80 c0       	rjmp	.+256    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRB_REG,pin_no);
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	a1 f4       	brne	.+40     	; 0x1a84 <DIO_u8SetPinMode+0x11c>
    1a5c:	a7 e3       	ldi	r26, 0x37	; 55
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e7 e3       	ldi	r30, 0x37	; 55
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_u8SetPinMode+0x112>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_u8SetPinMode+0x10e>
    1a7e:	84 2b       	or	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	69 c0       	rjmp	.+210    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	66 c0       	rjmp	.+204    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_C:
			if(mode==INPUT)CLR_BIT(DDRC_REG,pin_no);
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	88 23       	and	r24, r24
    1a8e:	a9 f4       	brne	.+42     	; 0x1aba <DIO_u8SetPinMode+0x152>
    1a90:	a4 e3       	ldi	r26, 0x34	; 52
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e4 e3       	ldi	r30, 0x34	; 52
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_u8SetPinMode+0x146>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_u8SetPinMode+0x142>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	4e c0       	rjmp	.+156    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRC_REG,pin_no);
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	a1 f4       	brne	.+40     	; 0x1ae8 <DIO_u8SetPinMode+0x180>
    1ac0:	a4 e3       	ldi	r26, 0x34	; 52
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e4 e3       	ldi	r30, 0x34	; 52
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_u8SetPinMode+0x176>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_u8SetPinMode+0x172>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	37 c0       	rjmp	.+110    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	34 c0       	rjmp	.+104    	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_D:
			if(mode==INPUT)CLR_BIT(DDRD_REG,pin_no);
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	88 23       	and	r24, r24
    1af2:	a9 f4       	brne	.+42     	; 0x1b1e <DIO_u8SetPinMode+0x1b6>
    1af4:	a1 e3       	ldi	r26, 0x31	; 49
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e1 e3       	ldi	r30, 0x31	; 49
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_u8SetPinMode+0x1aa>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_u8SetPinMode+0x1a6>
    1b16:	80 95       	com	r24
    1b18:	84 23       	and	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	1c c0       	rjmp	.+56     	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRD_REG,pin_no);
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	a1 f4       	brne	.+40     	; 0x1b4c <DIO_u8SetPinMode+0x1e4>
    1b24:	a1 e3       	ldi	r26, 0x31	; 49
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e1 e3       	ldi	r30, 0x31	; 49
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_u8SetPinMode+0x1da>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_u8SetPinMode+0x1d6>
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_u8SetPinMode+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	26 96       	adiw	r28, 0x06	; 6
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <DIO_u8SetPinValue>:
uint8_t DIO_u8SetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t value)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <DIO_u8SetPinValue+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <DIO_u8SetPinValue+0x8>
    1b72:	00 d0       	rcall	.+0      	; 0x1b74 <DIO_u8SetPinValue+0xa>
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	6b 83       	std	Y+3, r22	; 0x03
    1b7c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1b7e:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	3e 83       	std	Y+6, r19	; 0x06
    1b88:	2d 83       	std	Y+5, r18	; 0x05
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	91 05       	cpc	r25, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <DIO_u8SetPinValue+0x2c>
    1b94:	49 c0       	rjmp	.+146    	; 0x1c28 <DIO_u8SetPinValue+0xbe>
    1b96:	2d 81       	ldd	r18, Y+5	; 0x05
    1b98:	3e 81       	ldd	r19, Y+6	; 0x06
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <DIO_u8SetPinValue+0x40>
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	71 f0       	breq	.+28     	; 0x1bc4 <DIO_u8SetPinValue+0x5a>
    1ba8:	d5 c0       	rjmp	.+426    	; 0x1d54 <DIO_u8SetPinValue+0x1ea>
    1baa:	2d 81       	ldd	r18, Y+5	; 0x05
    1bac:	3e 81       	ldd	r19, Y+6	; 0x06
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <DIO_u8SetPinValue+0x4c>
    1bb4:	6b c0       	rjmp	.+214    	; 0x1c8c <DIO_u8SetPinValue+0x122>
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <DIO_u8SetPinValue+0x58>
    1bc0:	97 c0       	rjmp	.+302    	; 0x1cf0 <DIO_u8SetPinValue+0x186>
    1bc2:	c8 c0       	rjmp	.+400    	; 0x1d54 <DIO_u8SetPinValue+0x1ea>
		{
		case PORT_A:
			if(value==LOW)CLR_BIT(PORTA_REG,pin_no);
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	88 23       	and	r24, r24
    1bc8:	a9 f4       	brne	.+42     	; 0x1bf4 <DIO_u8SetPinValue+0x8a>
    1bca:	ab e3       	ldi	r26, 0x3B	; 59
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	eb e3       	ldi	r30, 0x3B	; 59
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_u8SetPinValue+0x7e>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_u8SetPinValue+0x7a>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	b2 c0       	rjmp	.+356    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTA_REG,pin_no);
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	a1 f4       	brne	.+40     	; 0x1c22 <DIO_u8SetPinValue+0xb8>
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_u8SetPinValue+0xae>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_u8SetPinValue+0xaa>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	9b c0       	rjmp	.+310    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	98 c0       	rjmp	.+304    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_B:
			if(value==LOW)CLR_BIT(PORTB_REG,pin_no);
    1c28:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2a:	88 23       	and	r24, r24
    1c2c:	a9 f4       	brne	.+42     	; 0x1c58 <DIO_u8SetPinValue+0xee>
    1c2e:	a8 e3       	ldi	r26, 0x38	; 56
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e8 e3       	ldi	r30, 0x38	; 56
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_u8SetPinValue+0xe2>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_u8SetPinValue+0xde>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	80 c0       	rjmp	.+256    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTB_REG,pin_no);
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	a1 f4       	brne	.+40     	; 0x1c86 <DIO_u8SetPinValue+0x11c>
    1c5e:	a8 e3       	ldi	r26, 0x38	; 56
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e8 e3       	ldi	r30, 0x38	; 56
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_u8SetPinValue+0x112>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_u8SetPinValue+0x10e>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	69 c0       	rjmp	.+210    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	66 c0       	rjmp	.+204    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_C:
			if(value==LOW)CLR_BIT(PORTC_REG,pin_no);
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	88 23       	and	r24, r24
    1c90:	a9 f4       	brne	.+42     	; 0x1cbc <DIO_u8SetPinValue+0x152>
    1c92:	a5 e3       	ldi	r26, 0x35	; 53
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e5 e3       	ldi	r30, 0x35	; 53
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	48 2f       	mov	r20, r24
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 2e       	mov	r0, r18
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <DIO_u8SetPinValue+0x146>
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	0a 94       	dec	r0
    1cb2:	e2 f7       	brpl	.-8      	; 0x1cac <DIO_u8SetPinValue+0x142>
    1cb4:	80 95       	com	r24
    1cb6:	84 23       	and	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	4e c0       	rjmp	.+156    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTC_REG,pin_no);
    1cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	a1 f4       	brne	.+40     	; 0x1cea <DIO_u8SetPinValue+0x180>
    1cc2:	a5 e3       	ldi	r26, 0x35	; 53
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e5 e3       	ldi	r30, 0x35	; 53
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_u8SetPinValue+0x176>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_u8SetPinValue+0x172>
    1ce4:	84 2b       	or	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	37 c0       	rjmp	.+110    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	34 c0       	rjmp	.+104    	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_D:
			if(value==LOW)CLR_BIT(PORTD_REG,pin_no);
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	88 23       	and	r24, r24
    1cf4:	a9 f4       	brne	.+42     	; 0x1d20 <DIO_u8SetPinValue+0x1b6>
    1cf6:	a2 e3       	ldi	r26, 0x32	; 50
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e2 e3       	ldi	r30, 0x32	; 50
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_u8SetPinValue+0x1aa>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_u8SetPinValue+0x1a6>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	1c c0       	rjmp	.+56     	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTD_REG,pin_no);
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	a1 f4       	brne	.+40     	; 0x1d4e <DIO_u8SetPinValue+0x1e4>
    1d26:	a2 e3       	ldi	r26, 0x32	; 50
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e2 e3       	ldi	r30, 0x32	; 50
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_u8SetPinValue+0x1da>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_u8SetPinValue+0x1d6>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <DIO_u8SetPinValue+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5a:	26 96       	adiw	r28, 0x06	; 6
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <DIO_u8GetPinValue>:
uint8_t DIO_u8GetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	27 97       	sbiw	r28, 0x07	; 7
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	8a 83       	std	Y+2, r24	; 0x02
    1d82:	6b 83       	std	Y+3, r22	; 0x03
    1d84:	5d 83       	std	Y+5, r21	; 0x05
    1d86:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1d88:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	88 30       	cpi	r24, 0x08	; 8
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <DIO_u8GetPinValue+0x26>
    1d90:	74 c0       	rjmp	.+232    	; 0x1e7a <DIO_u8GetPinValue+0x10e>
	{
		switch(port_id)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	3f 83       	std	Y+7, r19	; 0x07
    1d9a:	2e 83       	std	Y+6, r18	; 0x06
    1d9c:	4e 81       	ldd	r20, Y+6	; 0x06
    1d9e:	5f 81       	ldd	r21, Y+7	; 0x07
    1da0:	41 30       	cpi	r20, 0x01	; 1
    1da2:	51 05       	cpc	r21, r1
    1da4:	59 f1       	breq	.+86     	; 0x1dfc <DIO_u8GetPinValue+0x90>
    1da6:	8e 81       	ldd	r24, Y+6	; 0x06
    1da8:	9f 81       	ldd	r25, Y+7	; 0x07
    1daa:	82 30       	cpi	r24, 0x02	; 2
    1dac:	91 05       	cpc	r25, r1
    1dae:	34 f4       	brge	.+12     	; 0x1dbc <DIO_u8GetPinValue+0x50>
    1db0:	2e 81       	ldd	r18, Y+6	; 0x06
    1db2:	3f 81       	ldd	r19, Y+7	; 0x07
    1db4:	21 15       	cp	r18, r1
    1db6:	31 05       	cpc	r19, r1
    1db8:	69 f0       	breq	.+26     	; 0x1dd4 <DIO_u8GetPinValue+0x68>
    1dba:	5c c0       	rjmp	.+184    	; 0x1e74 <DIO_u8GetPinValue+0x108>
    1dbc:	4e 81       	ldd	r20, Y+6	; 0x06
    1dbe:	5f 81       	ldd	r21, Y+7	; 0x07
    1dc0:	42 30       	cpi	r20, 0x02	; 2
    1dc2:	51 05       	cpc	r21, r1
    1dc4:	79 f1       	breq	.+94     	; 0x1e24 <DIO_u8GetPinValue+0xb8>
    1dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dca:	83 30       	cpi	r24, 0x03	; 3
    1dcc:	91 05       	cpc	r25, r1
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <DIO_u8GetPinValue+0x66>
    1dd0:	3d c0       	rjmp	.+122    	; 0x1e4c <DIO_u8GetPinValue+0xe0>
    1dd2:	50 c0       	rjmp	.+160    	; 0x1e74 <DIO_u8GetPinValue+0x108>
		{
		case PORT_A: *value = GET_BIT(PINA_REG,pin_no); break;
    1dd4:	e9 e3       	ldi	r30, 0x39	; 57
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a9 01       	movw	r20, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_u8GetPinValue+0x80>
    1de8:	55 95       	asr	r21
    1dea:	47 95       	ror	r20
    1dec:	8a 95       	dec	r24
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <DIO_u8GetPinValue+0x7c>
    1df0:	ca 01       	movw	r24, r20
    1df2:	81 70       	andi	r24, 0x01	; 1
    1df4:	ec 81       	ldd	r30, Y+4	; 0x04
    1df6:	fd 81       	ldd	r31, Y+5	; 0x05
    1df8:	80 83       	st	Z, r24
    1dfa:	41 c0       	rjmp	.+130    	; 0x1e7e <DIO_u8GetPinValue+0x112>
		case PORT_B: *value = GET_BIT(PINB_REG,pin_no); break;
    1dfc:	e6 e3       	ldi	r30, 0x36	; 54
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a9 01       	movw	r20, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_u8GetPinValue+0xa8>
    1e10:	55 95       	asr	r21
    1e12:	47 95       	ror	r20
    1e14:	8a 95       	dec	r24
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <DIO_u8GetPinValue+0xa4>
    1e18:	ca 01       	movw	r24, r20
    1e1a:	81 70       	andi	r24, 0x01	; 1
    1e1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e20:	80 83       	st	Z, r24
    1e22:	2d c0       	rjmp	.+90     	; 0x1e7e <DIO_u8GetPinValue+0x112>
		case PORT_C: *value = GET_BIT(PINC_REG,pin_no); break;
    1e24:	e3 e3       	ldi	r30, 0x33	; 51
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a9 01       	movw	r20, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <DIO_u8GetPinValue+0xd0>
    1e38:	55 95       	asr	r21
    1e3a:	47 95       	ror	r20
    1e3c:	8a 95       	dec	r24
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <DIO_u8GetPinValue+0xcc>
    1e40:	ca 01       	movw	r24, r20
    1e42:	81 70       	andi	r24, 0x01	; 1
    1e44:	ec 81       	ldd	r30, Y+4	; 0x04
    1e46:	fd 81       	ldd	r31, Y+5	; 0x05
    1e48:	80 83       	st	Z, r24
    1e4a:	19 c0       	rjmp	.+50     	; 0x1e7e <DIO_u8GetPinValue+0x112>
		case PORT_D: *value = GET_BIT(PIND_REG,pin_no); break;
    1e4c:	e0 e3       	ldi	r30, 0x30	; 48
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	88 2f       	mov	r24, r24
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a9 01       	movw	r20, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <DIO_u8GetPinValue+0xf8>
    1e60:	55 95       	asr	r21
    1e62:	47 95       	ror	r20
    1e64:	8a 95       	dec	r24
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <DIO_u8GetPinValue+0xf4>
    1e68:	ca 01       	movw	r24, r20
    1e6a:	81 70       	andi	r24, 0x01	; 1
    1e6c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e6e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e70:	80 83       	st	Z, r24
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <DIO_u8GetPinValue+0x112>
		default : error_status = E_NOK; break;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_u8GetPinValue+0x112>
		}
	}else error_status = E_NOK;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e80:	27 96       	adiw	r28, 0x07	; 7
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <DIO_u8IsPinOutPut>:
uint8_t DIO_u8IsPinOutPut(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	27 97       	sbiw	r28, 0x07	; 7
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	6b 83       	std	Y+3, r22	; 0x03
    1eaa:	5d 83       	std	Y+5, r21	; 0x05
    1eac:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1eae:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	88 30       	cpi	r24, 0x08	; 8
    1eb4:	08 f0       	brcs	.+2      	; 0x1eb8 <DIO_u8IsPinOutPut+0x26>
    1eb6:	74 c0       	rjmp	.+232    	; 0x1fa0 <DIO_u8IsPinOutPut+0x10e>
		{
			switch(port_id)
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	3f 83       	std	Y+7, r19	; 0x07
    1ec0:	2e 83       	std	Y+6, r18	; 0x06
    1ec2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ec6:	41 30       	cpi	r20, 0x01	; 1
    1ec8:	51 05       	cpc	r21, r1
    1eca:	59 f1       	breq	.+86     	; 0x1f22 <DIO_u8IsPinOutPut+0x90>
    1ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ece:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed0:	82 30       	cpi	r24, 0x02	; 2
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	34 f4       	brge	.+12     	; 0x1ee2 <DIO_u8IsPinOutPut+0x50>
    1ed6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ed8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eda:	21 15       	cp	r18, r1
    1edc:	31 05       	cpc	r19, r1
    1ede:	69 f0       	breq	.+26     	; 0x1efa <DIO_u8IsPinOutPut+0x68>
    1ee0:	5c c0       	rjmp	.+184    	; 0x1f9a <DIO_u8IsPinOutPut+0x108>
    1ee2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ee4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ee6:	42 30       	cpi	r20, 0x02	; 2
    1ee8:	51 05       	cpc	r21, r1
    1eea:	79 f1       	breq	.+94     	; 0x1f4a <DIO_u8IsPinOutPut+0xb8>
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef0:	83 30       	cpi	r24, 0x03	; 3
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <DIO_u8IsPinOutPut+0x66>
    1ef6:	3d c0       	rjmp	.+122    	; 0x1f72 <DIO_u8IsPinOutPut+0xe0>
    1ef8:	50 c0       	rjmp	.+160    	; 0x1f9a <DIO_u8IsPinOutPut+0x108>
			{
			case PORT_A: *value = GET_BIT(DDRA_REG,pin_no); break;
    1efa:	ea e3       	ldi	r30, 0x3A	; 58
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a9 01       	movw	r20, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <DIO_u8IsPinOutPut+0x80>
    1f0e:	55 95       	asr	r21
    1f10:	47 95       	ror	r20
    1f12:	8a 95       	dec	r24
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <DIO_u8IsPinOutPut+0x7c>
    1f16:	ca 01       	movw	r24, r20
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f1e:	80 83       	st	Z, r24
    1f20:	41 c0       	rjmp	.+130    	; 0x1fa4 <DIO_u8IsPinOutPut+0x112>
			case PORT_B: *value = GET_BIT(DDRB_REG,pin_no); break;
    1f22:	e7 e3       	ldi	r30, 0x37	; 55
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	88 2f       	mov	r24, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a9 01       	movw	r20, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <DIO_u8IsPinOutPut+0xa8>
    1f36:	55 95       	asr	r21
    1f38:	47 95       	ror	r20
    1f3a:	8a 95       	dec	r24
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <DIO_u8IsPinOutPut+0xa4>
    1f3e:	ca 01       	movw	r24, r20
    1f40:	81 70       	andi	r24, 0x01	; 1
    1f42:	ec 81       	ldd	r30, Y+4	; 0x04
    1f44:	fd 81       	ldd	r31, Y+5	; 0x05
    1f46:	80 83       	st	Z, r24
    1f48:	2d c0       	rjmp	.+90     	; 0x1fa4 <DIO_u8IsPinOutPut+0x112>
			case PORT_C: *value = GET_BIT(DDRC_REG,pin_no); break;
    1f4a:	e4 e3       	ldi	r30, 0x34	; 52
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a9 01       	movw	r20, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <DIO_u8IsPinOutPut+0xd0>
    1f5e:	55 95       	asr	r21
    1f60:	47 95       	ror	r20
    1f62:	8a 95       	dec	r24
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <DIO_u8IsPinOutPut+0xcc>
    1f66:	ca 01       	movw	r24, r20
    1f68:	81 70       	andi	r24, 0x01	; 1
    1f6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f6e:	80 83       	st	Z, r24
    1f70:	19 c0       	rjmp	.+50     	; 0x1fa4 <DIO_u8IsPinOutPut+0x112>
			case PORT_D: *value = GET_BIT(DDRD_REG,pin_no); break;
    1f72:	e1 e3       	ldi	r30, 0x31	; 49
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a9 01       	movw	r20, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <DIO_u8IsPinOutPut+0xf8>
    1f86:	55 95       	asr	r21
    1f88:	47 95       	ror	r20
    1f8a:	8a 95       	dec	r24
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <DIO_u8IsPinOutPut+0xf4>
    1f8e:	ca 01       	movw	r24, r20
    1f90:	81 70       	andi	r24, 0x01	; 1
    1f92:	ec 81       	ldd	r30, Y+4	; 0x04
    1f94:	fd 81       	ldd	r31, Y+5	; 0x05
    1f96:	80 83       	st	Z, r24
    1f98:	05 c0       	rjmp	.+10     	; 0x1fa4 <DIO_u8IsPinOutPut+0x112>
			default : error_status = E_NOK; break;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_u8IsPinOutPut+0x112>
			}
		}else error_status = E_NOK;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa6:	27 96       	adiw	r28, 0x07	; 7
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <DIO_u8SetPullUpMode>:
uint8_t DIO_u8SetPullUpMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	2e 97       	sbiw	r28, 0x0e	; 14
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	6b 83       	std	Y+3, r22	; 0x03
    1fd0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1fd2:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	88 30       	cpi	r24, 0x08	; 8
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <DIO_u8SetPullUpMode+0x24>
    1fda:	db c0       	rjmp	.+438    	; 0x2192 <DIO_u8SetPullUpMode+0x1da>
	{
	switch(port_id)
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	3e 87       	std	Y+14, r19	; 0x0e
    1fe4:	2d 87       	std	Y+13, r18	; 0x0d
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	91 05       	cpc	r25, r1
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <DIO_u8SetPullUpMode+0x3a>
    1ff0:	44 c0       	rjmp	.+136    	; 0x207a <DIO_u8SetPullUpMode+0xc2>
    1ff2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ff4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <DIO_u8SetPullUpMode+0x4e>
    1ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	71 f0       	breq	.+28     	; 0x2020 <DIO_u8SetPullUpMode+0x68>
    2004:	c3 c0       	rjmp	.+390    	; 0x218c <DIO_u8SetPullUpMode+0x1d4>
    2006:	2d 85       	ldd	r18, Y+13	; 0x0d
    2008:	3e 85       	ldd	r19, Y+14	; 0x0e
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 05       	cpc	r19, r1
    200e:	09 f4       	brne	.+2      	; 0x2012 <DIO_u8SetPullUpMode+0x5a>
    2010:	62 c0       	rjmp	.+196    	; 0x20d6 <DIO_u8SetPullUpMode+0x11e>
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	83 30       	cpi	r24, 0x03	; 3
    2018:	91 05       	cpc	r25, r1
    201a:	09 f4       	brne	.+2      	; 0x201e <DIO_u8SetPullUpMode+0x66>
    201c:	89 c0       	rjmp	.+274    	; 0x2130 <DIO_u8SetPullUpMode+0x178>
    201e:	b6 c0       	rjmp	.+364    	; 0x218c <DIO_u8SetPullUpMode+0x1d4>
	{
	case PORT_A: mode==Enabled?SET_BIT(PORTA_REG,pin_no):CLR_BIT(PORTA_REG,pin_no); break;
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	a9 f4       	brne	.+42     	; 0x2050 <DIO_u8SetPullUpMode+0x98>
    2026:	ab e3       	ldi	r26, 0x3B	; 59
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8SetPullUpMode+0x8c>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8SetPullUpMode+0x88>
    2048:	84 2b       	or	r24, r20
    204a:	8c 93       	st	X, r24
    204c:	9c 91       	ld	r25, X
    204e:	a3 c0       	rjmp	.+326    	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
    2050:	ab e3       	ldi	r26, 0x3B	; 59
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	eb e3       	ldi	r30, 0x3B	; 59
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 c0       	rjmp	.+4      	; 0x206c <DIO_u8SetPullUpMode+0xb4>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	2a 95       	dec	r18
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <DIO_u8SetPullUpMode+0xb0>
    2070:	80 95       	com	r24
    2072:	84 23       	and	r24, r20
    2074:	8c 93       	st	X, r24
    2076:	2c 91       	ld	r18, X
    2078:	8e c0       	rjmp	.+284    	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
	case PORT_B: mode==Enabled?SET_BIT(PORTB_REG,pin_no):CLR_BIT(PORTB_REG,pin_no); break;
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	a9 f4       	brne	.+42     	; 0x20aa <DIO_u8SetPullUpMode+0xf2>
    2080:	a8 e3       	ldi	r26, 0x38	; 56
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e8 e3       	ldi	r30, 0x38	; 56
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	48 2f       	mov	r20, r24
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <DIO_u8SetPullUpMode+0xe6>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <DIO_u8SetPullUpMode+0xe2>
    20a2:	84 2b       	or	r24, r20
    20a4:	8c 93       	st	X, r24
    20a6:	3c 91       	ld	r19, X
    20a8:	76 c0       	rjmp	.+236    	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
    20aa:	a8 e3       	ldi	r26, 0x38	; 56
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e8 e3       	ldi	r30, 0x38	; 56
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <DIO_u8SetPullUpMode+0x110>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <DIO_u8SetPullUpMode+0x10c>
    20cc:	80 95       	com	r24
    20ce:	84 23       	and	r24, r20
    20d0:	8c 93       	st	X, r24
    20d2:	8c 91       	ld	r24, X
    20d4:	60 c0       	rjmp	.+192    	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
	case PORT_C: mode==Enabled?SET_BIT(PORTC_REG,pin_no):CLR_BIT(PORTC_REG,pin_no); break;
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	a9 f4       	brne	.+42     	; 0x2106 <DIO_u8SetPullUpMode+0x14e>
    20dc:	a5 e3       	ldi	r26, 0x35	; 53
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e5 e3       	ldi	r30, 0x35	; 53
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_u8SetPullUpMode+0x142>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_u8SetPullUpMode+0x13e>
    20fe:	84 2b       	or	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	9c 91       	ld	r25, X
    2104:	48 c0       	rjmp	.+144    	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
    2106:	a5 e3       	ldi	r26, 0x35	; 53
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e3       	ldi	r30, 0x35	; 53
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_u8SetPullUpMode+0x16a>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	2a 95       	dec	r18
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_u8SetPullUpMode+0x166>
    2126:	80 95       	com	r24
    2128:	84 23       	and	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	2c 91       	ld	r18, X
    212e:	33 c0       	rjmp	.+102    	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
	case PORT_D: mode==Enabled?SET_BIT(PORTD_REG,pin_no):CLR_BIT(PORTD_REG,pin_no); break;
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	a9 f4       	brne	.+42     	; 0x2160 <DIO_u8SetPullUpMode+0x1a8>
    2136:	a2 e3       	ldi	r26, 0x32	; 50
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e2 e3       	ldi	r30, 0x32	; 50
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8SetPullUpMode+0x19c>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8SetPullUpMode+0x198>
    2158:	84 2b       	or	r24, r20
    215a:	8c 93       	st	X, r24
    215c:	3c 91       	ld	r19, X
    215e:	1b c0       	rjmp	.+54     	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
    2160:	a2 e3       	ldi	r26, 0x32	; 50
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e2 e3       	ldi	r30, 0x32	; 50
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	48 2f       	mov	r20, r24
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	02 2e       	mov	r0, r18
    2178:	02 c0       	rjmp	.+4      	; 0x217e <DIO_u8SetPullUpMode+0x1c6>
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	0a 94       	dec	r0
    2180:	e2 f7       	brpl	.-8      	; 0x217a <DIO_u8SetPullUpMode+0x1c2>
    2182:	80 95       	com	r24
    2184:	84 23       	and	r24, r20
    2186:	8c 93       	st	X, r24
    2188:	8c 91       	ld	r24, X
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
	default : error_status = E_NOK; break;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_u8SetPullUpMode+0x1de>
	}
	}else error_status=E_NOK;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2196:	89 81       	ldd	r24, Y+1	; 0x01
}
    2198:	2e 96       	adiw	r28, 0x0e	; 14
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <DIO_u8SetPortMode>:

uint8_t DIO_u8SetPortMode(uint8_t port_id,uint8_t mode)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <DIO_u8SetPortMode+0x6>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <DIO_u8SetPortMode+0x8>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	8a 83       	std	Y+2, r24	; 0x02
    21ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    21bc:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	3d 83       	std	Y+5, r19	; 0x05
    21c6:	2c 83       	std	Y+4, r18	; 0x04
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	9d 81       	ldd	r25, Y+5	; 0x05
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	91 05       	cpc	r25, r1
    21d0:	d1 f0       	breq	.+52     	; 0x2206 <DIO_u8SetPortMode+0x5c>
    21d2:	2c 81       	ldd	r18, Y+4	; 0x04
    21d4:	3d 81       	ldd	r19, Y+5	; 0x05
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	2c f4       	brge	.+10     	; 0x21e6 <DIO_u8SetPortMode+0x3c>
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	9d 81       	ldd	r25, Y+5	; 0x05
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	61 f0       	breq	.+24     	; 0x21fc <DIO_u8SetPortMode+0x52>
    21e4:	1f c0       	rjmp	.+62     	; 0x2224 <DIO_u8SetPortMode+0x7a>
    21e6:	2c 81       	ldd	r18, Y+4	; 0x04
    21e8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ea:	22 30       	cpi	r18, 0x02	; 2
    21ec:	31 05       	cpc	r19, r1
    21ee:	81 f0       	breq	.+32     	; 0x2210 <DIO_u8SetPortMode+0x66>
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	83 30       	cpi	r24, 0x03	; 3
    21f6:	91 05       	cpc	r25, r1
    21f8:	81 f0       	breq	.+32     	; 0x221a <DIO_u8SetPortMode+0x70>
    21fa:	14 c0       	rjmp	.+40     	; 0x2224 <DIO_u8SetPortMode+0x7a>
	{
	case PORT_A: DDRA_REG = mode; break;
    21fc:	ea e3       	ldi	r30, 0x3A	; 58
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	80 83       	st	Z, r24
    2204:	11 c0       	rjmp	.+34     	; 0x2228 <DIO_u8SetPortMode+0x7e>
	case PORT_B: DDRB_REG = mode; break;
    2206:	e7 e3       	ldi	r30, 0x37	; 55
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	80 83       	st	Z, r24
    220e:	0c c0       	rjmp	.+24     	; 0x2228 <DIO_u8SetPortMode+0x7e>
	case PORT_C: DDRC_REG = mode; break;
    2210:	e4 e3       	ldi	r30, 0x34	; 52
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	80 83       	st	Z, r24
    2218:	07 c0       	rjmp	.+14     	; 0x2228 <DIO_u8SetPortMode+0x7e>
	case PORT_D: DDRD_REG = mode; break;
    221a:	e1 e3       	ldi	r30, 0x31	; 49
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	80 83       	st	Z, r24
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_u8SetPortMode+0x7e>
	default : error_status = E_NOK; break;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <DIO_u8SetPortValue>:
uint8_t DIO_u8SetPortValue(uint8_t port_id,uint8_t value)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	00 d0       	rcall	.+0      	; 0x2240 <DIO_u8SetPortValue+0x6>
    2240:	00 d0       	rcall	.+0      	; 0x2242 <DIO_u8SetPortValue+0x8>
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	8a 83       	std	Y+2, r24	; 0x02
    224a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    224c:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	3d 83       	std	Y+5, r19	; 0x05
    2256:	2c 83       	std	Y+4, r18	; 0x04
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	d1 f0       	breq	.+52     	; 0x2296 <DIO_u8SetPortValue+0x5c>
    2262:	2c 81       	ldd	r18, Y+4	; 0x04
    2264:	3d 81       	ldd	r19, Y+5	; 0x05
    2266:	22 30       	cpi	r18, 0x02	; 2
    2268:	31 05       	cpc	r19, r1
    226a:	2c f4       	brge	.+10     	; 0x2276 <DIO_u8SetPortValue+0x3c>
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	9d 81       	ldd	r25, Y+5	; 0x05
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	61 f0       	breq	.+24     	; 0x228c <DIO_u8SetPortValue+0x52>
    2274:	1f c0       	rjmp	.+62     	; 0x22b4 <DIO_u8SetPortValue+0x7a>
    2276:	2c 81       	ldd	r18, Y+4	; 0x04
    2278:	3d 81       	ldd	r19, Y+5	; 0x05
    227a:	22 30       	cpi	r18, 0x02	; 2
    227c:	31 05       	cpc	r19, r1
    227e:	81 f0       	breq	.+32     	; 0x22a0 <DIO_u8SetPortValue+0x66>
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	9d 81       	ldd	r25, Y+5	; 0x05
    2284:	83 30       	cpi	r24, 0x03	; 3
    2286:	91 05       	cpc	r25, r1
    2288:	81 f0       	breq	.+32     	; 0x22aa <DIO_u8SetPortValue+0x70>
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A: PORTA_REG = value; break;
    228c:	eb e3       	ldi	r30, 0x3B	; 59
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	80 83       	st	Z, r24
    2294:	11 c0       	rjmp	.+34     	; 0x22b8 <DIO_u8SetPortValue+0x7e>
		case PORT_B: PORTB_REG = value; break;
    2296:	e8 e3       	ldi	r30, 0x38	; 56
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	80 83       	st	Z, r24
    229e:	0c c0       	rjmp	.+24     	; 0x22b8 <DIO_u8SetPortValue+0x7e>
		case PORT_C: PORTC_REG = value; break;
    22a0:	e5 e3       	ldi	r30, 0x35	; 53
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	80 83       	st	Z, r24
    22a8:	07 c0       	rjmp	.+14     	; 0x22b8 <DIO_u8SetPortValue+0x7e>
		case PORT_D: PORTD_REG = value; break;
    22aa:	e2 e3       	ldi	r30, 0x32	; 50
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	80 83       	st	Z, r24
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <DIO_u8SetPortValue+0x7e>
		default : error_status = E_NOK; break;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <DIO_u8GetPortValue>:
uint8_t DIO_u8GetPortValue(uint8_t port_id,uint8_t * value)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <DIO_u8GetPortValue+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <DIO_u8GetPortValue+0x8>
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <DIO_u8GetPortValue+0xa>
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	7c 83       	std	Y+4, r23	; 0x04
    22dc:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    22de:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	3e 83       	std	Y+6, r19	; 0x06
    22e8:	2d 83       	std	Y+5, r18	; 0x05
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	e1 f0       	breq	.+56     	; 0x232c <DIO_u8GetPortValue+0x62>
    22f4:	2d 81       	ldd	r18, Y+5	; 0x05
    22f6:	3e 81       	ldd	r19, Y+6	; 0x06
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	31 05       	cpc	r19, r1
    22fc:	2c f4       	brge	.+10     	; 0x2308 <DIO_u8GetPortValue+0x3e>
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	61 f0       	breq	.+24     	; 0x231e <DIO_u8GetPortValue+0x54>
    2306:	27 c0       	rjmp	.+78     	; 0x2356 <DIO_u8GetPortValue+0x8c>
    2308:	2d 81       	ldd	r18, Y+5	; 0x05
    230a:	3e 81       	ldd	r19, Y+6	; 0x06
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	a1 f0       	breq	.+40     	; 0x233a <DIO_u8GetPortValue+0x70>
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	91 05       	cpc	r25, r1
    231a:	b1 f0       	breq	.+44     	; 0x2348 <DIO_u8GetPortValue+0x7e>
    231c:	1c c0       	rjmp	.+56     	; 0x2356 <DIO_u8GetPortValue+0x8c>
		{
		case PORT_A: *value = PINA_REG; break;
    231e:	e9 e3       	ldi	r30, 0x39	; 57
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	eb 81       	ldd	r30, Y+3	; 0x03
    2326:	fc 81       	ldd	r31, Y+4	; 0x04
    2328:	80 83       	st	Z, r24
    232a:	17 c0       	rjmp	.+46     	; 0x235a <DIO_u8GetPortValue+0x90>
		case PORT_B: *value = PINB_REG; break;
    232c:	e6 e3       	ldi	r30, 0x36	; 54
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	eb 81       	ldd	r30, Y+3	; 0x03
    2334:	fc 81       	ldd	r31, Y+4	; 0x04
    2336:	80 83       	st	Z, r24
    2338:	10 c0       	rjmp	.+32     	; 0x235a <DIO_u8GetPortValue+0x90>
		case PORT_C: *value = PINC_REG; break;
    233a:	e3 e3       	ldi	r30, 0x33	; 51
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	eb 81       	ldd	r30, Y+3	; 0x03
    2342:	fc 81       	ldd	r31, Y+4	; 0x04
    2344:	80 83       	st	Z, r24
    2346:	09 c0       	rjmp	.+18     	; 0x235a <DIO_u8GetPortValue+0x90>
		case PORT_D: *value = PIND_REG; break;
    2348:	e0 e3       	ldi	r30, 0x30	; 48
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	eb 81       	ldd	r30, Y+3	; 0x03
    2350:	fc 81       	ldd	r31, Y+4	; 0x04
    2352:	80 83       	st	Z, r24
    2354:	02 c0       	rjmp	.+4      	; 0x235a <DIO_u8GetPortValue+0x90>
		default : error_status = E_NOK; break;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    235a:	89 81       	ldd	r24, Y+1	; 0x01
}
    235c:	26 96       	adiw	r28, 0x06	; 6
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <DIO_u8SetPortPullUpMode>:

uint8_t DIO_u8SetPortPullUpMode(uint8_t port_id,uint8_t mode)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <DIO_u8SetPortPullUpMode+0x6>
    2374:	00 d0       	rcall	.+0      	; 0x2376 <DIO_u8SetPortPullUpMode+0x8>
    2376:	0f 92       	push	r0
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	8a 83       	std	Y+2, r24	; 0x02
    237e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    2380:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	3d 83       	std	Y+5, r19	; 0x05
    238a:	2c 83       	std	Y+4, r18	; 0x04
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	9d 81       	ldd	r25, Y+5	; 0x05
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	91 05       	cpc	r25, r1
    2394:	d1 f0       	breq	.+52     	; 0x23ca <DIO_u8SetPortPullUpMode+0x5c>
    2396:	2c 81       	ldd	r18, Y+4	; 0x04
    2398:	3d 81       	ldd	r19, Y+5	; 0x05
    239a:	22 30       	cpi	r18, 0x02	; 2
    239c:	31 05       	cpc	r19, r1
    239e:	2c f4       	brge	.+10     	; 0x23aa <DIO_u8SetPortPullUpMode+0x3c>
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
    23a2:	9d 81       	ldd	r25, Y+5	; 0x05
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	61 f0       	breq	.+24     	; 0x23c0 <DIO_u8SetPortPullUpMode+0x52>
    23a8:	1f c0       	rjmp	.+62     	; 0x23e8 <DIO_u8SetPortPullUpMode+0x7a>
    23aa:	2c 81       	ldd	r18, Y+4	; 0x04
    23ac:	3d 81       	ldd	r19, Y+5	; 0x05
    23ae:	22 30       	cpi	r18, 0x02	; 2
    23b0:	31 05       	cpc	r19, r1
    23b2:	81 f0       	breq	.+32     	; 0x23d4 <DIO_u8SetPortPullUpMode+0x66>
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	9d 81       	ldd	r25, Y+5	; 0x05
    23b8:	83 30       	cpi	r24, 0x03	; 3
    23ba:	91 05       	cpc	r25, r1
    23bc:	81 f0       	breq	.+32     	; 0x23de <DIO_u8SetPortPullUpMode+0x70>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <DIO_u8SetPortPullUpMode+0x7a>
	{
	case PORT_A: PORTA_REG=mode; break;
    23c0:	eb e3       	ldi	r30, 0x3B	; 59
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	80 83       	st	Z, r24
    23c8:	11 c0       	rjmp	.+34     	; 0x23ec <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_B: PORTB_REG=mode; break;
    23ca:	e8 e3       	ldi	r30, 0x38	; 56
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	80 83       	st	Z, r24
    23d2:	0c c0       	rjmp	.+24     	; 0x23ec <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_C: PORTC_REG=mode; break;
    23d4:	e5 e3       	ldi	r30, 0x35	; 53
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	80 83       	st	Z, r24
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_D: PORTD_REG=mode; break;
    23de:	e2 e3       	ldi	r30, 0x32	; 50
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	80 83       	st	Z, r24
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <DIO_u8SetPortPullUpMode+0x7e>
	default : error_status = E_NOK; break;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <ADC_vidAdcInit>:
uint16_* ADC_READ=NULL;

static void ADC_vidSetMultiPlexer(uint8_t adc_pin);

void ADC_vidAdcInit(uint8_t voltage_reference)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <ADC_vidAdcInit+0x6>
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,7);
    240c:	a6 e2       	ldi	r26, 0x26	; 38
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e6 e2       	ldi	r30, 0x26	; 38
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 68       	ori	r24, 0x80	; 128
    2418:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,2);
    241a:	a6 e2       	ldi	r26, 0x26	; 38
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e6 e2       	ldi	r30, 0x26	; 38
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8b 7f       	andi	r24, 0xFB	; 251
    2426:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    2428:	a6 e2       	ldi	r26, 0x26	; 38
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e6 e2       	ldi	r30, 0x26	; 38
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	82 60       	ori	r24, 0x02	; 2
    2434:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    2436:	a6 e2       	ldi	r26, 0x26	; 38
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e6 e2       	ldi	r30, 0x26	; 38
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	8e 7f       	andi	r24, 0xFE	; 254
    2442:	8c 93       	st	X, r24
	switch(voltage_reference)
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	3b 83       	std	Y+3, r19	; 0x03
    244c:	2a 83       	std	Y+2, r18	; 0x02
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	91 05       	cpc	r25, r1
    2456:	c9 f0       	breq	.+50     	; 0x248a <ADC_vidAdcInit+0x8c>
    2458:	2a 81       	ldd	r18, Y+2	; 0x02
    245a:	3b 81       	ldd	r19, Y+3	; 0x03
    245c:	22 30       	cpi	r18, 0x02	; 2
    245e:	31 05       	cpc	r19, r1
    2460:	29 f0       	breq	.+10     	; 0x246c <ADC_vidAdcInit+0x6e>
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	f9 f0       	breq	.+62     	; 0x24a8 <ADC_vidAdcInit+0xaa>
    246a:	2c c0       	rjmp	.+88     	; 0x24c4 <ADC_vidAdcInit+0xc6>
	{
	case AREF_VOLTAGE:
		CLR_BIT(ADMUX,7);
    246c:	a7 e2       	ldi	r26, 0x27	; 39
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e7 e2       	ldi	r30, 0x27	; 39
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	8f 77       	andi	r24, 0x7F	; 127
    2478:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,6);
    247a:	a7 e2       	ldi	r26, 0x27	; 39
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e7 e2       	ldi	r30, 0x27	; 39
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8f 7b       	andi	r24, 0xBF	; 191
    2486:	8c 93       	st	X, r24
    2488:	1d c0       	rjmp	.+58     	; 0x24c4 <ADC_vidAdcInit+0xc6>
		break;
	case VCC:
		CLR_BIT(ADMUX,7);
    248a:	a7 e2       	ldi	r26, 0x27	; 39
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e7 e2       	ldi	r30, 0x27	; 39
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	8f 77       	andi	r24, 0x7F	; 127
    2496:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2498:	a7 e2       	ldi	r26, 0x27	; 39
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e7 e2       	ldi	r30, 0x27	; 39
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	80 64       	ori	r24, 0x40	; 64
    24a4:	8c 93       	st	X, r24
    24a6:	0e c0       	rjmp	.+28     	; 0x24c4 <ADC_vidAdcInit+0xc6>
		break;
	case INTERNAL_2_56_:
		SET_BIT(ADMUX,7);
    24a8:	a7 e2       	ldi	r26, 0x27	; 39
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e7 e2       	ldi	r30, 0x27	; 39
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	80 68       	ori	r24, 0x80	; 128
    24b4:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    24b6:	a7 e2       	ldi	r26, 0x27	; 39
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e7 e2       	ldi	r30, 0x27	; 39
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	80 64       	ori	r24, 0x40	; 64
    24c2:	8c 93       	st	X, r24
	ADC_vidAdcPinInit(ADC_AUTO_TRIGGER_PIN);
	ADC_vidSetMultiPlexer(ADC_AUTO_TRIGGER_PIN);
	ADC_VIDSetAutoTriggerMode(INT_0);
	SET_BIT(ADCSRA,5);
#elif ADC_TRIGGERING_MODE == 1
	CLR_BIT(ADCSRA,5);
    24c4:	a6 e2       	ldi	r26, 0x26	; 38
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	e6 e2       	ldi	r30, 0x26	; 38
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	8f 7d       	andi	r24, 0xDF	; 223
    24d0:	8c 93       	st	X, r24
#endif

#if ADC_READING_TECHNIQUE == 0
	SET_BIT(ADCSRA,3);
    24d2:	a6 e2       	ldi	r26, 0x26	; 38
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e6 e2       	ldi	r30, 0x26	; 38
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	88 60       	ori	r24, 0x08	; 8
    24de:	8c 93       	st	X, r24
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
#endif

#if ADC_READING_NO_OF_BITS == 0
	SET_BIT(ADMUX,5);
#elif ADC_READING_NO_OF_BITS == 1
	CLR_BIT(ADMUX,5);
    24e6:	a7 e2       	ldi	r26, 0x27	; 39
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e7 e2       	ldi	r30, 0x27	; 39
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	8f 7d       	andi	r24, 0xDF	; 223
    24f2:	8c 93       	st	X, r24
#endif

}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <ADC_vidAdcPinInit>:

void ADC_vidAdcPinInit(uint8_t adc_pin)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <ADC_vidAdcPinInit+0x6>
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	8a 83       	std	Y+2, r24	; 0x02
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	88 30       	cpi	r24, 0x08	; 8
    2510:	c0 f4       	brcc	.+48     	; 0x2542 <ADC_vidAdcPinInit+0x42>
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	fc 01       	movw	r30, r24
    251e:	eb 5e       	subi	r30, 0xEB	; 235
    2520:	fb 4f       	sbci	r31, 0xFB	; 251
    2522:	20 81       	ld	r18, Z
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	fc 01       	movw	r30, r24
    2530:	ea 5e       	subi	r30, 0xEA	; 234
    2532:	fb 4f       	sbci	r31, 0xFB	; 251
    2534:	90 81       	ld	r25, Z
    2536:	82 2f       	mov	r24, r18
    2538:	69 2f       	mov	r22, r25
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
    2540:	22 c0       	rjmp	.+68     	; 0x2586 <ADC_vidAdcPinInit+0x86>
	else if(adc_pin==8)
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 30       	cpi	r24, 0x08	; 8
    2546:	f9 f4       	brne	.+62     	; 0x2586 <ADC_vidAdcPinInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2548:	19 82       	std	Y+1, r1	; 0x01
    254a:	1a c0       	rjmp	.+52     	; 0x2580 <ADC_vidAdcPinInit+0x80>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	fc 01       	movw	r30, r24
    2558:	eb 5e       	subi	r30, 0xEB	; 235
    255a:	fb 4f       	sbci	r31, 0xFB	; 251
    255c:	20 81       	ld	r18, Z
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	fc 01       	movw	r30, r24
    256a:	ea 5e       	subi	r30, 0xEA	; 234
    256c:	fb 4f       	sbci	r31, 0xFB	; 251
    256e:	90 81       	ld	r25, Z
    2570:	82 2f       	mov	r24, r18
    2572:	69 2f       	mov	r22, r25
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
void ADC_vidAdcPinInit(uint8_t adc_pin)
{
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
	else if(adc_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	8f 5f       	subi	r24, 0xFF	; 255
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	88 30       	cpi	r24, 0x08	; 8
    2584:	18 f3       	brcs	.-58     	; 0x254c <ADC_vidAdcPinInit+0x4c>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
		}
	}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <ADC_vidAdcGetRead>:

void ADC_vidAdcGetRead(uint8_t adc_pin)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetMultiPlexer(adc_pin);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_vidSetMultiPlexer>
	SET_BIT(ADCSRA,6);
    25a2:	a6 e2       	ldi	r26, 0x26	; 38
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e6 e2       	ldi	r30, 0x26	; 38
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 64       	ori	r24, 0x40	; 64
    25ae:	8c 93       	st	X, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <ADC_vidGetAutoTriggerRead>:

void ADC_vidGetAutoTriggerRead()
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <ADC_VIDSetAutoTriggerMode>:

void ADC_VIDSetAutoTriggerMode(uint8_t mode)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	0f 92       	push	r0
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	91 05       	cpc	r25, r1
    25dc:	a9 f4       	brne	.+42     	; 0x2608 <ADC_VIDSetAutoTriggerMode+0x42>
	{
	case INT_0:
		CLR_BIT(SFIOR,5);
    25de:	a0 e5       	ldi	r26, 0x50	; 80
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e0 e5       	ldi	r30, 0x50	; 80
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 7d       	andi	r24, 0xDF	; 223
    25ea:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    25ec:	a0 e5       	ldi	r26, 0x50	; 80
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e0 e5       	ldi	r30, 0x50	; 80
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	80 64       	ori	r24, 0x40	; 64
    25f8:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,7);
    25fa:	a0 e5       	ldi	r26, 0x50	; 80
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e0 e5       	ldi	r30, 0x50	; 80
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	8f 77       	andi	r24, 0x7F	; 127
    2606:	8c 93       	st	X, r24
		break;
	}
}
    2608:	0f 90       	pop	r0
    260a:	cf 91       	pop	r28
    260c:	df 91       	pop	r29
    260e:	08 95       	ret

00002610 <ADC_vidSetReadingVariable>:

void ADC_vidSetReadingVariable(uint16_* adc_read)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	00 d0       	rcall	.+0      	; 0x2616 <ADC_vidSetReadingVariable+0x6>
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	9a 83       	std	Y+2, r25	; 0x02
    261c:	89 83       	std	Y+1, r24	; 0x01
	ADC_READ=adc_read;
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	9a 81       	ldd	r25, Y+2	; 0x02
    2622:	90 93 3f 04 	sts	0x043F, r25
    2626:	80 93 3e 04 	sts	0x043E, r24
}
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <ADC_vidSetCallBack>:

void ADC_vidSetCallBack(void (*func)(void))
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	00 d0       	rcall	.+0      	; 0x263a <ADC_vidSetCallBack+0x6>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
	vector_16=func;
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	90 93 3d 04 	sts	0x043D, r25
    264a:	80 93 3c 04 	sts	0x043C, r24
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
#if ADC_READING_TECHNIQUE == 0
	if(ADC_READ!=NULL)
    2682:	80 91 3e 04 	lds	r24, 0x043E
    2686:	90 91 3f 04 	lds	r25, 0x043F
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	59 f0       	breq	.+22     	; 0x26a4 <__vector_16+0x4c>
	{
#if ADC_READING_NO_OF_BITS == 1
	*ADC_READ=ADCL16;
    268e:	e0 91 3e 04 	lds	r30, 0x043E
    2692:	f0 91 3f 04 	lds	r31, 0x043F
    2696:	a4 e2       	ldi	r26, 0x24	; 36
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	8d 91       	ld	r24, X+
    269c:	9c 91       	ld	r25, X
    269e:	11 97       	sbiw	r26, 0x01	; 1
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	}
	if(vector_16!=NULL)vector_16();
    26a4:	80 91 3c 04 	lds	r24, 0x043C
    26a8:	90 91 3d 04 	lds	r25, 0x043D
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	29 f0       	breq	.+10     	; 0x26ba <__vector_16+0x62>
    26b0:	e0 91 3c 04 	lds	r30, 0x043C
    26b4:	f0 91 3d 04 	lds	r31, 0x043D
    26b8:	09 95       	icall
#endif
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	bf 91       	pop	r27
    26c4:	af 91       	pop	r26
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	7f 91       	pop	r23
    26cc:	6f 91       	pop	r22
    26ce:	5f 91       	pop	r21
    26d0:	4f 91       	pop	r20
    26d2:	3f 91       	pop	r19
    26d4:	2f 91       	pop	r18
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	0f 90       	pop	r0
    26dc:	1f 90       	pop	r1
    26de:	18 95       	reti

000026e0 <ADC_vidSetMultiPlexer>:

static void ADC_vidSetMultiPlexer(uint8_t adc_pin)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <ADC_vidSetMultiPlexer+0x6>
    26e6:	0f 92       	push	r0
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	89 83       	std	Y+1, r24	; 0x01
	switch(adc_pin)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	3b 83       	std	Y+3, r19	; 0x03
    26f6:	2a 83       	std	Y+2, r18	; 0x02
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	91 05       	cpc	r25, r1
    2700:	09 f4       	brne	.+2      	; 0x2704 <ADC_vidSetMultiPlexer+0x24>
    2702:	9b c0       	rjmp	.+310    	; 0x283a <ADC_vidSetMultiPlexer+0x15a>
    2704:	2a 81       	ldd	r18, Y+2	; 0x02
    2706:	3b 81       	ldd	r19, Y+3	; 0x03
    2708:	24 30       	cpi	r18, 0x04	; 4
    270a:	31 05       	cpc	r19, r1
    270c:	8c f4       	brge	.+34     	; 0x2730 <ADC_vidSetMultiPlexer+0x50>
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	9b 81       	ldd	r25, Y+3	; 0x03
    2712:	81 30       	cpi	r24, 0x01	; 1
    2714:	91 05       	cpc	r25, r1
    2716:	09 f4       	brne	.+2      	; 0x271a <ADC_vidSetMultiPlexer+0x3a>
    2718:	48 c0       	rjmp	.+144    	; 0x27aa <ADC_vidSetMultiPlexer+0xca>
    271a:	2a 81       	ldd	r18, Y+2	; 0x02
    271c:	3b 81       	ldd	r19, Y+3	; 0x03
    271e:	22 30       	cpi	r18, 0x02	; 2
    2720:	31 05       	cpc	r19, r1
    2722:	0c f0       	brlt	.+2      	; 0x2726 <ADC_vidSetMultiPlexer+0x46>
    2724:	66 c0       	rjmp	.+204    	; 0x27f2 <ADC_vidSetMultiPlexer+0x112>
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	d1 f0       	breq	.+52     	; 0x2762 <ADC_vidSetMultiPlexer+0x82>
    272e:	38 c1       	rjmp	.+624    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
    2730:	2a 81       	ldd	r18, Y+2	; 0x02
    2732:	3b 81       	ldd	r19, Y+3	; 0x03
    2734:	25 30       	cpi	r18, 0x05	; 5
    2736:	31 05       	cpc	r19, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <ADC_vidSetMultiPlexer+0x5c>
    273a:	c7 c0       	rjmp	.+398    	; 0x28ca <ADC_vidSetMultiPlexer+0x1ea>
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	85 30       	cpi	r24, 0x05	; 5
    2742:	91 05       	cpc	r25, r1
    2744:	0c f4       	brge	.+2      	; 0x2748 <ADC_vidSetMultiPlexer+0x68>
    2746:	9d c0       	rjmp	.+314    	; 0x2882 <ADC_vidSetMultiPlexer+0x1a2>
    2748:	2a 81       	ldd	r18, Y+2	; 0x02
    274a:	3b 81       	ldd	r19, Y+3	; 0x03
    274c:	26 30       	cpi	r18, 0x06	; 6
    274e:	31 05       	cpc	r19, r1
    2750:	09 f4       	brne	.+2      	; 0x2754 <ADC_vidSetMultiPlexer+0x74>
    2752:	df c0       	rjmp	.+446    	; 0x2912 <ADC_vidSetMultiPlexer+0x232>
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	9b 81       	ldd	r25, Y+3	; 0x03
    2758:	87 30       	cpi	r24, 0x07	; 7
    275a:	91 05       	cpc	r25, r1
    275c:	09 f4       	brne	.+2      	; 0x2760 <ADC_vidSetMultiPlexer+0x80>
    275e:	fd c0       	rjmp	.+506    	; 0x295a <ADC_vidSetMultiPlexer+0x27a>
    2760:	1f c1       	rjmp	.+574    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
	{
	case ADC_0:
			CLR_BIT(ADMUX,4);
    2762:	a7 e2       	ldi	r26, 0x27	; 39
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e7 e2       	ldi	r30, 0x27	; 39
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	8f 7e       	andi	r24, 0xEF	; 239
    276e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2770:	a7 e2       	ldi	r26, 0x27	; 39
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e7 e2       	ldi	r30, 0x27	; 39
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	87 7f       	andi	r24, 0xF7	; 247
    277c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    277e:	a7 e2       	ldi	r26, 0x27	; 39
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e7 e2       	ldi	r30, 0x27	; 39
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8b 7f       	andi	r24, 0xFB	; 251
    278a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    278c:	a7 e2       	ldi	r26, 0x27	; 39
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e7 e2       	ldi	r30, 0x27	; 39
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	8d 7f       	andi	r24, 0xFD	; 253
    2798:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    279a:	a7 e2       	ldi	r26, 0x27	; 39
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e7 e2       	ldi	r30, 0x27	; 39
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	8e 7f       	andi	r24, 0xFE	; 254
    27a6:	8c 93       	st	X, r24
    27a8:	fb c0       	rjmp	.+502    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_1:
			CLR_BIT(ADMUX,4);
    27aa:	a7 e2       	ldi	r26, 0x27	; 39
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e7 e2       	ldi	r30, 0x27	; 39
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8f 7e       	andi	r24, 0xEF	; 239
    27b6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    27b8:	a7 e2       	ldi	r26, 0x27	; 39
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e7 e2       	ldi	r30, 0x27	; 39
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	87 7f       	andi	r24, 0xF7	; 247
    27c4:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    27c6:	a7 e2       	ldi	r26, 0x27	; 39
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e7 e2       	ldi	r30, 0x27	; 39
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	8b 7f       	andi	r24, 0xFB	; 251
    27d2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    27d4:	a7 e2       	ldi	r26, 0x27	; 39
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e7 e2       	ldi	r30, 0x27	; 39
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	8d 7f       	andi	r24, 0xFD	; 253
    27e0:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    27e2:	a7 e2       	ldi	r26, 0x27	; 39
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e7 e2       	ldi	r30, 0x27	; 39
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	81 60       	ori	r24, 0x01	; 1
    27ee:	8c 93       	st	X, r24
    27f0:	d7 c0       	rjmp	.+430    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_2:
			CLR_BIT(ADMUX,4);
    27f2:	a7 e2       	ldi	r26, 0x27	; 39
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e7 e2       	ldi	r30, 0x27	; 39
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8f 7e       	andi	r24, 0xEF	; 239
    27fe:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2800:	a7 e2       	ldi	r26, 0x27	; 39
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e7 e2       	ldi	r30, 0x27	; 39
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	87 7f       	andi	r24, 0xF7	; 247
    280c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    280e:	a7 e2       	ldi	r26, 0x27	; 39
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e7 e2       	ldi	r30, 0x27	; 39
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8b 7f       	andi	r24, 0xFB	; 251
    281a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    281c:	a7 e2       	ldi	r26, 0x27	; 39
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e7 e2       	ldi	r30, 0x27	; 39
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	82 60       	ori	r24, 0x02	; 2
    2828:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    282a:	a7 e2       	ldi	r26, 0x27	; 39
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e7 e2       	ldi	r30, 0x27	; 39
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	8e 7f       	andi	r24, 0xFE	; 254
    2836:	8c 93       	st	X, r24
    2838:	b3 c0       	rjmp	.+358    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_3:
			CLR_BIT(ADMUX,4);
    283a:	a7 e2       	ldi	r26, 0x27	; 39
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e7 e2       	ldi	r30, 0x27	; 39
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	8f 7e       	andi	r24, 0xEF	; 239
    2846:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2848:	a7 e2       	ldi	r26, 0x27	; 39
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e7 e2       	ldi	r30, 0x27	; 39
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	87 7f       	andi	r24, 0xF7	; 247
    2854:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2856:	a7 e2       	ldi	r26, 0x27	; 39
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e7 e2       	ldi	r30, 0x27	; 39
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	8b 7f       	andi	r24, 0xFB	; 251
    2862:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2864:	a7 e2       	ldi	r26, 0x27	; 39
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e7 e2       	ldi	r30, 0x27	; 39
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	82 60       	ori	r24, 0x02	; 2
    2870:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2872:	a7 e2       	ldi	r26, 0x27	; 39
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	e7 e2       	ldi	r30, 0x27	; 39
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	81 60       	ori	r24, 0x01	; 1
    287e:	8c 93       	st	X, r24
    2880:	8f c0       	rjmp	.+286    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_4:
			CLR_BIT(ADMUX,4);
    2882:	a7 e2       	ldi	r26, 0x27	; 39
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e7 e2       	ldi	r30, 0x27	; 39
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	8f 7e       	andi	r24, 0xEF	; 239
    288e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2890:	a7 e2       	ldi	r26, 0x27	; 39
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e7 e2       	ldi	r30, 0x27	; 39
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	87 7f       	andi	r24, 0xF7	; 247
    289c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    289e:	a7 e2       	ldi	r26, 0x27	; 39
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e7 e2       	ldi	r30, 0x27	; 39
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	84 60       	ori	r24, 0x04	; 4
    28aa:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    28ac:	a7 e2       	ldi	r26, 0x27	; 39
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e7 e2       	ldi	r30, 0x27	; 39
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	8d 7f       	andi	r24, 0xFD	; 253
    28b8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    28ba:	a7 e2       	ldi	r26, 0x27	; 39
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e7 e2       	ldi	r30, 0x27	; 39
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	8e 7f       	andi	r24, 0xFE	; 254
    28c6:	8c 93       	st	X, r24
    28c8:	6b c0       	rjmp	.+214    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_5:
			CLR_BIT(ADMUX,4);
    28ca:	a7 e2       	ldi	r26, 0x27	; 39
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e7 e2       	ldi	r30, 0x27	; 39
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 7e       	andi	r24, 0xEF	; 239
    28d6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    28d8:	a7 e2       	ldi	r26, 0x27	; 39
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e7 e2       	ldi	r30, 0x27	; 39
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	87 7f       	andi	r24, 0xF7	; 247
    28e4:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    28e6:	a7 e2       	ldi	r26, 0x27	; 39
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e7 e2       	ldi	r30, 0x27	; 39
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	84 60       	ori	r24, 0x04	; 4
    28f2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    28f4:	a7 e2       	ldi	r26, 0x27	; 39
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e7 e2       	ldi	r30, 0x27	; 39
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	8d 7f       	andi	r24, 0xFD	; 253
    2900:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2902:	a7 e2       	ldi	r26, 0x27	; 39
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	e7 e2       	ldi	r30, 0x27	; 39
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	81 60       	ori	r24, 0x01	; 1
    290e:	8c 93       	st	X, r24
    2910:	47 c0       	rjmp	.+142    	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_6:
			CLR_BIT(ADMUX,4);
    2912:	a7 e2       	ldi	r26, 0x27	; 39
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e7 e2       	ldi	r30, 0x27	; 39
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	8f 7e       	andi	r24, 0xEF	; 239
    291e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2920:	a7 e2       	ldi	r26, 0x27	; 39
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e7 e2       	ldi	r30, 0x27	; 39
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	87 7f       	andi	r24, 0xF7	; 247
    292c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    292e:	a7 e2       	ldi	r26, 0x27	; 39
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e7 e2       	ldi	r30, 0x27	; 39
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	84 60       	ori	r24, 0x04	; 4
    293a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    293c:	a7 e2       	ldi	r26, 0x27	; 39
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e7 e2       	ldi	r30, 0x27	; 39
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	82 60       	ori	r24, 0x02	; 2
    2948:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    294a:	a7 e2       	ldi	r26, 0x27	; 39
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e7 e2       	ldi	r30, 0x27	; 39
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	8e 7f       	andi	r24, 0xFE	; 254
    2956:	8c 93       	st	X, r24
    2958:	23 c0       	rjmp	.+70     	; 0x29a0 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_7:
			CLR_BIT(ADMUX,4);
    295a:	a7 e2       	ldi	r26, 0x27	; 39
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e7 e2       	ldi	r30, 0x27	; 39
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	8f 7e       	andi	r24, 0xEF	; 239
    2966:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2968:	a7 e2       	ldi	r26, 0x27	; 39
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e7 e2       	ldi	r30, 0x27	; 39
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	87 7f       	andi	r24, 0xF7	; 247
    2974:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2976:	a7 e2       	ldi	r26, 0x27	; 39
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e7 e2       	ldi	r30, 0x27	; 39
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	84 60       	ori	r24, 0x04	; 4
    2982:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2984:	a7 e2       	ldi	r26, 0x27	; 39
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e7 e2       	ldi	r30, 0x27	; 39
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	82 60       	ori	r24, 0x02	; 2
    2990:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2992:	a7 e2       	ldi	r26, 0x27	; 39
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e7 e2       	ldi	r30, 0x27	; 39
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	81 60       	ori	r24, 0x01	; 1
    299e:	8c 93       	st	X, r24
			break;
	}
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <UART_Init>:
#include "../../libraries/std_types.h"
#include "../../libraries/bit_math.h"
#include "UART.h"
#include "UART_REGISTERS.h"

void UART_Init(uint16_ baud) {
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <UART_Init+0x6>
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <UART_Init+0x8>
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    uint16_ ubrr = (uint16_)(((uint32_t)8000000/16)/baud-1);
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	9c 01       	movw	r18, r24
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	80 e2       	ldi	r24, 0x20	; 32
    29c8:	91 ea       	ldi	r25, 0xA1	; 161
    29ca:	a7 e0       	ldi	r26, 0x07	; 7
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	bc 01       	movw	r22, r24
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodsi4>
    29d6:	da 01       	movw	r26, r20
    29d8:	c9 01       	movw	r24, r18
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01

    UBRRH = (uint8_t)(ubrr>>8);
    29e0:	e0 e4       	ldi	r30, 0x40	; 64
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	89 2f       	mov	r24, r25
    29ea:	99 27       	eor	r25, r25
    29ec:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr;
    29ee:	e9 e2       	ldi	r30, 0x29	; 41
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	80 83       	st	Z, r24
    SET_BIT(UCSRB,4);
    29f6:	aa e2       	ldi	r26, 0x2A	; 42
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	ea e2       	ldi	r30, 0x2A	; 42
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 61       	ori	r24, 0x10	; 16
    2a02:	8c 93       	st	X, r24
    SET_BIT(UCSRB,3);
    2a04:	aa e2       	ldi	r26, 0x2A	; 42
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ea e2       	ldi	r30, 0x2A	; 42
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	88 60       	ori	r24, 0x08	; 8
    2a10:	8c 93       	st	X, r24
    UCSRC = (1<<7) | (3<<1);
    2a12:	e0 e4       	ldi	r30, 0x40	; 64
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	86 e8       	ldi	r24, 0x86	; 134
    2a18:	80 83       	st	Z, r24
}
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <UART_Transmit>:

void UART_Transmit(uint8_t data) {
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	89 83       	std	Y+1, r24	; 0x01
    while (!GET_BIT(UCSRA,5));
    2a34:	eb e2       	ldi	r30, 0x2B	; 43
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	82 95       	swap	r24
    2a3c:	86 95       	lsr	r24
    2a3e:	87 70       	andi	r24, 0x07	; 7
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	81 70       	andi	r24, 0x01	; 1
    2a46:	90 70       	andi	r25, 0x00	; 0
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	a1 f3       	breq	.-24     	; 0x2a34 <UART_Transmit+0xc>
    UDR = data;
    2a4c:	ec e2       	ldi	r30, 0x2C	; 44
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	80 83       	st	Z, r24
}
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <UART_Receive>:

uint8_t UART_Receive(void) {
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA,7));
    2a64:	eb e2       	ldi	r30, 0x2B	; 43
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	dc f7       	brge	.-10     	; 0x2a64 <UART_Receive+0x8>
    return UDR;
    2a6e:	ec e2       	ldi	r30, 0x2C	; 44
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <TIMER1_voidInit>:

void (* TIMER1_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt1;

void TIMER1_voidInit(void){
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
	TCCR1B |= TIMER1_PRESCALER;

#elif TIMER1_MODE == CTC_T_MODE

	CLR_BIT(TCCR1A , WGM10);
    2a82:	af e4       	ldi	r26, 0x4F	; 79
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	ef e4       	ldi	r30, 0x4F	; 79
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	8e 7f       	andi	r24, 0xFE	; 254
    2a8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , WGM11);
    2a90:	af e4       	ldi	r26, 0x4F	; 79
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ef e4       	ldi	r30, 0x4F	; 79
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8d 7f       	andi	r24, 0xFD	; 253
    2a9c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    2a9e:	ae e4       	ldi	r26, 0x4E	; 78
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	ee e4       	ldi	r30, 0x4E	; 78
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	88 60       	ori	r24, 0x08	; 8
    2aaa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , WGM13);
    2aac:	ae e4       	ldi	r26, 0x4E	; 78
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	ee e4       	ldi	r30, 0x4E	; 78
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8f 7e       	andi	r24, 0xEF	; 239
    2ab8:	8c 93       	st	X, r24

	//Enabling timer flag;
	SET_BIT(TIMSK , OCIE1A);
    2aba:	a9 e5       	ldi	r26, 0x59	; 89
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e9 e5       	ldi	r30, 0x59	; 89
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	80 61       	ori	r24, 0x10	; 16
    2ac6:	8c 93       	st	X, r24

	//selecting prescaler;
	TCCR1B &= 0b11111000;
    2ac8:	ae e4       	ldi	r26, 0x4E	; 78
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	ee e4       	ldi	r30, 0x4E	; 78
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 7f       	andi	r24, 0xF8	; 248
    2ad4:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER;
    2ad6:	ae e4       	ldi	r26, 0x4E	; 78
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ee e4       	ldi	r30, 0x4E	; 78
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	85 60       	ori	r24, 0x05	; 5
    2ae2:	8c 93       	st	X, r24
#else

#error "wrong timer mode"

#endif
}
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <TIMER1_voidDisable>:

void TIMER1_voidDisable(void){
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62

	TCCR1B &= 0b11111000;
    2af2:	ae e4       	ldi	r26, 0x4E	; 78
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ee e4       	ldi	r30, 0x4E	; 78
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	88 7f       	andi	r24, 0xF8	; 248
    2afe:	8c 93       	st	X, r24

}
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <TIMER1_uint8SetPrescaler>:

uint8_t TIMER1_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <TIMER1_uint8SetPrescaler+0x6>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    2b12:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	88 30       	cpi	r24, 0x08	; 8
    2b18:	80 f4       	brcc	.+32     	; 0x2b3a <TIMER1_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR1B &= 0b11111000;
    2b1a:	ae e4       	ldi	r26, 0x4E	; 78
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	ee e4       	ldi	r30, 0x4E	; 78
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	88 7f       	andi	r24, 0xF8	; 248
    2b26:	8c 93       	st	X, r24
		TCCR1B |= Copy_uint8Prescaler;
    2b28:	ae e4       	ldi	r26, 0x4E	; 78
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ee e4       	ldi	r30, 0x4E	; 78
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	90 81       	ld	r25, Z
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	89 2b       	or	r24, r25
    2b36:	8c 93       	st	X, r24
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <TIMER1_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <TIMER1_voidSetCounterRegister>:
void TIMER1_voidSetCounterRegister(uint8_t Copy_uint8Counter1Start){
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	0f 92       	push	r0
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	89 83       	std	Y+1, r24	; 0x01

	TCNT1L = Copy_uint8Counter1Start;
    2b56:	ec e4       	ldi	r30, 0x4C	; 76
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	80 83       	st	Z, r24
}
    2b5e:	0f 90       	pop	r0
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <TIMER1_voidSetCTCTime>:

void TIMER1_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	0f 92       	push	r0
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	89 83       	std	Y+1, r24	; 0x01

	 OCR1AL = Copy_uint8CompareTime;
    2b72:	ea e4       	ldi	r30, 0x4A	; 74
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	80 83       	st	Z, r24

}
    2b7a:	0f 90       	pop	r0
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <TIMER1_voidGetNumCountCTC>:

void TIMER1_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <TIMER1_voidGetNumCountCTC+0x6>
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <TIMER1_voidGetNumCountCTC+0x8>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <TIMER1_voidGetNumCountCTC+0xa>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	9a 83       	std	Y+2, r25	; 0x02
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	7c 83       	std	Y+4, r23	; 0x04
    2b96:	6b 83       	std	Y+3, r22	; 0x03
    2b98:	5e 83       	std	Y+6, r21	; 0x06
    2b9a:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER1_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	cc 01       	movw	r24, r24
    2ba2:	a0 e0       	ldi	r26, 0x00	; 0
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	28 ee       	ldi	r18, 0xE8	; 232
    2ba8:	33 e0       	ldi	r19, 0x03	; 3
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	50 e0       	ldi	r21, 0x00	; 0
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__mulsi3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3d e7       	ldi	r19, 0x7D	; 125
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodsi4>
    2bca:	da 01       	movw	r26, r20
    2bcc:	c9 01       	movw	r24, r18
    2bce:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    2bd6:	ed 81       	ldd	r30, Y+5	; 0x05
    2bd8:	fe 81       	ldd	r31, Y+6	; 0x06
    2bda:	8a ef       	ldi	r24, 0xFA	; 250
    2bdc:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    2bde:	26 96       	adiw	r28, 0x06	; 6
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <TIMER1_voidSetCallBackNormal>:


void TIMER1_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal1)(void)){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <TIMER1_voidSetCallBackNormal+0x6>
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal1;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	90 93 41 04 	sts	0x0441, r25
    2c06:	80 93 40 04 	sts	0x0440, r24

}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC1)(void)){
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <TIMER1_voidSetCallBackCTC+0x6>
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	9a 83       	std	Y+2, r25	; 0x02
    2c20:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC1;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	9a 81       	ldd	r25, Y+2	; 0x02
    2c26:	90 93 43 04 	sts	0x0443, r25
    2c2a:	80 93 42 04 	sts	0x0442, r24

}
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    2c38:	1f 92       	push	r1
    2c3a:	0f 92       	push	r0
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	0f 92       	push	r0
    2c40:	11 24       	eor	r1, r1
    2c42:	2f 93       	push	r18
    2c44:	3f 93       	push	r19
    2c46:	4f 93       	push	r20
    2c48:	5f 93       	push	r21
    2c4a:	6f 93       	push	r22
    2c4c:	7f 93       	push	r23
    2c4e:	8f 93       	push	r24
    2c50:	9f 93       	push	r25
    2c52:	af 93       	push	r26
    2c54:	bf 93       	push	r27
    2c56:	ef 93       	push	r30
    2c58:	ff 93       	push	r31
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62

	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    2c62:	80 91 44 04 	lds	r24, 0x0444
    2c66:	90 91 45 04 	lds	r25, 0x0445
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	90 93 45 04 	sts	0x0445, r25
    2c70:	80 93 44 04 	sts	0x0444, r24
	if(cnt == compare_cnt1){
    2c74:	20 91 44 04 	lds	r18, 0x0444
    2c78:	30 91 45 04 	lds	r19, 0x0445
    2c7c:	80 91 79 04 	lds	r24, 0x0479
    2c80:	90 91 7a 04 	lds	r25, 0x047A
    2c84:	28 17       	cp	r18, r24
    2c86:	39 07       	cpc	r19, r25
    2c88:	79 f4       	brne	.+30     	; 0x2ca8 <__vector_7+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER1_voidpSetCallBackCTC != NULL){
    2c8a:	80 91 42 04 	lds	r24, 0x0442
    2c8e:	90 91 43 04 	lds	r25, 0x0443
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	49 f0       	breq	.+18     	; 0x2ca8 <__vector_7+0x70>

			TIMER1_voidpSetCallBackCTC();
    2c96:	e0 91 42 04 	lds	r30, 0x0442
    2c9a:	f0 91 43 04 	lds	r31, 0x0443
    2c9e:	09 95       	icall
			cnt = 0;
    2ca0:	10 92 45 04 	sts	0x0445, r1
    2ca4:	10 92 44 04 	sts	0x0444, r1
		}

	}


}
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	ff 91       	pop	r31
    2cae:	ef 91       	pop	r30
    2cb0:	bf 91       	pop	r27
    2cb2:	af 91       	pop	r26
    2cb4:	9f 91       	pop	r25
    2cb6:	8f 91       	pop	r24
    2cb8:	7f 91       	pop	r23
    2cba:	6f 91       	pop	r22
    2cbc:	5f 91       	pop	r21
    2cbe:	4f 91       	pop	r20
    2cc0:	3f 91       	pop	r19
    2cc2:	2f 91       	pop	r18
    2cc4:	0f 90       	pop	r0
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	0f 90       	pop	r0
    2cca:	1f 90       	pop	r1
    2ccc:	18 95       	reti

00002cce <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    2cce:	1f 92       	push	r1
    2cd0:	0f 92       	push	r0
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	0f 92       	push	r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	2f 93       	push	r18
    2cda:	3f 93       	push	r19
    2cdc:	4f 93       	push	r20
    2cde:	5f 93       	push	r21
    2ce0:	6f 93       	push	r22
    2ce2:	7f 93       	push	r23
    2ce4:	8f 93       	push	r24
    2ce6:	9f 93       	push	r25
    2ce8:	af 93       	push	r26
    2cea:	bf 93       	push	r27
    2cec:	ef 93       	push	r30
    2cee:	ff 93       	push	r31
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_voidpSetCallBackNormal != NULL){
    2cf8:	80 91 40 04 	lds	r24, 0x0440
    2cfc:	90 91 41 04 	lds	r25, 0x0441
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	29 f0       	breq	.+10     	; 0x2d0e <__vector_9+0x40>

		TIMER1_voidpSetCallBackNormal();
    2d04:	e0 91 40 04 	lds	r30, 0x0440
    2d08:	f0 91 41 04 	lds	r31, 0x0441
    2d0c:	09 95       	icall

		//do nothing;

	}

}
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	ff 91       	pop	r31
    2d14:	ef 91       	pop	r30
    2d16:	bf 91       	pop	r27
    2d18:	af 91       	pop	r26
    2d1a:	9f 91       	pop	r25
    2d1c:	8f 91       	pop	r24
    2d1e:	7f 91       	pop	r23
    2d20:	6f 91       	pop	r22
    2d22:	5f 91       	pop	r21
    2d24:	4f 91       	pop	r20
    2d26:	3f 91       	pop	r19
    2d28:	2f 91       	pop	r18
    2d2a:	0f 90       	pop	r0
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	0f 90       	pop	r0
    2d30:	1f 90       	pop	r1
    2d32:	18 95       	reti

00002d34 <TMR0_Init>:

// Function prototypes
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds);

void TMR0_Init(void)
{
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
	// Set mode based on configuration
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
	TCCR0_REG &= ~(1 << TCCR0_WGM01);  // Normal mode
	#elif TMR0_MODE == TMR0_MODE_CTC
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
    2d3c:	a3 e5       	ldi	r26, 0x53	; 83
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e3 e5       	ldi	r30, 0x53	; 83
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	8f 7b       	andi	r24, 0xBF	; 191
    2d48:	8c 93       	st	X, r24
	TCCR0_REG |= (1 << TCCR0_WGM01);   // CTC mode
    2d4a:	a3 e5       	ldi	r26, 0x53	; 83
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e3 e5       	ldi	r30, 0x53	; 83
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	88 60       	ori	r24, 0x08	; 8
    2d56:	8c 93       	st	X, r24

	// Enable Timer interrupt based on the mode
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TIMSK_REG |= (1 << TIMSK_TOIE0);   // Enable Overflow Interrupt
	#elif TMR0_MODE == TMR0_MODE_CTC
	TIMSK_REG |= (1 << TIMSK_OCIE0);   // Enable Compare Match Interrupt
    2d58:	a9 e5       	ldi	r26, 0x59	; 89
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e9 e5       	ldi	r30, 0x59	; 89
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	82 60       	ori	r24, 0x02	; 2
    2d64:	8c 93       	st	X, r24
	#endif
	// Enable global interrupts
	SREG |= (1 << 7);
    2d66:	af e5       	ldi	r26, 0x5F	; 95
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	ef e5       	ldi	r30, 0x5F	; 95
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	80 68       	ori	r24, 0x80	; 128
    2d72:	8c 93       	st	X, r24
}
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <TMR0_Start>:

void TMR0_Start(uint16_ milliseconds)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <TMR0_Start+0x6>
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <TMR0_Start+0x8>
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	9c 83       	std	Y+4, r25	; 0x04
    2d88:	8b 83       	std	Y+3, r24	; 0x03
	uint16_ ticks = TMR0_CalculateTicks(milliseconds);
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <TMR0_CalculateTicks>
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	89 83       	std	Y+1, r24	; 0x01

	// Set compare value for CTC mode
	if (TMR0_MODE == TMR0_MODE_CTC)
	{
		OCR0_REG = ticks;
    2d96:	ec e5       	ldi	r30, 0x5C	; 92
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	80 83       	st	Z, r24
	}

	// Reset the match counter
	TMR0_CurrentMatches = 0;
    2d9e:	10 92 4b 04 	sts	0x044B, r1
    2da2:	10 92 4a 04 	sts	0x044A, r1
		break;
		case TMR0_PRESCALER_8:
		TCCR0_REG |= (1 << TCCR0_CS01);
		break;
		case TMR0_PRESCALER_64:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS01);
    2da6:	a3 e5       	ldi	r26, 0x53	; 83
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e3 e5       	ldi	r30, 0x53	; 83
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	83 60       	ori	r24, 0x03	; 3
    2db2:	8c 93       	st	X, r24
		break;
		case TMR0_PRESCALER_1024:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS02);
		break;
	}
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <TMR0_Stop>:

void TMR0_Stop(void)
{
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
	// Stop the timer by clearing the clock source bits
	TCCR0_REG &= ~((1 << TCCR0_CS00) | (1 << TCCR0_CS01) | (1 << TCCR0_CS02));
    2dca:	a3 e5       	ldi	r26, 0x53	; 83
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	e3 e5       	ldi	r30, 0x53	; 83
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 7f       	andi	r24, 0xF8	; 248
    2dd6:	8c 93       	st	X, r24
}
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <TMR0_SetCallback>:

void TMR0_SetCallback(void (*callbackFunc)(void))
{
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <TMR0_SetCallback+0x6>
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
	TMR0_Callback = callbackFunc;
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	9a 81       	ldd	r25, Y+2	; 0x02
    2df0:	90 93 47 04 	sts	0x0447, r25
    2df4:	80 93 46 04 	sts	0x0446, r24
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <__vector_10>:

// Interrupt Service Routine for Timer0 Compare Match
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62

	TMR0_CurrentMatches++;
    2e2c:	80 91 4a 04 	lds	r24, 0x044A
    2e30:	90 91 4b 04 	lds	r25, 0x044B
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	90 93 4b 04 	sts	0x044B, r25
    2e3a:	80 93 4a 04 	sts	0x044A, r24
	
	// Check if we've reached the required number of matches
	if (TMR0_CurrentMatches >= TMR0_RequiredMatches)
    2e3e:	20 91 4a 04 	lds	r18, 0x044A
    2e42:	30 91 4b 04 	lds	r19, 0x044B
    2e46:	80 91 48 04 	lds	r24, 0x0448
    2e4a:	90 91 49 04 	lds	r25, 0x0449
    2e4e:	28 17       	cp	r18, r24
    2e50:	39 07       	cpc	r19, r25
    2e52:	78 f0       	brcs	.+30     	; 0x2e72 <__vector_10+0x70>
	{
		if (TMR0_Callback != 0)
    2e54:	80 91 46 04 	lds	r24, 0x0446
    2e58:	90 91 47 04 	lds	r25, 0x0447
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	29 f0       	breq	.+10     	; 0x2e6a <__vector_10+0x68>
		{
			TMR0_Callback();
    2e60:	e0 91 46 04 	lds	r30, 0x0446
    2e64:	f0 91 47 04 	lds	r31, 0x0447
    2e68:	09 95       	icall
		}
		TMR0_CurrentMatches = 0;  // Reset matches for the next cycle
    2e6a:	10 92 4b 04 	sts	0x044B, r1
    2e6e:	10 92 4a 04 	sts	0x044A, r1
	}
}
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	ff 91       	pop	r31
    2e78:	ef 91       	pop	r30
    2e7a:	bf 91       	pop	r27
    2e7c:	af 91       	pop	r26
    2e7e:	9f 91       	pop	r25
    2e80:	8f 91       	pop	r24
    2e82:	7f 91       	pop	r23
    2e84:	6f 91       	pop	r22
    2e86:	5f 91       	pop	r21
    2e88:	4f 91       	pop	r20
    2e8a:	3f 91       	pop	r19
    2e8c:	2f 91       	pop	r18
    2e8e:	0f 90       	pop	r0
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	0f 90       	pop	r0
    2e94:	1f 90       	pop	r1
    2e96:	18 95       	reti

00002e98 <TMR0_CalculateTicks>:

// Function to calculate ticks based on the desired time in milliseconds and the configured prescaler
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds)
{
    2e98:	ef 92       	push	r14
    2e9a:	ff 92       	push	r15
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	2a 97       	sbiw	r28, 0x0a	; 10
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	9a 87       	std	Y+10, r25	; 0x0a
    2eb6:	89 87       	std	Y+9, r24	; 0x09
	uint32_t prescaler_value = 1;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	a0 e0       	ldi	r26, 0x00	; 0
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	af 83       	std	Y+7, r26	; 0x07
    2ec6:	b8 87       	std	Y+8, r27	; 0x08
		break;
		case TMR0_PRESCALER_8:
		prescaler_value = 8;
		break;
		case TMR0_PRESCALER_64:
		prescaler_value = 64;
    2ec8:	80 e4       	ldi	r24, 0x40	; 64
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a0 e0       	ldi	r26, 0x00	; 0
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	af 83       	std	Y+7, r26	; 0x07
    2ed6:	b8 87       	std	Y+8, r27	; 0x08
		prescaler_value = 1024;
		break;
	}

	// Calculate ticks based on prescaler and the desired time in milliseconds
	uint32_t ticks = ((8000000 / (prescaler_value * 1000)) * milliseconds);
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	af 81       	ldd	r26, Y+7	; 0x07
    2ede:	b8 85       	ldd	r27, Y+8	; 0x08
    2ee0:	28 ee       	ldi	r18, 0xE8	; 232
    2ee2:	33 e0       	ldi	r19, 0x03	; 3
    2ee4:	40 e0       	ldi	r20, 0x00	; 0
    2ee6:	50 e0       	ldi	r21, 0x00	; 0
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__mulsi3>
    2ef0:	9b 01       	movw	r18, r22
    2ef2:	ac 01       	movw	r20, r24
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	92 e1       	ldi	r25, 0x12	; 18
    2ef8:	aa e7       	ldi	r26, 0x7A	; 122
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodsi4>
    2f04:	da 01       	movw	r26, r20
    2f06:	c9 01       	movw	r24, r18
    2f08:	7c 01       	movw	r14, r24
    2f0a:	8d 01       	movw	r16, r26
    2f0c:	89 85       	ldd	r24, Y+9	; 0x09
    2f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f10:	9c 01       	movw	r18, r24
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	50 e0       	ldi	r21, 0x00	; 0
    2f16:	c8 01       	movw	r24, r16
    2f18:	b7 01       	movw	r22, r14
    2f1a:	0e 94 e5 24 	call	0x49ca	; 0x49ca <__mulsi3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	ab 83       	std	Y+3, r26	; 0x03
    2f28:	bc 83       	std	Y+4, r27	; 0x04

	// If the number of ticks exceeds 255 (the max value for an 8-bit timer), calculate how many compare matches are required
	if (ticks > 255)
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2e:	ab 81       	ldd	r26, Y+3	; 0x03
    2f30:	bc 81       	ldd	r27, Y+4	; 0x04
    2f32:	8f 3f       	cpi	r24, 0xFF	; 255
    2f34:	91 05       	cpc	r25, r1
    2f36:	a1 05       	cpc	r26, r1
    2f38:	b1 05       	cpc	r27, r1
    2f3a:	e1 f0       	breq	.+56     	; 0x2f74 <TMR0_CalculateTicks+0xdc>
    2f3c:	d8 f0       	brcs	.+54     	; 0x2f74 <TMR0_CalculateTicks+0xdc>
	{
		TMR0_RequiredMatches = ticks / 255;
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	9a 81       	ldd	r25, Y+2	; 0x02
    2f42:	ab 81       	ldd	r26, Y+3	; 0x03
    2f44:	bc 81       	ldd	r27, Y+4	; 0x04
    2f46:	2f ef       	ldi	r18, 0xFF	; 255
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodsi4>
    2f56:	da 01       	movw	r26, r20
    2f58:	c9 01       	movw	r24, r18
    2f5a:	90 93 49 04 	sts	0x0449, r25
    2f5e:	80 93 48 04 	sts	0x0448, r24
		ticks = 255;  // Set the compare value to the maximum for the first match
    2f62:	8f ef       	ldi	r24, 0xFF	; 255
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	a0 e0       	ldi	r26, 0x00	; 0
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	ab 83       	std	Y+3, r26	; 0x03
    2f70:	bc 83       	std	Y+4, r27	; 0x04
    2f72:	06 c0       	rjmp	.+12     	; 0x2f80 <TMR0_CalculateTicks+0xe8>
	}
	else
	{
		TMR0_RequiredMatches = 1;  // Only one match is needed
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	90 93 49 04 	sts	0x0449, r25
    2f7c:	80 93 48 04 	sts	0x0448, r24
	}

	return (uint16_)ticks;
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f84:	2a 96       	adiw	r28, 0x0a	; 10
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	08 95       	ret

00002f9e <TILT_vidInit>:
TILT_SENSOR_PIN tilt_pins[NO_OF_SENSORS] ={TILT_1_PIN,TILT_2_PIN,TILT_3_PIN,TILT_4_PIN,
										TILT_5_PIN,TILT_6_PIN,TILT_7_PIN,TILT_8_PIN};


void TILT_vidInit(uint8_t tilt_pin)
{
    2f9e:	df 93       	push	r29
    2fa0:	cf 93       	push	r28
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <TILT_vidInit+0x6>
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	88 30       	cpi	r24, 0x08	; 8
    2fae:	c0 f4       	brcc	.+48     	; 0x2fe0 <TILT_vidInit+0x42>
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	fc 01       	movw	r30, r24
    2fbc:	eb 5d       	subi	r30, 0xDB	; 219
    2fbe:	fb 4f       	sbci	r31, 0xFB	; 251
    2fc0:	20 81       	ld	r18, Z
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	fc 01       	movw	r30, r24
    2fce:	ea 5d       	subi	r30, 0xDA	; 218
    2fd0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fd2:	90 81       	ld	r25, Z
    2fd4:	82 2f       	mov	r24, r18
    2fd6:	69 2f       	mov	r22, r25
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
    2fde:	22 c0       	rjmp	.+68     	; 0x3024 <TILT_vidInit+0x86>
	else if(tilt_pin==8)
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	88 30       	cpi	r24, 0x08	; 8
    2fe4:	f9 f4       	brne	.+62     	; 0x3024 <TILT_vidInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2fe6:	19 82       	std	Y+1, r1	; 0x01
    2fe8:	1a c0       	rjmp	.+52     	; 0x301e <TILT_vidInit+0x80>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	eb 5d       	subi	r30, 0xDB	; 219
    2ff8:	fb 4f       	sbci	r31, 0xFB	; 251
    2ffa:	20 81       	ld	r18, Z
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	fc 01       	movw	r30, r24
    3008:	ea 5d       	subi	r30, 0xDA	; 218
    300a:	fb 4f       	sbci	r31, 0xFB	; 251
    300c:	90 81       	ld	r25, Z
    300e:	82 2f       	mov	r24, r18
    3010:	69 2f       	mov	r22, r25
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
void TILT_vidInit(uint8_t tilt_pin)
{
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
	else if(tilt_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	8f 5f       	subi	r24, 0xFF	; 255
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	88 30       	cpi	r24, 0x08	; 8
    3022:	18 f3       	brcs	.-58     	; 0x2fea <TILT_vidInit+0x4c>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
		}
	}
}
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <TILT_vidGetTiltRead>:

void TILT_vidGetTiltRead(uint8_t * tilt_read, uint8_t tilt_pin)
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <TILT_vidGetTiltRead+0x6>
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	9a 83       	std	Y+2, r25	; 0x02
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,tilt_read);
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	88 2f       	mov	r24, r24
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	fc 01       	movw	r30, r24
    304c:	eb 5d       	subi	r30, 0xDB	; 219
    304e:	fb 4f       	sbci	r31, 0xFB	; 251
    3050:	40 81       	ld	r20, Z
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	88 2f       	mov	r24, r24
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	88 0f       	add	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	fc 01       	movw	r30, r24
    305e:	ea 5d       	subi	r30, 0xDA	; 218
    3060:	fb 4f       	sbci	r31, 0xFB	; 251
    3062:	90 81       	ld	r25, Z
    3064:	29 81       	ldd	r18, Y+1	; 0x01
    3066:	3a 81       	ldd	r19, Y+2	; 0x02
    3068:	84 2f       	mov	r24, r20
    306a:	69 2f       	mov	r22, r25
    306c:	a9 01       	movw	r20, r18
    306e:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_u8GetPinValue>
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <TILT_vidGetAllTiltRead>:

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	00 d0       	rcall	.+0      	; 0x3084 <TILT_vidGetAllTiltRead+0x6>
    3084:	0f 92       	push	r0
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	9b 83       	std	Y+3, r25	; 0x03
    308c:	8a 83       	std	Y+2, r24	; 0x02
	tilt_read[NO_OF_SENSORS]=0;
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
    3092:	fc 01       	movw	r30, r24
    3094:	32 96       	adiw	r30, 0x02	; 2
    3096:	10 82       	st	Z, r1
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    3098:	19 82       	std	Y+1, r1	; 0x01
    309a:	21 c0       	rjmp	.+66     	; 0x30de <TILT_vidGetAllTiltRead+0x60>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	fc 01       	movw	r30, r24
    30a8:	eb 5d       	subi	r30, 0xDB	; 219
    30aa:	fb 4f       	sbci	r31, 0xFB	; 251
    30ac:	40 81       	ld	r20, Z
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	fc 01       	movw	r30, r24
    30ba:	ea 5d       	subi	r30, 0xDA	; 218
    30bc:	fb 4f       	sbci	r31, 0xFB	; 251
    30be:	50 81       	ld	r21, Z
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	8a 81       	ldd	r24, Y+2	; 0x02
    30c8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ca:	28 0f       	add	r18, r24
    30cc:	39 1f       	adc	r19, r25
    30ce:	84 2f       	mov	r24, r20
    30d0:	65 2f       	mov	r22, r21
    30d2:	a9 01       	movw	r20, r18
    30d4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_u8GetPinValue>
}

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
	tilt_read[NO_OF_SENSORS]=0;
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	82 30       	cpi	r24, 0x02	; 2
    30e2:	e0 f2       	brcs	.-72     	; 0x309c <TILT_vidGetAllTiltRead+0x1e>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
	}
	tilt_read[NO_OF_SENSORS]=1;
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9b 81       	ldd	r25, Y+3	; 0x03
    30e8:	fc 01       	movw	r30, r24
    30ea:	32 96       	adiw	r30, 0x02	; 2
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	80 83       	st	Z, r24
}
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <LED_u8InitializeLed>:
#include"../../libraries/std_types.h"
#include "../../mcal/dio_driver/dio_int.h"

uint8_t LED_u8InitializeLed(uint8_t port_id,uint8_t led_pin)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	00 d0       	rcall	.+0      	; 0x3102 <LED_u8InitializeLed+0x6>
    3102:	0f 92       	push	r0
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	8a 83       	std	Y+2, r24	; 0x02
    310a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = DIO_u8SetPinMode(port_id,led_pin,OUTPUT);
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	6b 81       	ldd	r22, Y+3	; 0x03
    3110:	41 e0       	ldi	r20, 0x01	; 1
    3112:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
    3116:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    3118:	89 81       	ldd	r24, Y+1	; 0x01
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <LED_u8InitializeLedPort>:

uint8_t LED_u8InitializeLedPort(uint8_t port_id)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	00 d0       	rcall	.+0      	; 0x312c <LED_u8InitializeLedPort+0x6>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t error_status = DIO_u8SetPortMode(port_id,255);
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	6f ef       	ldi	r22, 0xFF	; 255
    3136:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortMode>
    313a:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    313c:	89 81       	ldd	r24, Y+1	; 0x01
}
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <LED_u8LedOn>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"led_helper.h"

uint8_t LED_u8LedOn(uint8_t port_id,uint8_t led_pin)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	00 d0       	rcall	.+0      	; 0x314e <LED_u8LedOn+0x6>
    314e:	00 d0       	rcall	.+0      	; 0x3150 <LED_u8LedOn+0x8>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	8b 83       	std	Y+3, r24	; 0x03
    3156:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    3158:	9e 01       	movw	r18, r28
    315a:	2e 5f       	subi	r18, 0xFE	; 254
    315c:	3f 4f       	sbci	r19, 0xFF	; 255
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	6c 81       	ldd	r22, Y+4	; 0x04
    3162:	a9 01       	movw	r20, r18
    3164:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    3168:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	88 23       	and	r24, r24
    316e:	71 f4       	brne	.+28     	; 0x318c <LED_u8LedOn+0x44>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	88 23       	and	r24, r24
    3174:	29 f4       	brne	.+10     	; 0x3180 <LED_u8LedOn+0x38>
    3176:	8b 81       	ldd	r24, Y+3	; 0x03
    3178:	6c 81       	ldd	r22, Y+4	; 0x04
    317a:	0e 94 7e 18 	call	0x30fc	; 0x30fc <LED_u8InitializeLed>
    317e:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPinValue(port_id,led_pin,HIGH);
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	6c 81       	ldd	r22, Y+4	; 0x04
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
    318a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    318c:	89 81       	ldd	r24, Y+1	; 0x01
}
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <LED_u8LedOff>:
uint8_t LED_u8LedOff(uint8_t port_id,uint8_t led_pin)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <LED_u8LedOff+0x6>
    31a2:	00 d0       	rcall	.+0      	; 0x31a4 <LED_u8LedOff+0x8>
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	8b 83       	std	Y+3, r24	; 0x03
    31aa:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    31ac:	9e 01       	movw	r18, r28
    31ae:	2e 5f       	subi	r18, 0xFE	; 254
    31b0:	3f 4f       	sbci	r19, 0xFF	; 255
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	6c 81       	ldd	r22, Y+4	; 0x04
    31b6:	a9 01       	movw	r20, r18
    31b8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    31bc:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	88 23       	and	r24, r24
    31c2:	71 f4       	brne	.+28     	; 0x31e0 <LED_u8LedOff+0x44>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	88 23       	and	r24, r24
    31c8:	29 f4       	brne	.+10     	; 0x31d4 <LED_u8LedOff+0x38>
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	6c 81       	ldd	r22, Y+4	; 0x04
    31ce:	0e 94 7e 18 	call	0x30fc	; 0x30fc <LED_u8InitializeLed>
    31d2:	89 83       	std	Y+1, r24	; 0x01
	    error_status = DIO_u8SetPinValue(port_id,led_pin,LOW);
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	6c 81       	ldd	r22, Y+4	; 0x04
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
    31de:	89 83       	std	Y+1, r24	; 0x01
		}
	return error_status;
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <LED_u8LedToggle>:
uint8_t LED_u8LedToggle(uint8_t port_id,uint8_t led_pin)
{
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <LED_u8LedToggle+0x6>
    31f6:	00 d0       	rcall	.+0      	; 0x31f8 <LED_u8LedToggle+0x8>
    31f8:	0f 92       	push	r0
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	8c 83       	std	Y+4, r24	; 0x04
    3200:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t value;
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    3202:	9e 01       	movw	r18, r28
    3204:	2d 5f       	subi	r18, 0xFD	; 253
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	6d 81       	ldd	r22, Y+5	; 0x05
    320c:	a9 01       	movw	r20, r18
    320e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    3212:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	88 23       	and	r24, r24
    3218:	21 f5       	brne	.+72     	; 0x3262 <LED_u8LedToggle+0x72>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	88 23       	and	r24, r24
    321e:	29 f4       	brne	.+10     	; 0x322a <LED_u8LedToggle+0x3a>
    3220:	8c 81       	ldd	r24, Y+4	; 0x04
    3222:	6d 81       	ldd	r22, Y+5	; 0x05
    3224:	0e 94 7e 18 	call	0x30fc	; 0x30fc <LED_u8InitializeLed>
    3228:	89 83       	std	Y+1, r24	; 0x01
		error_status = DIO_u8GetPinValue(port_id,led_pin,&value);
    322a:	9e 01       	movw	r18, r28
    322c:	2e 5f       	subi	r18, 0xFE	; 254
    322e:	3f 4f       	sbci	r19, 0xFF	; 255
    3230:	8c 81       	ldd	r24, Y+4	; 0x04
    3232:	6d 81       	ldd	r22, Y+5	; 0x05
    3234:	a9 01       	movw	r20, r18
    3236:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <DIO_u8GetPinValue>
    323a:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK){
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	88 23       	and	r24, r24
    3240:	81 f4       	brne	.+32     	; 0x3262 <LED_u8LedToggle+0x72>
			if(value==HIGH)error_status=DIO_u8SetPinValue(port_id,led_pin,LOW);
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	81 30       	cpi	r24, 0x01	; 1
    3246:	39 f4       	brne	.+14     	; 0x3256 <LED_u8LedToggle+0x66>
    3248:	8c 81       	ldd	r24, Y+4	; 0x04
    324a:	6d 81       	ldd	r22, Y+5	; 0x05
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <LED_u8LedToggle+0x72>
			else error_status=DIO_u8SetPinValue(port_id,led_pin,HIGH);
    3256:	8c 81       	ldd	r24, Y+4	; 0x04
    3258:	6d 81       	ldd	r22, Y+5	; 0x05
    325a:	41 e0       	ldi	r20, 0x01	; 1
    325c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
    3260:	89 83       	std	Y+1, r24	; 0x01
		}
		}
	return error_status;
    3262:	89 81       	ldd	r24, Y+1	; 0x01
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <LED_u8LedBlink>:
uint8_t LED_u8LedBlink(uint8_t port_id,uint8_t led_pin,uint16_ delay_time_ms)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	a2 97       	sbiw	r28, 0x22	; 34
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	8f 8f       	std	Y+31, r24	; 0x1f
    328a:	68 a3       	std	Y+32, r22	; 0x20
    328c:	5a a3       	std	Y+34, r21	; 0x22
    328e:	49 a3       	std	Y+33, r20	; 0x21
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    3290:	9e 01       	movw	r18, r28
    3292:	22 5e       	subi	r18, 0xE2	; 226
    3294:	3f 4f       	sbci	r19, 0xFF	; 255
    3296:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3298:	68 a1       	ldd	r22, Y+32	; 0x20
    329a:	a9 01       	movw	r20, r18
    329c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    32a0:	8d 8f       	std	Y+29, r24	; 0x1d
	if(error_status==E_OK)
    32a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a4:	88 23       	and	r24, r24
    32a6:	09 f0       	breq	.+2      	; 0x32aa <LED_u8LedBlink+0x36>
    32a8:	08 c1       	rjmp	.+528    	; 0x34ba <LED_u8LedBlink+0x246>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    32aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32ac:	88 23       	and	r24, r24
    32ae:	29 f4       	brne	.+10     	; 0x32ba <LED_u8LedBlink+0x46>
    32b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32b2:	68 a1       	ldd	r22, Y+32	; 0x20
    32b4:	0e 94 7e 18 	call	0x30fc	; 0x30fc <LED_u8InitializeLed>
    32b8:	8d 8f       	std	Y+29, r24	; 0x1d
	error_status = LED_u8LedOn(port_id,led_pin);
    32ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32bc:	68 a1       	ldd	r22, Y+32	; 0x20
    32be:	0e 94 a4 18 	call	0x3148	; 0x3148 <LED_u8LedOn>
    32c2:	8d 8f       	std	Y+29, r24	; 0x1d
 	 _delay_ms(delay_time_ms);
    32c4:	89 a1       	ldd	r24, Y+33	; 0x21
    32c6:	9a a1       	ldd	r25, Y+34	; 0x22
    32c8:	cc 01       	movw	r24, r24
    32ca:	a0 e0       	ldi	r26, 0x00	; 0
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	89 8f       	std	Y+25, r24	; 0x19
    32dc:	9a 8f       	std	Y+26, r25	; 0x1a
    32de:	ab 8f       	std	Y+27, r26	; 0x1b
    32e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	69 8d       	ldd	r22, Y+25	; 0x19
    32e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a ef       	ldi	r20, 0xFA	; 250
    32f0:	54 e4       	ldi	r21, 0x44	; 68
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	8d 8b       	std	Y+21, r24	; 0x15
    32fc:	9e 8b       	std	Y+22, r25	; 0x16
    32fe:	af 8b       	std	Y+23, r26	; 0x17
    3300:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <LED_u8LedBlink+0xb0>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9c 8b       	std	Y+20, r25	; 0x14
    3320:	8b 8b       	std	Y+19, r24	; 0x13
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <LED_u8LedBlink+0x12e>
	else if (__tmp > 65535)
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <LED_u8LedBlink+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	69 8d       	ldd	r22, Y+25	; 0x19
    333e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9c 8b       	std	Y+20, r25	; 0x14
    3362:	8b 8b       	std	Y+19, r24	; 0x13
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <LED_u8LedBlink+0x110>
    3366:	88 ec       	ldi	r24, 0xC8	; 200
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9a 8b       	std	Y+18, r25	; 0x12
    336c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336e:	89 89       	ldd	r24, Y+17	; 0x11
    3370:	9a 89       	ldd	r25, Y+18	; 0x12
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <LED_u8LedBlink+0xfe>
    3376:	9a 8b       	std	Y+18, r25	; 0x12
    3378:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8b 89       	ldd	r24, Y+19	; 0x13
    337c:	9c 89       	ldd	r25, Y+20	; 0x14
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <LED_u8LedBlink+0xf2>
    338c:	14 c0       	rjmp	.+40     	; 0x33b6 <LED_u8LedBlink+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	6d 89       	ldd	r22, Y+21	; 0x15
    3390:	7e 89       	ldd	r23, Y+22	; 0x16
    3392:	8f 89       	ldd	r24, Y+23	; 0x17
    3394:	98 8d       	ldd	r25, Y+24	; 0x18
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9c 8b       	std	Y+20, r25	; 0x14
    33a0:	8b 8b       	std	Y+19, r24	; 0x13
    33a2:	8b 89       	ldd	r24, Y+19	; 0x13
    33a4:	9c 89       	ldd	r25, Y+20	; 0x14
    33a6:	98 8b       	std	Y+16, r25	; 0x10
    33a8:	8f 87       	std	Y+15, r24	; 0x0f
    33aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ac:	98 89       	ldd	r25, Y+16	; 0x10
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <LED_u8LedBlink+0x13a>
    33b2:	98 8b       	std	Y+16, r25	; 0x10
    33b4:	8f 87       	std	Y+15, r24	; 0x0f
	if(error_status==E_OK){
    33b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b8:	88 23       	and	r24, r24
    33ba:	09 f0       	breq	.+2      	; 0x33be <LED_u8LedBlink+0x14a>
    33bc:	7e c0       	rjmp	.+252    	; 0x34ba <LED_u8LedBlink+0x246>
	error_status = LED_u8LedOff(port_id,led_pin);
    33be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c0:	68 a1       	ldd	r22, Y+32	; 0x20
    33c2:	0e 94 ce 18 	call	0x319c	; 0x319c <LED_u8LedOff>
    33c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(delay_time_ms);
    33c8:	89 a1       	ldd	r24, Y+33	; 0x21
    33ca:	9a a1       	ldd	r25, Y+34	; 0x22
    33cc:	cc 01       	movw	r24, r24
    33ce:	a0 e0       	ldi	r26, 0x00	; 0
    33d0:	b0 e0       	ldi	r27, 0x00	; 0
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	8b 87       	std	Y+11, r24	; 0x0b
    33e0:	9c 87       	std	Y+12, r25	; 0x0c
    33e2:	ad 87       	std	Y+13, r26	; 0x0d
    33e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a ef       	ldi	r20, 0xFA	; 250
    33f4:	54 e4       	ldi	r21, 0x44	; 68
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8f 83       	std	Y+7, r24	; 0x07
    3400:	98 87       	std	Y+8, r25	; 0x08
    3402:	a9 87       	std	Y+9, r26	; 0x09
    3404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3406:	6f 81       	ldd	r22, Y+7	; 0x07
    3408:	78 85       	ldd	r23, Y+8	; 0x08
    340a:	89 85       	ldd	r24, Y+9	; 0x09
    340c:	9a 85       	ldd	r25, Y+10	; 0x0a
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341a:	88 23       	and	r24, r24
    341c:	2c f4       	brge	.+10     	; 0x3428 <LED_u8LedBlink+0x1b4>
		__ticks = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	3f c0       	rjmp	.+126    	; 0x34a6 <LED_u8LedBlink+0x232>
	else if (__tmp > 65535)
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	3f ef       	ldi	r19, 0xFF	; 255
    3434:	4f e7       	ldi	r20, 0x7F	; 127
    3436:	57 e4       	ldi	r21, 0x47	; 71
    3438:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    343c:	18 16       	cp	r1, r24
    343e:	4c f5       	brge	.+82     	; 0x3492 <LED_u8LedBlink+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3440:	6b 85       	ldd	r22, Y+11	; 0x0b
    3442:	7c 85       	ldd	r23, Y+12	; 0x0c
    3444:	8d 85       	ldd	r24, Y+13	; 0x0d
    3446:	9e 85       	ldd	r25, Y+14	; 0x0e
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	0f c0       	rjmp	.+30     	; 0x3488 <LED_u8LedBlink+0x214>
    346a:	88 ec       	ldi	r24, 0xC8	; 200
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <LED_u8LedBlink+0x202>
    347a:	9c 83       	std	Y+4, r25	; 0x04
    347c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	8d 81       	ldd	r24, Y+5	; 0x05
    3480:	9e 81       	ldd	r25, Y+6	; 0x06
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	9e 83       	std	Y+6, r25	; 0x06
    3486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	69 f7       	brne	.-38     	; 0x346a <LED_u8LedBlink+0x1f6>
    3490:	14 c0       	rjmp	.+40     	; 0x34ba <LED_u8LedBlink+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3492:	6f 81       	ldd	r22, Y+7	; 0x07
    3494:	78 85       	ldd	r23, Y+8	; 0x08
    3496:	89 85       	ldd	r24, Y+9	; 0x09
    3498:	9a 85       	ldd	r25, Y+10	; 0x0a
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	8d 81       	ldd	r24, Y+5	; 0x05
    34a8:	9e 81       	ldd	r25, Y+6	; 0x06
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	9a 81       	ldd	r25, Y+2	; 0x02
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <LED_u8LedBlink+0x23e>
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    34ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    34bc:	a2 96       	adiw	r28, 0x22	; 34
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	08 95       	ret

000034ce <LED_u8LedPortOn>:


uint8_t LED_u8LedPortOn(uint8_t port_id)
{
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <LED_u8LedPortOn+0x6>
    34d4:	0f 92       	push	r0
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    34dc:	9e 01       	movw	r18, r28
    34de:	2e 5f       	subi	r18, 0xFE	; 254
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	60 e0       	ldi	r22, 0x00	; 0
    34e6:	a9 01       	movw	r20, r18
    34e8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    34ec:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	88 23       	and	r24, r24
    34f2:	61 f4       	brne	.+24     	; 0x350c <LED_u8LedPortOn+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	88 23       	and	r24, r24
    34f8:	21 f4       	brne	.+8      	; 0x3502 <LED_u8LedPortOn+0x34>
    34fa:	8b 81       	ldd	r24, Y+3	; 0x03
    34fc:	0e 94 93 18 	call	0x3126	; 0x3126 <LED_u8InitializeLedPort>
    3500:	89 83       	std	Y+1, r24	; 0x01
    error_status = DIO_u8SetPortValue(port_id,255);
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	6f ef       	ldi	r22, 0xFF	; 255
    3506:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_u8SetPortValue>
    350a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    350c:	89 81       	ldd	r24, Y+1	; 0x01
}
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <LED_u8LedPortOff>:
uint8_t LED_u8LedPortOff(uint8_t port_id)
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	00 d0       	rcall	.+0      	; 0x3520 <LED_u8LedPortOff+0x6>
    3520:	0f 92       	push	r0
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    3528:	9e 01       	movw	r18, r28
    352a:	2e 5f       	subi	r18, 0xFE	; 254
    352c:	3f 4f       	sbci	r19, 0xFF	; 255
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	a9 01       	movw	r20, r18
    3534:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    3538:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	88 23       	and	r24, r24
    353e:	61 f4       	brne	.+24     	; 0x3558 <LED_u8LedPortOff+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	88 23       	and	r24, r24
    3544:	21 f4       	brne	.+8      	; 0x354e <LED_u8LedPortOff+0x34>
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	0e 94 93 18 	call	0x3126	; 0x3126 <LED_u8InitializeLedPort>
    354c:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPortValue(port_id,LOW);
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	60 e0       	ldi	r22, 0x00	; 0
    3552:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_u8SetPortValue>
    3556:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    3558:	89 81       	ldd	r24, Y+1	; 0x01
}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <LED_u8LedPortToggle>:
uint8_t LED_u8LedPortToggle(uint8_t port_id)
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <LED_u8LedPortToggle+0x6>
    356c:	00 d0       	rcall	.+0      	; 0x356e <LED_u8LedPortToggle+0x8>
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t value;
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    3574:	9e 01       	movw	r18, r28
    3576:	2d 5f       	subi	r18, 0xFD	; 253
    3578:	3f 4f       	sbci	r19, 0xFF	; 255
    357a:	8c 81       	ldd	r24, Y+4	; 0x04
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	a9 01       	movw	r20, r18
    3580:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    3584:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	88 23       	and	r24, r24
    358a:	01 f5       	brne	.+64     	; 0x35cc <LED_u8LedPortToggle+0x66>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	88 23       	and	r24, r24
    3590:	21 f4       	brne	.+8      	; 0x359a <LED_u8LedPortToggle+0x34>
    3592:	8c 81       	ldd	r24, Y+4	; 0x04
    3594:	0e 94 93 18 	call	0x3126	; 0x3126 <LED_u8InitializeLedPort>
    3598:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8GetPortValue(port_id,&value);
    359a:	9e 01       	movw	r18, r28
    359c:	2e 5f       	subi	r18, 0xFE	; 254
    359e:	3f 4f       	sbci	r19, 0xFF	; 255
    35a0:	8c 81       	ldd	r24, Y+4	; 0x04
    35a2:	b9 01       	movw	r22, r18
    35a4:	0e 94 65 11 	call	0x22ca	; 0x22ca <DIO_u8GetPortValue>
    35a8:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK){
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	88 23       	and	r24, r24
    35ae:	71 f4       	brne	.+28     	; 0x35cc <LED_u8LedPortToggle+0x66>
		if(value==HIGH)error_status=DIO_u8SetPortValue(port_id,LOW);
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	81 30       	cpi	r24, 0x01	; 1
    35b4:	31 f4       	brne	.+12     	; 0x35c2 <LED_u8LedPortToggle+0x5c>
    35b6:	8c 81       	ldd	r24, Y+4	; 0x04
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_u8SetPortValue>
    35be:	89 83       	std	Y+1, r24	; 0x01
    35c0:	05 c0       	rjmp	.+10     	; 0x35cc <LED_u8LedPortToggle+0x66>
		else error_status=DIO_u8SetPortValue(port_id,255);
    35c2:	8c 81       	ldd	r24, Y+4	; 0x04
    35c4:	6f ef       	ldi	r22, 0xFF	; 255
    35c6:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_u8SetPortValue>
    35ca:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

000035dc <LED_u8LedPortBlink>:
uint8_t LED_u8LedPortBlink(uint8_t port_id,uint16_ delay_time_ms)
{
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
    35e4:	a1 97       	sbiw	r28, 0x21	; 33
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	8f 8f       	std	Y+31, r24	; 0x1f
    35f2:	79 a3       	std	Y+33, r23	; 0x21
    35f4:	68 a3       	std	Y+32, r22	; 0x20
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    35f6:	9e 01       	movw	r18, r28
    35f8:	22 5e       	subi	r18, 0xE2	; 226
    35fa:	3f 4f       	sbci	r19, 0xFF	; 255
    35fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	a9 01       	movw	r20, r18
    3602:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <DIO_u8IsPinOutPut>
    3606:	8d 8f       	std	Y+29, r24	; 0x1d
		if(error_status==E_OK)
    3608:	8d 8d       	ldd	r24, Y+29	; 0x1d
    360a:	88 23       	and	r24, r24
    360c:	09 f0       	breq	.+2      	; 0x3610 <LED_u8LedPortBlink+0x34>
    360e:	05 c1       	rjmp	.+522    	; 0x381a <LED_u8LedPortBlink+0x23e>
		{
		if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3610:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3612:	88 23       	and	r24, r24
    3614:	21 f4       	brne	.+8      	; 0x361e <LED_u8LedPortBlink+0x42>
    3616:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3618:	0e 94 93 18 	call	0x3126	; 0x3126 <LED_u8InitializeLedPort>
    361c:	8d 8f       	std	Y+29, r24	; 0x1d
		error_status = LED_u8LedPortOn(port_id);
    361e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3620:	0e 94 67 1a 	call	0x34ce	; 0x34ce <LED_u8LedPortOn>
    3624:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    3626:	88 a1       	ldd	r24, Y+32	; 0x20
    3628:	99 a1       	ldd	r25, Y+33	; 0x21
    362a:	cc 01       	movw	r24, r24
    362c:	a0 e0       	ldi	r26, 0x00	; 0
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	89 8f       	std	Y+25, r24	; 0x19
    363e:	9a 8f       	std	Y+26, r25	; 0x1a
    3640:	ab 8f       	std	Y+27, r26	; 0x1b
    3642:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3644:	69 8d       	ldd	r22, Y+25	; 0x19
    3646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	4a ef       	ldi	r20, 0xFA	; 250
    3652:	54 e4       	ldi	r21, 0x44	; 68
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	8d 8b       	std	Y+21, r24	; 0x15
    365e:	9e 8b       	std	Y+22, r25	; 0x16
    3660:	af 8b       	std	Y+23, r26	; 0x17
    3662:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3664:	6d 89       	ldd	r22, Y+21	; 0x15
    3666:	7e 89       	ldd	r23, Y+22	; 0x16
    3668:	8f 89       	ldd	r24, Y+23	; 0x17
    366a:	98 8d       	ldd	r25, Y+24	; 0x18
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e8       	ldi	r20, 0x80	; 128
    3672:	5f e3       	ldi	r21, 0x3F	; 63
    3674:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3678:	88 23       	and	r24, r24
    367a:	2c f4       	brge	.+10     	; 0x3686 <LED_u8LedPortBlink+0xaa>
		__ticks = 1;
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	9c 8b       	std	Y+20, r25	; 0x14
    3682:	8b 8b       	std	Y+19, r24	; 0x13
    3684:	3f c0       	rjmp	.+126    	; 0x3704 <LED_u8LedPortBlink+0x128>
	else if (__tmp > 65535)
    3686:	6d 89       	ldd	r22, Y+21	; 0x15
    3688:	7e 89       	ldd	r23, Y+22	; 0x16
    368a:	8f 89       	ldd	r24, Y+23	; 0x17
    368c:	98 8d       	ldd	r25, Y+24	; 0x18
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	3f ef       	ldi	r19, 0xFF	; 255
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	57 e4       	ldi	r21, 0x47	; 71
    3696:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369a:	18 16       	cp	r1, r24
    369c:	4c f5       	brge	.+82     	; 0x36f0 <LED_u8LedPortBlink+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369e:	69 8d       	ldd	r22, Y+25	; 0x19
    36a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e2       	ldi	r20, 0x20	; 32
    36ac:	51 e4       	ldi	r21, 0x41	; 65
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9c 8b       	std	Y+20, r25	; 0x14
    36c4:	8b 8b       	std	Y+19, r24	; 0x13
    36c6:	0f c0       	rjmp	.+30     	; 0x36e6 <LED_u8LedPortBlink+0x10a>
    36c8:	88 ec       	ldi	r24, 0xC8	; 200
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	9a 8b       	std	Y+18, r25	; 0x12
    36ce:	89 8b       	std	Y+17, r24	; 0x11
    36d0:	89 89       	ldd	r24, Y+17	; 0x11
    36d2:	9a 89       	ldd	r25, Y+18	; 0x12
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <LED_u8LedPortBlink+0xf8>
    36d8:	9a 8b       	std	Y+18, r25	; 0x12
    36da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36dc:	8b 89       	ldd	r24, Y+19	; 0x13
    36de:	9c 89       	ldd	r25, Y+20	; 0x14
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	9c 8b       	std	Y+20, r25	; 0x14
    36e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e6:	8b 89       	ldd	r24, Y+19	; 0x13
    36e8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	69 f7       	brne	.-38     	; 0x36c8 <LED_u8LedPortBlink+0xec>
    36ee:	14 c0       	rjmp	.+40     	; 0x3718 <LED_u8LedPortBlink+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f0:	6d 89       	ldd	r22, Y+21	; 0x15
    36f2:	7e 89       	ldd	r23, Y+22	; 0x16
    36f4:	8f 89       	ldd	r24, Y+23	; 0x17
    36f6:	98 8d       	ldd	r25, Y+24	; 0x18
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9c 8b       	std	Y+20, r25	; 0x14
    3702:	8b 8b       	std	Y+19, r24	; 0x13
    3704:	8b 89       	ldd	r24, Y+19	; 0x13
    3706:	9c 89       	ldd	r25, Y+20	; 0x14
    3708:	98 8b       	std	Y+16, r25	; 0x10
    370a:	8f 87       	std	Y+15, r24	; 0x0f
    370c:	8f 85       	ldd	r24, Y+15	; 0x0f
    370e:	98 89       	ldd	r25, Y+16	; 0x10
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <LED_u8LedPortBlink+0x134>
    3714:	98 8b       	std	Y+16, r25	; 0x10
    3716:	8f 87       	std	Y+15, r24	; 0x0f
		if(error_status==E_OK){
    3718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    371a:	88 23       	and	r24, r24
    371c:	09 f0       	breq	.+2      	; 0x3720 <LED_u8LedPortBlink+0x144>
    371e:	7d c0       	rjmp	.+250    	; 0x381a <LED_u8LedPortBlink+0x23e>
		error_status = LED_u8LedPortOff(port_id);
    3720:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3722:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_u8LedPortOff>
    3726:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    3728:	88 a1       	ldd	r24, Y+32	; 0x20
    372a:	99 a1       	ldd	r25, Y+33	; 0x21
    372c:	cc 01       	movw	r24, r24
    372e:	a0 e0       	ldi	r26, 0x00	; 0
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	8b 87       	std	Y+11, r24	; 0x0b
    3740:	9c 87       	std	Y+12, r25	; 0x0c
    3742:	ad 87       	std	Y+13, r26	; 0x0d
    3744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3746:	6b 85       	ldd	r22, Y+11	; 0x0b
    3748:	7c 85       	ldd	r23, Y+12	; 0x0c
    374a:	8d 85       	ldd	r24, Y+13	; 0x0d
    374c:	9e 85       	ldd	r25, Y+14	; 0x0e
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	4a ef       	ldi	r20, 0xFA	; 250
    3754:	54 e4       	ldi	r21, 0x44	; 68
    3756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	8f 83       	std	Y+7, r24	; 0x07
    3760:	98 87       	std	Y+8, r25	; 0x08
    3762:	a9 87       	std	Y+9, r26	; 0x09
    3764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3766:	6f 81       	ldd	r22, Y+7	; 0x07
    3768:	78 85       	ldd	r23, Y+8	; 0x08
    376a:	89 85       	ldd	r24, Y+9	; 0x09
    376c:	9a 85       	ldd	r25, Y+10	; 0x0a
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e8       	ldi	r20, 0x80	; 128
    3774:	5f e3       	ldi	r21, 0x3F	; 63
    3776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    377a:	88 23       	and	r24, r24
    377c:	2c f4       	brge	.+10     	; 0x3788 <LED_u8LedPortBlink+0x1ac>
		__ticks = 1;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	9e 83       	std	Y+6, r25	; 0x06
    3784:	8d 83       	std	Y+5, r24	; 0x05
    3786:	3f c0       	rjmp	.+126    	; 0x3806 <LED_u8LedPortBlink+0x22a>
	else if (__tmp > 65535)
    3788:	6f 81       	ldd	r22, Y+7	; 0x07
    378a:	78 85       	ldd	r23, Y+8	; 0x08
    378c:	89 85       	ldd	r24, Y+9	; 0x09
    378e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	3f ef       	ldi	r19, 0xFF	; 255
    3794:	4f e7       	ldi	r20, 0x7F	; 127
    3796:	57 e4       	ldi	r21, 0x47	; 71
    3798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    379c:	18 16       	cp	r1, r24
    379e:	4c f5       	brge	.+82     	; 0x37f2 <LED_u8LedPortBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e2       	ldi	r20, 0x20	; 32
    37ae:	51 e4       	ldi	r21, 0x41	; 65
    37b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	bc 01       	movw	r22, r24
    37ba:	cd 01       	movw	r24, r26
    37bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	9e 83       	std	Y+6, r25	; 0x06
    37c6:	8d 83       	std	Y+5, r24	; 0x05
    37c8:	0f c0       	rjmp	.+30     	; 0x37e8 <LED_u8LedPortBlink+0x20c>
    37ca:	88 ec       	ldi	r24, 0xC8	; 200
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9c 83       	std	Y+4, r25	; 0x04
    37d0:	8b 83       	std	Y+3, r24	; 0x03
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <LED_u8LedPortBlink+0x1fa>
    37da:	9c 83       	std	Y+4, r25	; 0x04
    37dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37de:	8d 81       	ldd	r24, Y+5	; 0x05
    37e0:	9e 81       	ldd	r25, Y+6	; 0x06
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	9e 83       	std	Y+6, r25	; 0x06
    37e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ea:	9e 81       	ldd	r25, Y+6	; 0x06
    37ec:	00 97       	sbiw	r24, 0x00	; 0
    37ee:	69 f7       	brne	.-38     	; 0x37ca <LED_u8LedPortBlink+0x1ee>
    37f0:	14 c0       	rjmp	.+40     	; 0x381a <LED_u8LedPortBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f2:	6f 81       	ldd	r22, Y+7	; 0x07
    37f4:	78 85       	ldd	r23, Y+8	; 0x08
    37f6:	89 85       	ldd	r24, Y+9	; 0x09
    37f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	9e 83       	std	Y+6, r25	; 0x06
    3804:	8d 83       	std	Y+5, r24	; 0x05
    3806:	8d 81       	ldd	r24, Y+5	; 0x05
    3808:	9e 81       	ldd	r25, Y+6	; 0x06
    380a:	9a 83       	std	Y+2, r25	; 0x02
    380c:	89 83       	std	Y+1, r24	; 0x01
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	9a 81       	ldd	r25, Y+2	; 0x02
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <LED_u8LedPortBlink+0x236>
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	89 83       	std	Y+1, r24	; 0x01
		}
		}

	return error_status;
    381a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    381c:	a1 96       	adiw	r28, 0x21	; 33
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <LCD_vidWriteData>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"lcd_cfg.h"

void LCD_vidWriteData(uint8_t data)
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	2f 97       	sbiw	r28, 0x0f	; 15
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    3844:	82 e0       	ldi	r24, 0x02	; 2
    3846:	67 e0       	ldi	r22, 0x07	; 7
    3848:	41 e0       	ldi	r20, 0x01	; 1
    384a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    384e:	82 e0       	ldi	r24, 0x02	; 2
    3850:	65 e0       	ldi	r22, 0x05	; 5
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,data);
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	6f 85       	ldd	r22, Y+15	; 0x0f
    385c:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3860:	82 e0       	ldi	r24, 0x02	; 2
    3862:	66 e0       	ldi	r22, 0x06	; 6
    3864:	41 e0       	ldi	r20, 0x01	; 1
    3866:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a0 e0       	ldi	r26, 0x00	; 0
    3870:	b0 e4       	ldi	r27, 0x40	; 64
    3872:	8b 87       	std	Y+11, r24	; 0x0b
    3874:	9c 87       	std	Y+12, r25	; 0x0c
    3876:	ad 87       	std	Y+13, r26	; 0x0d
    3878:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    387a:	6b 85       	ldd	r22, Y+11	; 0x0b
    387c:	7c 85       	ldd	r23, Y+12	; 0x0c
    387e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3880:	9e 85       	ldd	r25, Y+14	; 0x0e
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	4a ef       	ldi	r20, 0xFA	; 250
    3888:	54 e4       	ldi	r21, 0x44	; 68
    388a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	8f 83       	std	Y+7, r24	; 0x07
    3894:	98 87       	std	Y+8, r25	; 0x08
    3896:	a9 87       	std	Y+9, r26	; 0x09
    3898:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    389a:	6f 81       	ldd	r22, Y+7	; 0x07
    389c:	78 85       	ldd	r23, Y+8	; 0x08
    389e:	89 85       	ldd	r24, Y+9	; 0x09
    38a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e8       	ldi	r20, 0x80	; 128
    38a8:	5f e3       	ldi	r21, 0x3F	; 63
    38aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ae:	88 23       	and	r24, r24
    38b0:	2c f4       	brge	.+10     	; 0x38bc <LCD_vidWriteData+0x8e>
		__ticks = 1;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9e 83       	std	Y+6, r25	; 0x06
    38b8:	8d 83       	std	Y+5, r24	; 0x05
    38ba:	3f c0       	rjmp	.+126    	; 0x393a <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    38bc:	6f 81       	ldd	r22, Y+7	; 0x07
    38be:	78 85       	ldd	r23, Y+8	; 0x08
    38c0:	89 85       	ldd	r24, Y+9	; 0x09
    38c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	3f ef       	ldi	r19, 0xFF	; 255
    38c8:	4f e7       	ldi	r20, 0x7F	; 127
    38ca:	57 e4       	ldi	r21, 0x47	; 71
    38cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38d0:	18 16       	cp	r1, r24
    38d2:	4c f5       	brge	.+82     	; 0x3926 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38da:	9e 85       	ldd	r25, Y+14	; 0x0e
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	40 e2       	ldi	r20, 0x20	; 32
    38e2:	51 e4       	ldi	r21, 0x41	; 65
    38e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	bc 01       	movw	r22, r24
    38ee:	cd 01       	movw	r24, r26
    38f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
    38fc:	0f c0       	rjmp	.+30     	; 0x391c <LCD_vidWriteData+0xee>
    38fe:	88 ec       	ldi	r24, 0xC8	; 200
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	9c 83       	std	Y+4, r25	; 0x04
    3904:	8b 83       	std	Y+3, r24	; 0x03
    3906:	8b 81       	ldd	r24, Y+3	; 0x03
    3908:	9c 81       	ldd	r25, Y+4	; 0x04
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <LCD_vidWriteData+0xdc>
    390e:	9c 83       	std	Y+4, r25	; 0x04
    3910:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	9e 83       	std	Y+6, r25	; 0x06
    391a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391c:	8d 81       	ldd	r24, Y+5	; 0x05
    391e:	9e 81       	ldd	r25, Y+6	; 0x06
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	69 f7       	brne	.-38     	; 0x38fe <LCD_vidWriteData+0xd0>
    3924:	14 c0       	rjmp	.+40     	; 0x394e <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3926:	6f 81       	ldd	r22, Y+7	; 0x07
    3928:	78 85       	ldd	r23, Y+8	; 0x08
    392a:	89 85       	ldd	r24, Y+9	; 0x09
    392c:	9a 85       	ldd	r25, Y+10	; 0x0a
    392e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9e 83       	std	Y+6, r25	; 0x06
    3938:	8d 83       	std	Y+5, r24	; 0x05
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
    393c:	9e 81       	ldd	r25, Y+6	; 0x06
    393e:	9a 83       	std	Y+2, r25	; 0x02
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	f1 f7       	brne	.-4      	; 0x3946 <LCD_vidWriteData+0x118>
    394a:	9a 83       	std	Y+2, r25	; 0x02
    394c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    394e:	82 e0       	ldi	r24, 0x02	; 2
    3950:	66 e0       	ldi	r22, 0x06	; 6
    3952:	40 e0       	ldi	r20, 0x00	; 0
    3954:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
}
    3958:	2f 96       	adiw	r28, 0x0f	; 15
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8_t command)
{
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	2f 97       	sbiw	r28, 0x0f	; 15
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	67 e0       	ldi	r22, 0x07	; 7
    3984:	40 e0       	ldi	r20, 0x00	; 0
    3986:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    398a:	82 e0       	ldi	r24, 0x02	; 2
    398c:	65 e0       	ldi	r22, 0x05	; 5
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,command);
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	6f 85       	ldd	r22, Y+15	; 0x0f
    3998:	0e 94 1d 11 	call	0x223a	; 0x223a <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    399c:	82 e0       	ldi	r24, 0x02	; 2
    399e:	66 e0       	ldi	r22, 0x06	; 6
    39a0:	41 e0       	ldi	r20, 0x01	; 1
    39a2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	a0 e0       	ldi	r26, 0x00	; 0
    39ac:	b0 e4       	ldi	r27, 0x40	; 64
    39ae:	8b 87       	std	Y+11, r24	; 0x0b
    39b0:	9c 87       	std	Y+12, r25	; 0x0c
    39b2:	ad 87       	std	Y+13, r26	; 0x0d
    39b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    39bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	4a ef       	ldi	r20, 0xFA	; 250
    39c4:	54 e4       	ldi	r21, 0x44	; 68
    39c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	8f 83       	std	Y+7, r24	; 0x07
    39d0:	98 87       	std	Y+8, r25	; 0x08
    39d2:	a9 87       	std	Y+9, r26	; 0x09
    39d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39d6:	6f 81       	ldd	r22, Y+7	; 0x07
    39d8:	78 85       	ldd	r23, Y+8	; 0x08
    39da:	89 85       	ldd	r24, Y+9	; 0x09
    39dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	40 e8       	ldi	r20, 0x80	; 128
    39e4:	5f e3       	ldi	r21, 0x3F	; 63
    39e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ea:	88 23       	and	r24, r24
    39ec:	2c f4       	brge	.+10     	; 0x39f8 <LCD_vidWriteCmd+0x8e>
		__ticks = 1;
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	9e 83       	std	Y+6, r25	; 0x06
    39f4:	8d 83       	std	Y+5, r24	; 0x05
    39f6:	3f c0       	rjmp	.+126    	; 0x3a76 <LCD_vidWriteCmd+0x10c>
	else if (__tmp > 65535)
    39f8:	6f 81       	ldd	r22, Y+7	; 0x07
    39fa:	78 85       	ldd	r23, Y+8	; 0x08
    39fc:	89 85       	ldd	r24, Y+9	; 0x09
    39fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	3f ef       	ldi	r19, 0xFF	; 255
    3a04:	4f e7       	ldi	r20, 0x7F	; 127
    3a06:	57 e4       	ldi	r21, 0x47	; 71
    3a08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a0c:	18 16       	cp	r1, r24
    3a0e:	4c f5       	brge	.+82     	; 0x3a62 <LCD_vidWriteCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e2       	ldi	r20, 0x20	; 32
    3a1e:	51 e4       	ldi	r21, 0x41	; 65
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	bc 01       	movw	r22, r24
    3a2a:	cd 01       	movw	r24, r26
    3a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	9e 83       	std	Y+6, r25	; 0x06
    3a36:	8d 83       	std	Y+5, r24	; 0x05
    3a38:	0f c0       	rjmp	.+30     	; 0x3a58 <LCD_vidWriteCmd+0xee>
    3a3a:	88 ec       	ldi	r24, 0xC8	; 200
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	9c 83       	std	Y+4, r25	; 0x04
    3a40:	8b 83       	std	Y+3, r24	; 0x03
    3a42:	8b 81       	ldd	r24, Y+3	; 0x03
    3a44:	9c 81       	ldd	r25, Y+4	; 0x04
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <LCD_vidWriteCmd+0xdc>
    3a4a:	9c 83       	std	Y+4, r25	; 0x04
    3a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a50:	9e 81       	ldd	r25, Y+6	; 0x06
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a58:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	69 f7       	brne	.-38     	; 0x3a3a <LCD_vidWriteCmd+0xd0>
    3a60:	14 c0       	rjmp	.+40     	; 0x3a8a <LCD_vidWriteCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a62:	6f 81       	ldd	r22, Y+7	; 0x07
    3a64:	78 85       	ldd	r23, Y+8	; 0x08
    3a66:	89 85       	ldd	r24, Y+9	; 0x09
    3a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	9a 83       	std	Y+2, r25	; 0x02
    3a7c:	89 83       	std	Y+1, r24	; 0x01
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	9a 81       	ldd	r25, Y+2	; 0x02
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	f1 f7       	brne	.-4      	; 0x3a82 <LCD_vidWriteCmd+0x118>
    3a86:	9a 83       	std	Y+2, r25	; 0x02
    3a88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3a8a:	82 e0       	ldi	r24, 0x02	; 2
    3a8c:	66 e0       	ldi	r22, 0x06	; 6
    3a8e:	40 e0       	ldi	r20, 0x00	; 0
    3a90:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <DIO_u8SetPinValue>
}
    3a94:	2f 96       	adiw	r28, 0x0f	; 15
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	08 95       	ret

00003aa6 <LCD_vidInit>:

void LCD_vidInit(void)
{
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	e8 97       	sbiw	r28, 0x38	; 56
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	67 e0       	ldi	r22, 0x07	; 7
    3abe:	41 e0       	ldi	r20, 0x01	; 1
    3ac0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	65 e0       	ldi	r22, 0x05	; 5
    3ac8:	41 e0       	ldi	r20, 0x01	; 1
    3aca:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    3ace:	82 e0       	ldi	r24, 0x02	; 2
    3ad0:	66 e0       	ldi	r22, 0x06	; 6
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <DIO_u8SetPinMode>
	DIO_u8SetPortMode(LCD_Data_PORT,255);
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	6f ef       	ldi	r22, 0xFF	; 255
    3adc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortMode>
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	a0 e2       	ldi	r26, 0x20	; 32
    3ae6:	b2 e4       	ldi	r27, 0x42	; 66
    3ae8:	8d ab       	std	Y+53, r24	; 0x35
    3aea:	9e ab       	std	Y+54, r25	; 0x36
    3aec:	af ab       	std	Y+55, r26	; 0x37
    3aee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af0:	6d a9       	ldd	r22, Y+53	; 0x35
    3af2:	7e a9       	ldd	r23, Y+54	; 0x36
    3af4:	8f a9       	ldd	r24, Y+55	; 0x37
    3af6:	98 ad       	ldd	r25, Y+56	; 0x38
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	4a ef       	ldi	r20, 0xFA	; 250
    3afe:	54 e4       	ldi	r21, 0x44	; 68
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	89 ab       	std	Y+49, r24	; 0x31
    3b0a:	9a ab       	std	Y+50, r25	; 0x32
    3b0c:	ab ab       	std	Y+51, r26	; 0x33
    3b0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b10:	69 a9       	ldd	r22, Y+49	; 0x31
    3b12:	7a a9       	ldd	r23, Y+50	; 0x32
    3b14:	8b a9       	ldd	r24, Y+51	; 0x33
    3b16:	9c a9       	ldd	r25, Y+52	; 0x34
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e8       	ldi	r20, 0x80	; 128
    3b1e:	5f e3       	ldi	r21, 0x3F	; 63
    3b20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b24:	88 23       	and	r24, r24
    3b26:	2c f4       	brge	.+10     	; 0x3b32 <LCD_vidInit+0x8c>
		__ticks = 1;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	98 ab       	std	Y+48, r25	; 0x30
    3b2e:	8f a7       	std	Y+47, r24	; 0x2f
    3b30:	3f c0       	rjmp	.+126    	; 0x3bb0 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    3b32:	69 a9       	ldd	r22, Y+49	; 0x31
    3b34:	7a a9       	ldd	r23, Y+50	; 0x32
    3b36:	8b a9       	ldd	r24, Y+51	; 0x33
    3b38:	9c a9       	ldd	r25, Y+52	; 0x34
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	3f ef       	ldi	r19, 0xFF	; 255
    3b3e:	4f e7       	ldi	r20, 0x7F	; 127
    3b40:	57 e4       	ldi	r21, 0x47	; 71
    3b42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b46:	18 16       	cp	r1, r24
    3b48:	4c f5       	brge	.+82     	; 0x3b9c <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b4a:	6d a9       	ldd	r22, Y+53	; 0x35
    3b4c:	7e a9       	ldd	r23, Y+54	; 0x36
    3b4e:	8f a9       	ldd	r24, Y+55	; 0x37
    3b50:	98 ad       	ldd	r25, Y+56	; 0x38
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e2       	ldi	r20, 0x20	; 32
    3b58:	51 e4       	ldi	r21, 0x41	; 65
    3b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	bc 01       	movw	r22, r24
    3b64:	cd 01       	movw	r24, r26
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	98 ab       	std	Y+48, r25	; 0x30
    3b70:	8f a7       	std	Y+47, r24	; 0x2f
    3b72:	0f c0       	rjmp	.+30     	; 0x3b92 <LCD_vidInit+0xec>
    3b74:	88 ec       	ldi	r24, 0xC8	; 200
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	9e a7       	std	Y+46, r25	; 0x2e
    3b7a:	8d a7       	std	Y+45, r24	; 0x2d
    3b7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	f1 f7       	brne	.-4      	; 0x3b80 <LCD_vidInit+0xda>
    3b84:	9e a7       	std	Y+46, r25	; 0x2e
    3b86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	98 ab       	std	Y+48, r25	; 0x30
    3b90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b92:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b94:	98 a9       	ldd	r25, Y+48	; 0x30
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	69 f7       	brne	.-38     	; 0x3b74 <LCD_vidInit+0xce>
    3b9a:	14 c0       	rjmp	.+40     	; 0x3bc4 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9c:	69 a9       	ldd	r22, Y+49	; 0x31
    3b9e:	7a a9       	ldd	r23, Y+50	; 0x32
    3ba0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ba2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	98 ab       	std	Y+48, r25	; 0x30
    3bae:	8f a7       	std	Y+47, r24	; 0x2f
    3bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb4:	9c a7       	std	Y+44, r25	; 0x2c
    3bb6:	8b a7       	std	Y+43, r24	; 0x2b
    3bb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bba:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bbc:	01 97       	sbiw	r24, 0x01	; 1
    3bbe:	f1 f7       	brne	.-4      	; 0x3bbc <LCD_vidInit+0x116>
    3bc0:	9c a7       	std	Y+44, r25	; 0x2c
    3bc2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_vidWriteCmd(0b00111000);
    3bc4:	88 e3       	ldi	r24, 0x38	; 56
    3bc6:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	a0 e0       	ldi	r26, 0x00	; 0
    3bd0:	b0 e4       	ldi	r27, 0x40	; 64
    3bd2:	8f a3       	std	Y+39, r24	; 0x27
    3bd4:	98 a7       	std	Y+40, r25	; 0x28
    3bd6:	a9 a7       	std	Y+41, r26	; 0x29
    3bd8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bda:	6f a1       	ldd	r22, Y+39	; 0x27
    3bdc:	78 a5       	ldd	r23, Y+40	; 0x28
    3bde:	89 a5       	ldd	r24, Y+41	; 0x29
    3be0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	4a ef       	ldi	r20, 0xFA	; 250
    3be8:	54 e4       	ldi	r21, 0x44	; 68
    3bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	8b a3       	std	Y+35, r24	; 0x23
    3bf4:	9c a3       	std	Y+36, r25	; 0x24
    3bf6:	ad a3       	std	Y+37, r26	; 0x25
    3bf8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    3bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    3bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    3c00:	9e a1       	ldd	r25, Y+38	; 0x26
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	40 e8       	ldi	r20, 0x80	; 128
    3c08:	5f e3       	ldi	r21, 0x3F	; 63
    3c0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c0e:	88 23       	and	r24, r24
    3c10:	2c f4       	brge	.+10     	; 0x3c1c <LCD_vidInit+0x176>
		__ticks = 1;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	9a a3       	std	Y+34, r25	; 0x22
    3c18:	89 a3       	std	Y+33, r24	; 0x21
    3c1a:	3f c0       	rjmp	.+126    	; 0x3c9a <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    3c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    3c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    3c20:	8d a1       	ldd	r24, Y+37	; 0x25
    3c22:	9e a1       	ldd	r25, Y+38	; 0x26
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	3f ef       	ldi	r19, 0xFF	; 255
    3c28:	4f e7       	ldi	r20, 0x7F	; 127
    3c2a:	57 e4       	ldi	r21, 0x47	; 71
    3c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c30:	18 16       	cp	r1, r24
    3c32:	4c f5       	brge	.+82     	; 0x3c86 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c34:	6f a1       	ldd	r22, Y+39	; 0x27
    3c36:	78 a5       	ldd	r23, Y+40	; 0x28
    3c38:	89 a5       	ldd	r24, Y+41	; 0x29
    3c3a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	40 e2       	ldi	r20, 0x20	; 32
    3c42:	51 e4       	ldi	r21, 0x41	; 65
    3c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	bc 01       	movw	r22, r24
    3c4e:	cd 01       	movw	r24, r26
    3c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	9a a3       	std	Y+34, r25	; 0x22
    3c5a:	89 a3       	std	Y+33, r24	; 0x21
    3c5c:	0f c0       	rjmp	.+30     	; 0x3c7c <LCD_vidInit+0x1d6>
    3c5e:	88 ec       	ldi	r24, 0xC8	; 200
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	98 a3       	std	Y+32, r25	; 0x20
    3c64:	8f 8f       	std	Y+31, r24	; 0x1f
    3c66:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c68:	98 a1       	ldd	r25, Y+32	; 0x20
    3c6a:	01 97       	sbiw	r24, 0x01	; 1
    3c6c:	f1 f7       	brne	.-4      	; 0x3c6a <LCD_vidInit+0x1c4>
    3c6e:	98 a3       	std	Y+32, r25	; 0x20
    3c70:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c72:	89 a1       	ldd	r24, Y+33	; 0x21
    3c74:	9a a1       	ldd	r25, Y+34	; 0x22
    3c76:	01 97       	sbiw	r24, 0x01	; 1
    3c78:	9a a3       	std	Y+34, r25	; 0x22
    3c7a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3c7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3c80:	00 97       	sbiw	r24, 0x00	; 0
    3c82:	69 f7       	brne	.-38     	; 0x3c5e <LCD_vidInit+0x1b8>
    3c84:	14 c0       	rjmp	.+40     	; 0x3cae <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c86:	6b a1       	ldd	r22, Y+35	; 0x23
    3c88:	7c a1       	ldd	r23, Y+36	; 0x24
    3c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	9a a3       	std	Y+34, r25	; 0x22
    3c98:	89 a3       	std	Y+33, r24	; 0x21
    3c9a:	89 a1       	ldd	r24, Y+33	; 0x21
    3c9c:	9a a1       	ldd	r25, Y+34	; 0x22
    3c9e:	9e 8f       	std	Y+30, r25	; 0x1e
    3ca0:	8d 8f       	std	Y+29, r24	; 0x1d
    3ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ca6:	01 97       	sbiw	r24, 0x01	; 1
    3ca8:	f1 f7       	brne	.-4      	; 0x3ca6 <LCD_vidInit+0x200>
    3caa:	9e 8f       	std	Y+30, r25	; 0x1e
    3cac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidWriteCmd(0b00001100);
    3cae:	8c e0       	ldi	r24, 0x0C	; 12
    3cb0:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	a0 e0       	ldi	r26, 0x00	; 0
    3cba:	b0 e4       	ldi	r27, 0x40	; 64
    3cbc:	89 8f       	std	Y+25, r24	; 0x19
    3cbe:	9a 8f       	std	Y+26, r25	; 0x1a
    3cc0:	ab 8f       	std	Y+27, r26	; 0x1b
    3cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    3cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	4a ef       	ldi	r20, 0xFA	; 250
    3cd2:	54 e4       	ldi	r21, 0x44	; 68
    3cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	8d 8b       	std	Y+21, r24	; 0x15
    3cde:	9e 8b       	std	Y+22, r25	; 0x16
    3ce0:	af 8b       	std	Y+23, r26	; 0x17
    3ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    3cea:	98 8d       	ldd	r25, Y+24	; 0x18
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	40 e8       	ldi	r20, 0x80	; 128
    3cf2:	5f e3       	ldi	r21, 0x3F	; 63
    3cf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf8:	88 23       	and	r24, r24
    3cfa:	2c f4       	brge	.+10     	; 0x3d06 <LCD_vidInit+0x260>
		__ticks = 1;
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	9c 8b       	std	Y+20, r25	; 0x14
    3d02:	8b 8b       	std	Y+19, r24	; 0x13
    3d04:	3f c0       	rjmp	.+126    	; 0x3d84 <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    3d06:	6d 89       	ldd	r22, Y+21	; 0x15
    3d08:	7e 89       	ldd	r23, Y+22	; 0x16
    3d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	3f ef       	ldi	r19, 0xFF	; 255
    3d12:	4f e7       	ldi	r20, 0x7F	; 127
    3d14:	57 e4       	ldi	r21, 0x47	; 71
    3d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d1a:	18 16       	cp	r1, r24
    3d1c:	4c f5       	brge	.+82     	; 0x3d70 <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e2       	ldi	r20, 0x20	; 32
    3d2c:	51 e4       	ldi	r21, 0x41	; 65
    3d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	9c 8b       	std	Y+20, r25	; 0x14
    3d44:	8b 8b       	std	Y+19, r24	; 0x13
    3d46:	0f c0       	rjmp	.+30     	; 0x3d66 <LCD_vidInit+0x2c0>
    3d48:	88 ec       	ldi	r24, 0xC8	; 200
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	9a 8b       	std	Y+18, r25	; 0x12
    3d4e:	89 8b       	std	Y+17, r24	; 0x11
    3d50:	89 89       	ldd	r24, Y+17	; 0x11
    3d52:	9a 89       	ldd	r25, Y+18	; 0x12
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <LCD_vidInit+0x2ae>
    3d58:	9a 8b       	std	Y+18, r25	; 0x12
    3d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d60:	01 97       	sbiw	r24, 0x01	; 1
    3d62:	9c 8b       	std	Y+20, r25	; 0x14
    3d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d66:	8b 89       	ldd	r24, Y+19	; 0x13
    3d68:	9c 89       	ldd	r25, Y+20	; 0x14
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	69 f7       	brne	.-38     	; 0x3d48 <LCD_vidInit+0x2a2>
    3d6e:	14 c0       	rjmp	.+40     	; 0x3d98 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d70:	6d 89       	ldd	r22, Y+21	; 0x15
    3d72:	7e 89       	ldd	r23, Y+22	; 0x16
    3d74:	8f 89       	ldd	r24, Y+23	; 0x17
    3d76:	98 8d       	ldd	r25, Y+24	; 0x18
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	9c 8b       	std	Y+20, r25	; 0x14
    3d82:	8b 8b       	std	Y+19, r24	; 0x13
    3d84:	8b 89       	ldd	r24, Y+19	; 0x13
    3d86:	9c 89       	ldd	r25, Y+20	; 0x14
    3d88:	98 8b       	std	Y+16, r25	; 0x10
    3d8a:	8f 87       	std	Y+15, r24	; 0x0f
    3d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d8e:	98 89       	ldd	r25, Y+16	; 0x10
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	f1 f7       	brne	.-4      	; 0x3d90 <LCD_vidInit+0x2ea>
    3d94:	98 8b       	std	Y+16, r25	; 0x10
    3d96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000001);
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	a0 e0       	ldi	r26, 0x00	; 0
    3da4:	b0 e4       	ldi	r27, 0x40	; 64
    3da6:	8b 87       	std	Y+11, r24	; 0x0b
    3da8:	9c 87       	std	Y+12, r25	; 0x0c
    3daa:	ad 87       	std	Y+13, r26	; 0x0d
    3dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	4a ef       	ldi	r20, 0xFA	; 250
    3dbc:	54 e4       	ldi	r21, 0x44	; 68
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	8f 83       	std	Y+7, r24	; 0x07
    3dc8:	98 87       	std	Y+8, r25	; 0x08
    3dca:	a9 87       	std	Y+9, r26	; 0x09
    3dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dce:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd0:	78 85       	ldd	r23, Y+8	; 0x08
    3dd2:	89 85       	ldd	r24, Y+9	; 0x09
    3dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd6:	20 e0       	ldi	r18, 0x00	; 0
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	40 e8       	ldi	r20, 0x80	; 128
    3ddc:	5f e3       	ldi	r21, 0x3F	; 63
    3dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de2:	88 23       	and	r24, r24
    3de4:	2c f4       	brge	.+10     	; 0x3df0 <LCD_vidInit+0x34a>
		__ticks = 1;
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9e 83       	std	Y+6, r25	; 0x06
    3dec:	8d 83       	std	Y+5, r24	; 0x05
    3dee:	3f c0       	rjmp	.+126    	; 0x3e6e <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    3df0:	6f 81       	ldd	r22, Y+7	; 0x07
    3df2:	78 85       	ldd	r23, Y+8	; 0x08
    3df4:	89 85       	ldd	r24, Y+9	; 0x09
    3df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	3f ef       	ldi	r19, 0xFF	; 255
    3dfc:	4f e7       	ldi	r20, 0x7F	; 127
    3dfe:	57 e4       	ldi	r21, 0x47	; 71
    3e00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e04:	18 16       	cp	r1, r24
    3e06:	4c f5       	brge	.+82     	; 0x3e5a <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	40 e2       	ldi	r20, 0x20	; 32
    3e16:	51 e4       	ldi	r21, 0x41	; 65
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	9e 83       	std	Y+6, r25	; 0x06
    3e2e:	8d 83       	std	Y+5, r24	; 0x05
    3e30:	0f c0       	rjmp	.+30     	; 0x3e50 <LCD_vidInit+0x3aa>
    3e32:	88 ec       	ldi	r24, 0xC8	; 200
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	9c 83       	std	Y+4, r25	; 0x04
    3e38:	8b 83       	std	Y+3, r24	; 0x03
    3e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <LCD_vidInit+0x398>
    3e42:	9c 83       	std	Y+4, r25	; 0x04
    3e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4a:	01 97       	sbiw	r24, 0x01	; 1
    3e4c:	9e 83       	std	Y+6, r25	; 0x06
    3e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e50:	8d 81       	ldd	r24, Y+5	; 0x05
    3e52:	9e 81       	ldd	r25, Y+6	; 0x06
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	69 f7       	brne	.-38     	; 0x3e32 <LCD_vidInit+0x38c>
    3e58:	14 c0       	rjmp	.+40     	; 0x3e82 <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5c:	78 85       	ldd	r23, Y+8	; 0x08
    3e5e:	89 85       	ldd	r24, Y+9	; 0x09
    3e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	9e 83       	std	Y+6, r25	; 0x06
    3e6c:	8d 83       	std	Y+5, r24	; 0x05
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	9e 81       	ldd	r25, Y+6	; 0x06
    3e72:	9a 83       	std	Y+2, r25	; 0x02
    3e74:	89 83       	std	Y+1, r24	; 0x01
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	f1 f7       	brne	.-4      	; 0x3e7a <LCD_vidInit+0x3d4>
    3e7e:	9a 83       	std	Y+2, r25	; 0x02
    3e80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000110);
    3e82:	86 e0       	ldi	r24, 0x06	; 6
    3e84:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
}
    3e88:	e8 96       	adiw	r28, 0x38	; 56
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	cf 91       	pop	r28
    3e96:	df 91       	pop	r29
    3e98:	08 95       	ret

00003e9a <LCD_vidDisplayString>:

void LCD_vidDisplayString(uint8_t * string)
{
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <LCD_vidDisplayString+0x6>
    3ea0:	0f 92       	push	r0
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	9b 83       	std	Y+3, r25	; 0x03
    3ea8:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; string[i]!='\0'; i++)
    3eaa:	19 82       	std	Y+1, r1	; 0x01
    3eac:	14 c0       	rjmp	.+40     	; 0x3ed6 <LCD_vidDisplayString+0x3c>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	80 31       	cpi	r24, 0x10	; 16
    3eb2:	19 f4       	brne	.+6      	; 0x3eba <LCD_vidDisplayString+0x20>
    3eb4:	80 ec       	ldi	r24, 0xC0	; 192
    3eb6:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
		LCD_vidWriteData(string[i]);
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	e2 0f       	add	r30, r18
    3ec8:	f3 1f       	adc	r31, r19
    3eca:	80 81       	ld	r24, Z
    3ecc:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_vidWriteData>
	LCD_vidWriteCmd(0b00000110);
}

void LCD_vidDisplayString(uint8_t * string)
{
	for(uint8_t i=0; string[i]!='\0'; i++)
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	8f 5f       	subi	r24, 0xFF	; 255
    3ed4:	89 83       	std	Y+1, r24	; 0x01
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ede:	9b 81       	ldd	r25, Y+3	; 0x03
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	e2 0f       	add	r30, r18
    3ee4:	f3 1f       	adc	r31, r19
    3ee6:	80 81       	ld	r24, Z
    3ee8:	88 23       	and	r24, r24
    3eea:	09 f7       	brne	.-62     	; 0x3eae <LCD_vidDisplayString+0x14>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
		LCD_vidWriteData(string[i]);
	}
}
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	cf 91       	pop	r28
    3ef4:	df 91       	pop	r29
    3ef6:	08 95       	ret

00003ef8 <LCD_vidNewLine>:
void LCD_vidNewLine()
{
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b11000000);
    3f00:	80 ec       	ldi	r24, 0xC0	; 192
    3f02:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
}
    3f06:	cf 91       	pop	r28
    3f08:	df 91       	pop	r29
    3f0a:	08 95       	ret

00003f0c <LCD_vidDisplayStringLeftShift>:
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	62 97       	sbiw	r28, 0x12	; 18
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	9a 8b       	std	Y+18, r25	; 0x12
    3f22:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3f24:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3f26:	18 8a       	std	Y+16, r1	; 0x10
    3f28:	0e c0       	rjmp	.+28     	; 0x3f46 <LCD_vidDisplayStringLeftShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3f2a:	88 89       	ldd	r24, Y+16	; 0x10
    3f2c:	28 2f       	mov	r18, r24
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	89 89       	ldd	r24, Y+17	; 0x11
    3f32:	9a 89       	ldd	r25, Y+18	; 0x12
    3f34:	fc 01       	movw	r30, r24
    3f36:	e2 0f       	add	r30, r18
    3f38:	f3 1f       	adc	r31, r19
    3f3a:	80 81       	ld	r24, Z
    3f3c:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_vidWriteData>
	LCD_vidWriteCmd(0b11000000);
}
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3f40:	88 89       	ldd	r24, Y+16	; 0x10
    3f42:	8f 5f       	subi	r24, 0xFF	; 255
    3f44:	88 8b       	std	Y+16, r24	; 0x10
    3f46:	88 89       	ldd	r24, Y+16	; 0x10
    3f48:	28 2f       	mov	r18, r24
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	89 89       	ldd	r24, Y+17	; 0x11
    3f4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3f50:	fc 01       	movw	r30, r24
    3f52:	e2 0f       	add	r30, r18
    3f54:	f3 1f       	adc	r31, r19
    3f56:	80 81       	ld	r24, Z
    3f58:	88 23       	and	r24, r24
    3f5a:	39 f7       	brne	.-50     	; 0x3f2a <LCD_vidDisplayStringLeftShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f5e:	98 89       	ldd	r25, Y+16	; 0x10
    3f60:	69 2f       	mov	r22, r25
    3f62:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__udivmodqi4>
    3f66:	89 2f       	mov	r24, r25
    3f68:	80 31       	cpi	r24, 0x10	; 16
    3f6a:	19 f4       	brne	.+6      	; 0x3f72 <LCD_vidDisplayStringLeftShift+0x66>
    3f6c:	80 e8       	ldi	r24, 0x80	; 128
    3f6e:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011000);
    3f72:	88 e1       	ldi	r24, 0x18	; 24
    3f74:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	aa ef       	ldi	r26, 0xFA	; 250
    3f7e:	b3 e4       	ldi	r27, 0x43	; 67
    3f80:	8b 87       	std	Y+11, r24	; 0x0b
    3f82:	9c 87       	std	Y+12, r25	; 0x0c
    3f84:	ad 87       	std	Y+13, r26	; 0x0d
    3f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	4a ef       	ldi	r20, 0xFA	; 250
    3f96:	54 e4       	ldi	r21, 0x44	; 68
    3f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	8f 83       	std	Y+7, r24	; 0x07
    3fa2:	98 87       	std	Y+8, r25	; 0x08
    3fa4:	a9 87       	std	Y+9, r26	; 0x09
    3fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3faa:	78 85       	ldd	r23, Y+8	; 0x08
    3fac:	89 85       	ldd	r24, Y+9	; 0x09
    3fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e8       	ldi	r20, 0x80	; 128
    3fb6:	5f e3       	ldi	r21, 0x3F	; 63
    3fb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fbc:	88 23       	and	r24, r24
    3fbe:	2c f4       	brge	.+10     	; 0x3fca <LCD_vidDisplayStringLeftShift+0xbe>
		__ticks = 1;
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	3f c0       	rjmp	.+126    	; 0x4048 <LCD_vidDisplayStringLeftShift+0x13c>
	else if (__tmp > 65535)
    3fca:	6f 81       	ldd	r22, Y+7	; 0x07
    3fcc:	78 85       	ldd	r23, Y+8	; 0x08
    3fce:	89 85       	ldd	r24, Y+9	; 0x09
    3fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	3f ef       	ldi	r19, 0xFF	; 255
    3fd6:	4f e7       	ldi	r20, 0x7F	; 127
    3fd8:	57 e4       	ldi	r21, 0x47	; 71
    3fda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fde:	18 16       	cp	r1, r24
    3fe0:	4c f5       	brge	.+82     	; 0x4034 <LCD_vidDisplayStringLeftShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e2       	ldi	r20, 0x20	; 32
    3ff0:	51 e4       	ldi	r21, 0x41	; 65
    3ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	9e 83       	std	Y+6, r25	; 0x06
    4008:	8d 83       	std	Y+5, r24	; 0x05
    400a:	0f c0       	rjmp	.+30     	; 0x402a <LCD_vidDisplayStringLeftShift+0x11e>
    400c:	88 ec       	ldi	r24, 0xC8	; 200
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
    4014:	8b 81       	ldd	r24, Y+3	; 0x03
    4016:	9c 81       	ldd	r25, Y+4	; 0x04
    4018:	01 97       	sbiw	r24, 0x01	; 1
    401a:	f1 f7       	brne	.-4      	; 0x4018 <LCD_vidDisplayStringLeftShift+0x10c>
    401c:	9c 83       	std	Y+4, r25	; 0x04
    401e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	01 97       	sbiw	r24, 0x01	; 1
    4026:	9e 83       	std	Y+6, r25	; 0x06
    4028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402a:	8d 81       	ldd	r24, Y+5	; 0x05
    402c:	9e 81       	ldd	r25, Y+6	; 0x06
    402e:	00 97       	sbiw	r24, 0x00	; 0
    4030:	69 f7       	brne	.-38     	; 0x400c <LCD_vidDisplayStringLeftShift+0x100>
    4032:	14 c0       	rjmp	.+40     	; 0x405c <LCD_vidDisplayStringLeftShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4034:	6f 81       	ldd	r22, Y+7	; 0x07
    4036:	78 85       	ldd	r23, Y+8	; 0x08
    4038:	89 85       	ldd	r24, Y+9	; 0x09
    403a:	9a 85       	ldd	r25, Y+10	; 0x0a
    403c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	8d 81       	ldd	r24, Y+5	; 0x05
    404a:	9e 81       	ldd	r25, Y+6	; 0x06
    404c:	9a 83       	std	Y+2, r25	; 0x02
    404e:	89 83       	std	Y+1, r24	; 0x01
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	9a 81       	ldd	r25, Y+2	; 0x02
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	f1 f7       	brne	.-4      	; 0x4054 <LCD_vidDisplayStringLeftShift+0x148>
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    405c:	8f 85       	ldd	r24, Y+15	; 0x0f
    405e:	8f 5f       	subi	r24, 0xFF	; 255
    4060:	8f 87       	std	Y+15, r24	; 0x0f
    4062:	7c cf       	rjmp	.-264    	; 0x3f5c <LCD_vidDisplayStringLeftShift+0x50>

00004064 <LCD_vidDisplayStringRightShift>:
	}
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	62 97       	sbiw	r28, 0x12	; 18
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	f8 94       	cli
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	cd bf       	out	0x3d, r28	; 61
    4078:	9a 8b       	std	Y+18, r25	; 0x12
    407a:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    407c:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    407e:	18 8a       	std	Y+16, r1	; 0x10
    4080:	0e c0       	rjmp	.+28     	; 0x409e <LCD_vidDisplayStringRightShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    4082:	88 89       	ldd	r24, Y+16	; 0x10
    4084:	28 2f       	mov	r18, r24
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	89 89       	ldd	r24, Y+17	; 0x11
    408a:	9a 89       	ldd	r25, Y+18	; 0x12
    408c:	fc 01       	movw	r30, r24
    408e:	e2 0f       	add	r30, r18
    4090:	f3 1f       	adc	r31, r19
    4092:	80 81       	ld	r24, Z
    4094:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_vidWriteData>
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    4098:	88 89       	ldd	r24, Y+16	; 0x10
    409a:	8f 5f       	subi	r24, 0xFF	; 255
    409c:	88 8b       	std	Y+16, r24	; 0x10
    409e:	88 89       	ldd	r24, Y+16	; 0x10
    40a0:	28 2f       	mov	r18, r24
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	89 89       	ldd	r24, Y+17	; 0x11
    40a6:	9a 89       	ldd	r25, Y+18	; 0x12
    40a8:	fc 01       	movw	r30, r24
    40aa:	e2 0f       	add	r30, r18
    40ac:	f3 1f       	adc	r31, r19
    40ae:	80 81       	ld	r24, Z
    40b0:	88 23       	and	r24, r24
    40b2:	39 f7       	brne	.-50     	; 0x4082 <LCD_vidDisplayStringRightShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    40b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40b6:	98 89       	ldd	r25, Y+16	; 0x10
    40b8:	69 2f       	mov	r22, r25
    40ba:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__udivmodqi4>
    40be:	89 2f       	mov	r24, r25
    40c0:	80 31       	cpi	r24, 0x10	; 16
    40c2:	19 f4       	brne	.+6      	; 0x40ca <LCD_vidDisplayStringRightShift+0x66>
    40c4:	80 e8       	ldi	r24, 0x80	; 128
    40c6:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011100);
    40ca:	8c e1       	ldi	r24, 0x1C	; 28
    40cc:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	aa ef       	ldi	r26, 0xFA	; 250
    40d6:	b3 e4       	ldi	r27, 0x43	; 67
    40d8:	8b 87       	std	Y+11, r24	; 0x0b
    40da:	9c 87       	std	Y+12, r25	; 0x0c
    40dc:	ad 87       	std	Y+13, r26	; 0x0d
    40de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e8:	20 e0       	ldi	r18, 0x00	; 0
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	4a ef       	ldi	r20, 0xFA	; 250
    40ee:	54 e4       	ldi	r21, 0x44	; 68
    40f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f4:	dc 01       	movw	r26, r24
    40f6:	cb 01       	movw	r24, r22
    40f8:	8f 83       	std	Y+7, r24	; 0x07
    40fa:	98 87       	std	Y+8, r25	; 0x08
    40fc:	a9 87       	std	Y+9, r26	; 0x09
    40fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4100:	6f 81       	ldd	r22, Y+7	; 0x07
    4102:	78 85       	ldd	r23, Y+8	; 0x08
    4104:	89 85       	ldd	r24, Y+9	; 0x09
    4106:	9a 85       	ldd	r25, Y+10	; 0x0a
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	40 e8       	ldi	r20, 0x80	; 128
    410e:	5f e3       	ldi	r21, 0x3F	; 63
    4110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4114:	88 23       	and	r24, r24
    4116:	2c f4       	brge	.+10     	; 0x4122 <LCD_vidDisplayStringRightShift+0xbe>
		__ticks = 1;
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	9e 83       	std	Y+6, r25	; 0x06
    411e:	8d 83       	std	Y+5, r24	; 0x05
    4120:	3f c0       	rjmp	.+126    	; 0x41a0 <LCD_vidDisplayStringRightShift+0x13c>
	else if (__tmp > 65535)
    4122:	6f 81       	ldd	r22, Y+7	; 0x07
    4124:	78 85       	ldd	r23, Y+8	; 0x08
    4126:	89 85       	ldd	r24, Y+9	; 0x09
    4128:	9a 85       	ldd	r25, Y+10	; 0x0a
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	3f ef       	ldi	r19, 0xFF	; 255
    412e:	4f e7       	ldi	r20, 0x7F	; 127
    4130:	57 e4       	ldi	r21, 0x47	; 71
    4132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4136:	18 16       	cp	r1, r24
    4138:	4c f5       	brge	.+82     	; 0x418c <LCD_vidDisplayStringRightShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413a:	6b 85       	ldd	r22, Y+11	; 0x0b
    413c:	7c 85       	ldd	r23, Y+12	; 0x0c
    413e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4140:	9e 85       	ldd	r25, Y+14	; 0x0e
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e2       	ldi	r20, 0x20	; 32
    4148:	51 e4       	ldi	r21, 0x41	; 65
    414a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	bc 01       	movw	r22, r24
    4154:	cd 01       	movw	r24, r26
    4156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	9e 83       	std	Y+6, r25	; 0x06
    4160:	8d 83       	std	Y+5, r24	; 0x05
    4162:	0f c0       	rjmp	.+30     	; 0x4182 <LCD_vidDisplayStringRightShift+0x11e>
    4164:	88 ec       	ldi	r24, 0xC8	; 200
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9c 83       	std	Y+4, r25	; 0x04
    416a:	8b 83       	std	Y+3, r24	; 0x03
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	f1 f7       	brne	.-4      	; 0x4170 <LCD_vidDisplayStringRightShift+0x10c>
    4174:	9c 83       	std	Y+4, r25	; 0x04
    4176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4178:	8d 81       	ldd	r24, Y+5	; 0x05
    417a:	9e 81       	ldd	r25, Y+6	; 0x06
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	9e 83       	std	Y+6, r25	; 0x06
    4180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4182:	8d 81       	ldd	r24, Y+5	; 0x05
    4184:	9e 81       	ldd	r25, Y+6	; 0x06
    4186:	00 97       	sbiw	r24, 0x00	; 0
    4188:	69 f7       	brne	.-38     	; 0x4164 <LCD_vidDisplayStringRightShift+0x100>
    418a:	14 c0       	rjmp	.+40     	; 0x41b4 <LCD_vidDisplayStringRightShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418c:	6f 81       	ldd	r22, Y+7	; 0x07
    418e:	78 85       	ldd	r23, Y+8	; 0x08
    4190:	89 85       	ldd	r24, Y+9	; 0x09
    4192:	9a 85       	ldd	r25, Y+10	; 0x0a
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	9e 83       	std	Y+6, r25	; 0x06
    419e:	8d 83       	std	Y+5, r24	; 0x05
    41a0:	8d 81       	ldd	r24, Y+5	; 0x05
    41a2:	9e 81       	ldd	r25, Y+6	; 0x06
    41a4:	9a 83       	std	Y+2, r25	; 0x02
    41a6:	89 83       	std	Y+1, r24	; 0x01
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	9a 81       	ldd	r25, Y+2	; 0x02
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <LCD_vidDisplayStringRightShift+0x148>
    41b0:	9a 83       	std	Y+2, r25	; 0x02
    41b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    41b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b6:	8f 5f       	subi	r24, 0xFF	; 255
    41b8:	8f 87       	std	Y+15, r24	; 0x0f
    41ba:	7c cf       	rjmp	.-264    	; 0x40b4 <LCD_vidDisplayStringRightShift+0x50>

000041bc <LCD_vidClearDisplay>:
	}
}

void LCD_vidClearDisplay()
{
    41bc:	df 93       	push	r29
    41be:	cf 93       	push	r28
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b00000001);
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
}
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <LCD_vidGoTo>:

void LCD_vidGoTo(uint8_t x,uint8_t y)
{
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	00 d0       	rcall	.+0      	; 0x41d6 <LCD_vidGoTo+0x6>
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62
    41da:	89 83       	std	Y+1, r24	; 0x01
    41dc:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1&&y<=39)LCD_vidWriteCmd((0b10000000+y));
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	81 30       	cpi	r24, 0x01	; 1
    41e2:	41 f4       	brne	.+16     	; 0x41f4 <LCD_vidGoTo+0x24>
    41e4:	8a 81       	ldd	r24, Y+2	; 0x02
    41e6:	88 32       	cpi	r24, 0x28	; 40
    41e8:	28 f4       	brcc	.+10     	; 0x41f4 <LCD_vidGoTo+0x24>
    41ea:	8a 81       	ldd	r24, Y+2	; 0x02
    41ec:	80 58       	subi	r24, 0x80	; 128
    41ee:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
    41f2:	0f c0       	rjmp	.+30     	; 0x4212 <LCD_vidGoTo+0x42>
	else if(x==2&&(y+64)<103) LCD_vidWriteCmd((0b11000000+y));
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	82 30       	cpi	r24, 0x02	; 2
    41f8:	61 f4       	brne	.+24     	; 0x4212 <LCD_vidGoTo+0x42>
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
    41fc:	88 2f       	mov	r24, r24
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	80 5c       	subi	r24, 0xC0	; 192
    4202:	9f 4f       	sbci	r25, 0xFF	; 255
    4204:	87 36       	cpi	r24, 0x67	; 103
    4206:	91 05       	cpc	r25, r1
    4208:	24 f4       	brge	.+8      	; 0x4212 <LCD_vidGoTo+0x42>
    420a:	8a 81       	ldd	r24, Y+2	; 0x02
    420c:	80 54       	subi	r24, 0x40	; 64
    420e:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
}
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	08 95       	ret

0000421c <LCD_vidSetCursor>:

void LCD_vidSetCursor(uint8_t x,uint8_t y)
{
    421c:	df 93       	push	r29
    421e:	cf 93       	push	r28
    4220:	00 d0       	rcall	.+0      	; 0x4222 <LCD_vidSetCursor+0x6>
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	89 83       	std	Y+1, r24	; 0x01
    4228:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vidGoTo(x,y);
    422a:	89 81       	ldd	r24, Y+1	; 0x01
    422c:	6a 81       	ldd	r22, Y+2	; 0x02
    422e:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_vidGoTo>
	LCD_vidWriteCmd(0b00001111);
    4232:	8f e0       	ldi	r24, 0x0F	; 15
    4234:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
}
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <LCD_vidWriteInteger>:

void LCD_vidWriteInteger(uint16_ number)
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	cd b7       	in	r28, 0x3d	; 61
    4248:	de b7       	in	r29, 0x3e	; 62
    424a:	28 97       	sbiw	r28, 0x08	; 8
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	f8 94       	cli
    4250:	de bf       	out	0x3e, r29	; 62
    4252:	0f be       	out	0x3f, r0	; 63
    4254:	cd bf       	out	0x3d, r28	; 61
    4256:	98 87       	std	Y+8, r25	; 0x08
    4258:	8f 83       	std	Y+7, r24	; 0x07
	uint16_ num_mask=number,p=1;
    425a:	8f 81       	ldd	r24, Y+7	; 0x07
    425c:	98 85       	ldd	r25, Y+8	; 0x08
    425e:	9e 83       	std	Y+6, r25	; 0x06
    4260:	8d 83       	std	Y+5, r24	; 0x05
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9c 83       	std	Y+4, r25	; 0x04
    4268:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i=0;
    426a:	1a 82       	std	Y+2, r1	; 0x02
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	00 97       	sbiw	r24, 0x00	; 0
    4272:	f9 f4       	brne	.+62     	; 0x42b2 <LCD_vidWriteInteger+0x70>
    4274:	80 e3       	ldi	r24, 0x30	; 48
    4276:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_vidWriteData>
    427a:	1b c0       	rjmp	.+54     	; 0x42b2 <LCD_vidWriteInteger+0x70>
	for(;num_mask!=0;i++)
	{
		num_mask/=10;
    427c:	8d 81       	ldd	r24, Y+5	; 0x05
    427e:	9e 81       	ldd	r25, Y+6	; 0x06
    4280:	2a e0       	ldi	r18, 0x0A	; 10
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	b9 01       	movw	r22, r18
    4286:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodhi4>
    428a:	cb 01       	movw	r24, r22
    428c:	9e 83       	std	Y+6, r25	; 0x06
    428e:	8d 83       	std	Y+5, r24	; 0x05
		p*=10;
    4290:	8b 81       	ldd	r24, Y+3	; 0x03
    4292:	9c 81       	ldd	r25, Y+4	; 0x04
    4294:	9c 01       	movw	r18, r24
    4296:	22 0f       	add	r18, r18
    4298:	33 1f       	adc	r19, r19
    429a:	c9 01       	movw	r24, r18
    429c:	88 0f       	add	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	88 0f       	add	r24, r24
    42a2:	99 1f       	adc	r25, r25
    42a4:	82 0f       	add	r24, r18
    42a6:	93 1f       	adc	r25, r19
    42a8:	9c 83       	std	Y+4, r25	; 0x04
    42aa:	8b 83       	std	Y+3, r24	; 0x03
{
	uint16_ num_mask=number,p=1;
	uint8_t i=0;
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
	for(;num_mask!=0;i++)
    42ac:	8a 81       	ldd	r24, Y+2	; 0x02
    42ae:	8f 5f       	subi	r24, 0xFF	; 255
    42b0:	8a 83       	std	Y+2, r24	; 0x02
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	00 97       	sbiw	r24, 0x00	; 0
    42b8:	09 f7       	brne	.-62     	; 0x427c <LCD_vidWriteInteger+0x3a>
	{
		num_mask/=10;
		p*=10;
	}

	p/=10;
    42ba:	8b 81       	ldd	r24, Y+3	; 0x03
    42bc:	9c 81       	ldd	r25, Y+4	; 0x04
    42be:	2a e0       	ldi	r18, 0x0A	; 10
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	b9 01       	movw	r22, r18
    42c4:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodhi4>
    42c8:	cb 01       	movw	r24, r22
    42ca:	9c 83       	std	Y+4, r25	; 0x04
    42cc:	8b 83       	std	Y+3, r24	; 0x03
	nxtl = i - 16;
    42ce:	8a 81       	ldd	r24, Y+2	; 0x02
    42d0:	80 51       	subi	r24, 0x10	; 16
    42d2:	89 83       	std	Y+1, r24	; 0x01
	if(nxtl < 0) nxtl =0;
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	88 23       	and	r24, r24
    42d8:	0c f0       	brlt	.+2      	; 0x42dc <LCD_vidWriteInteger+0x9a>
    42da:	3e c0       	rjmp	.+124    	; 0x4358 <LCD_vidWriteInteger+0x116>
    42dc:	19 82       	std	Y+1, r1	; 0x01
    42de:	3c c0       	rjmp	.+120    	; 0x4358 <LCD_vidWriteInteger+0x116>
	for(;i>0;i--)
	{
		if(i==nxtl)LCD_vidWriteCmd(0b11000000);
    42e0:	8a 81       	ldd	r24, Y+2	; 0x02
    42e2:	28 2f       	mov	r18, r24
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	99 27       	eor	r25, r25
    42ea:	87 fd       	sbrc	r24, 7
    42ec:	90 95       	com	r25
    42ee:	28 17       	cp	r18, r24
    42f0:	39 07       	cpc	r19, r25
    42f2:	19 f4       	brne	.+6      	; 0x42fa <LCD_vidWriteInteger+0xb8>
    42f4:	80 ec       	ldi	r24, 0xC0	; 192
    42f6:	0e 94 b5 1c 	call	0x396a	; 0x396a <LCD_vidWriteCmd>
		num_mask= (uint8_t)(number/p);
    42fa:	8f 81       	ldd	r24, Y+7	; 0x07
    42fc:	98 85       	ldd	r25, Y+8	; 0x08
    42fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4300:	3c 81       	ldd	r19, Y+4	; 0x04
    4302:	b9 01       	movw	r22, r18
    4304:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodhi4>
    4308:	cb 01       	movw	r24, r22
    430a:	88 2f       	mov	r24, r24
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	9e 83       	std	Y+6, r25	; 0x06
    4310:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData((uint8_t)'0'+num_mask);
    4312:	8d 81       	ldd	r24, Y+5	; 0x05
    4314:	80 5d       	subi	r24, 0xD0	; 208
    4316:	0e 94 17 1c 	call	0x382e	; 0x382e <LCD_vidWriteData>
		number -= num_mask*p;
    431a:	2d 81       	ldd	r18, Y+5	; 0x05
    431c:	3e 81       	ldd	r19, Y+6	; 0x06
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	9c 81       	ldd	r25, Y+4	; 0x04
    4322:	a9 01       	movw	r20, r18
    4324:	48 9f       	mul	r20, r24
    4326:	90 01       	movw	r18, r0
    4328:	49 9f       	mul	r20, r25
    432a:	30 0d       	add	r19, r0
    432c:	58 9f       	mul	r21, r24
    432e:	30 0d       	add	r19, r0
    4330:	11 24       	eor	r1, r1
    4332:	8f 81       	ldd	r24, Y+7	; 0x07
    4334:	98 85       	ldd	r25, Y+8	; 0x08
    4336:	82 1b       	sub	r24, r18
    4338:	93 0b       	sbc	r25, r19
    433a:	98 87       	std	Y+8, r25	; 0x08
    433c:	8f 83       	std	Y+7, r24	; 0x07
		p/=10;
    433e:	8b 81       	ldd	r24, Y+3	; 0x03
    4340:	9c 81       	ldd	r25, Y+4	; 0x04
    4342:	2a e0       	ldi	r18, 0x0A	; 10
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	b9 01       	movw	r22, r18
    4348:	0e 94 10 25 	call	0x4a20	; 0x4a20 <__udivmodhi4>
    434c:	cb 01       	movw	r24, r22
    434e:	9c 83       	std	Y+4, r25	; 0x04
    4350:	8b 83       	std	Y+3, r24	; 0x03
	}

	p/=10;
	nxtl = i - 16;
	if(nxtl < 0) nxtl =0;
	for(;i>0;i--)
    4352:	8a 81       	ldd	r24, Y+2	; 0x02
    4354:	81 50       	subi	r24, 0x01	; 1
    4356:	8a 83       	std	Y+2, r24	; 0x02
    4358:	8a 81       	ldd	r24, Y+2	; 0x02
    435a:	88 23       	and	r24, r24
    435c:	09 f6       	brne	.-126    	; 0x42e0 <LCD_vidWriteInteger+0x9e>
		num_mask= (uint8_t)(number/p);
		LCD_vidWriteData((uint8_t)'0'+num_mask);
		number -= num_mask*p;
		p/=10;
	}
}
    435e:	28 96       	adiw	r28, 0x08	; 8
    4360:	0f b6       	in	r0, 0x3f	; 63
    4362:	f8 94       	cli
    4364:	de bf       	out	0x3e, r29	; 62
    4366:	0f be       	out	0x3f, r0	; 63
    4368:	cd bf       	out	0x3d, r28	; 61
    436a:	cf 91       	pop	r28
    436c:	df 91       	pop	r29
    436e:	08 95       	ret

00004370 <FLEX_vidFlexInit>:
#include"../../mcal/adc_driver/adc_int.h"
#include"flex_sensor_int.h"


void FLEX_vidFlexInit(uint8_t sensor_pin)
{
    4370:	df 93       	push	r29
    4372:	cf 93       	push	r28
    4374:	0f 92       	push	r0
    4376:	cd b7       	in	r28, 0x3d	; 61
    4378:	de b7       	in	r29, 0x3e	; 62
    437a:	89 83       	std	Y+1, r24	; 0x01

	ADC_vidAdcInit(AREF_VOLTAGE);
    437c:	82 e0       	ldi	r24, 0x02	; 2
    437e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <ADC_vidAdcInit>
	ADC_vidAdcPinInit(sensor_pin);
    4382:	89 81       	ldd	r24, Y+1	; 0x01
    4384:	0e 94 80 12 	call	0x2500	; 0x2500 <ADC_vidAdcPinInit>

}
    4388:	0f 90       	pop	r0
    438a:	cf 91       	pop	r28
    438c:	df 91       	pop	r29
    438e:	08 95       	ret

00004390 <FLEX_vidGetFlexRead>:

void FLEX_vidGetFlexRead(uint16_* sensor_read, uint8_t sensor_pin)
{
    4390:	df 93       	push	r29
    4392:	cf 93       	push	r28
    4394:	00 d0       	rcall	.+0      	; 0x4396 <FLEX_vidGetFlexRead+0x6>
    4396:	0f 92       	push	r0
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	9a 83       	std	Y+2, r25	; 0x02
    439e:	89 83       	std	Y+1, r24	; 0x01
    43a0:	6b 83       	std	Y+3, r22	; 0x03
	ADC_vidSetReadingVariable(sensor_read);
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	9a 81       	ldd	r25, Y+2	; 0x02
    43a6:	0e 94 08 13 	call	0x2610	; 0x2610 <ADC_vidSetReadingVariable>
	ADC_vidAdcGetRead(sensor_pin);
    43aa:	8b 81       	ldd	r24, Y+3	; 0x03
    43ac:	0e 94 c8 12 	call	0x2590	; 0x2590 <ADC_vidAdcGetRead>
}
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	0f 90       	pop	r0
    43b6:	cf 91       	pop	r28
    43b8:	df 91       	pop	r29
    43ba:	08 95       	ret

000043bc <FLEX_vidSetCallBack>:

void FLEX_vidSetCallBack(void (*func)(void))
{
    43bc:	df 93       	push	r29
    43be:	cf 93       	push	r28
    43c0:	00 d0       	rcall	.+0      	; 0x43c2 <FLEX_vidSetCallBack+0x6>
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
    43c6:	9a 83       	std	Y+2, r25	; 0x02
    43c8:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetCallBack(func);
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	9a 81       	ldd	r25, Y+2	; 0x02
    43ce:	0e 94 1a 13 	call	0x2634	; 0x2634 <ADC_vidSetCallBack>
}
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	08 95       	ret

000043dc <M16P_vidInit>:

static uint8_t send_buf[SERIAL_BUFF_SIZE] = {0x7E, 0xFF, 06, 00, 00, 00, 00, 00, 00, 0xEF};
static uint8_t recv_buf[SERIAL_BUFF_SIZE];
static uint8_t is_reply = 0;

void M16P_vidInit(uint16_ baud) {
    43dc:	df 93       	push	r29
    43de:	cf 93       	push	r28
    43e0:	00 d0       	rcall	.+0      	; 0x43e2 <M16P_vidInit+0x6>
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	9a 83       	std	Y+2, r25	; 0x02
    43e8:	89 83       	std	Y+1, r24	; 0x01
    is_reply = 0;
    43ea:	10 92 4c 04 	sts	0x044C, r1
    UART_Init(baud);
    43ee:	89 81       	ldd	r24, Y+1	; 0x01
    43f0:	9a 81       	ldd	r25, Y+2	; 0x02
    43f2:	0e 94 d6 14 	call	0x29ac	; 0x29ac <UART_Init>
}
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	cf 91       	pop	r28
    43fc:	df 91       	pop	r29
    43fe:	08 95       	ret

00004400 <M16P_vidSetReply>:

void M16P_vidSetReply(uint8_t state) {
    4400:	df 93       	push	r29
    4402:	cf 93       	push	r28
    4404:	0f 92       	push	r0
    4406:	cd b7       	in	r28, 0x3d	; 61
    4408:	de b7       	in	r29, 0x3e	; 62
    440a:	89 83       	std	Y+1, r24	; 0x01
    is_reply = state;
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	80 93 4c 04 	sts	0x044C, r24
    send_buf[4] = is_reply;
    4412:	80 91 4c 04 	lds	r24, 0x044C
    4416:	80 93 2d 04 	sts	0x042D, r24
}
    441a:	0f 90       	pop	r0
    441c:	cf 91       	pop	r28
    441e:	df 91       	pop	r29
    4420:	08 95       	ret

00004422 <M16P_vidFillBufUint16>:

static void M16P_vidFillBufUint16(uint8_t *thebuf, uint16_ data) {
    4422:	df 93       	push	r29
    4424:	cf 93       	push	r28
    4426:	00 d0       	rcall	.+0      	; 0x4428 <M16P_vidFillBufUint16+0x6>
    4428:	00 d0       	rcall	.+0      	; 0x442a <M16P_vidFillBufUint16+0x8>
    442a:	cd b7       	in	r28, 0x3d	; 61
    442c:	de b7       	in	r29, 0x3e	; 62
    442e:	9a 83       	std	Y+2, r25	; 0x02
    4430:	89 83       	std	Y+1, r24	; 0x01
    4432:	7c 83       	std	Y+4, r23	; 0x04
    4434:	6b 83       	std	Y+3, r22	; 0x03
    *thebuf = (uint8_t)(data >> 8);
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	89 2f       	mov	r24, r25
    443c:	99 27       	eor	r25, r25
    443e:	e9 81       	ldd	r30, Y+1	; 0x01
    4440:	fa 81       	ldd	r31, Y+2	; 0x02
    4442:	80 83       	st	Z, r24
    *(thebuf + 1) = (uint8_t)data;
    4444:	89 81       	ldd	r24, Y+1	; 0x01
    4446:	9a 81       	ldd	r25, Y+2	; 0x02
    4448:	fc 01       	movw	r30, r24
    444a:	31 96       	adiw	r30, 0x01	; 1
    444c:	8b 81       	ldd	r24, Y+3	; 0x03
    444e:	80 83       	st	Z, r24
}
    4450:	0f 90       	pop	r0
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	cf 91       	pop	r28
    445a:	df 91       	pop	r29
    445c:	08 95       	ret

0000445e <M16P_Uu16GetCheckSum>:

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    445e:	df 93       	push	r29
    4460:	cf 93       	push	r28
    4462:	00 d0       	rcall	.+0      	; 0x4464 <M16P_Uu16GetCheckSum+0x6>
    4464:	00 d0       	rcall	.+0      	; 0x4466 <M16P_Uu16GetCheckSum+0x8>
    4466:	00 d0       	rcall	.+0      	; 0x4468 <M16P_Uu16GetCheckSum+0xa>
    4468:	cd b7       	in	r28, 0x3d	; 61
    446a:	de b7       	in	r29, 0x3e	; 62
    446c:	9e 83       	std	Y+6, r25	; 0x06
    446e:	8d 83       	std	Y+5, r24	; 0x05
    uint16_ sum = 0;
    4470:	1c 82       	std	Y+4, r1	; 0x04
    4472:	1b 82       	std	Y+3, r1	; 0x03
    for (int i = 1; i < 7; i++) {
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	9a 83       	std	Y+2, r25	; 0x02
    447a:	89 83       	std	Y+1, r24	; 0x01
    447c:	15 c0       	rjmp	.+42     	; 0x44a8 <M16P_Uu16GetCheckSum+0x4a>
        sum += thebuf[i];
    447e:	29 81       	ldd	r18, Y+1	; 0x01
    4480:	3a 81       	ldd	r19, Y+2	; 0x02
    4482:	8d 81       	ldd	r24, Y+5	; 0x05
    4484:	9e 81       	ldd	r25, Y+6	; 0x06
    4486:	fc 01       	movw	r30, r24
    4488:	e2 0f       	add	r30, r18
    448a:	f3 1f       	adc	r31, r19
    448c:	80 81       	ld	r24, Z
    448e:	28 2f       	mov	r18, r24
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	8b 81       	ldd	r24, Y+3	; 0x03
    4494:	9c 81       	ldd	r25, Y+4	; 0x04
    4496:	82 0f       	add	r24, r18
    4498:	93 1f       	adc	r25, r19
    449a:	9c 83       	std	Y+4, r25	; 0x04
    449c:	8b 83       	std	Y+3, r24	; 0x03
    *(thebuf + 1) = (uint8_t)data;
}

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    uint16_ sum = 0;
    for (int i = 1; i < 7; i++) {
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	9a 81       	ldd	r25, Y+2	; 0x02
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	9a 83       	std	Y+2, r25	; 0x02
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	9a 81       	ldd	r25, Y+2	; 0x02
    44ac:	87 30       	cpi	r24, 0x07	; 7
    44ae:	91 05       	cpc	r25, r1
    44b0:	34 f3       	brlt	.-52     	; 0x447e <M16P_Uu16GetCheckSum+0x20>
        sum += thebuf[i];
    }
    return -sum;
    44b2:	8b 81       	ldd	r24, Y+3	; 0x03
    44b4:	9c 81       	ldd	r25, Y+4	; 0x04
    44b6:	90 95       	com	r25
    44b8:	81 95       	neg	r24
    44ba:	9f 4f       	sbci	r25, 0xFF	; 255
}
    44bc:	26 96       	adiw	r28, 0x06	; 6
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	de bf       	out	0x3e, r29	; 62
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	cd bf       	out	0x3d, r28	; 61
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	08 95       	ret

000044ce <M16P_vidFillCheckSum>:

static void M16P_vidFillCheckSum() {
    44ce:	df 93       	push	r29
    44d0:	cf 93       	push	r28
    44d2:	00 d0       	rcall	.+0      	; 0x44d4 <M16P_vidFillCheckSum+0x6>
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    44d8:	89 e2       	ldi	r24, 0x29	; 41
    44da:	94 e0       	ldi	r25, 0x04	; 4
    44dc:	0e 94 2f 22 	call	0x445e	; 0x445e <M16P_Uu16GetCheckSum>
    44e0:	9a 83       	std	Y+2, r25	; 0x02
    44e2:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidFillBufUint16(send_buf + 7, checksum);
    44e4:	80 e3       	ldi	r24, 0x30	; 48
    44e6:	94 e0       	ldi	r25, 0x04	; 4
    44e8:	29 81       	ldd	r18, Y+1	; 0x01
    44ea:	3a 81       	ldd	r19, Y+2	; 0x02
    44ec:	b9 01       	movw	r22, r18
    44ee:	0e 94 11 22 	call	0x4422	; 0x4422 <M16P_vidFillBufUint16>
}
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	cf 91       	pop	r28
    44f8:	df 91       	pop	r29
    44fa:	08 95       	ret

000044fc <M16P_vidSendFunc>:

static void M16P_vidSendFunc() {
    44fc:	df 93       	push	r29
    44fe:	cf 93       	push	r28
    4500:	00 d0       	rcall	.+0      	; 0x4502 <M16P_vidSendFunc+0x6>
    4502:	cd b7       	in	r28, 0x3d	; 61
    4504:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    4506:	1a 82       	std	Y+2, r1	; 0x02
    4508:	19 82       	std	Y+1, r1	; 0x01
    450a:	0d c0       	rjmp	.+26     	; 0x4526 <M16P_vidSendFunc+0x2a>
        UART_Transmit(send_buf[i]);
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	9a 81       	ldd	r25, Y+2	; 0x02
    4510:	fc 01       	movw	r30, r24
    4512:	e7 5d       	subi	r30, 0xD7	; 215
    4514:	fb 4f       	sbci	r31, 0xFB	; 251
    4516:	80 81       	ld	r24, Z
    4518:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_Transmit>
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    M16P_vidFillBufUint16(send_buf + 7, checksum);
}

static void M16P_vidSendFunc() {
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	9a 81       	ldd	r25, Y+2	; 0x02
    4520:	01 96       	adiw	r24, 0x01	; 1
    4522:	9a 83       	std	Y+2, r25	; 0x02
    4524:	89 83       	std	Y+1, r24	; 0x01
    4526:	89 81       	ldd	r24, Y+1	; 0x01
    4528:	9a 81       	ldd	r25, Y+2	; 0x02
    452a:	8a 30       	cpi	r24, 0x0A	; 10
    452c:	91 05       	cpc	r25, r1
    452e:	74 f3       	brlt	.-36     	; 0x450c <M16P_vidSendFunc+0x10>
        UART_Transmit(send_buf[i]);
    }
}
    4530:	0f 90       	pop	r0
    4532:	0f 90       	pop	r0
    4534:	cf 91       	pop	r28
    4536:	df 91       	pop	r29
    4538:	08 95       	ret

0000453a <M16P_vidSendCmd>:

static void M16P_vidSendCmd(uint8_t cmd, uint16_ arg1, uint16_ arg2) {
    453a:	df 93       	push	r29
    453c:	cf 93       	push	r28
    453e:	00 d0       	rcall	.+0      	; 0x4540 <M16P_vidSendCmd+0x6>
    4540:	00 d0       	rcall	.+0      	; 0x4542 <M16P_vidSendCmd+0x8>
    4542:	0f 92       	push	r0
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	89 83       	std	Y+1, r24	; 0x01
    454a:	7b 83       	std	Y+3, r23	; 0x03
    454c:	6a 83       	std	Y+2, r22	; 0x02
    454e:	5d 83       	std	Y+5, r21	; 0x05
    4550:	4c 83       	std	Y+4, r20	; 0x04
    send_buf[3] = cmd;
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	80 93 2c 04 	sts	0x042C, r24
    send_buf[5] = arg1;
    4558:	8a 81       	ldd	r24, Y+2	; 0x02
    455a:	80 93 2e 04 	sts	0x042E, r24
    send_buf[6] = arg2;
    455e:	8c 81       	ldd	r24, Y+4	; 0x04
    4560:	80 93 2f 04 	sts	0x042F, r24
    M16P_vidFillCheckSum();
    4564:	0e 94 67 22 	call	0x44ce	; 0x44ce <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4568:	0e 94 7e 22 	call	0x44fc	; 0x44fc <M16P_vidSendFunc>
}
    456c:	0f 90       	pop	r0
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	cf 91       	pop	r28
    4578:	df 91       	pop	r29
    457a:	08 95       	ret

0000457c <M16P_vidSendCmdSingleArg>:

static void M16P_vidSendCmdSingleArg(uint8_t cmd, uint16_ arg) {
    457c:	df 93       	push	r29
    457e:	cf 93       	push	r28
    4580:	00 d0       	rcall	.+0      	; 0x4582 <M16P_vidSendCmdSingleArg+0x6>
    4582:	0f 92       	push	r0
    4584:	cd b7       	in	r28, 0x3d	; 61
    4586:	de b7       	in	r29, 0x3e	; 62
    4588:	89 83       	std	Y+1, r24	; 0x01
    458a:	7b 83       	std	Y+3, r23	; 0x03
    458c:	6a 83       	std	Y+2, r22	; 0x02
    send_buf[3] = cmd;
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	80 93 2c 04 	sts	0x042C, r24
    M16P_vidFillBufUint16((send_buf + 5), arg);
    4594:	8e e2       	ldi	r24, 0x2E	; 46
    4596:	94 e0       	ldi	r25, 0x04	; 4
    4598:	2a 81       	ldd	r18, Y+2	; 0x02
    459a:	3b 81       	ldd	r19, Y+3	; 0x03
    459c:	b9 01       	movw	r22, r18
    459e:	0e 94 11 22 	call	0x4422	; 0x4422 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    45a2:	0e 94 67 22 	call	0x44ce	; 0x44ce <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    45a6:	0e 94 7e 22 	call	0x44fc	; 0x44fc <M16P_vidSendFunc>
}
    45aa:	0f 90       	pop	r0
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	cf 91       	pop	r28
    45b2:	df 91       	pop	r29
    45b4:	08 95       	ret

000045b6 <M16P_vidSendCmdNoArg>:

static void M16P_vidSendCmdNoArg(uint8_t cmd) {
    45b6:	df 93       	push	r29
    45b8:	cf 93       	push	r28
    45ba:	0f 92       	push	r0
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
    45c0:	89 83       	std	Y+1, r24	; 0x01
    send_buf[3] = cmd;
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	80 93 2c 04 	sts	0x042C, r24
    M16P_vidFillBufUint16((send_buf + 5), 0);
    45c8:	8e e2       	ldi	r24, 0x2E	; 46
    45ca:	94 e0       	ldi	r25, 0x04	; 4
    45cc:	60 e0       	ldi	r22, 0x00	; 0
    45ce:	70 e0       	ldi	r23, 0x00	; 0
    45d0:	0e 94 11 22 	call	0x4422	; 0x4422 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    45d4:	0e 94 67 22 	call	0x44ce	; 0x44ce <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    45d8:	0e 94 7e 22 	call	0x44fc	; 0x44fc <M16P_vidSendFunc>
}
    45dc:	0f 90       	pop	r0
    45de:	cf 91       	pop	r28
    45e0:	df 91       	pop	r29
    45e2:	08 95       	ret

000045e4 <M16P_vidPlayTrack>:

void M16P_vidPlayTrack(uint16_ num) {
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	00 d0       	rcall	.+0      	; 0x45ea <M16P_vidPlayTrack+0x6>
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	9a 83       	std	Y+2, r25	; 0x02
    45f0:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x03, num);
    45f2:	29 81       	ldd	r18, Y+1	; 0x01
    45f4:	3a 81       	ldd	r19, Y+2	; 0x02
    45f6:	83 e0       	ldi	r24, 0x03	; 3
    45f8:	b9 01       	movw	r22, r18
    45fa:	0e 94 be 22 	call	0x457c	; 0x457c <M16P_vidSendCmdSingleArg>
}
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	cf 91       	pop	r28
    4604:	df 91       	pop	r29
    4606:	08 95       	ret

00004608 <M16P_vidNextTrack>:

void M16P_vidNextTrack() {
    4608:	df 93       	push	r29
    460a:	cf 93       	push	r28
    460c:	cd b7       	in	r28, 0x3d	; 61
    460e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x01);
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    4616:	cf 91       	pop	r28
    4618:	df 91       	pop	r29
    461a:	08 95       	ret

0000461c <M16P_vidPreviousTrack>:

void M16P_vidPreviousTrack() {
    461c:	df 93       	push	r29
    461e:	cf 93       	push	r28
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x02);
    4624:	82 e0       	ldi	r24, 0x02	; 2
    4626:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    462a:	cf 91       	pop	r28
    462c:	df 91       	pop	r29
    462e:	08 95       	ret

00004630 <M16P_vidSetVolume>:

void M16P_vidSetVolume(uint16_ volume) {
    4630:	df 93       	push	r29
    4632:	cf 93       	push	r28
    4634:	00 d0       	rcall	.+0      	; 0x4636 <M16P_vidSetVolume+0x6>
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x06, volume);
    463e:	29 81       	ldd	r18, Y+1	; 0x01
    4640:	3a 81       	ldd	r19, Y+2	; 0x02
    4642:	86 e0       	ldi	r24, 0x06	; 6
    4644:	b9 01       	movw	r22, r18
    4646:	0e 94 be 22 	call	0x457c	; 0x457c <M16P_vidSendCmdSingleArg>
}
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	cf 91       	pop	r28
    4650:	df 91       	pop	r29
    4652:	08 95       	ret

00004654 <M16P_vidSetEQ>:

void M16P_vidSetEQ(uint16_ eq) {
    4654:	df 93       	push	r29
    4656:	cf 93       	push	r28
    4658:	00 d0       	rcall	.+0      	; 0x465a <M16P_vidSetEQ+0x6>
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
    465e:	9a 83       	std	Y+2, r25	; 0x02
    4660:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x07, eq);
    4662:	29 81       	ldd	r18, Y+1	; 0x01
    4664:	3a 81       	ldd	r19, Y+2	; 0x02
    4666:	87 e0       	ldi	r24, 0x07	; 7
    4668:	b9 01       	movw	r22, r18
    466a:	0e 94 be 22 	call	0x457c	; 0x457c <M16P_vidSendCmdSingleArg>
}
    466e:	0f 90       	pop	r0
    4670:	0f 90       	pop	r0
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <M16P_vidSetPlaybackSource>:

void M16P_vidSetPlaybackSource(uint16_ device) {
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	00 d0       	rcall	.+0      	; 0x467e <M16P_vidSetPlaybackSource+0x6>
    467e:	cd b7       	in	r28, 0x3d	; 61
    4680:	de b7       	in	r29, 0x3e	; 62
    4682:	9a 83       	std	Y+2, r25	; 0x02
    4684:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x09, device);
    4686:	29 81       	ldd	r18, Y+1	; 0x01
    4688:	3a 81       	ldd	r19, Y+2	; 0x02
    468a:	89 e0       	ldi	r24, 0x09	; 9
    468c:	b9 01       	movw	r22, r18
    468e:	0e 94 be 22 	call	0x457c	; 0x457c <M16P_vidSendCmdSingleArg>
}
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	cf 91       	pop	r28
    4698:	df 91       	pop	r29
    469a:	08 95       	ret

0000469c <M16P_vidSleep>:

void M16P_vidSleep() {
    469c:	df 93       	push	r29
    469e:	cf 93       	push	r28
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0a);
    46a4:	8a e0       	ldi	r24, 0x0A	; 10
    46a6:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    46aa:	cf 91       	pop	r28
    46ac:	df 91       	pop	r29
    46ae:	08 95       	ret

000046b0 <M16P_vidReset>:

void M16P_vidReset() {
    46b0:	df 93       	push	r29
    46b2:	cf 93       	push	r28
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0c);
    46b8:	8c e0       	ldi	r24, 0x0C	; 12
    46ba:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    46be:	cf 91       	pop	r28
    46c0:	df 91       	pop	r29
    46c2:	08 95       	ret

000046c4 <M16P_vidPlayback>:

void M16P_vidPlayback() {
    46c4:	df 93       	push	r29
    46c6:	cf 93       	push	r28
    46c8:	cd b7       	in	r28, 0x3d	; 61
    46ca:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0d);
    46cc:	8d e0       	ldi	r24, 0x0D	; 13
    46ce:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    46d2:	cf 91       	pop	r28
    46d4:	df 91       	pop	r29
    46d6:	08 95       	ret

000046d8 <M16P_vidPause>:

void M16P_vidPause() {
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0e);
    46e0:	8e e0       	ldi	r24, 0x0E	; 14
    46e2:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <M16P_vidPlayFileInFolder>:

void M16P_vidPlayFileInFolder(uint16_ folder, uint16_ file) {
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	00 d0       	rcall	.+0      	; 0x46f2 <M16P_vidPlayFileInFolder+0x6>
    46f2:	00 d0       	rcall	.+0      	; 0x46f4 <M16P_vidPlayFileInFolder+0x8>
    46f4:	cd b7       	in	r28, 0x3d	; 61
    46f6:	de b7       	in	r29, 0x3e	; 62
    46f8:	9a 83       	std	Y+2, r25	; 0x02
    46fa:	89 83       	std	Y+1, r24	; 0x01
    46fc:	7c 83       	std	Y+4, r23	; 0x04
    46fe:	6b 83       	std	Y+3, r22	; 0x03
    M16P_vidSendCmd(0x0f, folder, file);
    4700:	29 81       	ldd	r18, Y+1	; 0x01
    4702:	3a 81       	ldd	r19, Y+2	; 0x02
    4704:	4b 81       	ldd	r20, Y+3	; 0x03
    4706:	5c 81       	ldd	r21, Y+4	; 0x04
    4708:	8f e0       	ldi	r24, 0x0F	; 15
    470a:	b9 01       	movw	r22, r18
    470c:	0e 94 9d 22 	call	0x453a	; 0x453a <M16P_vidSendCmd>
}
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	cf 91       	pop	r28
    471a:	df 91       	pop	r29
    471c:	08 95       	ret

0000471e <M16P_vidPlayByNumber>:

void M16P_vidPlayByNumber(uint16_ num) {
    471e:	df 93       	push	r29
    4720:	cf 93       	push	r28
    4722:	00 d0       	rcall	.+0      	; 0x4724 <M16P_vidPlayByNumber+0x6>
    4724:	cd b7       	in	r28, 0x3d	; 61
    4726:	de b7       	in	r29, 0x3e	; 62
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x12, num);
    472c:	29 81       	ldd	r18, Y+1	; 0x01
    472e:	3a 81       	ldd	r19, Y+2	; 0x02
    4730:	82 e1       	ldi	r24, 0x12	; 18
    4732:	b9 01       	movw	r22, r18
    4734:	0e 94 be 22 	call	0x457c	; 0x457c <M16P_vidSendCmdSingleArg>
}
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret

00004742 <M16P_vidGetState>:

/*---------------------------------------------------------------------------*/



void M16P_vidGetState() {
    4742:	df 93       	push	r29
    4744:	cf 93       	push	r28
    4746:	cd b7       	in	r28, 0x3d	; 61
    4748:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x42);
    474a:	82 e4       	ldi	r24, 0x42	; 66
    474c:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    4750:	cf 91       	pop	r28
    4752:	df 91       	pop	r29
    4754:	08 95       	ret

00004756 <M16P_vidGetVolume>:

void M16P_vidGetVolume() {
    4756:	df 93       	push	r29
    4758:	cf 93       	push	r28
    475a:	cd b7       	in	r28, 0x3d	; 61
    475c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x43);
    475e:	83 e4       	ldi	r24, 0x43	; 67
    4760:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    4764:	cf 91       	pop	r28
    4766:	df 91       	pop	r29
    4768:	08 95       	ret

0000476a <M16P_vidGetUSum>:

void M16P_vidGetUSum() {
    476a:	df 93       	push	r29
    476c:	cf 93       	push	r28
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x47);
    4772:	87 e4       	ldi	r24, 0x47	; 71
    4774:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    4778:	cf 91       	pop	r28
    477a:	df 91       	pop	r29
    477c:	08 95       	ret

0000477e <M16P_vidGetTFSum>:

void M16P_vidGetTFSum() {
    477e:	df 93       	push	r29
    4780:	cf 93       	push	r28
    4782:	cd b7       	in	r28, 0x3d	; 61
    4784:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x48);
    4786:	88 e4       	ldi	r24, 0x48	; 72
    4788:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    478c:	cf 91       	pop	r28
    478e:	df 91       	pop	r29
    4790:	08 95       	ret

00004792 <M16P_vidGetFlashSum>:

void M16P_vidGetFlashSum() {
    4792:	df 93       	push	r29
    4794:	cf 93       	push	r28
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x49);
    479a:	89 e4       	ldi	r24, 0x49	; 73
    479c:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    47a0:	cf 91       	pop	r28
    47a2:	df 91       	pop	r29
    47a4:	08 95       	ret

000047a6 <M16P_vidGetTFCurrent>:

void M16P_vidGetTFCurrent() {
    47a6:	df 93       	push	r29
    47a8:	cf 93       	push	r28
    47aa:	cd b7       	in	r28, 0x3d	; 61
    47ac:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4c);
    47ae:	8c e4       	ldi	r24, 0x4C	; 76
    47b0:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    47b4:	cf 91       	pop	r28
    47b6:	df 91       	pop	r29
    47b8:	08 95       	ret

000047ba <M16P_vidGetUCurrent>:

void M16P_vidGetUCurrent() {
    47ba:	df 93       	push	r29
    47bc:	cf 93       	push	r28
    47be:	cd b7       	in	r28, 0x3d	; 61
    47c0:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4b);
    47c2:	8b e4       	ldi	r24, 0x4B	; 75
    47c4:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    47c8:	cf 91       	pop	r28
    47ca:	df 91       	pop	r29
    47cc:	08 95       	ret

000047ce <M16P_vidGetFlashCurrent>:

void M16P_vidGetFlashCurrent() {
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4d);
    47d6:	8d e4       	ldi	r24, 0x4D	; 77
    47d8:	0e 94 db 22 	call	0x45b6	; 0x45b6 <M16P_vidSendCmdNoArg>
}
    47dc:	cf 91       	pop	r28
    47de:	df 91       	pop	r29
    47e0:	08 95       	ret

000047e2 <M16P_u8GetDataBuffer>:

uint8_t M16P_u8GetDataBuffer() {
    47e2:	0f 93       	push	r16
    47e4:	1f 93       	push	r17
    47e6:	df 93       	push	r29
    47e8:	cf 93       	push	r28
    47ea:	00 d0       	rcall	.+0      	; 0x47ec <M16P_u8GetDataBuffer+0xa>
    47ec:	0f 92       	push	r0
    47ee:	cd b7       	in	r28, 0x3d	; 61
    47f0:	de b7       	in	r29, 0x3e	; 62
    if (UART_Receive() != 0x7E) {
    47f2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_Receive>
    47f6:	8e 37       	cpi	r24, 0x7E	; 126
    47f8:	11 f0       	breq	.+4      	; 0x47fe <M16P_u8GetDataBuffer+0x1c>
        return 0;
    47fa:	1b 82       	std	Y+3, r1	; 0x03
    47fc:	1c c0       	rjmp	.+56     	; 0x4836 <M16P_u8GetDataBuffer+0x54>
    }else{
    	recv_buf[0] = 0x7E;
    47fe:	8e e7       	ldi	r24, 0x7E	; 126
    4800:	80 93 4d 04 	sts	0x044D, r24
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	9a 83       	std	Y+2, r25	; 0x02
    480a:	89 83       	std	Y+1, r24	; 0x01
    480c:	0d c0       	rjmp	.+26     	; 0x4828 <M16P_u8GetDataBuffer+0x46>
    		recv_buf[i] = UART_Receive();
    480e:	09 81       	ldd	r16, Y+1	; 0x01
    4810:	1a 81       	ldd	r17, Y+2	; 0x02
    4812:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <UART_Receive>
    4816:	f8 01       	movw	r30, r16
    4818:	e3 5b       	subi	r30, 0xB3	; 179
    481a:	fb 4f       	sbci	r31, 0xFB	; 251
    481c:	80 83       	st	Z, r24
uint8_t M16P_u8GetDataBuffer() {
    if (UART_Receive() != 0x7E) {
        return 0;
    }else{
    	recv_buf[0] = 0x7E;
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    481e:	89 81       	ldd	r24, Y+1	; 0x01
    4820:	9a 81       	ldd	r25, Y+2	; 0x02
    4822:	01 96       	adiw	r24, 0x01	; 1
    4824:	9a 83       	std	Y+2, r25	; 0x02
    4826:	89 83       	std	Y+1, r24	; 0x01
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	8a 30       	cpi	r24, 0x0A	; 10
    482e:	91 05       	cpc	r25, r1
    4830:	74 f3       	brlt	.-36     	; 0x480e <M16P_u8GetDataBuffer+0x2c>
    		recv_buf[i] = UART_Receive();
    	}
    	return 1;
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	8b 83       	std	Y+3, r24	; 0x03
    4836:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	0f 90       	pop	r0
    483e:	cf 91       	pop	r28
    4840:	df 91       	pop	r29
    4842:	1f 91       	pop	r17
    4844:	0f 91       	pop	r16
    4846:	08 95       	ret

00004848 <main>:

extern uint16_ compare_cnt1;
void get_word();

int main()
{
    4848:	df 93       	push	r29
    484a:	cf 93       	push	r28
    484c:	00 d0       	rcall	.+0      	; 0x484e <main+0x6>
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	0e 94 8a 0c 	call	0x1914	; 0x1914 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
	uint8_t compare_value;
	GLOVE_vidSensorsInit();
    4858:	0e 94 7d 09 	call	0x12fa	; 0x12fa <GLOVE_vidSensorsInit>
	SHOW_vidShowAndPlayInit(&ready_flag);
    485c:	87 e5       	ldi	r24, 0x57	; 87
    485e:	94 e0       	ldi	r25, 0x04	; 4
    4860:	0e 94 17 07 	call	0xe2e	; 0xe2e <SHOW_vidShowAndPlayInit>
	GLOVE_vidSetGloveParams(&sensor_reads[0],7);
    4864:	8b e7       	ldi	r24, 0x7B	; 123
    4866:	94 e0       	ldi	r25, 0x04	; 4
    4868:	67 e0       	ldi	r22, 0x07	; 7
    486a:	0e 94 91 09 	call	0x1322	; 0x1322 <GLOVE_vidSetGloveParams>
	TIMER1_voidInit();
    486e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <TIMER1_voidInit>
	TIMER1_voidGetNumCountCTC(1000, &compare_cnt1, &compare_value);
    4872:	29 e7       	ldi	r18, 0x79	; 121
    4874:	34 e0       	ldi	r19, 0x04	; 4
    4876:	ae 01       	movw	r20, r28
    4878:	4e 5f       	subi	r20, 0xFE	; 254
    487a:	5f 4f       	sbci	r21, 0xFF	; 255
    487c:	88 ee       	ldi	r24, 0xE8	; 232
    487e:	93 e0       	ldi	r25, 0x03	; 3
    4880:	b9 01       	movw	r22, r18
    4882:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <TIMER1_voidGetNumCountCTC>
	TIMER1_voidSetCTCTime(compare_value);
    4886:	8a 81       	ldd	r24, Y+2	; 0x02
    4888:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <TIMER1_voidSetCTCTime>
	TIMER1_voidSetCallBackCTC(&get_word);
    488c:	84 e7       	ldi	r24, 0x74	; 116
    488e:	94 e2       	ldi	r25, 0x24	; 36
    4890:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <TIMER1_voidSetCallBackCTC>
	GLOVE_vidGetHandRead();
    4894:	0e 94 ad 09 	call	0x135a	; 0x135a <GLOVE_vidGetHandRead>
	while(1)
	{
		while(ready_flag || get_another_read_flag);
    4898:	80 91 57 04 	lds	r24, 0x0457
    489c:	88 23       	and	r24, r24
    489e:	e1 f7       	brne	.-8      	; 0x4898 <main+0x50>
    48a0:	80 91 33 04 	lds	r24, 0x0433
    48a4:	88 23       	and	r24, r24
    48a6:	c1 f7       	brne	.-16     	; 0x4898 <main+0x50>
		for(uint8_t i=0;i<10;i++)
    48a8:	19 82       	std	Y+1, r1	; 0x01
    48aa:	11 c0       	rjmp	.+34     	; 0x48ce <main+0x86>
		{
			word_location[i]=word_location_buffer[i];
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	28 2f       	mov	r18, r24
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	88 2f       	mov	r24, r24
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	fc 01       	movw	r30, r24
    48ba:	e5 57       	subi	r30, 0x75	; 117
    48bc:	fb 4f       	sbci	r31, 0xFB	; 251
    48be:	80 81       	ld	r24, Z
    48c0:	f9 01       	movw	r30, r18
    48c2:	eb 56       	subi	r30, 0x6B	; 107
    48c4:	fb 4f       	sbci	r31, 0xFB	; 251
    48c6:	80 83       	st	Z, r24
	TIMER1_voidSetCallBackCTC(&get_word);
	GLOVE_vidGetHandRead();
	while(1)
	{
		while(ready_flag || get_another_read_flag);
		for(uint8_t i=0;i<10;i++)
    48c8:	89 81       	ldd	r24, Y+1	; 0x01
    48ca:	8f 5f       	subi	r24, 0xFF	; 255
    48cc:	89 83       	std	Y+1, r24	; 0x01
    48ce:	89 81       	ldd	r24, Y+1	; 0x01
    48d0:	8a 30       	cpi	r24, 0x0A	; 10
    48d2:	60 f3       	brcs	.-40     	; 0x48ac <main+0x64>
		{
			word_location[i]=word_location_buffer[i];
		}
		get_another_read_flag = 1;
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	80 93 33 04 	sts	0x0433, r24
		GLOVE_vidGetHandRead();
    48da:	0e 94 ad 09 	call	0x135a	; 0x135a <GLOVE_vidGetHandRead>
		SHOW_vidShowAndPlay(&word_location[0]);
    48de:	85 e9       	ldi	r24, 0x95	; 149
    48e0:	94 e0       	ldi	r25, 0x04	; 4
    48e2:	0e 94 66 07 	call	0xecc	; 0xecc <SHOW_vidShowAndPlay>
    48e6:	d8 cf       	rjmp	.-80     	; 0x4898 <main+0x50>

000048e8 <get_word>:

	return 0;
}

void get_word()
{
    48e8:	df 93       	push	r29
    48ea:	cf 93       	push	r28
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0;
	if(i<5 && sensor_reads[7] && get_another_read_flag)
    48f0:	80 91 58 04 	lds	r24, 0x0458
    48f4:	85 30       	cpi	r24, 0x05	; 5
    48f6:	08 f0       	brcs	.+2      	; 0x48fa <get_word+0x12>
    48f8:	61 c0       	rjmp	.+194    	; 0x49bc <get_word+0xd4>
    48fa:	80 91 89 04 	lds	r24, 0x0489
    48fe:	90 91 8a 04 	lds	r25, 0x048A
    4902:	00 97       	sbiw	r24, 0x00	; 0
    4904:	09 f4       	brne	.+2      	; 0x4908 <get_word+0x20>
    4906:	5a c0       	rjmp	.+180    	; 0x49bc <get_word+0xd4>
    4908:	80 91 33 04 	lds	r24, 0x0433
    490c:	88 23       	and	r24, r24
    490e:	09 f4       	brne	.+2      	; 0x4912 <get_word+0x2a>
    4910:	55 c0       	rjmp	.+170    	; 0x49bc <get_word+0xd4>
	{
		LED_u8LedToggle(PORT_D, PIN_7);
    4912:	83 e0       	ldi	r24, 0x03	; 3
    4914:	67 e0       	ldi	r22, 0x07	; 7
    4916:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <LED_u8LedToggle>
		GET_vidGetWordAndSound(&sensor_reads[0], &word_location_buffer[i*2]);
    491a:	80 91 58 04 	lds	r24, 0x0458
    491e:	88 2f       	mov	r24, r24
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	88 0f       	add	r24, r24
    4924:	99 1f       	adc	r25, r25
    4926:	9c 01       	movw	r18, r24
    4928:	25 57       	subi	r18, 0x75	; 117
    492a:	3b 4f       	sbci	r19, 0xFB	; 251
    492c:	8b e7       	ldi	r24, 0x7B	; 123
    492e:	94 e0       	ldi	r25, 0x04	; 4
    4930:	b9 01       	movw	r22, r18
    4932:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GET_vidGetWordAndSound>
		if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 1 )i--;
    4936:	80 91 58 04 	lds	r24, 0x0458
    493a:	88 2f       	mov	r24, r24
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	88 0f       	add	r24, r24
    4940:	99 1f       	adc	r25, r25
    4942:	fc 01       	movw	r30, r24
    4944:	e5 57       	subi	r30, 0x75	; 117
    4946:	fb 4f       	sbci	r31, 0xFB	; 251
    4948:	80 81       	ld	r24, Z
    494a:	88 23       	and	r24, r24
    494c:	99 f4       	brne	.+38     	; 0x4974 <get_word+0x8c>
    494e:	80 91 58 04 	lds	r24, 0x0458
    4952:	88 2f       	mov	r24, r24
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	88 0f       	add	r24, r24
    4958:	99 1f       	adc	r25, r25
    495a:	01 96       	adiw	r24, 0x01	; 1
    495c:	fc 01       	movw	r30, r24
    495e:	e5 57       	subi	r30, 0x75	; 117
    4960:	fb 4f       	sbci	r31, 0xFB	; 251
    4962:	80 81       	ld	r24, Z
    4964:	81 30       	cpi	r24, 0x01	; 1
    4966:	31 f4       	brne	.+12     	; 0x4974 <get_word+0x8c>
    4968:	80 91 58 04 	lds	r24, 0x0458
    496c:	81 50       	subi	r24, 0x01	; 1
    496e:	80 93 58 04 	sts	0x0458, r24
    4972:	1c c0       	rjmp	.+56     	; 0x49ac <get_word+0xc4>
		else if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 0 )i=5;
    4974:	80 91 58 04 	lds	r24, 0x0458
    4978:	88 2f       	mov	r24, r24
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	88 0f       	add	r24, r24
    497e:	99 1f       	adc	r25, r25
    4980:	fc 01       	movw	r30, r24
    4982:	e5 57       	subi	r30, 0x75	; 117
    4984:	fb 4f       	sbci	r31, 0xFB	; 251
    4986:	80 81       	ld	r24, Z
    4988:	88 23       	and	r24, r24
    498a:	81 f4       	brne	.+32     	; 0x49ac <get_word+0xc4>
    498c:	80 91 58 04 	lds	r24, 0x0458
    4990:	88 2f       	mov	r24, r24
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	88 0f       	add	r24, r24
    4996:	99 1f       	adc	r25, r25
    4998:	01 96       	adiw	r24, 0x01	; 1
    499a:	fc 01       	movw	r30, r24
    499c:	e5 57       	subi	r30, 0x75	; 117
    499e:	fb 4f       	sbci	r31, 0xFB	; 251
    49a0:	80 81       	ld	r24, Z
    49a2:	88 23       	and	r24, r24
    49a4:	19 f4       	brne	.+6      	; 0x49ac <get_word+0xc4>
    49a6:	85 e0       	ldi	r24, 0x05	; 5
    49a8:	80 93 58 04 	sts	0x0458, r24
		GLOVE_vidGetHandRead();
    49ac:	0e 94 ad 09 	call	0x135a	; 0x135a <GLOVE_vidGetHandRead>
		i++;
    49b0:	80 91 58 04 	lds	r24, 0x0458
    49b4:	8f 5f       	subi	r24, 0xFF	; 255
    49b6:	80 93 58 04 	sts	0x0458, r24
    49ba:	04 c0       	rjmp	.+8      	; 0x49c4 <get_word+0xdc>
	}else {
		i = 0;
    49bc:	10 92 58 04 	sts	0x0458, r1
		get_another_read_flag = 0;
    49c0:	10 92 33 04 	sts	0x0433, r1

	}

}
    49c4:	cf 91       	pop	r28
    49c6:	df 91       	pop	r29
    49c8:	08 95       	ret

000049ca <__mulsi3>:
    49ca:	62 9f       	mul	r22, r18
    49cc:	d0 01       	movw	r26, r0
    49ce:	73 9f       	mul	r23, r19
    49d0:	f0 01       	movw	r30, r0
    49d2:	82 9f       	mul	r24, r18
    49d4:	e0 0d       	add	r30, r0
    49d6:	f1 1d       	adc	r31, r1
    49d8:	64 9f       	mul	r22, r20
    49da:	e0 0d       	add	r30, r0
    49dc:	f1 1d       	adc	r31, r1
    49de:	92 9f       	mul	r25, r18
    49e0:	f0 0d       	add	r31, r0
    49e2:	83 9f       	mul	r24, r19
    49e4:	f0 0d       	add	r31, r0
    49e6:	74 9f       	mul	r23, r20
    49e8:	f0 0d       	add	r31, r0
    49ea:	65 9f       	mul	r22, r21
    49ec:	f0 0d       	add	r31, r0
    49ee:	99 27       	eor	r25, r25
    49f0:	72 9f       	mul	r23, r18
    49f2:	b0 0d       	add	r27, r0
    49f4:	e1 1d       	adc	r30, r1
    49f6:	f9 1f       	adc	r31, r25
    49f8:	63 9f       	mul	r22, r19
    49fa:	b0 0d       	add	r27, r0
    49fc:	e1 1d       	adc	r30, r1
    49fe:	f9 1f       	adc	r31, r25
    4a00:	bd 01       	movw	r22, r26
    4a02:	cf 01       	movw	r24, r30
    4a04:	11 24       	eor	r1, r1
    4a06:	08 95       	ret

00004a08 <__udivmodqi4>:
    4a08:	99 1b       	sub	r25, r25
    4a0a:	79 e0       	ldi	r23, 0x09	; 9
    4a0c:	04 c0       	rjmp	.+8      	; 0x4a16 <__udivmodqi4_ep>

00004a0e <__udivmodqi4_loop>:
    4a0e:	99 1f       	adc	r25, r25
    4a10:	96 17       	cp	r25, r22
    4a12:	08 f0       	brcs	.+2      	; 0x4a16 <__udivmodqi4_ep>
    4a14:	96 1b       	sub	r25, r22

00004a16 <__udivmodqi4_ep>:
    4a16:	88 1f       	adc	r24, r24
    4a18:	7a 95       	dec	r23
    4a1a:	c9 f7       	brne	.-14     	; 0x4a0e <__udivmodqi4_loop>
    4a1c:	80 95       	com	r24
    4a1e:	08 95       	ret

00004a20 <__udivmodhi4>:
    4a20:	aa 1b       	sub	r26, r26
    4a22:	bb 1b       	sub	r27, r27
    4a24:	51 e1       	ldi	r21, 0x11	; 17
    4a26:	07 c0       	rjmp	.+14     	; 0x4a36 <__udivmodhi4_ep>

00004a28 <__udivmodhi4_loop>:
    4a28:	aa 1f       	adc	r26, r26
    4a2a:	bb 1f       	adc	r27, r27
    4a2c:	a6 17       	cp	r26, r22
    4a2e:	b7 07       	cpc	r27, r23
    4a30:	10 f0       	brcs	.+4      	; 0x4a36 <__udivmodhi4_ep>
    4a32:	a6 1b       	sub	r26, r22
    4a34:	b7 0b       	sbc	r27, r23

00004a36 <__udivmodhi4_ep>:
    4a36:	88 1f       	adc	r24, r24
    4a38:	99 1f       	adc	r25, r25
    4a3a:	5a 95       	dec	r21
    4a3c:	a9 f7       	brne	.-22     	; 0x4a28 <__udivmodhi4_loop>
    4a3e:	80 95       	com	r24
    4a40:	90 95       	com	r25
    4a42:	bc 01       	movw	r22, r24
    4a44:	cd 01       	movw	r24, r26
    4a46:	08 95       	ret

00004a48 <__udivmodsi4>:
    4a48:	a1 e2       	ldi	r26, 0x21	; 33
    4a4a:	1a 2e       	mov	r1, r26
    4a4c:	aa 1b       	sub	r26, r26
    4a4e:	bb 1b       	sub	r27, r27
    4a50:	fd 01       	movw	r30, r26
    4a52:	0d c0       	rjmp	.+26     	; 0x4a6e <__udivmodsi4_ep>

00004a54 <__udivmodsi4_loop>:
    4a54:	aa 1f       	adc	r26, r26
    4a56:	bb 1f       	adc	r27, r27
    4a58:	ee 1f       	adc	r30, r30
    4a5a:	ff 1f       	adc	r31, r31
    4a5c:	a2 17       	cp	r26, r18
    4a5e:	b3 07       	cpc	r27, r19
    4a60:	e4 07       	cpc	r30, r20
    4a62:	f5 07       	cpc	r31, r21
    4a64:	20 f0       	brcs	.+8      	; 0x4a6e <__udivmodsi4_ep>
    4a66:	a2 1b       	sub	r26, r18
    4a68:	b3 0b       	sbc	r27, r19
    4a6a:	e4 0b       	sbc	r30, r20
    4a6c:	f5 0b       	sbc	r31, r21

00004a6e <__udivmodsi4_ep>:
    4a6e:	66 1f       	adc	r22, r22
    4a70:	77 1f       	adc	r23, r23
    4a72:	88 1f       	adc	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	1a 94       	dec	r1
    4a78:	69 f7       	brne	.-38     	; 0x4a54 <__udivmodsi4_loop>
    4a7a:	60 95       	com	r22
    4a7c:	70 95       	com	r23
    4a7e:	80 95       	com	r24
    4a80:	90 95       	com	r25
    4a82:	9b 01       	movw	r18, r22
    4a84:	ac 01       	movw	r20, r24
    4a86:	bd 01       	movw	r22, r26
    4a88:	cf 01       	movw	r24, r30
    4a8a:	08 95       	ret

00004a8c <__prologue_saves__>:
    4a8c:	2f 92       	push	r2
    4a8e:	3f 92       	push	r3
    4a90:	4f 92       	push	r4
    4a92:	5f 92       	push	r5
    4a94:	6f 92       	push	r6
    4a96:	7f 92       	push	r7
    4a98:	8f 92       	push	r8
    4a9a:	9f 92       	push	r9
    4a9c:	af 92       	push	r10
    4a9e:	bf 92       	push	r11
    4aa0:	cf 92       	push	r12
    4aa2:	df 92       	push	r13
    4aa4:	ef 92       	push	r14
    4aa6:	ff 92       	push	r15
    4aa8:	0f 93       	push	r16
    4aaa:	1f 93       	push	r17
    4aac:	cf 93       	push	r28
    4aae:	df 93       	push	r29
    4ab0:	cd b7       	in	r28, 0x3d	; 61
    4ab2:	de b7       	in	r29, 0x3e	; 62
    4ab4:	ca 1b       	sub	r28, r26
    4ab6:	db 0b       	sbc	r29, r27
    4ab8:	0f b6       	in	r0, 0x3f	; 63
    4aba:	f8 94       	cli
    4abc:	de bf       	out	0x3e, r29	; 62
    4abe:	0f be       	out	0x3f, r0	; 63
    4ac0:	cd bf       	out	0x3d, r28	; 61
    4ac2:	09 94       	ijmp

00004ac4 <__epilogue_restores__>:
    4ac4:	2a 88       	ldd	r2, Y+18	; 0x12
    4ac6:	39 88       	ldd	r3, Y+17	; 0x11
    4ac8:	48 88       	ldd	r4, Y+16	; 0x10
    4aca:	5f 84       	ldd	r5, Y+15	; 0x0f
    4acc:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ace:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ad6:	b9 84       	ldd	r11, Y+9	; 0x09
    4ad8:	c8 84       	ldd	r12, Y+8	; 0x08
    4ada:	df 80       	ldd	r13, Y+7	; 0x07
    4adc:	ee 80       	ldd	r14, Y+6	; 0x06
    4ade:	fd 80       	ldd	r15, Y+5	; 0x05
    4ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    4ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    4ae4:	aa 81       	ldd	r26, Y+2	; 0x02
    4ae6:	b9 81       	ldd	r27, Y+1	; 0x01
    4ae8:	ce 0f       	add	r28, r30
    4aea:	d1 1d       	adc	r29, r1
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	ed 01       	movw	r28, r26
    4af8:	08 95       	ret

00004afa <_exit>:
    4afa:	f8 94       	cli

00004afc <__stop_program>:
    4afc:	ff cf       	rjmp	.-2      	; 0x4afc <__stop_program>
