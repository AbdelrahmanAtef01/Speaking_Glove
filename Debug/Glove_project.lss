
Glove_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ba8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000398  00800060  00003ba8  00003c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006e  008003f8  008003f8  00003fd4  2**0
                  ALLOC
  3 .stab         00004848  00000000  00000000  00003fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000234b  00000000  00000000  0000881c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ab67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000aca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ae17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ca60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e6f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f2b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_9>
      28:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__vector_10>
      2c:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 36       	cpi	r26, 0x66	; 102
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <main>
      8a:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SHOW_vidShowAndPlayInit>:


void callback();

void SHOW_vidShowAndPlayInit (uint8_t * ready_flag)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <SHOW_vidShowAndPlayInit+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	ready_flag_glob = ready_flag;
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	90 93 3d 04 	sts	0x043D, r25
     b5c:	80 93 3c 04 	sts	0x043C, r24
	(*ready_flag)=0;
     b60:	e9 81       	ldd	r30, Y+1	; 0x01
     b62:	fa 81       	ldd	r31, Y+2	; 0x02
     b64:	10 82       	st	Z, r1
	M16P_vidInit(9600);
     b66:	80 e8       	ldi	r24, 0x80	; 128
     b68:	95 e2       	ldi	r25, 0x25	; 37
     b6a:	0e 94 47 1a 	call	0x348e	; 0x348e <M16P_vidInit>
	LCD_vidInit();
     b6e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_vidInit>
	TIMER_voidInit();
     b72:	0e 94 72 12 	call	0x24e4	; 0x24e4 <TIMER_voidInit>
	TIMER_voidSetCallBackCTC(&callback);
     b76:	8a ec       	ldi	r24, 0xCA	; 202
     b78:	96 e0       	ldi	r25, 0x06	; 6
     b7a:	0e 94 31 13 	call	0x2662	; 0x2662 <TIMER_voidSetCallBackCTC>
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <SHOW_vidShowAndPlay>:



void SHOW_vidShowAndPlay (uint8_t * words)
{
     b88:	df 93       	push	r29
     b8a:	cf 93       	push	r28
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	64 97       	sbiw	r28, 0x14	; 20
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	9f 87       	std	Y+15, r25	; 0x0f
     b9e:	8e 87       	std	Y+14, r24	; 0x0e
	uint8_t words_cpy[10];
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
     ba0:	1a 82       	std	Y+2, r1	; 0x02
     ba2:	15 c0       	rjmp	.+42     	; 0xbce <SHOW_vidShowAndPlay+0x46>
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	48 2f       	mov	r20, r24
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	8e 85       	ldd	r24, Y+14	; 0x0e
     bb2:	9f 85       	ldd	r25, Y+15	; 0x0f
     bb4:	fc 01       	movw	r30, r24
     bb6:	e2 0f       	add	r30, r18
     bb8:	f3 1f       	adc	r31, r19
     bba:	20 81       	ld	r18, Z
     bbc:	ce 01       	movw	r24, r28
     bbe:	04 96       	adiw	r24, 0x04	; 4
     bc0:	fc 01       	movw	r30, r24
     bc2:	e4 0f       	add	r30, r20
     bc4:	f5 1f       	adc	r31, r21
     bc6:	20 83       	st	Z, r18
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	8a 83       	std	Y+2, r24	; 0x02
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	8a 30       	cpi	r24, 0x0A	; 10
     bd2:	40 f3       	brcs	.-48     	; 0xba4 <SHOW_vidShowAndPlay+0x1c>
	//LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
     bd4:	e0 91 3c 04 	lds	r30, 0x043C
     bd8:	f0 91 3d 04 	lds	r31, 0x043D
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 83       	st	Z, r24
	uint8_t j=0;
     be0:	1b 82       	std	Y+3, r1	; 0x03
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     be2:	19 82       	std	Y+1, r1	; 0x01
     be4:	90 c0       	rjmp	.+288    	; 0xd06 <SHOW_vidShowAndPlay+0x17e>
	{
		for(j =0; j<NO_OF_WORDS; j++)
     be6:	1b 82       	std	Y+3, r1	; 0x03
     be8:	41 c0       	rjmp	.+130    	; 0xc6c <SHOW_vidShowAndPlay+0xe4>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	ce 01       	movw	r24, r28
     bf2:	04 96       	adiw	r24, 0x04	; 4
     bf4:	fc 01       	movw	r30, r24
     bf6:	e2 0f       	add	r30, r18
     bf8:	f3 1f       	adc	r31, r19
     bfa:	80 81       	ld	r24, Z
     bfc:	48 2f       	mov	r20, r24
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	c9 01       	movw	r24, r18
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	82 0f       	add	r24, r18
     c0e:	93 1f       	adc	r25, r19
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	fc 01       	movw	r30, r24
     c18:	e4 59       	subi	r30, 0x94	; 148
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	48 17       	cp	r20, r24
     c22:	59 07       	cpc	r21, r25
     c24:	01 f5       	brne	.+64     	; 0xc66 <SHOW_vidShowAndPlay+0xde>
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	9c 01       	movw	r18, r24
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	ce 01       	movw	r24, r28
     c34:	04 96       	adiw	r24, 0x04	; 4
     c36:	fc 01       	movw	r30, r24
     c38:	e2 0f       	add	r30, r18
     c3a:	f3 1f       	adc	r31, r19
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	c9 01       	movw	r24, r18
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	fc 01       	movw	r30, r24
     c58:	e0 59       	subi	r30, 0x90	; 144
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 81       	ld	r24, Z
     c5e:	91 81       	ldd	r25, Z+1	; 0x01
     c60:	48 17       	cp	r20, r24
     c62:	59 07       	cpc	r21, r25
     c64:	39 f0       	breq	.+14     	; 0xc74 <SHOW_vidShowAndPlay+0xec>
	//LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
	{
		for(j =0; j<NO_OF_WORDS; j++)
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	8b 83       	std	Y+3, r24	; 0x03
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	84 31       	cpi	r24, 0x14	; 20
     c70:	08 f4       	brcc	.+2      	; 0xc74 <SHOW_vidShowAndPlay+0xec>
     c72:	bb cf       	rjmp	.-138    	; 0xbea <SHOW_vidShowAndPlay+0x62>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
     c74:	80 91 f8 03 	lds	r24, 0x03F8
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 f8 03 	sts	0x03F8, r24
		sound_buffer[i]=outputs[j];
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	48 2f       	mov	r20, r24
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	c9 01       	movw	r24, r18
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	9c 01       	movw	r18, r24
     c9a:	22 5e       	subi	r18, 0xE2	; 226
     c9c:	3b 4f       	sbci	r19, 0xFB	; 251
     c9e:	ca 01       	movw	r24, r20
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	84 0f       	add	r24, r20
     ca6:	95 1f       	adc	r25, r21
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	84 59       	subi	r24, 0x94	; 148
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	39 8b       	std	Y+17, r19	; 0x11
     cb2:	28 8b       	std	Y+16, r18	; 0x10
     cb4:	9b 8b       	std	Y+19, r25	; 0x13
     cb6:	8a 8b       	std	Y+18, r24	; 0x12
     cb8:	86 e0       	ldi	r24, 0x06	; 6
     cba:	8c 8b       	std	Y+20, r24	; 0x14
     cbc:	ea 89       	ldd	r30, Y+18	; 0x12
     cbe:	fb 89       	ldd	r31, Y+19	; 0x13
     cc0:	00 80       	ld	r0, Z
     cc2:	8a 89       	ldd	r24, Y+18	; 0x12
     cc4:	9b 89       	ldd	r25, Y+19	; 0x13
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	9b 8b       	std	Y+19, r25	; 0x13
     cca:	8a 8b       	std	Y+18, r24	; 0x12
     ccc:	e8 89       	ldd	r30, Y+16	; 0x10
     cce:	f9 89       	ldd	r31, Y+17	; 0x11
     cd0:	00 82       	st	Z, r0
     cd2:	88 89       	ldd	r24, Y+16	; 0x10
     cd4:	99 89       	ldd	r25, Y+17	; 0x11
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	99 8b       	std	Y+17, r25	; 0x11
     cda:	88 8b       	std	Y+16, r24	; 0x10
     cdc:	9c 89       	ldd	r25, Y+20	; 0x14
     cde:	91 50       	subi	r25, 0x01	; 1
     ce0:	9c 8b       	std	Y+20, r25	; 0x14
     ce2:	ec 89       	ldd	r30, Y+20	; 0x14
     ce4:	ee 23       	and	r30, r30
     ce6:	51 f7       	brne	.-44     	; 0xcbc <SHOW_vidShowAndPlay+0x134>
		LCD_vidDisplayString(strings[j]);
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	fc 01       	movw	r30, r24
     cf4:	e5 59       	subi	r30, 0x95	; 149
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	80 81       	ld	r24, Z
     cfa:	91 81       	ldd	r25, Z+1	; 0x01
     cfc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LCD_vidDisplayString>
	uint8_t words_cpy[10];
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
	//LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	8e 5f       	subi	r24, 0xFE	; 254
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	ce 01       	movw	r24, r28
     d0e:	04 96       	adiw	r24, 0x04	; 4
     d10:	fc 01       	movw	r30, r24
     d12:	e2 0f       	add	r30, r18
     d14:	f3 1f       	adc	r31, r19
     d16:	80 81       	ld	r24, Z
     d18:	88 23       	and	r24, r24
     d1a:	79 f0       	breq	.+30     	; 0xd3a <SHOW_vidShowAndPlay+0x1b2>
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	9c 01       	movw	r18, r24
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	ce 01       	movw	r24, r28
     d2a:	04 96       	adiw	r24, 0x04	; 4
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 0f       	add	r30, r18
     d30:	f3 1f       	adc	r31, r19
     d32:	80 81       	ld	r24, Z
     d34:	88 23       	and	r24, r24
     d36:	09 f0       	breq	.+2      	; 0xd3a <SHOW_vidShowAndPlay+0x1b2>
     d38:	56 cf       	rjmp	.-340    	; 0xbe6 <SHOW_vidShowAndPlay+0x5e>
		sound_buffer_size++;
		sound_buffer[i]=outputs[j];
		LCD_vidDisplayString(strings[j]);
	}
	//(*ready_flag_glob) = 0;
	TIMER_voidGetNumCountCTC(sound_buffer[0].sound_duration, &compare_cnt, &compare_value_1);
     d3a:	80 91 1e 04 	lds	r24, 0x041E
     d3e:	90 91 1f 04 	lds	r25, 0x041F
     d42:	20 e4       	ldi	r18, 0x40	; 64
     d44:	34 e0       	ldi	r19, 0x04	; 4
     d46:	4d e1       	ldi	r20, 0x1D	; 29
     d48:	54 e0       	ldi	r21, 0x04	; 4
     d4a:	b9 01       	movw	r22, r18
     d4c:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TIMER_voidGetNumCountCTC>
	TIMER_voidSetCTCTime(compare_value_1);
     d50:	80 91 1d 04 	lds	r24, 0x041D
     d54:	0e 94 da 12 	call	0x25b4	; 0x25b4 <TIMER_voidSetCTCTime>
	LCD_vidWriteInteger(compare_cnt);
     d58:	80 91 40 04 	lds	r24, 0x0440
     d5c:	90 91 41 04 	lds	r25, 0x0441
     d60:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_vidWriteInteger>
	M16P_vidPlayFileInFolder(sound_buffer[0].folder, sound_buffer[0].file);
     d64:	80 91 20 04 	lds	r24, 0x0420
     d68:	90 91 21 04 	lds	r25, 0x0421
     d6c:	20 91 22 04 	lds	r18, 0x0422
     d70:	30 91 23 04 	lds	r19, 0x0423
     d74:	b9 01       	movw	r22, r18
     d76:	0e 94 cf 1b 	call	0x379e	; 0x379e <M16P_vidPlayFileInFolder>
	LCD_vidDisplayString((uint8_t*)"b");
     d7a:	80 e6       	ldi	r24, 0x60	; 96
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LCD_vidDisplayString>
}
     d82:	64 96       	adiw	r28, 0x14	; 20
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <callback>:

void callback()
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	LCD_vidDisplayString((uint8_t*)"c");
     d9c:	82 e6       	ldi	r24, 0x62	; 98
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LCD_vidDisplayString>
	M16P_vidPause();
     da4:	0e 94 c5 1b 	call	0x378a	; 0x378a <M16P_vidPause>
	static uint8_t current_file = 1;
	LCD_vidDisplayString((uint8_t*)"c");
     da8:	82 e6       	ldi	r24, 0x62	; 98
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <LCD_vidDisplayString>
	LCD_vidWriteInteger(current_file);
     db0:	80 91 93 01 	lds	r24, 0x0193
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_vidWriteInteger>
	if(current_file < (sound_buffer_size-1))
     dbc:	80 91 93 01 	lds	r24, 0x0193
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	80 91 f8 03 	lds	r24, 0x03F8
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	28 17       	cp	r18, r24
     dd0:	39 07       	cpc	r19, r25
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <callback+0x42>
     dd4:	46 c0       	rjmp	.+140    	; 0xe62 <callback+0xce>
	{
		M16P_vidPlayFileInFolder(sound_buffer[current_file].folder, sound_buffer[current_file].file);
     dd6:	80 91 93 01 	lds	r24, 0x0193
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	c9 01       	movw	r24, r18
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	fc 01       	movw	r30, r24
     df0:	e2 5e       	subi	r30, 0xE2	; 226
     df2:	fb 4f       	sbci	r31, 0xFB	; 251
     df4:	40 81       	ld	r20, Z
     df6:	51 81       	ldd	r21, Z+1	; 0x01
     df8:	80 91 93 01 	lds	r24, 0x0193
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	c9 01       	movw	r24, r18
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	fc 01       	movw	r30, r24
     e10:	ee 5d       	subi	r30, 0xDE	; 222
     e12:	fb 4f       	sbci	r31, 0xFB	; 251
     e14:	20 81       	ld	r18, Z
     e16:	31 81       	ldd	r19, Z+1	; 0x01
     e18:	ca 01       	movw	r24, r20
     e1a:	b9 01       	movw	r22, r18
     e1c:	0e 94 cf 1b 	call	0x379e	; 0x379e <M16P_vidPlayFileInFolder>
		TIMER_voidGetNumCountCTC(sound_buffer[current_file].sound_duration, &compare_cnt, &compare_value_1);
     e20:	80 91 93 01 	lds	r24, 0x0193
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	c9 01       	movw	r24, r18
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	fc 01       	movw	r30, r24
     e38:	e2 5e       	subi	r30, 0xE2	; 226
     e3a:	fb 4f       	sbci	r31, 0xFB	; 251
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	20 e4       	ldi	r18, 0x40	; 64
     e42:	34 e0       	ldi	r19, 0x04	; 4
     e44:	4d e1       	ldi	r20, 0x1D	; 29
     e46:	54 e0       	ldi	r21, 0x04	; 4
     e48:	b9 01       	movw	r22, r18
     e4a:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <TIMER_voidGetNumCountCTC>
		TIMER_voidSetCTCTime(compare_value_1);
     e4e:	80 91 1d 04 	lds	r24, 0x041D
     e52:	0e 94 da 12 	call	0x25b4	; 0x25b4 <TIMER_voidSetCTCTime>
		current_file++;
     e56:	80 91 93 01 	lds	r24, 0x0193
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
     e5c:	80 93 93 01 	sts	0x0193, r24
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <callback+0xe2>

	}else{
		current_file = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 93 01 	sts	0x0193, r24
		sound_buffer_size = 0;
     e68:	10 92 f8 03 	sts	0x03F8, r1
		(*ready_flag_glob) = 0;
     e6c:	e0 91 3c 04 	lds	r30, 0x043C
     e70:	f0 91 3d 04 	lds	r31, 0x043D
     e74:	10 82       	st	Z, r1
	}
}
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <GLOVE_vidCallBack>:
uint16_ i = 0;

uint8_t FLEX_SENSORS[8] = {FLEX_0, FLEX_1, FLEX_2, FLEX_3, FLEX_4, FLEX_5, FLEX_6, FLEX_7};

void GLOVE_vidCallBack()
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	SENSOR_READ[i]=READ;
     e84:	20 91 f9 03 	lds	r18, 0x03F9
     e88:	30 91 fa 03 	lds	r19, 0x03FA
     e8c:	80 91 fe 03 	lds	r24, 0x03FE
     e90:	90 91 ff 03 	lds	r25, 0x03FF
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	f9 01       	movw	r30, r18
     e9a:	e8 0f       	add	r30, r24
     e9c:	f9 1f       	adc	r31, r25
     e9e:	80 91 fc 03 	lds	r24, 0x03FC
     ea2:	90 91 fd 03 	lds	r25, 0x03FD
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	80 83       	st	Z, r24
	if(i < NO_OF_FLEX_SENSORS-1)
     eaa:	80 91 fb 03 	lds	r24, 0x03FB
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9c 01       	movw	r18, r24
     eb6:	80 91 fe 03 	lds	r24, 0x03FE
     eba:	90 91 ff 03 	lds	r25, 0x03FF
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	58 f5       	brcc	.+86     	; 0xf1a <GLOVE_vidCallBack+0x9e>
	{
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=0;
     ec4:	20 91 f9 03 	lds	r18, 0x03F9
     ec8:	30 91 fa 03 	lds	r19, 0x03FA
     ecc:	80 91 fb 03 	lds	r24, 0x03FB
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 96       	adiw	r24, 0x02	; 2
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	f9 01       	movw	r30, r18
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	11 82       	std	Z+1, r1	; 0x01
     ee2:	10 82       	st	Z, r1
		i++;
     ee4:	80 91 fe 03 	lds	r24, 0x03FE
     ee8:	90 91 ff 03 	lds	r25, 0x03FF
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	90 93 ff 03 	sts	0x03FF, r25
     ef2:	80 93 fe 03 	sts	0x03FE, r24
		READ=0;
     ef6:	10 92 fd 03 	sts	0x03FD, r1
     efa:	10 92 fc 03 	sts	0x03FC, r1
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
     efe:	80 91 fe 03 	lds	r24, 0x03FE
     f02:	90 91 ff 03 	lds	r25, 0x03FF
     f06:	fc 01       	movw	r30, r24
     f08:	ec 56       	subi	r30, 0x6C	; 108
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	20 81       	ld	r18, Z
     f0e:	8c ef       	ldi	r24, 0xFC	; 252
     f10:	93 e0       	ldi	r25, 0x03	; 3
     f12:	62 2f       	mov	r22, r18
     f14:	0e 94 21 1a 	call	0x3442	; 0x3442 <FLEX_vidGetFlexRead>
     f18:	27 c0       	rjmp	.+78     	; 0xf68 <GLOVE_vidCallBack+0xec>
	}else if(i == NO_OF_FLEX_SENSORS-1)
     f1a:	80 91 fb 03 	lds	r24, 0x03FB
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9c 01       	movw	r18, r24
     f26:	80 91 fe 03 	lds	r24, 0x03FE
     f2a:	90 91 ff 03 	lds	r25, 0x03FF
     f2e:	28 17       	cp	r18, r24
     f30:	39 07       	cpc	r19, r25
     f32:	d1 f4       	brne	.+52     	; 0xf68 <GLOVE_vidCallBack+0xec>
	{
		i=0;
     f34:	10 92 ff 03 	sts	0x03FF, r1
     f38:	10 92 fe 03 	sts	0x03FE, r1
		READ=0;
     f3c:	10 92 fd 03 	sts	0x03FD, r1
     f40:	10 92 fc 03 	sts	0x03FC, r1
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=1;
     f44:	20 91 f9 03 	lds	r18, 0x03F9
     f48:	30 91 fa 03 	lds	r19, 0x03FA
     f4c:	80 91 fb 03 	lds	r24, 0x03FB
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 96       	adiw	r24, 0x02	; 2
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	f9 01       	movw	r30, r18
     f5c:	e8 0f       	add	r30, r24
     f5e:	f9 1f       	adc	r31, r25
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
	}
}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <GLOVE_vidSensorsInit>:

void GLOVE_vidSensorsInit()
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	FLEX_vidFlexInit(FLEX_ALL);
     f76:	88 e0       	ldi	r24, 0x08	; 8
     f78:	0e 94 11 1a 	call	0x3422	; 0x3422 <FLEX_vidFlexInit>
	TILT_vidInit(TILT_0);
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 c1 13 	call	0x2782	; 0x2782 <TILT_vidInit>
	TILT_vidInit(TILT_1);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	0e 94 c1 13 	call	0x2782	; 0x2782 <TILT_vidInit>
	FLEX_vidSetCallBack(&GLOVE_vidCallBack);
     f88:	8e e3       	ldi	r24, 0x3E	; 62
     f8a:	97 e0       	ldi	r25, 0x07	; 7
     f8c:	0e 94 37 1a 	call	0x346e	; 0x346e <FLEX_vidSetCallBack>
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <GLOVE_vidSetGloveParams>:

void GLOVE_vidSetGloveParams(uint16_* sensor_read, uint8_t no_of_sensors)
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <GLOVE_vidSetGloveParams+0x6>
     f9c:	0f 92       	push	r0
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	6b 83       	std	Y+3, r22	; 0x03
	SENSOR_READ = sensor_read;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	90 93 fa 03 	sts	0x03FA, r25
     fb0:	80 93 f9 03 	sts	0x03F9, r24
	if(no_of_sensors<=8)NO_OF_FLEX_SENSORS = no_of_sensors - 2;
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	89 30       	cpi	r24, 0x09	; 9
     fb8:	20 f4       	brcc	.+8      	; 0xfc2 <GLOVE_vidSetGloveParams+0x2c>
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	82 50       	subi	r24, 0x02	; 2
     fbe:	80 93 fb 03 	sts	0x03FB, r24
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <GLOVE_vidGetHandRead>:

void GLOVE_vidGetHandRead()
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	if(i==0)
     fd6:	80 91 fe 03 	lds	r24, 0x03FE
     fda:	90 91 ff 03 	lds	r25, 0x03FF
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f5       	brne	.+90     	; 0x103c <GLOVE_vidGetHandRead+0x6e>
	{
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS],TILT_0);
     fe2:	80 91 f9 03 	lds	r24, 0x03F9
     fe6:	90 91 fa 03 	lds	r25, 0x03FA
     fea:	9c 01       	movw	r18, r24
     fec:	80 91 fb 03 	lds	r24, 0x03FB
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	0e 94 09 14 	call	0x2812	; 0x2812 <TILT_vidGetTiltRead>
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS + 1],TILT_1);
    1002:	20 91 f9 03 	lds	r18, 0x03F9
    1006:	30 91 fa 03 	lds	r19, 0x03FA
    100a:	80 91 fb 03 	lds	r24, 0x03FB
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	82 0f       	add	r24, r18
    101a:	93 1f       	adc	r25, r19
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	0e 94 09 14 	call	0x2812	; 0x2812 <TILT_vidGetTiltRead>
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    1022:	80 91 fe 03 	lds	r24, 0x03FE
    1026:	90 91 ff 03 	lds	r25, 0x03FF
    102a:	fc 01       	movw	r30, r24
    102c:	ec 56       	subi	r30, 0x6C	; 108
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	20 81       	ld	r18, Z
    1032:	8c ef       	ldi	r24, 0xFC	; 252
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	62 2f       	mov	r22, r18
    1038:	0e 94 21 1a 	call	0x3442	; 0x3442 <FLEX_vidGetFlexRead>
	}
}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <GET_vidGetWordAndSound>:
									  SEN_5_WORD_3, SEN_5_WORD_4, SEN_6_WORD_1, SEN_6_WORD_2,
									  SEN_7_WORD_1, SEN_7_WORD_2, SEN_7_WORD_3, SEN_7_WORD_4,
									  STOPPING_WORD, NOT_FOUND};

void GET_vidGetWordAndSound(uint16_ * sensor_reads, uint8_t * word_location )
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	00 d0       	rcall	.+0      	; 0x1048 <GET_vidGetWordAndSound+0x6>
    1048:	00 d0       	rcall	.+0      	; 0x104a <GET_vidGetWordAndSound+0x8>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	8a 83       	std	Y+2, r24	; 0x02
    1054:	7d 83       	std	Y+5, r23	; 0x05
    1056:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8_t i=0; i<TOTAL_NO_OF_WORDS-1; i++)
    1058:	19 82       	std	Y+1, r1	; 0x01
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	85 31       	cpi	r24, 0x15	; 21
    105e:	50 f5       	brcc	.+84     	; 0x10b4 <GET_vidGetWordAndSound+0x72>
		   sensor_reads[2]>=words[i].finger_2_min && sensor_reads[2]<=words[i].finger_2_max &&
		   sensor_reads[1]>=words[i].finger_3_min && sensor_reads[1]<=words[i].finger_3_max &&
		   sensor_reads[3]>=words[i].finger_4_min && sensor_reads[3]<=words[i].finger_4_max &&
		   sensor_reads[5]==(uint16_)words[i].tilt0 && sensor_reads[6]==(uint16_)words[i].tilt1*/1 )
		{
			word_location[0] = words[i].sentence;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8a e1       	ldi	r24, 0x1A	; 26
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	ac 01       	movw	r20, r24
    106c:	24 9f       	mul	r18, r20
    106e:	c0 01       	movw	r24, r0
    1070:	25 9f       	mul	r18, r21
    1072:	90 0d       	add	r25, r0
    1074:	34 9f       	mul	r19, r20
    1076:	90 0d       	add	r25, r0
    1078:	11 24       	eor	r1, r1
    107a:	fc 01       	movw	r30, r24
    107c:	ec 54       	subi	r30, 0x4C	; 76
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	80 81       	ld	r24, Z
    1082:	ec 81       	ldd	r30, Y+4	; 0x04
    1084:	fd 81       	ldd	r31, Y+5	; 0x05
    1086:	80 83       	st	Z, r24
			word_location[1] = words[i].word;
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	dc 01       	movw	r26, r24
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	8a e1       	ldi	r24, 0x1A	; 26
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	ac 01       	movw	r20, r24
    109c:	24 9f       	mul	r18, r20
    109e:	c0 01       	movw	r24, r0
    10a0:	25 9f       	mul	r18, r21
    10a2:	90 0d       	add	r25, r0
    10a4:	34 9f       	mul	r19, r20
    10a6:	90 0d       	add	r25, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	fc 01       	movw	r30, r24
    10ac:	eb 54       	subi	r30, 0x4B	; 75
    10ae:	fe 4f       	sbci	r31, 0xFE	; 254
    10b0:	80 81       	ld	r24, Z
    10b2:	8c 93       	st	X, r24
			word_location[1] = words[TOTAL_NO_OF_WORDS-1].word;
		}
	}


}
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>:
#include"../../libraries/bit_math.h"
#include "../global_interrupt_driver/global_interrupt_int.h"
#include "../global_interrupt_driver/global_interrupt_register.h"

void GLOBAL_INTERRUPT_vidGlobalInterruptEnable(uint8_t mode)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x6>
    10ca:	0f 92       	push	r0
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3b 83       	std	Y+3, r19	; 0x03
    10da:	2a 83       	std	Y+2, r18	; 0x02
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f0       	breq	.+26     	; 0x10fe <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x3a>
    10e4:	2a 81       	ldd	r18, Y+2	; 0x02
    10e6:	3b 81       	ldd	r19, Y+3	; 0x03
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	31 05       	cpc	r19, r1
    10ec:	79 f4       	brne	.+30     	; 0x110c <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
	{
		case ENABLED:
			SET_BIT(SREG,7);
    10ee:	af e5       	ldi	r26, 0x5F	; 95
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ef e5       	ldi	r30, 0x5F	; 95
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	8c 93       	st	X, r24
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
			break;
		case DISABLED:
			CLR_BIT(SREG,7);
    10fe:	af e5       	ldi	r26, 0x5F	; 95
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	ef e5       	ldi	r30, 0x5F	; 95
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 77       	andi	r24, 0x7F	; 127
    110a:	8c 93       	st	X, r24
			break;
	}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <DIO_u8SetPinMode>:
#include"../../libraries/bit_math.h"
#include"dio_register.h"
#include"dio_int.h"

uint8_t DIO_u8SetPinMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <DIO_u8SetPinMode+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <DIO_u8SetPinMode+0x8>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_u8SetPinMode+0xa>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	8a 83       	std	Y+2, r24	; 0x02
    1128:	6b 83       	std	Y+3, r22	; 0x03
    112a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    112c:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	3e 83       	std	Y+6, r19	; 0x06
    1136:	2d 83       	std	Y+5, r18	; 0x05
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <DIO_u8SetPinMode+0x2c>
    1142:	49 c0       	rjmp	.+146    	; 0x11d6 <DIO_u8SetPinMode+0xbe>
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <DIO_u8SetPinMode+0x40>
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	71 f0       	breq	.+28     	; 0x1172 <DIO_u8SetPinMode+0x5a>
    1156:	d5 c0       	rjmp	.+426    	; 0x1302 <DIO_u8SetPinMode+0x1ea>
    1158:	2d 81       	ldd	r18, Y+5	; 0x05
    115a:	3e 81       	ldd	r19, Y+6	; 0x06
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_u8SetPinMode+0x4c>
    1162:	6b c0       	rjmp	.+214    	; 0x123a <DIO_u8SetPinMode+0x122>
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <DIO_u8SetPinMode+0x58>
    116e:	97 c0       	rjmp	.+302    	; 0x129e <DIO_u8SetPinMode+0x186>
    1170:	c8 c0       	rjmp	.+400    	; 0x1302 <DIO_u8SetPinMode+0x1ea>
		{
		case PORT_A:
			if(mode==INPUT)CLR_BIT(DDRA_REG,pin_no);
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	88 23       	and	r24, r24
    1176:	a9 f4       	brne	.+42     	; 0x11a2 <DIO_u8SetPinMode+0x8a>
    1178:	aa e3       	ldi	r26, 0x3A	; 58
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ea e3       	ldi	r30, 0x3A	; 58
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_u8SetPinMode+0x7e>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_u8SetPinMode+0x7a>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	b2 c0       	rjmp	.+356    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRA_REG,pin_no);
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a1 f4       	brne	.+40     	; 0x11d0 <DIO_u8SetPinMode+0xb8>
    11a8:	aa e3       	ldi	r26, 0x3A	; 58
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ea e3       	ldi	r30, 0x3A	; 58
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8SetPinMode+0xae>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_u8SetPinMode+0xaa>
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	9b c0       	rjmp	.+310    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	98 c0       	rjmp	.+304    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_B:
			if(mode==INPUT)CLR_BIT(DDRB_REG,pin_no);
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	88 23       	and	r24, r24
    11da:	a9 f4       	brne	.+42     	; 0x1206 <DIO_u8SetPinMode+0xee>
    11dc:	a7 e3       	ldi	r26, 0x37	; 55
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e7 e3       	ldi	r30, 0x37	; 55
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8SetPinMode+0xe2>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8SetPinMode+0xde>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	80 c0       	rjmp	.+256    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRB_REG,pin_no);
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f4       	brne	.+40     	; 0x1234 <DIO_u8SetPinMode+0x11c>
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8SetPinMode+0x112>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8SetPinMode+0x10e>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	69 c0       	rjmp	.+210    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	66 c0       	rjmp	.+204    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_C:
			if(mode==INPUT)CLR_BIT(DDRC_REG,pin_no);
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	88 23       	and	r24, r24
    123e:	a9 f4       	brne	.+42     	; 0x126a <DIO_u8SetPinMode+0x152>
    1240:	a4 e3       	ldi	r26, 0x34	; 52
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e4 e3       	ldi	r30, 0x34	; 52
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_u8SetPinMode+0x146>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_u8SetPinMode+0x142>
    1262:	80 95       	com	r24
    1264:	84 23       	and	r24, r20
    1266:	8c 93       	st	X, r24
    1268:	4e c0       	rjmp	.+156    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRC_REG,pin_no);
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	a1 f4       	brne	.+40     	; 0x1298 <DIO_u8SetPinMode+0x180>
    1270:	a4 e3       	ldi	r26, 0x34	; 52
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e4 e3       	ldi	r30, 0x34	; 52
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <DIO_u8SetPinMode+0x176>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <DIO_u8SetPinMode+0x172>
    1292:	84 2b       	or	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	37 c0       	rjmp	.+110    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	34 c0       	rjmp	.+104    	; 0x1306 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_D:
			if(mode==INPUT)CLR_BIT(DDRD_REG,pin_no);
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	88 23       	and	r24, r24
    12a2:	a9 f4       	brne	.+42     	; 0x12ce <DIO_u8SetPinMode+0x1b6>
    12a4:	a1 e3       	ldi	r26, 0x31	; 49
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e1 e3       	ldi	r30, 0x31	; 49
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinMode+0x1aa>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinMode+0x1a6>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	1c c0       	rjmp	.+56     	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRD_REG,pin_no);
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	a1 f4       	brne	.+40     	; 0x12fc <DIO_u8SetPinMode+0x1e4>
    12d4:	a1 e3       	ldi	r26, 0x31	; 49
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e1 e3       	ldi	r30, 0x31	; 49
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_u8SetPinMode+0x1da>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_u8SetPinMode+0x1d6>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_u8SetPinMode+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
}
    1308:	26 96       	adiw	r28, 0x06	; 6
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <DIO_u8SetPinValue>:
uint8_t DIO_u8SetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t value)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <DIO_u8SetPinValue+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_u8SetPinValue+0x8>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_u8SetPinValue+0xa>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	6b 83       	std	Y+3, r22	; 0x03
    132c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    132e:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3e 83       	std	Y+6, r19	; 0x06
    1338:	2d 83       	std	Y+5, r18	; 0x05
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	91 05       	cpc	r25, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <DIO_u8SetPinValue+0x2c>
    1344:	49 c0       	rjmp	.+146    	; 0x13d8 <DIO_u8SetPinValue+0xbe>
    1346:	2d 81       	ldd	r18, Y+5	; 0x05
    1348:	3e 81       	ldd	r19, Y+6	; 0x06
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	2c f4       	brge	.+10     	; 0x135a <DIO_u8SetPinValue+0x40>
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	71 f0       	breq	.+28     	; 0x1374 <DIO_u8SetPinValue+0x5a>
    1358:	d5 c0       	rjmp	.+426    	; 0x1504 <DIO_u8SetPinValue+0x1ea>
    135a:	2d 81       	ldd	r18, Y+5	; 0x05
    135c:	3e 81       	ldd	r19, Y+6	; 0x06
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <DIO_u8SetPinValue+0x4c>
    1364:	6b c0       	rjmp	.+214    	; 0x143c <DIO_u8SetPinValue+0x122>
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <DIO_u8SetPinValue+0x58>
    1370:	97 c0       	rjmp	.+302    	; 0x14a0 <DIO_u8SetPinValue+0x186>
    1372:	c8 c0       	rjmp	.+400    	; 0x1504 <DIO_u8SetPinValue+0x1ea>
		{
		case PORT_A:
			if(value==LOW)CLR_BIT(PORTA_REG,pin_no);
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	88 23       	and	r24, r24
    1378:	a9 f4       	brne	.+42     	; 0x13a4 <DIO_u8SetPinValue+0x8a>
    137a:	ab e3       	ldi	r26, 0x3B	; 59
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_u8SetPinValue+0x7e>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_u8SetPinValue+0x7a>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	b2 c0       	rjmp	.+356    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTA_REG,pin_no);
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <DIO_u8SetPinValue+0xb8>
    13aa:	ab e3       	ldi	r26, 0x3B	; 59
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	eb e3       	ldi	r30, 0x3B	; 59
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8SetPinValue+0xae>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8SetPinValue+0xaa>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	9b c0       	rjmp	.+310    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	98 c0       	rjmp	.+304    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_B:
			if(value==LOW)CLR_BIT(PORTB_REG,pin_no);
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	88 23       	and	r24, r24
    13dc:	a9 f4       	brne	.+42     	; 0x1408 <DIO_u8SetPinValue+0xee>
    13de:	a8 e3       	ldi	r26, 0x38	; 56
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e8 e3       	ldi	r30, 0x38	; 56
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_u8SetPinValue+0xe2>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_u8SetPinValue+0xde>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	80 c0       	rjmp	.+256    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTB_REG,pin_no);
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	a1 f4       	brne	.+40     	; 0x1436 <DIO_u8SetPinValue+0x11c>
    140e:	a8 e3       	ldi	r26, 0x38	; 56
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e8 e3       	ldi	r30, 0x38	; 56
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_u8SetPinValue+0x112>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_u8SetPinValue+0x10e>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	69 c0       	rjmp	.+210    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	66 c0       	rjmp	.+204    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_C:
			if(value==LOW)CLR_BIT(PORTC_REG,pin_no);
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	88 23       	and	r24, r24
    1440:	a9 f4       	brne	.+42     	; 0x146c <DIO_u8SetPinValue+0x152>
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8SetPinValue+0x146>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8SetPinValue+0x142>
    1464:	80 95       	com	r24
    1466:	84 23       	and	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	4e c0       	rjmp	.+156    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTC_REG,pin_no);
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	a1 f4       	brne	.+40     	; 0x149a <DIO_u8SetPinValue+0x180>
    1472:	a5 e3       	ldi	r26, 0x35	; 53
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e3       	ldi	r30, 0x35	; 53
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8SetPinValue+0x176>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8SetPinValue+0x172>
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	37 c0       	rjmp	.+110    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	34 c0       	rjmp	.+104    	; 0x1508 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_D:
			if(value==LOW)CLR_BIT(PORTD_REG,pin_no);
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	88 23       	and	r24, r24
    14a4:	a9 f4       	brne	.+42     	; 0x14d0 <DIO_u8SetPinValue+0x1b6>
    14a6:	a2 e3       	ldi	r26, 0x32	; 50
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8SetPinValue+0x1aa>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_u8SetPinValue+0x1a6>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	1c c0       	rjmp	.+56     	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTD_REG,pin_no);
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	a1 f4       	brne	.+40     	; 0x14fe <DIO_u8SetPinValue+0x1e4>
    14d6:	a2 e3       	ldi	r26, 0x32	; 50
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e2 e3       	ldi	r30, 0x32	; 50
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_u8SetPinValue+0x1da>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_u8SetPinValue+0x1d6>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_u8SetPinValue+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1508:	89 81       	ldd	r24, Y+1	; 0x01
}
    150a:	26 96       	adiw	r28, 0x06	; 6
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_u8GetPinValue>:
uint8_t DIO_u8GetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	27 97       	sbiw	r28, 0x07	; 7
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	8a 83       	std	Y+2, r24	; 0x02
    1532:	6b 83       	std	Y+3, r22	; 0x03
    1534:	5d 83       	std	Y+5, r21	; 0x05
    1536:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1538:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	08 f0       	brcs	.+2      	; 0x1542 <DIO_u8GetPinValue+0x26>
    1540:	74 c0       	rjmp	.+232    	; 0x162a <DIO_u8GetPinValue+0x10e>
	{
		switch(port_id)
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3f 83       	std	Y+7, r19	; 0x07
    154a:	2e 83       	std	Y+6, r18	; 0x06
    154c:	4e 81       	ldd	r20, Y+6	; 0x06
    154e:	5f 81       	ldd	r21, Y+7	; 0x07
    1550:	41 30       	cpi	r20, 0x01	; 1
    1552:	51 05       	cpc	r21, r1
    1554:	59 f1       	breq	.+86     	; 0x15ac <DIO_u8GetPinValue+0x90>
    1556:	8e 81       	ldd	r24, Y+6	; 0x06
    1558:	9f 81       	ldd	r25, Y+7	; 0x07
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	91 05       	cpc	r25, r1
    155e:	34 f4       	brge	.+12     	; 0x156c <DIO_u8GetPinValue+0x50>
    1560:	2e 81       	ldd	r18, Y+6	; 0x06
    1562:	3f 81       	ldd	r19, Y+7	; 0x07
    1564:	21 15       	cp	r18, r1
    1566:	31 05       	cpc	r19, r1
    1568:	69 f0       	breq	.+26     	; 0x1584 <DIO_u8GetPinValue+0x68>
    156a:	5c c0       	rjmp	.+184    	; 0x1624 <DIO_u8GetPinValue+0x108>
    156c:	4e 81       	ldd	r20, Y+6	; 0x06
    156e:	5f 81       	ldd	r21, Y+7	; 0x07
    1570:	42 30       	cpi	r20, 0x02	; 2
    1572:	51 05       	cpc	r21, r1
    1574:	79 f1       	breq	.+94     	; 0x15d4 <DIO_u8GetPinValue+0xb8>
    1576:	8e 81       	ldd	r24, Y+6	; 0x06
    1578:	9f 81       	ldd	r25, Y+7	; 0x07
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <DIO_u8GetPinValue+0x66>
    1580:	3d c0       	rjmp	.+122    	; 0x15fc <DIO_u8GetPinValue+0xe0>
    1582:	50 c0       	rjmp	.+160    	; 0x1624 <DIO_u8GetPinValue+0x108>
		{
		case PORT_A: *value = GET_BIT(PINA_REG,pin_no); break;
    1584:	e9 e3       	ldi	r30, 0x39	; 57
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_u8GetPinValue+0x80>
    1598:	55 95       	asr	r21
    159a:	47 95       	ror	r20
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_u8GetPinValue+0x7c>
    15a0:	ca 01       	movw	r24, r20
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	ec 81       	ldd	r30, Y+4	; 0x04
    15a6:	fd 81       	ldd	r31, Y+5	; 0x05
    15a8:	80 83       	st	Z, r24
    15aa:	41 c0       	rjmp	.+130    	; 0x162e <DIO_u8GetPinValue+0x112>
		case PORT_B: *value = GET_BIT(PINB_REG,pin_no); break;
    15ac:	e6 e3       	ldi	r30, 0x36	; 54
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_u8GetPinValue+0xa8>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_u8GetPinValue+0xa4>
    15c8:	ca 01       	movw	r24, r20
    15ca:	81 70       	andi	r24, 0x01	; 1
    15cc:	ec 81       	ldd	r30, Y+4	; 0x04
    15ce:	fd 81       	ldd	r31, Y+5	; 0x05
    15d0:	80 83       	st	Z, r24
    15d2:	2d c0       	rjmp	.+90     	; 0x162e <DIO_u8GetPinValue+0x112>
		case PORT_C: *value = GET_BIT(PINC_REG,pin_no); break;
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <DIO_u8GetPinValue+0xd0>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <DIO_u8GetPinValue+0xcc>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	ec 81       	ldd	r30, Y+4	; 0x04
    15f6:	fd 81       	ldd	r31, Y+5	; 0x05
    15f8:	80 83       	st	Z, r24
    15fa:	19 c0       	rjmp	.+50     	; 0x162e <DIO_u8GetPinValue+0x112>
		case PORT_D: *value = GET_BIT(PIND_REG,pin_no); break;
    15fc:	e0 e3       	ldi	r30, 0x30	; 48
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_u8GetPinValue+0xf8>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_u8GetPinValue+0xf4>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	ec 81       	ldd	r30, Y+4	; 0x04
    161e:	fd 81       	ldd	r31, Y+5	; 0x05
    1620:	80 83       	st	Z, r24
    1622:	05 c0       	rjmp	.+10     	; 0x162e <DIO_u8GetPinValue+0x112>
		default : error_status = E_NOK; break;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_u8GetPinValue+0x112>
		}
	}else error_status = E_NOK;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    162e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1630:	27 96       	adiw	r28, 0x07	; 7
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <DIO_u8IsPinOutPut>:
uint8_t DIO_u8IsPinOutPut(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	27 97       	sbiw	r28, 0x07	; 7
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	6b 83       	std	Y+3, r22	; 0x03
    165a:	5d 83       	std	Y+5, r21	; 0x05
    165c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    165e:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	88 30       	cpi	r24, 0x08	; 8
    1664:	08 f0       	brcs	.+2      	; 0x1668 <DIO_u8IsPinOutPut+0x26>
    1666:	74 c0       	rjmp	.+232    	; 0x1750 <DIO_u8IsPinOutPut+0x10e>
		{
			switch(port_id)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3f 83       	std	Y+7, r19	; 0x07
    1670:	2e 83       	std	Y+6, r18	; 0x06
    1672:	4e 81       	ldd	r20, Y+6	; 0x06
    1674:	5f 81       	ldd	r21, Y+7	; 0x07
    1676:	41 30       	cpi	r20, 0x01	; 1
    1678:	51 05       	cpc	r21, r1
    167a:	59 f1       	breq	.+86     	; 0x16d2 <DIO_u8IsPinOutPut+0x90>
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	91 05       	cpc	r25, r1
    1684:	34 f4       	brge	.+12     	; 0x1692 <DIO_u8IsPinOutPut+0x50>
    1686:	2e 81       	ldd	r18, Y+6	; 0x06
    1688:	3f 81       	ldd	r19, Y+7	; 0x07
    168a:	21 15       	cp	r18, r1
    168c:	31 05       	cpc	r19, r1
    168e:	69 f0       	breq	.+26     	; 0x16aa <DIO_u8IsPinOutPut+0x68>
    1690:	5c c0       	rjmp	.+184    	; 0x174a <DIO_u8IsPinOutPut+0x108>
    1692:	4e 81       	ldd	r20, Y+6	; 0x06
    1694:	5f 81       	ldd	r21, Y+7	; 0x07
    1696:	42 30       	cpi	r20, 0x02	; 2
    1698:	51 05       	cpc	r21, r1
    169a:	79 f1       	breq	.+94     	; 0x16fa <DIO_u8IsPinOutPut+0xb8>
    169c:	8e 81       	ldd	r24, Y+6	; 0x06
    169e:	9f 81       	ldd	r25, Y+7	; 0x07
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <DIO_u8IsPinOutPut+0x66>
    16a6:	3d c0       	rjmp	.+122    	; 0x1722 <DIO_u8IsPinOutPut+0xe0>
    16a8:	50 c0       	rjmp	.+160    	; 0x174a <DIO_u8IsPinOutPut+0x108>
			{
			case PORT_A: *value = GET_BIT(DDRA_REG,pin_no); break;
    16aa:	ea e3       	ldi	r30, 0x3A	; 58
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a9 01       	movw	r20, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_u8IsPinOutPut+0x80>
    16be:	55 95       	asr	r21
    16c0:	47 95       	ror	r20
    16c2:	8a 95       	dec	r24
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_u8IsPinOutPut+0x7c>
    16c6:	ca 01       	movw	r24, r20
    16c8:	81 70       	andi	r24, 0x01	; 1
    16ca:	ec 81       	ldd	r30, Y+4	; 0x04
    16cc:	fd 81       	ldd	r31, Y+5	; 0x05
    16ce:	80 83       	st	Z, r24
    16d0:	41 c0       	rjmp	.+130    	; 0x1754 <DIO_u8IsPinOutPut+0x112>
			case PORT_B: *value = GET_BIT(DDRB_REG,pin_no); break;
    16d2:	e7 e3       	ldi	r30, 0x37	; 55
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a9 01       	movw	r20, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_u8IsPinOutPut+0xa8>
    16e6:	55 95       	asr	r21
    16e8:	47 95       	ror	r20
    16ea:	8a 95       	dec	r24
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_u8IsPinOutPut+0xa4>
    16ee:	ca 01       	movw	r24, r20
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	ec 81       	ldd	r30, Y+4	; 0x04
    16f4:	fd 81       	ldd	r31, Y+5	; 0x05
    16f6:	80 83       	st	Z, r24
    16f8:	2d c0       	rjmp	.+90     	; 0x1754 <DIO_u8IsPinOutPut+0x112>
			case PORT_C: *value = GET_BIT(DDRC_REG,pin_no); break;
    16fa:	e4 e3       	ldi	r30, 0x34	; 52
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a9 01       	movw	r20, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_u8IsPinOutPut+0xd0>
    170e:	55 95       	asr	r21
    1710:	47 95       	ror	r20
    1712:	8a 95       	dec	r24
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_u8IsPinOutPut+0xcc>
    1716:	ca 01       	movw	r24, r20
    1718:	81 70       	andi	r24, 0x01	; 1
    171a:	ec 81       	ldd	r30, Y+4	; 0x04
    171c:	fd 81       	ldd	r31, Y+5	; 0x05
    171e:	80 83       	st	Z, r24
    1720:	19 c0       	rjmp	.+50     	; 0x1754 <DIO_u8IsPinOutPut+0x112>
			case PORT_D: *value = GET_BIT(DDRD_REG,pin_no); break;
    1722:	e1 e3       	ldi	r30, 0x31	; 49
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a9 01       	movw	r20, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_u8IsPinOutPut+0xf8>
    1736:	55 95       	asr	r21
    1738:	47 95       	ror	r20
    173a:	8a 95       	dec	r24
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_u8IsPinOutPut+0xf4>
    173e:	ca 01       	movw	r24, r20
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	ec 81       	ldd	r30, Y+4	; 0x04
    1744:	fd 81       	ldd	r31, Y+5	; 0x05
    1746:	80 83       	st	Z, r24
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <DIO_u8IsPinOutPut+0x112>
			default : error_status = E_NOK; break;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_u8IsPinOutPut+0x112>
			}
		}else error_status = E_NOK;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
}
    1756:	27 96       	adiw	r28, 0x07	; 7
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <DIO_u8SetPullUpMode>:
uint8_t DIO_u8SetPullUpMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	2e 97       	sbiw	r28, 0x0e	; 14
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	6b 83       	std	Y+3, r22	; 0x03
    1780:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1782:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	88 30       	cpi	r24, 0x08	; 8
    1788:	08 f0       	brcs	.+2      	; 0x178c <DIO_u8SetPullUpMode+0x24>
    178a:	db c0       	rjmp	.+438    	; 0x1942 <DIO_u8SetPullUpMode+0x1da>
	{
	switch(port_id)
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3e 87       	std	Y+14, r19	; 0x0e
    1794:	2d 87       	std	Y+13, r18	; 0x0d
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <DIO_u8SetPullUpMode+0x3a>
    17a0:	44 c0       	rjmp	.+136    	; 0x182a <DIO_u8SetPullUpMode+0xc2>
    17a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    17a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <DIO_u8SetPullUpMode+0x4e>
    17ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	71 f0       	breq	.+28     	; 0x17d0 <DIO_u8SetPullUpMode+0x68>
    17b4:	c3 c0       	rjmp	.+390    	; 0x193c <DIO_u8SetPullUpMode+0x1d4>
    17b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    17b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <DIO_u8SetPullUpMode+0x5a>
    17c0:	62 c0       	rjmp	.+196    	; 0x1886 <DIO_u8SetPullUpMode+0x11e>
    17c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <DIO_u8SetPullUpMode+0x66>
    17cc:	89 c0       	rjmp	.+274    	; 0x18e0 <DIO_u8SetPullUpMode+0x178>
    17ce:	b6 c0       	rjmp	.+364    	; 0x193c <DIO_u8SetPullUpMode+0x1d4>
	{
	case PORT_A: mode==Enabled?SET_BIT(PORTA_REG,pin_no):CLR_BIT(PORTA_REG,pin_no); break;
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	a9 f4       	brne	.+42     	; 0x1800 <DIO_u8SetPullUpMode+0x98>
    17d6:	ab e3       	ldi	r26, 0x3B	; 59
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	eb e3       	ldi	r30, 0x3B	; 59
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_u8SetPullUpMode+0x8c>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_u8SetPullUpMode+0x88>
    17f8:	84 2b       	or	r24, r20
    17fa:	8c 93       	st	X, r24
    17fc:	9c 91       	ld	r25, X
    17fe:	a3 c0       	rjmp	.+326    	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
    1800:	ab e3       	ldi	r26, 0x3B	; 59
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_u8SetPullUpMode+0xb4>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	2a 95       	dec	r18
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_u8SetPullUpMode+0xb0>
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	2c 91       	ld	r18, X
    1828:	8e c0       	rjmp	.+284    	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
	case PORT_B: mode==Enabled?SET_BIT(PORTB_REG,pin_no):CLR_BIT(PORTB_REG,pin_no); break;
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	a9 f4       	brne	.+42     	; 0x185a <DIO_u8SetPullUpMode+0xf2>
    1830:	a8 e3       	ldi	r26, 0x38	; 56
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e8 e3       	ldi	r30, 0x38	; 56
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_u8SetPullUpMode+0xe6>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_u8SetPullUpMode+0xe2>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	3c 91       	ld	r19, X
    1858:	76 c0       	rjmp	.+236    	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <DIO_u8SetPullUpMode+0x110>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <DIO_u8SetPullUpMode+0x10c>
    187c:	80 95       	com	r24
    187e:	84 23       	and	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	8c 91       	ld	r24, X
    1884:	60 c0       	rjmp	.+192    	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
	case PORT_C: mode==Enabled?SET_BIT(PORTC_REG,pin_no):CLR_BIT(PORTC_REG,pin_no); break;
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	a9 f4       	brne	.+42     	; 0x18b6 <DIO_u8SetPullUpMode+0x14e>
    188c:	a5 e3       	ldi	r26, 0x35	; 53
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e5 e3       	ldi	r30, 0x35	; 53
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_u8SetPullUpMode+0x142>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_u8SetPullUpMode+0x13e>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	9c 91       	ld	r25, X
    18b4:	48 c0       	rjmp	.+144    	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
    18b6:	a5 e3       	ldi	r26, 0x35	; 53
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e3       	ldi	r30, 0x35	; 53
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_u8SetPullUpMode+0x16a>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	2a 95       	dec	r18
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_u8SetPullUpMode+0x166>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	2c 91       	ld	r18, X
    18de:	33 c0       	rjmp	.+102    	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
	case PORT_D: mode==Enabled?SET_BIT(PORTD_REG,pin_no):CLR_BIT(PORTD_REG,pin_no); break;
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	a9 f4       	brne	.+42     	; 0x1910 <DIO_u8SetPullUpMode+0x1a8>
    18e6:	a2 e3       	ldi	r26, 0x32	; 50
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e2 e3       	ldi	r30, 0x32	; 50
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <DIO_u8SetPullUpMode+0x19c>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <DIO_u8SetPullUpMode+0x198>
    1908:	84 2b       	or	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	3c 91       	ld	r19, X
    190e:	1b c0       	rjmp	.+54     	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
    1910:	a2 e3       	ldi	r26, 0x32	; 50
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e2 e3       	ldi	r30, 0x32	; 50
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_u8SetPullUpMode+0x1c6>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_u8SetPullUpMode+0x1c2>
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	8c 91       	ld	r24, X
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
	default : error_status = E_NOK; break;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8SetPullUpMode+0x1de>
	}
	}else error_status=E_NOK;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
}
    1948:	2e 96       	adiw	r28, 0x0e	; 14
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <DIO_u8SetPortMode>:

uint8_t DIO_u8SetPortMode(uint8_t port_id,uint8_t mode)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <DIO_u8SetPortMode+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <DIO_u8SetPortMode+0x8>
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    196c:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3d 83       	std	Y+5, r19	; 0x05
    1976:	2c 83       	std	Y+4, r18	; 0x04
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	d1 f0       	breq	.+52     	; 0x19b6 <DIO_u8SetPortMode+0x5c>
    1982:	2c 81       	ldd	r18, Y+4	; 0x04
    1984:	3d 81       	ldd	r19, Y+5	; 0x05
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <DIO_u8SetPortMode+0x3c>
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	9d 81       	ldd	r25, Y+5	; 0x05
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	61 f0       	breq	.+24     	; 0x19ac <DIO_u8SetPortMode+0x52>
    1994:	1f c0       	rjmp	.+62     	; 0x19d4 <DIO_u8SetPortMode+0x7a>
    1996:	2c 81       	ldd	r18, Y+4	; 0x04
    1998:	3d 81       	ldd	r19, Y+5	; 0x05
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	81 f0       	breq	.+32     	; 0x19c0 <DIO_u8SetPortMode+0x66>
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	9d 81       	ldd	r25, Y+5	; 0x05
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <DIO_u8SetPortMode+0x70>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <DIO_u8SetPortMode+0x7a>
	{
	case PORT_A: DDRA_REG = mode; break;
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	80 83       	st	Z, r24
    19b4:	11 c0       	rjmp	.+34     	; 0x19d8 <DIO_u8SetPortMode+0x7e>
	case PORT_B: DDRB_REG = mode; break;
    19b6:	e7 e3       	ldi	r30, 0x37	; 55
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	80 83       	st	Z, r24
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <DIO_u8SetPortMode+0x7e>
	case PORT_C: DDRC_REG = mode; break;
    19c0:	e4 e3       	ldi	r30, 0x34	; 52
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	80 83       	st	Z, r24
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <DIO_u8SetPortMode+0x7e>
	case PORT_D: DDRD_REG = mode; break;
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	80 83       	st	Z, r24
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_u8SetPortMode+0x7e>
	default : error_status = E_NOK; break;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <DIO_u8SetPortValue>:
uint8_t DIO_u8SetPortValue(uint8_t port_id,uint8_t value)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_u8SetPortValue+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <DIO_u8SetPortValue+0x8>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    19fc:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	d1 f0       	breq	.+52     	; 0x1a46 <DIO_u8SetPortValue+0x5c>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <DIO_u8SetPortValue+0x3c>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <DIO_u8SetPortValue+0x52>
    1a24:	1f c0       	rjmp	.+62     	; 0x1a64 <DIO_u8SetPortValue+0x7a>
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	81 f0       	breq	.+32     	; 0x1a50 <DIO_u8SetPortValue+0x66>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	91 05       	cpc	r25, r1
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <DIO_u8SetPortValue+0x70>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A: PORTA_REG = value; break;
    1a3c:	eb e3       	ldi	r30, 0x3B	; 59
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	80 83       	st	Z, r24
    1a44:	11 c0       	rjmp	.+34     	; 0x1a68 <DIO_u8SetPortValue+0x7e>
		case PORT_B: PORTB_REG = value; break;
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	80 83       	st	Z, r24
    1a4e:	0c c0       	rjmp	.+24     	; 0x1a68 <DIO_u8SetPortValue+0x7e>
		case PORT_C: PORTC_REG = value; break;
    1a50:	e5 e3       	ldi	r30, 0x35	; 53
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	80 83       	st	Z, r24
    1a58:	07 c0       	rjmp	.+14     	; 0x1a68 <DIO_u8SetPortValue+0x7e>
		case PORT_D: PORTD_REG = value; break;
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	80 83       	st	Z, r24
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <DIO_u8SetPortValue+0x7e>
		default : error_status = E_NOK; break;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <DIO_u8GetPortValue>:
uint8_t DIO_u8GetPortValue(uint8_t port_id,uint8_t * value)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <DIO_u8GetPortValue+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <DIO_u8GetPortValue+0x8>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_u8GetPortValue+0xa>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	7c 83       	std	Y+4, r23	; 0x04
    1a8c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3e 83       	std	Y+6, r19	; 0x06
    1a98:	2d 83       	std	Y+5, r18	; 0x05
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	e1 f0       	breq	.+56     	; 0x1adc <DIO_u8GetPortValue+0x62>
    1aa4:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa6:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <DIO_u8GetPortValue+0x3e>
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <DIO_u8GetPortValue+0x54>
    1ab6:	27 c0       	rjmp	.+78     	; 0x1b06 <DIO_u8GetPortValue+0x8c>
    1ab8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aba:	3e 81       	ldd	r19, Y+6	; 0x06
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	a1 f0       	breq	.+40     	; 0x1aea <DIO_u8GetPortValue+0x70>
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	91 05       	cpc	r25, r1
    1aca:	b1 f0       	breq	.+44     	; 0x1af8 <DIO_u8GetPortValue+0x7e>
    1acc:	1c c0       	rjmp	.+56     	; 0x1b06 <DIO_u8GetPortValue+0x8c>
		{
		case PORT_A: *value = PINA_REG; break;
    1ace:	e9 e3       	ldi	r30, 0x39	; 57
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad8:	80 83       	st	Z, r24
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <DIO_u8GetPortValue+0x90>
		case PORT_B: *value = PINB_REG; break;
    1adc:	e6 e3       	ldi	r30, 0x36	; 54
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae6:	80 83       	st	Z, r24
    1ae8:	10 c0       	rjmp	.+32     	; 0x1b0a <DIO_u8GetPortValue+0x90>
		case PORT_C: *value = PINC_REG; break;
    1aea:	e3 e3       	ldi	r30, 0x33	; 51
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	eb 81       	ldd	r30, Y+3	; 0x03
    1af2:	fc 81       	ldd	r31, Y+4	; 0x04
    1af4:	80 83       	st	Z, r24
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <DIO_u8GetPortValue+0x90>
		case PORT_D: *value = PIND_REG; break;
    1af8:	e0 e3       	ldi	r30, 0x30	; 48
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	eb 81       	ldd	r30, Y+3	; 0x03
    1b00:	fc 81       	ldd	r31, Y+4	; 0x04
    1b02:	80 83       	st	Z, r24
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_u8GetPortValue+0x90>
		default : error_status = E_NOK; break;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0c:	26 96       	adiw	r28, 0x06	; 6
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <DIO_u8SetPortPullUpMode>:

uint8_t DIO_u8SetPortPullUpMode(uint8_t port_id,uint8_t mode)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <DIO_u8SetPortPullUpMode+0x6>
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <DIO_u8SetPortPullUpMode+0x8>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1b30:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3d 83       	std	Y+5, r19	; 0x05
    1b3a:	2c 83       	std	Y+4, r18	; 0x04
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	91 05       	cpc	r25, r1
    1b44:	d1 f0       	breq	.+52     	; 0x1b7a <DIO_u8SetPortPullUpMode+0x5c>
    1b46:	2c 81       	ldd	r18, Y+4	; 0x04
    1b48:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <DIO_u8SetPortPullUpMode+0x3c>
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	61 f0       	breq	.+24     	; 0x1b70 <DIO_u8SetPortPullUpMode+0x52>
    1b58:	1f c0       	rjmp	.+62     	; 0x1b98 <DIO_u8SetPortPullUpMode+0x7a>
    1b5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	81 f0       	breq	.+32     	; 0x1b84 <DIO_u8SetPortPullUpMode+0x66>
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	9d 81       	ldd	r25, Y+5	; 0x05
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	81 f0       	breq	.+32     	; 0x1b8e <DIO_u8SetPortPullUpMode+0x70>
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <DIO_u8SetPortPullUpMode+0x7a>
	{
	case PORT_A: PORTA_REG=mode; break;
    1b70:	eb e3       	ldi	r30, 0x3B	; 59
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	80 83       	st	Z, r24
    1b78:	11 c0       	rjmp	.+34     	; 0x1b9c <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_B: PORTB_REG=mode; break;
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	80 83       	st	Z, r24
    1b82:	0c c0       	rjmp	.+24     	; 0x1b9c <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_C: PORTC_REG=mode; break;
    1b84:	e5 e3       	ldi	r30, 0x35	; 53
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	80 83       	st	Z, r24
    1b8c:	07 c0       	rjmp	.+14     	; 0x1b9c <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_D: PORTD_REG=mode; break;
    1b8e:	e2 e3       	ldi	r30, 0x32	; 50
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	80 83       	st	Z, r24
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_u8SetPortPullUpMode+0x7e>
	default : error_status = E_NOK; break;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <ADC_vidAdcInit>:
uint16_* ADC_READ=NULL;

static void ADC_vidSetMultiPlexer(uint8_t adc_pin);

void ADC_vidAdcInit(uint8_t voltage_reference)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <ADC_vidAdcInit+0x6>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,7);
    1bbc:	a6 e2       	ldi	r26, 0x26	; 38
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e6 e2       	ldi	r30, 0x26	; 38
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 68       	ori	r24, 0x80	; 128
    1bc8:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,2);
    1bca:	a6 e2       	ldi	r26, 0x26	; 38
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e6 e2       	ldi	r30, 0x26	; 38
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8b 7f       	andi	r24, 0xFB	; 251
    1bd6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    1bd8:	a6 e2       	ldi	r26, 0x26	; 38
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e6 e2       	ldi	r30, 0x26	; 38
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	82 60       	ori	r24, 0x02	; 2
    1be4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    1be6:	a6 e2       	ldi	r26, 0x26	; 38
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e6 e2       	ldi	r30, 0x26	; 38
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8e 7f       	andi	r24, 0xFE	; 254
    1bf2:	8c 93       	st	X, r24
	switch(voltage_reference)
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3b 83       	std	Y+3, r19	; 0x03
    1bfc:	2a 83       	std	Y+2, r18	; 0x02
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	c9 f0       	breq	.+50     	; 0x1c3a <ADC_vidAdcInit+0x8c>
    1c08:	2a 81       	ldd	r18, Y+2	; 0x02
    1c0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <ADC_vidAdcInit+0x6e>
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	f9 f0       	breq	.+62     	; 0x1c58 <ADC_vidAdcInit+0xaa>
    1c1a:	2c c0       	rjmp	.+88     	; 0x1c74 <ADC_vidAdcInit+0xc6>
	{
	case AREF_VOLTAGE:
		CLR_BIT(ADMUX,7);
    1c1c:	a7 e2       	ldi	r26, 0x27	; 39
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e7 e2       	ldi	r30, 0x27	; 39
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	8f 77       	andi	r24, 0x7F	; 127
    1c28:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,6);
    1c2a:	a7 e2       	ldi	r26, 0x27	; 39
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e7 e2       	ldi	r30, 0x27	; 39
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 7b       	andi	r24, 0xBF	; 191
    1c36:	8c 93       	st	X, r24
    1c38:	1d c0       	rjmp	.+58     	; 0x1c74 <ADC_vidAdcInit+0xc6>
		break;
	case VCC:
		CLR_BIT(ADMUX,7);
    1c3a:	a7 e2       	ldi	r26, 0x27	; 39
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e7 e2       	ldi	r30, 0x27	; 39
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    1c48:	a7 e2       	ldi	r26, 0x27	; 39
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e7 e2       	ldi	r30, 0x27	; 39
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	8c 93       	st	X, r24
    1c56:	0e c0       	rjmp	.+28     	; 0x1c74 <ADC_vidAdcInit+0xc6>
		break;
	case INTERNAL_2_56_:
		SET_BIT(ADMUX,7);
    1c58:	a7 e2       	ldi	r26, 0x27	; 39
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e7 e2       	ldi	r30, 0x27	; 39
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 68       	ori	r24, 0x80	; 128
    1c64:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    1c66:	a7 e2       	ldi	r26, 0x27	; 39
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e7 e2       	ldi	r30, 0x27	; 39
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	8c 93       	st	X, r24
	ADC_vidAdcPinInit(ADC_AUTO_TRIGGER_PIN);
	ADC_vidSetMultiPlexer(ADC_AUTO_TRIGGER_PIN);
	ADC_VIDSetAutoTriggerMode(INT_0);
	SET_BIT(ADCSRA,5);
#elif ADC_TRIGGERING_MODE == 1
	CLR_BIT(ADCSRA,5);
    1c74:	a6 e2       	ldi	r26, 0x26	; 38
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e6 e2       	ldi	r30, 0x26	; 38
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 7d       	andi	r24, 0xDF	; 223
    1c80:	8c 93       	st	X, r24
#endif

#if ADC_READING_TECHNIQUE == 0
	SET_BIT(ADCSRA,3);
    1c82:	a6 e2       	ldi	r26, 0x26	; 38
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e6 e2       	ldi	r30, 0x26	; 38
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 60       	ori	r24, 0x08	; 8
    1c8e:	8c 93       	st	X, r24
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
#endif

#if ADC_READING_NO_OF_BITS == 0
	SET_BIT(ADMUX,5);
#elif ADC_READING_NO_OF_BITS == 1
	CLR_BIT(ADMUX,5);
    1c96:	a7 e2       	ldi	r26, 0x27	; 39
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e7 e2       	ldi	r30, 0x27	; 39
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8f 7d       	andi	r24, 0xDF	; 223
    1ca2:	8c 93       	st	X, r24
#endif

}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <ADC_vidAdcPinInit>:

void ADC_vidAdcPinInit(uint8_t adc_pin)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <ADC_vidAdcPinInit+0x6>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8a 83       	std	Y+2, r24	; 0x02
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	88 30       	cpi	r24, 0x08	; 8
    1cc0:	c0 f4       	brcc	.+48     	; 0x1cf2 <ADC_vidAdcPinInit+0x42>
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e8 52       	subi	r30, 0x28	; 40
    1cd0:	fc 4f       	sbci	r31, 0xFC	; 252
    1cd2:	20 81       	ld	r18, Z
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e7 52       	subi	r30, 0x27	; 39
    1ce2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce4:	90 81       	ld	r25, Z
    1ce6:	82 2f       	mov	r24, r18
    1ce8:	69 2f       	mov	r22, r25
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
    1cf0:	22 c0       	rjmp	.+68     	; 0x1d36 <ADC_vidAdcPinInit+0x86>
	else if(adc_pin==8)
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	88 30       	cpi	r24, 0x08	; 8
    1cf6:	f9 f4       	brne	.+62     	; 0x1d36 <ADC_vidAdcPinInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    1cf8:	19 82       	std	Y+1, r1	; 0x01
    1cfa:	1a c0       	rjmp	.+52     	; 0x1d30 <ADC_vidAdcPinInit+0x80>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	fc 01       	movw	r30, r24
    1d08:	e8 52       	subi	r30, 0x28	; 40
    1d0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0c:	20 81       	ld	r18, Z
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	fc 01       	movw	r30, r24
    1d1a:	e7 52       	subi	r30, 0x27	; 39
    1d1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1e:	90 81       	ld	r25, Z
    1d20:	82 2f       	mov	r24, r18
    1d22:	69 2f       	mov	r22, r25
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
void ADC_vidAdcPinInit(uint8_t adc_pin)
{
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
	else if(adc_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	88 30       	cpi	r24, 0x08	; 8
    1d34:	18 f3       	brcs	.-58     	; 0x1cfc <ADC_vidAdcPinInit+0x4c>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
		}
	}
}
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <ADC_vidAdcGetRead>:

void ADC_vidAdcGetRead(uint8_t adc_pin)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetMultiPlexer(adc_pin);
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <ADC_vidSetMultiPlexer>
	SET_BIT(ADCSRA,6);
    1d52:	a6 e2       	ldi	r26, 0x26	; 38
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e6 e2       	ldi	r30, 0x26	; 38
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 64       	ori	r24, 0x40	; 64
    1d5e:	8c 93       	st	X, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <ADC_vidGetAutoTriggerRead>:

void ADC_vidGetAutoTriggerRead()
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <ADC_VIDSetAutoTriggerMode>:

void ADC_VIDSetAutoTriggerMode(uint8_t mode)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	a9 f4       	brne	.+42     	; 0x1db8 <ADC_VIDSetAutoTriggerMode+0x42>
	{
	case INT_0:
		CLR_BIT(SFIOR,5);
    1d8e:	a0 e5       	ldi	r26, 0x50	; 80
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e0 e5       	ldi	r30, 0x50	; 80
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	8f 7d       	andi	r24, 0xDF	; 223
    1d9a:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    1d9c:	a0 e5       	ldi	r26, 0x50	; 80
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e0 e5       	ldi	r30, 0x50	; 80
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 64       	ori	r24, 0x40	; 64
    1da8:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,7);
    1daa:	a0 e5       	ldi	r26, 0x50	; 80
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e0 e5       	ldi	r30, 0x50	; 80
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 77       	andi	r24, 0x7F	; 127
    1db6:	8c 93       	st	X, r24
		break;
	}
}
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <ADC_vidSetReadingVariable>:

void ADC_vidSetReadingVariable(uint16_* adc_read)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <ADC_vidSetReadingVariable+0x6>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	ADC_READ=adc_read;
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	90 93 03 04 	sts	0x0403, r25
    1dd6:	80 93 02 04 	sts	0x0402, r24
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <ADC_vidSetCallBack>:

void ADC_vidSetCallBack(void (*func)(void))
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <ADC_vidSetCallBack+0x6>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	vector_16=func;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	90 93 01 04 	sts	0x0401, r25
    1dfa:	80 93 00 04 	sts	0x0400, r24
}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    1e08:	1f 92       	push	r1
    1e0a:	0f 92       	push	r0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	2f 93       	push	r18
    1e14:	3f 93       	push	r19
    1e16:	4f 93       	push	r20
    1e18:	5f 93       	push	r21
    1e1a:	6f 93       	push	r22
    1e1c:	7f 93       	push	r23
    1e1e:	8f 93       	push	r24
    1e20:	9f 93       	push	r25
    1e22:	af 93       	push	r26
    1e24:	bf 93       	push	r27
    1e26:	ef 93       	push	r30
    1e28:	ff 93       	push	r31
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
#if ADC_READING_TECHNIQUE == 0
	if(ADC_READ!=NULL)
    1e32:	80 91 02 04 	lds	r24, 0x0402
    1e36:	90 91 03 04 	lds	r25, 0x0403
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	59 f0       	breq	.+22     	; 0x1e54 <__vector_16+0x4c>
	{
#if ADC_READING_NO_OF_BITS == 1
	*ADC_READ=ADCL16;
    1e3e:	e0 91 02 04 	lds	r30, 0x0402
    1e42:	f0 91 03 04 	lds	r31, 0x0403
    1e46:	a4 e2       	ldi	r26, 0x24	; 36
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	11 97       	sbiw	r26, 0x01	; 1
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	80 83       	st	Z, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	}
	if(vector_16!=NULL)vector_16();
    1e54:	80 91 00 04 	lds	r24, 0x0400
    1e58:	90 91 01 04 	lds	r25, 0x0401
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	29 f0       	breq	.+10     	; 0x1e6a <__vector_16+0x62>
    1e60:	e0 91 00 04 	lds	r30, 0x0400
    1e64:	f0 91 01 04 	lds	r31, 0x0401
    1e68:	09 95       	icall
#endif
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	ff 91       	pop	r31
    1e70:	ef 91       	pop	r30
    1e72:	bf 91       	pop	r27
    1e74:	af 91       	pop	r26
    1e76:	9f 91       	pop	r25
    1e78:	8f 91       	pop	r24
    1e7a:	7f 91       	pop	r23
    1e7c:	6f 91       	pop	r22
    1e7e:	5f 91       	pop	r21
    1e80:	4f 91       	pop	r20
    1e82:	3f 91       	pop	r19
    1e84:	2f 91       	pop	r18
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

00001e90 <ADC_vidSetMultiPlexer>:

static void ADC_vidSetMultiPlexer(uint8_t adc_pin)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <ADC_vidSetMultiPlexer+0x6>
    1e96:	0f 92       	push	r0
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	89 83       	std	Y+1, r24	; 0x01
	switch(adc_pin)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	3b 83       	std	Y+3, r19	; 0x03
    1ea6:	2a 83       	std	Y+2, r18	; 0x02
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	91 05       	cpc	r25, r1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <ADC_vidSetMultiPlexer+0x24>
    1eb2:	9b c0       	rjmp	.+310    	; 0x1fea <ADC_vidSetMultiPlexer+0x15a>
    1eb4:	2a 81       	ldd	r18, Y+2	; 0x02
    1eb6:	3b 81       	ldd	r19, Y+3	; 0x03
    1eb8:	24 30       	cpi	r18, 0x04	; 4
    1eba:	31 05       	cpc	r19, r1
    1ebc:	8c f4       	brge	.+34     	; 0x1ee0 <ADC_vidSetMultiPlexer+0x50>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <ADC_vidSetMultiPlexer+0x3a>
    1ec8:	48 c0       	rjmp	.+144    	; 0x1f5a <ADC_vidSetMultiPlexer+0xca>
    1eca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ecc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	0c f0       	brlt	.+2      	; 0x1ed6 <ADC_vidSetMultiPlexer+0x46>
    1ed4:	66 c0       	rjmp	.+204    	; 0x1fa2 <ADC_vidSetMultiPlexer+0x112>
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	d1 f0       	breq	.+52     	; 0x1f12 <ADC_vidSetMultiPlexer+0x82>
    1ede:	38 c1       	rjmp	.+624    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
    1ee0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee4:	25 30       	cpi	r18, 0x05	; 5
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <ADC_vidSetMultiPlexer+0x5c>
    1eea:	c7 c0       	rjmp	.+398    	; 0x207a <ADC_vidSetMultiPlexer+0x1ea>
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef0:	85 30       	cpi	r24, 0x05	; 5
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	0c f4       	brge	.+2      	; 0x1ef8 <ADC_vidSetMultiPlexer+0x68>
    1ef6:	9d c0       	rjmp	.+314    	; 0x2032 <ADC_vidSetMultiPlexer+0x1a2>
    1ef8:	2a 81       	ldd	r18, Y+2	; 0x02
    1efa:	3b 81       	ldd	r19, Y+3	; 0x03
    1efc:	26 30       	cpi	r18, 0x06	; 6
    1efe:	31 05       	cpc	r19, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <ADC_vidSetMultiPlexer+0x74>
    1f02:	df c0       	rjmp	.+446    	; 0x20c2 <ADC_vidSetMultiPlexer+0x232>
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	87 30       	cpi	r24, 0x07	; 7
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <ADC_vidSetMultiPlexer+0x80>
    1f0e:	fd c0       	rjmp	.+506    	; 0x210a <ADC_vidSetMultiPlexer+0x27a>
    1f10:	1f c1       	rjmp	.+574    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
	{
	case ADC_0:
			CLR_BIT(ADMUX,4);
    1f12:	a7 e2       	ldi	r26, 0x27	; 39
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e7 e2       	ldi	r30, 0x27	; 39
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 7e       	andi	r24, 0xEF	; 239
    1f1e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    1f20:	a7 e2       	ldi	r26, 0x27	; 39
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e7 e2       	ldi	r30, 0x27	; 39
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	87 7f       	andi	r24, 0xF7	; 247
    1f2c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    1f2e:	a7 e2       	ldi	r26, 0x27	; 39
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e7 e2       	ldi	r30, 0x27	; 39
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	8b 7f       	andi	r24, 0xFB	; 251
    1f3a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    1f3c:	a7 e2       	ldi	r26, 0x27	; 39
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e7 e2       	ldi	r30, 0x27	; 39
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	8d 7f       	andi	r24, 0xFD	; 253
    1f48:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    1f4a:	a7 e2       	ldi	r26, 0x27	; 39
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e7 e2       	ldi	r30, 0x27	; 39
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	8e 7f       	andi	r24, 0xFE	; 254
    1f56:	8c 93       	st	X, r24
    1f58:	fb c0       	rjmp	.+502    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_1:
			CLR_BIT(ADMUX,4);
    1f5a:	a7 e2       	ldi	r26, 0x27	; 39
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e7 e2       	ldi	r30, 0x27	; 39
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8f 7e       	andi	r24, 0xEF	; 239
    1f66:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    1f68:	a7 e2       	ldi	r26, 0x27	; 39
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e7 e2       	ldi	r30, 0x27	; 39
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	87 7f       	andi	r24, 0xF7	; 247
    1f74:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    1f76:	a7 e2       	ldi	r26, 0x27	; 39
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e7 e2       	ldi	r30, 0x27	; 39
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	8b 7f       	andi	r24, 0xFB	; 251
    1f82:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    1f84:	a7 e2       	ldi	r26, 0x27	; 39
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e7 e2       	ldi	r30, 0x27	; 39
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8d 7f       	andi	r24, 0xFD	; 253
    1f90:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    1f92:	a7 e2       	ldi	r26, 0x27	; 39
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e7 e2       	ldi	r30, 0x27	; 39
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	81 60       	ori	r24, 0x01	; 1
    1f9e:	8c 93       	st	X, r24
    1fa0:	d7 c0       	rjmp	.+430    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_2:
			CLR_BIT(ADMUX,4);
    1fa2:	a7 e2       	ldi	r26, 0x27	; 39
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e7 e2       	ldi	r30, 0x27	; 39
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8f 7e       	andi	r24, 0xEF	; 239
    1fae:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    1fb0:	a7 e2       	ldi	r26, 0x27	; 39
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e7 e2       	ldi	r30, 0x27	; 39
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	87 7f       	andi	r24, 0xF7	; 247
    1fbc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    1fbe:	a7 e2       	ldi	r26, 0x27	; 39
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e7 e2       	ldi	r30, 0x27	; 39
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8b 7f       	andi	r24, 0xFB	; 251
    1fca:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    1fcc:	a7 e2       	ldi	r26, 0x27	; 39
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e7 e2       	ldi	r30, 0x27	; 39
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	82 60       	ori	r24, 0x02	; 2
    1fd8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    1fda:	a7 e2       	ldi	r26, 0x27	; 39
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e7 e2       	ldi	r30, 0x27	; 39
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8e 7f       	andi	r24, 0xFE	; 254
    1fe6:	8c 93       	st	X, r24
    1fe8:	b3 c0       	rjmp	.+358    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_3:
			CLR_BIT(ADMUX,4);
    1fea:	a7 e2       	ldi	r26, 0x27	; 39
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e7 e2       	ldi	r30, 0x27	; 39
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 7e       	andi	r24, 0xEF	; 239
    1ff6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    1ff8:	a7 e2       	ldi	r26, 0x27	; 39
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e7 e2       	ldi	r30, 0x27	; 39
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	87 7f       	andi	r24, 0xF7	; 247
    2004:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2006:	a7 e2       	ldi	r26, 0x27	; 39
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e7 e2       	ldi	r30, 0x27	; 39
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8b 7f       	andi	r24, 0xFB	; 251
    2012:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2014:	a7 e2       	ldi	r26, 0x27	; 39
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e7 e2       	ldi	r30, 0x27	; 39
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	82 60       	ori	r24, 0x02	; 2
    2020:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2022:	a7 e2       	ldi	r26, 0x27	; 39
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e7 e2       	ldi	r30, 0x27	; 39
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	81 60       	ori	r24, 0x01	; 1
    202e:	8c 93       	st	X, r24
    2030:	8f c0       	rjmp	.+286    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_4:
			CLR_BIT(ADMUX,4);
    2032:	a7 e2       	ldi	r26, 0x27	; 39
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e7 e2       	ldi	r30, 0x27	; 39
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	8f 7e       	andi	r24, 0xEF	; 239
    203e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2040:	a7 e2       	ldi	r26, 0x27	; 39
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e7 e2       	ldi	r30, 0x27	; 39
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	87 7f       	andi	r24, 0xF7	; 247
    204c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    204e:	a7 e2       	ldi	r26, 0x27	; 39
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e7 e2       	ldi	r30, 0x27	; 39
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	84 60       	ori	r24, 0x04	; 4
    205a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    205c:	a7 e2       	ldi	r26, 0x27	; 39
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e7 e2       	ldi	r30, 0x27	; 39
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8d 7f       	andi	r24, 0xFD	; 253
    2068:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    206a:	a7 e2       	ldi	r26, 0x27	; 39
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e7 e2       	ldi	r30, 0x27	; 39
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8e 7f       	andi	r24, 0xFE	; 254
    2076:	8c 93       	st	X, r24
    2078:	6b c0       	rjmp	.+214    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_5:
			CLR_BIT(ADMUX,4);
    207a:	a7 e2       	ldi	r26, 0x27	; 39
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e7 e2       	ldi	r30, 0x27	; 39
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	8f 7e       	andi	r24, 0xEF	; 239
    2086:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2088:	a7 e2       	ldi	r26, 0x27	; 39
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e7 e2       	ldi	r30, 0x27	; 39
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	87 7f       	andi	r24, 0xF7	; 247
    2094:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2096:	a7 e2       	ldi	r26, 0x27	; 39
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e7 e2       	ldi	r30, 0x27	; 39
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	84 60       	ori	r24, 0x04	; 4
    20a2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    20a4:	a7 e2       	ldi	r26, 0x27	; 39
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e7 e2       	ldi	r30, 0x27	; 39
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8d 7f       	andi	r24, 0xFD	; 253
    20b0:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    20b2:	a7 e2       	ldi	r26, 0x27	; 39
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e7 e2       	ldi	r30, 0x27	; 39
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	81 60       	ori	r24, 0x01	; 1
    20be:	8c 93       	st	X, r24
    20c0:	47 c0       	rjmp	.+142    	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_6:
			CLR_BIT(ADMUX,4);
    20c2:	a7 e2       	ldi	r26, 0x27	; 39
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e2       	ldi	r30, 0x27	; 39
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	8f 7e       	andi	r24, 0xEF	; 239
    20ce:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    20d0:	a7 e2       	ldi	r26, 0x27	; 39
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e7 e2       	ldi	r30, 0x27	; 39
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	87 7f       	andi	r24, 0xF7	; 247
    20dc:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    20de:	a7 e2       	ldi	r26, 0x27	; 39
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e7 e2       	ldi	r30, 0x27	; 39
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	84 60       	ori	r24, 0x04	; 4
    20ea:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    20ec:	a7 e2       	ldi	r26, 0x27	; 39
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e7 e2       	ldi	r30, 0x27	; 39
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	82 60       	ori	r24, 0x02	; 2
    20f8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    20fa:	a7 e2       	ldi	r26, 0x27	; 39
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e7 e2       	ldi	r30, 0x27	; 39
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	8e 7f       	andi	r24, 0xFE	; 254
    2106:	8c 93       	st	X, r24
    2108:	23 c0       	rjmp	.+70     	; 0x2150 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_7:
			CLR_BIT(ADMUX,4);
    210a:	a7 e2       	ldi	r26, 0x27	; 39
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e7 e2       	ldi	r30, 0x27	; 39
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8f 7e       	andi	r24, 0xEF	; 239
    2116:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2118:	a7 e2       	ldi	r26, 0x27	; 39
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e7 e2       	ldi	r30, 0x27	; 39
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	87 7f       	andi	r24, 0xF7	; 247
    2124:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2126:	a7 e2       	ldi	r26, 0x27	; 39
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e7 e2       	ldi	r30, 0x27	; 39
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	84 60       	ori	r24, 0x04	; 4
    2132:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2134:	a7 e2       	ldi	r26, 0x27	; 39
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e7 e2       	ldi	r30, 0x27	; 39
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	82 60       	ori	r24, 0x02	; 2
    2140:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2142:	a7 e2       	ldi	r26, 0x27	; 39
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e7 e2       	ldi	r30, 0x27	; 39
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	81 60       	ori	r24, 0x01	; 1
    214e:	8c 93       	st	X, r24
			break;
	}
}
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <UART_Init>:
#include "../../libraries/std_types.h"
#include "../../libraries/bit_math.h"
#include "UART.h"
#include "UART_REGISTERS.h"

void UART_Init(uint16_ baud) {
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <UART_Init+0x6>
    2162:	00 d0       	rcall	.+0      	; 0x2164 <UART_Init+0x8>
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03
    uint16_ ubrr = F_CPU/16/baud-1;
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	9c 01       	movw	r18, r24
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	80 e2       	ldi	r24, 0x20	; 32
    2178:	91 ea       	ldi	r25, 0xA1	; 161
    217a:	a7 e0       	ldi	r26, 0x07	; 7
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <__udivmodsi4>
    2186:	da 01       	movw	r26, r20
    2188:	c9 01       	movw	r24, r18
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    UBRRH = (uint8_t)(ubrr>>8);
    2190:	e0 e4       	ldi	r30, 0x40	; 64
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	89 2f       	mov	r24, r25
    219a:	99 27       	eor	r25, r25
    219c:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr;
    219e:	e9 e2       	ldi	r30, 0x29	; 41
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	80 83       	st	Z, r24
    SET_BIT(UCSRB,4);
    21a6:	aa e2       	ldi	r26, 0x2A	; 42
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	ea e2       	ldi	r30, 0x2A	; 42
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 61       	ori	r24, 0x10	; 16
    21b2:	8c 93       	st	X, r24
    SET_BIT(UCSRB,3);
    21b4:	aa e2       	ldi	r26, 0x2A	; 42
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	ea e2       	ldi	r30, 0x2A	; 42
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	88 60       	ori	r24, 0x08	; 8
    21c0:	8c 93       	st	X, r24
    UCSRC = (1<<7) | (3<<1);
    21c2:	e0 e4       	ldi	r30, 0x40	; 64
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	86 e8       	ldi	r24, 0x86	; 134
    21c8:	80 83       	st	Z, r24
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <UART_Transmit>:

void UART_Transmit(uint8_t data) {
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	0f 92       	push	r0
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	89 83       	std	Y+1, r24	; 0x01
    while (!GET_BIT(UCSRA,5));
    21e4:	eb e2       	ldi	r30, 0x2B	; 43
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	82 95       	swap	r24
    21ec:	86 95       	lsr	r24
    21ee:	87 70       	andi	r24, 0x07	; 7
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	81 70       	andi	r24, 0x01	; 1
    21f6:	90 70       	andi	r25, 0x00	; 0
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	a1 f3       	breq	.-24     	; 0x21e4 <UART_Transmit+0xc>
    UDR = data;
    21fc:	ec e2       	ldi	r30, 0x2C	; 44
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	80 83       	st	Z, r24
}
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <UART_Receive>:

uint8_t UART_Receive(void) {
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA,7));
    2214:	eb e2       	ldi	r30, 0x2B	; 43
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	88 23       	and	r24, r24
    221c:	dc f7       	brge	.-10     	; 0x2214 <UART_Receive+0x8>
    return UDR;
    221e:	ec e2       	ldi	r30, 0x2C	; 44
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <TIMER1_voidInit>:

void (* TIMER1_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt1;

void TIMER1_voidInit(void){
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
	TCCR1B |= TIMER1_PRESCALER;

#elif TIMER1_MODE == CTC_T_MODE

	CLR_BIT(TCCR1A , WGM10);
    2232:	af e4       	ldi	r26, 0x4F	; 79
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ef e4       	ldi	r30, 0x4F	; 79
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8e 7f       	andi	r24, 0xFE	; 254
    223e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , WGM11);
    2240:	af e4       	ldi	r26, 0x4F	; 79
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ef e4       	ldi	r30, 0x4F	; 79
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8d 7f       	andi	r24, 0xFD	; 253
    224c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    224e:	ae e4       	ldi	r26, 0x4E	; 78
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ee e4       	ldi	r30, 0x4E	; 78
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	88 60       	ori	r24, 0x08	; 8
    225a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , WGM13);
    225c:	ae e4       	ldi	r26, 0x4E	; 78
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ee e4       	ldi	r30, 0x4E	; 78
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7e       	andi	r24, 0xEF	; 239
    2268:	8c 93       	st	X, r24

	//Enabling timer flag;
	SET_BIT(TIMSK , OCIE1A);
    226a:	a9 e5       	ldi	r26, 0x59	; 89
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e9 e5       	ldi	r30, 0x59	; 89
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	80 61       	ori	r24, 0x10	; 16
    2276:	8c 93       	st	X, r24

	//selecting prescaler;
	TCCR1B &= 0b11111000;
    2278:	ae e4       	ldi	r26, 0x4E	; 78
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ee e4       	ldi	r30, 0x4E	; 78
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 7f       	andi	r24, 0xF8	; 248
    2284:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER;
    2286:	ae e4       	ldi	r26, 0x4E	; 78
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	ee e4       	ldi	r30, 0x4E	; 78
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	85 60       	ori	r24, 0x05	; 5
    2292:	8c 93       	st	X, r24
#else

#error "wrong timer mode"

#endif
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <TIMER1_voidDisable>:

void TIMER1_voidDisable(void){
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62

	TCCR1B &= 0b11111000;
    22a2:	ae e4       	ldi	r26, 0x4E	; 78
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	ee e4       	ldi	r30, 0x4E	; 78
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	88 7f       	andi	r24, 0xF8	; 248
    22ae:	8c 93       	st	X, r24

}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <TIMER1_uint8SetPrescaler>:

uint8_t TIMER1_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <TIMER1_uint8SetPrescaler+0x6>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    22c2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	88 30       	cpi	r24, 0x08	; 8
    22c8:	80 f4       	brcc	.+32     	; 0x22ea <TIMER1_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR1B &= 0b11111000;
    22ca:	ae e4       	ldi	r26, 0x4E	; 78
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	ee e4       	ldi	r30, 0x4E	; 78
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	88 7f       	andi	r24, 0xF8	; 248
    22d6:	8c 93       	st	X, r24
		TCCR1B |= Copy_uint8Prescaler;
    22d8:	ae e4       	ldi	r26, 0x4E	; 78
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	ee e4       	ldi	r30, 0x4E	; 78
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	90 81       	ld	r25, Z
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	89 2b       	or	r24, r25
    22e6:	8c 93       	st	X, r24
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <TIMER1_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <TIMER1_voidSetCounterRegister>:
void TIMER1_voidSetCounterRegister(uint8_t Copy_uint8Counter1Start){
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	89 83       	std	Y+1, r24	; 0x01

	TCNT1L = Copy_uint8Counter1Start;
    2306:	ec e4       	ldi	r30, 0x4C	; 76
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	80 83       	st	Z, r24
}
    230e:	0f 90       	pop	r0
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <TIMER1_voidSetCTCTime>:

void TIMER1_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01

	 OCR1AL = Copy_uint8CompareTime;
    2322:	ea e4       	ldi	r30, 0x4A	; 74
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	80 83       	st	Z, r24

}
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <TIMER1_voidGetNumCountCTC>:

void TIMER1_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	00 d0       	rcall	.+0      	; 0x2338 <TIMER1_voidGetNumCountCTC+0x6>
    2338:	00 d0       	rcall	.+0      	; 0x233a <TIMER1_voidGetNumCountCTC+0x8>
    233a:	00 d0       	rcall	.+0      	; 0x233c <TIMER1_voidGetNumCountCTC+0xa>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	7c 83       	std	Y+4, r23	; 0x04
    2346:	6b 83       	std	Y+3, r22	; 0x03
    2348:	5e 83       	std	Y+6, r21	; 0x06
    234a:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER1_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	cc 01       	movw	r24, r24
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	28 ee       	ldi	r18, 0xE8	; 232
    2358:	33 e0       	ldi	r19, 0x03	; 3
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__mulsi3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3d e7       	ldi	r19, 0x7D	; 125
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <__udivmodsi4>
    237a:	da 01       	movw	r26, r20
    237c:	c9 01       	movw	r24, r18
    237e:	eb 81       	ldd	r30, Y+3	; 0x03
    2380:	fc 81       	ldd	r31, Y+4	; 0x04
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    2386:	ed 81       	ldd	r30, Y+5	; 0x05
    2388:	fe 81       	ldd	r31, Y+6	; 0x06
    238a:	8a ef       	ldi	r24, 0xFA	; 250
    238c:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    238e:	26 96       	adiw	r28, 0x06	; 6
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <TIMER1_voidSetCallBackNormal>:


void TIMER1_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal1)(void)){
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <TIMER1_voidSetCallBackNormal+0x6>
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal1;
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	90 93 05 04 	sts	0x0405, r25
    23b6:	80 93 04 04 	sts	0x0404, r24

}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC1)(void)){
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <TIMER1_voidSetCallBackCTC+0x6>
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC1;
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	90 93 07 04 	sts	0x0407, r25
    23da:	80 93 06 04 	sts	0x0406, r24

}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    23e8:	1f 92       	push	r1
    23ea:	0f 92       	push	r0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	0f 92       	push	r0
    23f0:	11 24       	eor	r1, r1
    23f2:	2f 93       	push	r18
    23f4:	3f 93       	push	r19
    23f6:	4f 93       	push	r20
    23f8:	5f 93       	push	r21
    23fa:	6f 93       	push	r22
    23fc:	7f 93       	push	r23
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62

	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    2412:	80 91 08 04 	lds	r24, 0x0408
    2416:	90 91 09 04 	lds	r25, 0x0409
    241a:	01 96       	adiw	r24, 0x01	; 1
    241c:	90 93 09 04 	sts	0x0409, r25
    2420:	80 93 08 04 	sts	0x0408, r24
	if(cnt == compare_cnt1){
    2424:	20 91 08 04 	lds	r18, 0x0408
    2428:	30 91 09 04 	lds	r19, 0x0409
    242c:	80 91 3e 04 	lds	r24, 0x043E
    2430:	90 91 3f 04 	lds	r25, 0x043F
    2434:	28 17       	cp	r18, r24
    2436:	39 07       	cpc	r19, r25
    2438:	79 f4       	brne	.+30     	; 0x2458 <__vector_7+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER1_voidpSetCallBackCTC != NULL){
    243a:	80 91 06 04 	lds	r24, 0x0406
    243e:	90 91 07 04 	lds	r25, 0x0407
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	49 f0       	breq	.+18     	; 0x2458 <__vector_7+0x70>

			TIMER1_voidpSetCallBackCTC();
    2446:	e0 91 06 04 	lds	r30, 0x0406
    244a:	f0 91 07 04 	lds	r31, 0x0407
    244e:	09 95       	icall
			cnt = 0;
    2450:	10 92 09 04 	sts	0x0409, r1
    2454:	10 92 08 04 	sts	0x0408, r1
		}

	}


}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	ff 91       	pop	r31
    245e:	ef 91       	pop	r30
    2460:	bf 91       	pop	r27
    2462:	af 91       	pop	r26
    2464:	9f 91       	pop	r25
    2466:	8f 91       	pop	r24
    2468:	7f 91       	pop	r23
    246a:	6f 91       	pop	r22
    246c:	5f 91       	pop	r21
    246e:	4f 91       	pop	r20
    2470:	3f 91       	pop	r19
    2472:	2f 91       	pop	r18
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	0f 90       	pop	r0
    247a:	1f 90       	pop	r1
    247c:	18 95       	reti

0000247e <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	2f 93       	push	r18
    248a:	3f 93       	push	r19
    248c:	4f 93       	push	r20
    248e:	5f 93       	push	r21
    2490:	6f 93       	push	r22
    2492:	7f 93       	push	r23
    2494:	8f 93       	push	r24
    2496:	9f 93       	push	r25
    2498:	af 93       	push	r26
    249a:	bf 93       	push	r27
    249c:	ef 93       	push	r30
    249e:	ff 93       	push	r31
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_voidpSetCallBackNormal != NULL){
    24a8:	80 91 04 04 	lds	r24, 0x0404
    24ac:	90 91 05 04 	lds	r25, 0x0405
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	29 f0       	breq	.+10     	; 0x24be <__vector_9+0x40>

		TIMER1_voidpSetCallBackNormal();
    24b4:	e0 91 04 04 	lds	r30, 0x0404
    24b8:	f0 91 05 04 	lds	r31, 0x0405
    24bc:	09 95       	icall

		//do nothing;

	}

}
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	ff 91       	pop	r31
    24c4:	ef 91       	pop	r30
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	0f 90       	pop	r0
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	18 95       	reti

000024e4 <TIMER_voidInit>:

static void (* TIMER_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt;

void TIMER_voidInit(void){
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000;
	TCCR0 |= TIMER_PRESCALER;

#elif TIMER_MODE == CTC_T_MODE

	CLR_BIT(TCCR0 , WGM00);
    24ec:	a3 e5       	ldi	r26, 0x53	; 83
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e3 e5       	ldi	r30, 0x53	; 83
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8f 7b       	andi	r24, 0xBF	; 191
    24f8:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , WGM01);
    24fa:	a3 e5       	ldi	r26, 0x53	; 83
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e3 e5       	ldi	r30, 0x53	; 83
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	88 60       	ori	r24, 0x08	; 8
    2506:	8c 93       	st	X, r24

	//Enabling CTC flag;
	SET_BIT(TIMSK , OCIE0);
    2508:	a9 e5       	ldi	r26, 0x59	; 89
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e9 e5       	ldi	r30, 0x59	; 89
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	82 60       	ori	r24, 0x02	; 2
    2514:	8c 93       	st	X, r24

	//Set compare match value 250;
	//OCR0 = 250;

	//selecting prescaler;
	TCCR0 &= 0b11111000;
    2516:	a3 e5       	ldi	r26, 0x53	; 83
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e3 e5       	ldi	r30, 0x53	; 83
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 7f       	andi	r24, 0xF8	; 248
    2522:	8c 93       	st	X, r24
	TCCR0 |= TIMER_PRESCALER;
    2524:	a3 e5       	ldi	r26, 0x53	; 83
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e3 e5       	ldi	r30, 0x53	; 83
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	85 60       	ori	r24, 0x05	; 5
    2530:	8c 93       	st	X, r24


#endif


}
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <TIMER_voidDisable>:

void TIMER_voidDisable(void){
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62

	TCCR0 &= 0b11111000;
    2540:	a3 e5       	ldi	r26, 0x53	; 83
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e3 e5       	ldi	r30, 0x53	; 83
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	88 7f       	andi	r24, 0xF8	; 248
    254c:	8c 93       	st	X, r24

}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <TIMER_uint8SetPrescaler>:

uint8_t TIMER_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <TIMER_uint8SetPrescaler+0x6>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    2560:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	88 30       	cpi	r24, 0x08	; 8
    2566:	80 f4       	brcc	.+32     	; 0x2588 <TIMER_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR0 &= 0b11111000;
    2568:	a3 e5       	ldi	r26, 0x53	; 83
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e3 e5       	ldi	r30, 0x53	; 83
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	88 7f       	andi	r24, 0xF8	; 248
    2574:	8c 93       	st	X, r24
		TCCR0 |= Copy_uint8Prescaler;
    2576:	a3 e5       	ldi	r26, 0x53	; 83
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e3 e5       	ldi	r30, 0x53	; 83
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	90 81       	ld	r25, Z
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
    2582:	89 2b       	or	r24, r25
    2584:	8c 93       	st	X, r24
    2586:	02 c0       	rjmp	.+4      	; 0x258c <TIMER_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    258c:	89 81       	ldd	r24, Y+1	; 0x01

}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <TIMER_voidSetCounterRegister>:

void TIMER_voidSetCounterRegister(uint8_t Copy_uint8CounterStart){
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = Copy_uint8CounterStart;
    25a4:	e2 e5       	ldi	r30, 0x52	; 82
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	80 83       	st	Z, r24

}
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <TIMER_voidSetCTCTime>:

void TIMER_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	0f 92       	push	r0
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_uint8CompareTime;
    25c0:	ec e5       	ldi	r30, 0x5C	; 92
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	80 83       	st	Z, r24

}
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <TIMER_voidGetNumCountCTC>:

void TIMER_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <TIMER_voidGetNumCountCTC+0x6>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <TIMER_voidGetNumCountCTC+0x8>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <TIMER_voidGetNumCountCTC+0xa>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	7c 83       	std	Y+4, r23	; 0x04
    25e4:	6b 83       	std	Y+3, r22	; 0x03
    25e6:	5e 83       	std	Y+6, r21	; 0x06
    25e8:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	cc 01       	movw	r24, r24
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	28 ee       	ldi	r18, 0xE8	; 232
    25f6:	33 e0       	ldi	r19, 0x03	; 3
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	50 e0       	ldi	r21, 0x00	; 0
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__mulsi3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	3d e7       	ldi	r19, 0x7D	; 125
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <__udivmodsi4>
    2618:	da 01       	movw	r26, r20
    261a:	c9 01       	movw	r24, r18
    261c:	eb 81       	ldd	r30, Y+3	; 0x03
    261e:	fc 81       	ldd	r31, Y+4	; 0x04
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    2624:	ed 81       	ldd	r30, Y+5	; 0x05
    2626:	fe 81       	ldd	r31, Y+6	; 0x06
    2628:	8a ef       	ldi	r24, 0xFA	; 250
    262a:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    262c:	26 96       	adiw	r28, 0x06	; 6
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <TIMER_voidSetCallBackNormal>:


void TIMER_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal)(void)){
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <TIMER_voidSetCallBackNormal+0x6>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01

	TIMER_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	90 93 0b 04 	sts	0x040B, r25
    2654:	80 93 0a 04 	sts	0x040A, r24

}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <TIMER_voidSetCallBackCTC>:

void TIMER_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC)(void)){
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	00 d0       	rcall	.+0      	; 0x2668 <TIMER_voidSetCallBackCTC+0x6>
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01

	TIMER_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC;
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	90 93 0d 04 	sts	0x040D, r25
    2678:	80 93 0c 04 	sts	0x040C, r24

}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    2686:	1f 92       	push	r1
    2688:	0f 92       	push	r0
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	0f 92       	push	r0
    268e:	11 24       	eor	r1, r1
    2690:	2f 93       	push	r18
    2692:	3f 93       	push	r19
    2694:	4f 93       	push	r20
    2696:	5f 93       	push	r21
    2698:	6f 93       	push	r22
    269a:	7f 93       	push	r23
    269c:	8f 93       	push	r24
    269e:	9f 93       	push	r25
    26a0:	af 93       	push	r26
    26a2:	bf 93       	push	r27
    26a4:	ef 93       	push	r30
    26a6:	ff 93       	push	r31
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62

	if(TIMER_voidpSetCallBackNormal != NULL){
    26b0:	80 91 0a 04 	lds	r24, 0x040A
    26b4:	90 91 0b 04 	lds	r25, 0x040B
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	29 f0       	breq	.+10     	; 0x26c6 <__vector_11+0x40>

		TIMER_voidpSetCallBackNormal();
    26bc:	e0 91 0a 04 	lds	r30, 0x040A
    26c0:	f0 91 0b 04 	lds	r31, 0x040B
    26c4:	09 95       	icall

		//do nothing;

	}

}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	ff 91       	pop	r31
    26cc:	ef 91       	pop	r30
    26ce:	bf 91       	pop	r27
    26d0:	af 91       	pop	r26
    26d2:	9f 91       	pop	r25
    26d4:	8f 91       	pop	r24
    26d6:	7f 91       	pop	r23
    26d8:	6f 91       	pop	r22
    26da:	5f 91       	pop	r21
    26dc:	4f 91       	pop	r20
    26de:	3f 91       	pop	r19
    26e0:	2f 91       	pop	r18
    26e2:	0f 90       	pop	r0
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	0f 90       	pop	r0
    26e8:	1f 90       	pop	r1
    26ea:	18 95       	reti

000026ec <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    26ec:	1f 92       	push	r1
    26ee:	0f 92       	push	r0
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	0f 92       	push	r0
    26f4:	11 24       	eor	r1, r1
    26f6:	2f 93       	push	r18
    26f8:	3f 93       	push	r19
    26fa:	4f 93       	push	r20
    26fc:	5f 93       	push	r21
    26fe:	6f 93       	push	r22
    2700:	7f 93       	push	r23
    2702:	8f 93       	push	r24
    2704:	9f 93       	push	r25
    2706:	af 93       	push	r26
    2708:	bf 93       	push	r27
    270a:	ef 93       	push	r30
    270c:	ff 93       	push	r31
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62


	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    2716:	80 91 0e 04 	lds	r24, 0x040E
    271a:	90 91 0f 04 	lds	r25, 0x040F
    271e:	01 96       	adiw	r24, 0x01	; 1
    2720:	90 93 0f 04 	sts	0x040F, r25
    2724:	80 93 0e 04 	sts	0x040E, r24
	if(cnt == compare_cnt){
    2728:	20 91 0e 04 	lds	r18, 0x040E
    272c:	30 91 0f 04 	lds	r19, 0x040F
    2730:	80 91 40 04 	lds	r24, 0x0440
    2734:	90 91 41 04 	lds	r25, 0x0441
    2738:	28 17       	cp	r18, r24
    273a:	39 07       	cpc	r19, r25
    273c:	79 f4       	brne	.+30     	; 0x275c <__vector_10+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER_voidpSetCallBackCTC != NULL){
    273e:	80 91 0c 04 	lds	r24, 0x040C
    2742:	90 91 0d 04 	lds	r25, 0x040D
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	49 f0       	breq	.+18     	; 0x275c <__vector_10+0x70>

			TIMER_voidpSetCallBackCTC();
    274a:	e0 91 0c 04 	lds	r30, 0x040C
    274e:	f0 91 0d 04 	lds	r31, 0x040D
    2752:	09 95       	icall
			cnt = 0;
    2754:	10 92 0f 04 	sts	0x040F, r1
    2758:	10 92 0e 04 	sts	0x040E, r1


	}


}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	ff 91       	pop	r31
    2762:	ef 91       	pop	r30
    2764:	bf 91       	pop	r27
    2766:	af 91       	pop	r26
    2768:	9f 91       	pop	r25
    276a:	8f 91       	pop	r24
    276c:	7f 91       	pop	r23
    276e:	6f 91       	pop	r22
    2770:	5f 91       	pop	r21
    2772:	4f 91       	pop	r20
    2774:	3f 91       	pop	r19
    2776:	2f 91       	pop	r18
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	0f 90       	pop	r0
    277e:	1f 90       	pop	r1
    2780:	18 95       	reti

00002782 <TILT_vidInit>:
TILT_SENSOR_PIN tilt_pins[NO_OF_SENSORS] ={TILT_1_PIN,TILT_2_PIN,TILT_3_PIN,TILT_4_PIN,
										TILT_5_PIN,TILT_6_PIN,TILT_7_PIN,TILT_8_PIN};


void TILT_vidInit(uint8_t tilt_pin)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <TILT_vidInit+0x6>
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	8a 83       	std	Y+2, r24	; 0x02
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	88 30       	cpi	r24, 0x08	; 8
    2792:	c0 f4       	brcc	.+48     	; 0x27c4 <TILT_vidInit+0x42>
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	fc 01       	movw	r30, r24
    27a0:	e8 51       	subi	r30, 0x18	; 24
    27a2:	fc 4f       	sbci	r31, 0xFC	; 252
    27a4:	20 81       	ld	r18, Z
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	88 2f       	mov	r24, r24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	fc 01       	movw	r30, r24
    27b2:	e7 51       	subi	r30, 0x17	; 23
    27b4:	fc 4f       	sbci	r31, 0xFC	; 252
    27b6:	90 81       	ld	r25, Z
    27b8:	82 2f       	mov	r24, r18
    27ba:	69 2f       	mov	r22, r25
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
    27c2:	22 c0       	rjmp	.+68     	; 0x2808 <TILT_vidInit+0x86>
	else if(tilt_pin==8)
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	88 30       	cpi	r24, 0x08	; 8
    27c8:	f9 f4       	brne	.+62     	; 0x2808 <TILT_vidInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    27ca:	19 82       	std	Y+1, r1	; 0x01
    27cc:	1a c0       	rjmp	.+52     	; 0x2802 <TILT_vidInit+0x80>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	fc 01       	movw	r30, r24
    27da:	e8 51       	subi	r30, 0x18	; 24
    27dc:	fc 4f       	sbci	r31, 0xFC	; 252
    27de:	20 81       	ld	r18, Z
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	fc 01       	movw	r30, r24
    27ec:	e7 51       	subi	r30, 0x17	; 23
    27ee:	fc 4f       	sbci	r31, 0xFC	; 252
    27f0:	90 81       	ld	r25, Z
    27f2:	82 2f       	mov	r24, r18
    27f4:	69 2f       	mov	r22, r25
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
void TILT_vidInit(uint8_t tilt_pin)
{
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
	else if(tilt_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	8f 5f       	subi	r24, 0xFF	; 255
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	88 30       	cpi	r24, 0x08	; 8
    2806:	18 f3       	brcs	.-58     	; 0x27ce <TILT_vidInit+0x4c>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
		}
	}
}
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <TILT_vidGetTiltRead>:

void TILT_vidGetTiltRead(uint8_t * tilt_read, uint8_t tilt_pin)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <TILT_vidGetTiltRead+0x6>
    2818:	0f 92       	push	r0
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,tilt_read);
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	88 2f       	mov	r24, r24
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	88 0f       	add	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	fc 01       	movw	r30, r24
    2830:	e8 51       	subi	r30, 0x18	; 24
    2832:	fc 4f       	sbci	r31, 0xFC	; 252
    2834:	40 81       	ld	r20, Z
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	fc 01       	movw	r30, r24
    2842:	e7 51       	subi	r30, 0x17	; 23
    2844:	fc 4f       	sbci	r31, 0xFC	; 252
    2846:	90 81       	ld	r25, Z
    2848:	29 81       	ldd	r18, Y+1	; 0x01
    284a:	3a 81       	ldd	r19, Y+2	; 0x02
    284c:	84 2f       	mov	r24, r20
    284e:	69 2f       	mov	r22, r25
    2850:	a9 01       	movw	r20, r18
    2852:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_u8GetPinValue>
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <TILT_vidGetAllTiltRead>:

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <TILT_vidGetAllTiltRead+0x6>
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02
	tilt_read[NO_OF_SENSORS]=0;
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	9b 81       	ldd	r25, Y+3	; 0x03
    2876:	fc 01       	movw	r30, r24
    2878:	32 96       	adiw	r30, 0x02	; 2
    287a:	10 82       	st	Z, r1
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    287c:	19 82       	std	Y+1, r1	; 0x01
    287e:	21 c0       	rjmp	.+66     	; 0x28c2 <TILT_vidGetAllTiltRead+0x60>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	fc 01       	movw	r30, r24
    288c:	e8 51       	subi	r30, 0x18	; 24
    288e:	fc 4f       	sbci	r31, 0xFC	; 252
    2890:	40 81       	ld	r20, Z
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	fc 01       	movw	r30, r24
    289e:	e7 51       	subi	r30, 0x17	; 23
    28a0:	fc 4f       	sbci	r31, 0xFC	; 252
    28a2:	50 81       	ld	r21, Z
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	28 0f       	add	r18, r24
    28b0:	39 1f       	adc	r19, r25
    28b2:	84 2f       	mov	r24, r20
    28b4:	65 2f       	mov	r22, r21
    28b6:	a9 01       	movw	r20, r18
    28b8:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_u8GetPinValue>
}

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
	tilt_read[NO_OF_SENSORS]=0;
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	82 30       	cpi	r24, 0x02	; 2
    28c6:	e0 f2       	brcs	.-72     	; 0x2880 <TILT_vidGetAllTiltRead+0x1e>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
	}
	tilt_read[NO_OF_SENSORS]=1;
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	fc 01       	movw	r30, r24
    28ce:	32 96       	adiw	r30, 0x02	; 2
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	80 83       	st	Z, r24
}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <LCD_vidWriteData>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"lcd_cfg.h"

void LCD_vidWriteData(uint8_t data)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	2f 97       	sbiw	r28, 0x0f	; 15
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	67 e0       	ldi	r22, 0x07	; 7
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	65 e0       	ldi	r22, 0x05	; 5
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,data);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	6f 85       	ldd	r22, Y+15	; 0x0f
    290e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	66 e0       	ldi	r22, 0x06	; 6
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a0 e0       	ldi	r26, 0x00	; 0
    2922:	b0 e4       	ldi	r27, 0x40	; 64
    2924:	8b 87       	std	Y+11, r24	; 0x0b
    2926:	9c 87       	std	Y+12, r25	; 0x0c
    2928:	ad 87       	std	Y+13, r26	; 0x0d
    292a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292c:	6b 85       	ldd	r22, Y+11	; 0x0b
    292e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2930:	8d 85       	ldd	r24, Y+13	; 0x0d
    2932:	9e 85       	ldd	r25, Y+14	; 0x0e
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	4a ef       	ldi	r20, 0xFA	; 250
    293a:	54 e4       	ldi	r21, 0x44	; 68
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	8f 83       	std	Y+7, r24	; 0x07
    2946:	98 87       	std	Y+8, r25	; 0x08
    2948:	a9 87       	std	Y+9, r26	; 0x09
    294a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294c:	6f 81       	ldd	r22, Y+7	; 0x07
    294e:	78 85       	ldd	r23, Y+8	; 0x08
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	2c f4       	brge	.+10     	; 0x296e <LCD_vidWriteData+0x8e>
		__ticks = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	3f c0       	rjmp	.+126    	; 0x29ec <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	3f ef       	ldi	r19, 0xFF	; 255
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	57 e4       	ldi	r21, 0x47	; 71
    297e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2982:	18 16       	cp	r1, r24
    2984:	4c f5       	brge	.+82     	; 0x29d8 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2986:	6b 85       	ldd	r22, Y+11	; 0x0b
    2988:	7c 85       	ldd	r23, Y+12	; 0x0c
    298a:	8d 85       	ldd	r24, Y+13	; 0x0d
    298c:	9e 85       	ldd	r25, Y+14	; 0x0e
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e2       	ldi	r20, 0x20	; 32
    2994:	51 e4       	ldi	r21, 0x41	; 65
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
    29ae:	0f c0       	rjmp	.+30     	; 0x29ce <LCD_vidWriteData+0xee>
    29b0:	88 ec       	ldi	r24, 0xC8	; 200
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9c 83       	std	Y+4, r25	; 0x04
    29b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	9c 81       	ldd	r25, Y+4	; 0x04
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_vidWriteData+0xdc>
    29c0:	9c 83       	std	Y+4, r25	; 0x04
    29c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	69 f7       	brne	.-38     	; 0x29b0 <LCD_vidWriteData+0xd0>
    29d6:	14 c0       	rjmp	.+40     	; 0x2a00 <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d8:	6f 81       	ldd	r22, Y+7	; 0x07
    29da:	78 85       	ldd	r23, Y+8	; 0x08
    29dc:	89 85       	ldd	r24, Y+9	; 0x09
    29de:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_vidWriteData+0x118>
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	66 e0       	ldi	r22, 0x06	; 6
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
}
    2a0a:	2f 96       	adiw	r28, 0x0f	; 15
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8_t command)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	2f 97       	sbiw	r28, 0x0f	; 15
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	67 e0       	ldi	r22, 0x07	; 7
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	65 e0       	ldi	r22, 0x05	; 5
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,command);
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a4a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	66 e0       	ldi	r22, 0x06	; 6
    2a52:	41 e0       	ldi	r20, 0x01	; 1
    2a54:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	a0 e0       	ldi	r26, 0x00	; 0
    2a5e:	b0 e4       	ldi	r27, 0x40	; 64
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	9c 87       	std	Y+12, r25	; 0x0c
    2a64:	ad 87       	std	Y+13, r26	; 0x0d
    2a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a ef       	ldi	r20, 0xFA	; 250
    2a76:	54 e4       	ldi	r21, 0x44	; 68
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8f 83       	std	Y+7, r24	; 0x07
    2a82:	98 87       	std	Y+8, r25	; 0x08
    2a84:	a9 87       	std	Y+9, r26	; 0x09
    2a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	2c f4       	brge	.+10     	; 0x2aaa <LCD_vidWriteCmd+0x8e>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <LCD_vidWriteCmd+0x10c>
	else if (__tmp > 65535)
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	4c f5       	brge	.+82     	; 0x2b14 <LCD_vidWriteCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <LCD_vidWriteCmd+0xee>
    2aec:	88 ec       	ldi	r24, 0xC8	; 200
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <LCD_vidWriteCmd+0xdc>
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	69 f7       	brne	.-38     	; 0x2aec <LCD_vidWriteCmd+0xd0>
    2b12:	14 c0       	rjmp	.+40     	; 0x2b3c <LCD_vidWriteCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_vidWriteCmd+0x118>
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	66 e0       	ldi	r22, 0x06	; 6
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinValue>
}
    2b46:	2f 96       	adiw	r28, 0x0f	; 15
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <LCD_vidInit>:

void LCD_vidInit(void)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	e8 97       	sbiw	r28, 0x38	; 56
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	67 e0       	ldi	r22, 0x07	; 7
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    2b76:	82 e0       	ldi	r24, 0x02	; 2
    2b78:	65 e0       	ldi	r22, 0x05	; 5
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	66 e0       	ldi	r22, 0x06	; 6
    2b84:	41 e0       	ldi	r20, 0x01	; 1
    2b86:	0e 94 8c 08 	call	0x1118	; 0x1118 <DIO_u8SetPinMode>
	DIO_u8SetPortMode(LCD_Data_PORT,255);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	6f ef       	ldi	r22, 0xFF	; 255
    2b8e:	0e 94 ad 0c 	call	0x195a	; 0x195a <DIO_u8SetPortMode>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	a0 e2       	ldi	r26, 0x20	; 32
    2b98:	b2 e4       	ldi	r27, 0x42	; 66
    2b9a:	8d ab       	std	Y+53, r24	; 0x35
    2b9c:	9e ab       	std	Y+54, r25	; 0x36
    2b9e:	af ab       	std	Y+55, r26	; 0x37
    2ba0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ba4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ba6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ba8:	98 ad       	ldd	r25, Y+56	; 0x38
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	4a ef       	ldi	r20, 0xFA	; 250
    2bb0:	54 e4       	ldi	r21, 0x44	; 68
    2bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	89 ab       	std	Y+49, r24	; 0x31
    2bbc:	9a ab       	std	Y+50, r25	; 0x32
    2bbe:	ab ab       	std	Y+51, r26	; 0x33
    2bc0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	2c f4       	brge	.+10     	; 0x2be4 <LCD_vidInit+0x8c>
		__ticks = 1;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	98 ab       	std	Y+48, r25	; 0x30
    2be0:	8f a7       	std	Y+47, r24	; 0x2f
    2be2:	3f c0       	rjmp	.+126    	; 0x2c62 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    2be4:	69 a9       	ldd	r22, Y+49	; 0x31
    2be6:	7a a9       	ldd	r23, Y+50	; 0x32
    2be8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bea:	9c a9       	ldd	r25, Y+52	; 0x34
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3f ef       	ldi	r19, 0xFF	; 255
    2bf0:	4f e7       	ldi	r20, 0x7F	; 127
    2bf2:	57 e4       	ldi	r21, 0x47	; 71
    2bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf8:	18 16       	cp	r1, r24
    2bfa:	4c f5       	brge	.+82     	; 0x2c4e <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    2bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    2c00:	8f a9       	ldd	r24, Y+55	; 0x37
    2c02:	98 ad       	ldd	r25, Y+56	; 0x38
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	98 ab       	std	Y+48, r25	; 0x30
    2c22:	8f a7       	std	Y+47, r24	; 0x2f
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <LCD_vidInit+0xec>
    2c26:	88 ec       	ldi	r24, 0xC8	; 200
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9e a7       	std	Y+46, r25	; 0x2e
    2c2c:	8d a7       	std	Y+45, r24	; 0x2d
    2c2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_vidInit+0xda>
    2c36:	9e a7       	std	Y+46, r25	; 0x2e
    2c38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	98 ab       	std	Y+48, r25	; 0x30
    2c42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c46:	98 a9       	ldd	r25, Y+48	; 0x30
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <LCD_vidInit+0xce>
    2c4c:	14 c0       	rjmp	.+40     	; 0x2c76 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c50:	7a a9       	ldd	r23, Y+50	; 0x32
    2c52:	8b a9       	ldd	r24, Y+51	; 0x33
    2c54:	9c a9       	ldd	r25, Y+52	; 0x34
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	98 ab       	std	Y+48, r25	; 0x30
    2c60:	8f a7       	std	Y+47, r24	; 0x2f
    2c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c64:	98 a9       	ldd	r25, Y+48	; 0x30
    2c66:	9c a7       	std	Y+44, r25	; 0x2c
    2c68:	8b a7       	std	Y+43, r24	; 0x2b
    2c6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_vidInit+0x116>
    2c72:	9c a7       	std	Y+44, r25	; 0x2c
    2c74:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_vidWriteCmd(0b00111000);
    2c76:	88 e3       	ldi	r24, 0x38	; 56
    2c78:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a0 e0       	ldi	r26, 0x00	; 0
    2c82:	b0 e4       	ldi	r27, 0x40	; 64
    2c84:	8f a3       	std	Y+39, r24	; 0x27
    2c86:	98 a7       	std	Y+40, r25	; 0x28
    2c88:	a9 a7       	std	Y+41, r26	; 0x29
    2c8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c90:	89 a5       	ldd	r24, Y+41	; 0x29
    2c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a ef       	ldi	r20, 0xFA	; 250
    2c9a:	54 e4       	ldi	r21, 0x44	; 68
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	8b a3       	std	Y+35, r24	; 0x23
    2ca6:	9c a3       	std	Y+36, r25	; 0x24
    2ca8:	ad a3       	std	Y+37, r26	; 0x25
    2caa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cac:	6b a1       	ldd	r22, Y+35	; 0x23
    2cae:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <LCD_vidInit+0x176>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9a a3       	std	Y+34, r25	; 0x22
    2cca:	89 a3       	std	Y+33, r24	; 0x21
    2ccc:	3f c0       	rjmp	.+126    	; 0x2d4c <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    2cce:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	4c f5       	brge	.+82     	; 0x2d38 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cea:	89 a5       	ldd	r24, Y+41	; 0x29
    2cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9a a3       	std	Y+34, r25	; 0x22
    2d0c:	89 a3       	std	Y+33, r24	; 0x21
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <LCD_vidInit+0x1d6>
    2d10:	88 ec       	ldi	r24, 0xC8	; 200
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	98 a3       	std	Y+32, r25	; 0x20
    2d16:	8f 8f       	std	Y+31, r24	; 0x1f
    2d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_vidInit+0x1c4>
    2d20:	98 a3       	std	Y+32, r25	; 0x20
    2d22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	89 a1       	ldd	r24, Y+33	; 0x21
    2d26:	9a a1       	ldd	r25, Y+34	; 0x22
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d30:	9a a1       	ldd	r25, Y+34	; 0x22
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	69 f7       	brne	.-38     	; 0x2d10 <LCD_vidInit+0x1b8>
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d38:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9a a3       	std	Y+34, r25	; 0x22
    2d4a:	89 a3       	std	Y+33, r24	; 0x21
    2d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d50:	9e 8f       	std	Y+30, r25	; 0x1e
    2d52:	8d 8f       	std	Y+29, r24	; 0x1d
    2d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <LCD_vidInit+0x200>
    2d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidWriteCmd(0b00001100);
    2d60:	8c e0       	ldi	r24, 0x0C	; 12
    2d62:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e0       	ldi	r26, 0x00	; 0
    2d6c:	b0 e4       	ldi	r27, 0x40	; 64
    2d6e:	89 8f       	std	Y+25, r24	; 0x19
    2d70:	9a 8f       	std	Y+26, r25	; 0x1a
    2d72:	ab 8f       	std	Y+27, r26	; 0x1b
    2d74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	69 8d       	ldd	r22, Y+25	; 0x19
    2d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a ef       	ldi	r20, 0xFA	; 250
    2d84:	54 e4       	ldi	r21, 0x44	; 68
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8d 8b       	std	Y+21, r24	; 0x15
    2d90:	9e 8b       	std	Y+22, r25	; 0x16
    2d92:	af 8b       	std	Y+23, r26	; 0x17
    2d94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d96:	6d 89       	ldd	r22, Y+21	; 0x15
    2d98:	7e 89       	ldd	r23, Y+22	; 0x16
    2d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_vidInit+0x260>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9c 8b       	std	Y+20, r25	; 0x14
    2db4:	8b 8b       	std	Y+19, r24	; 0x13
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    2db8:	6d 89       	ldd	r22, Y+21	; 0x15
    2dba:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9c 8b       	std	Y+20, r25	; 0x14
    2df6:	8b 8b       	std	Y+19, r24	; 0x13
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <LCD_vidInit+0x2c0>
    2dfa:	88 ec       	ldi	r24, 0xC8	; 200
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9a 8b       	std	Y+18, r25	; 0x12
    2e00:	89 8b       	std	Y+17, r24	; 0x11
    2e02:	89 89       	ldd	r24, Y+17	; 0x11
    2e04:	9a 89       	ldd	r25, Y+18	; 0x12
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_vidInit+0x2ae>
    2e0a:	9a 8b       	std	Y+18, r25	; 0x12
    2e0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e10:	9c 89       	ldd	r25, Y+20	; 0x14
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9c 8b       	std	Y+20, r25	; 0x14
    2e16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <LCD_vidInit+0x2a2>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6d 89       	ldd	r22, Y+21	; 0x15
    2e24:	7e 89       	ldd	r23, Y+22	; 0x16
    2e26:	8f 89       	ldd	r24, Y+23	; 0x17
    2e28:	98 8d       	ldd	r25, Y+24	; 0x18
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9c 8b       	std	Y+20, r25	; 0x14
    2e34:	8b 8b       	std	Y+19, r24	; 0x13
    2e36:	8b 89       	ldd	r24, Y+19	; 0x13
    2e38:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3a:	98 8b       	std	Y+16, r25	; 0x10
    2e3c:	8f 87       	std	Y+15, r24	; 0x0f
    2e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e40:	98 89       	ldd	r25, Y+16	; 0x10
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_vidInit+0x2ea>
    2e46:	98 8b       	std	Y+16, r25	; 0x10
    2e48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000001);
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a0 e0       	ldi	r26, 0x00	; 0
    2e56:	b0 e4       	ldi	r27, 0x40	; 64
    2e58:	8b 87       	std	Y+11, r24	; 0x0b
    2e5a:	9c 87       	std	Y+12, r25	; 0x0c
    2e5c:	ad 87       	std	Y+13, r26	; 0x0d
    2e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a ef       	ldi	r20, 0xFA	; 250
    2e6e:	54 e4       	ldi	r21, 0x44	; 68
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8f 83       	std	Y+7, r24	; 0x07
    2e7a:	98 87       	std	Y+8, r25	; 0x08
    2e7c:	a9 87       	std	Y+9, r26	; 0x09
    2e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e80:	6f 81       	ldd	r22, Y+7	; 0x07
    2e82:	78 85       	ldd	r23, Y+8	; 0x08
    2e84:	89 85       	ldd	r24, Y+9	; 0x09
    2e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	2c f4       	brge	.+10     	; 0x2ea2 <LCD_vidInit+0x34a>
		__ticks = 1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    2ea0:	3f c0       	rjmp	.+126    	; 0x2f20 <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    2ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea4:	78 85       	ldd	r23, Y+8	; 0x08
    2ea6:	89 85       	ldd	r24, Y+9	; 0x09
    2ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	3f ef       	ldi	r19, 0xFF	; 255
    2eae:	4f e7       	ldi	r20, 0x7F	; 127
    2eb0:	57 e4       	ldi	r21, 0x47	; 71
    2eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb6:	18 16       	cp	r1, r24
    2eb8:	4c f5       	brge	.+82     	; 0x2f0c <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e2       	ldi	r20, 0x20	; 32
    2ec8:	51 e4       	ldi	r21, 0x41	; 65
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	9e 83       	std	Y+6, r25	; 0x06
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
    2ee2:	0f c0       	rjmp	.+30     	; 0x2f02 <LCD_vidInit+0x3aa>
    2ee4:	88 ec       	ldi	r24, 0xC8	; 200
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
    2eea:	8b 83       	std	Y+3, r24	; 0x03
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <LCD_vidInit+0x398>
    2ef4:	9c 83       	std	Y+4, r25	; 0x04
    2ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    2efa:	9e 81       	ldd	r25, Y+6	; 0x06
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	9e 83       	std	Y+6, r25	; 0x06
    2f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f02:	8d 81       	ldd	r24, Y+5	; 0x05
    2f04:	9e 81       	ldd	r25, Y+6	; 0x06
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	69 f7       	brne	.-38     	; 0x2ee4 <LCD_vidInit+0x38c>
    2f0a:	14 c0       	rjmp	.+40     	; 0x2f34 <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
    2f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	f1 f7       	brne	.-4      	; 0x2f2c <LCD_vidInit+0x3d4>
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000110);
    2f34:	86 e0       	ldi	r24, 0x06	; 6
    2f36:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
}
    2f3a:	e8 96       	adiw	r28, 0x38	; 56
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	cf 91       	pop	r28
    2f48:	df 91       	pop	r29
    2f4a:	08 95       	ret

00002f4c <LCD_vidDisplayString>:

void LCD_vidDisplayString(uint8_t * string)
{
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <LCD_vidDisplayString+0x6>
    2f52:	0f 92       	push	r0
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	9b 83       	std	Y+3, r25	; 0x03
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0;string[i]!='\0';i++)
    2f5c:	19 82       	std	Y+1, r1	; 0x01
    2f5e:	14 c0       	rjmp	.+40     	; 0x2f88 <LCD_vidDisplayString+0x3c>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	80 31       	cpi	r24, 0x10	; 16
    2f64:	19 f4       	brne	.+6      	; 0x2f6c <LCD_vidDisplayString+0x20>
    2f66:	80 ec       	ldi	r24, 0xC0	; 192
    2f68:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
		LCD_vidWriteData(string[i]);
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	28 2f       	mov	r18, r24
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	9b 81       	ldd	r25, Y+3	; 0x03
    2f76:	fc 01       	movw	r30, r24
    2f78:	e2 0f       	add	r30, r18
    2f7a:	f3 1f       	adc	r31, r19
    2f7c:	80 81       	ld	r24, Z
    2f7e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_vidWriteData>
	LCD_vidWriteCmd(0b00000110);
}

void LCD_vidDisplayString(uint8_t * string)
{
	for(uint8_t i=0;string[i]!='\0';i++)
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	8f 5f       	subi	r24, 0xFF	; 255
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	9b 81       	ldd	r25, Y+3	; 0x03
    2f92:	fc 01       	movw	r30, r24
    2f94:	e2 0f       	add	r30, r18
    2f96:	f3 1f       	adc	r31, r19
    2f98:	80 81       	ld	r24, Z
    2f9a:	88 23       	and	r24, r24
    2f9c:	09 f7       	brne	.-62     	; 0x2f60 <LCD_vidDisplayString+0x14>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
		LCD_vidWriteData(string[i]);
	}
}
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <LCD_vidNewLine>:
void LCD_vidNewLine()
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b11000000);
    2fb2:	80 ec       	ldi	r24, 0xC0	; 192
    2fb4:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
}
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <LCD_vidDisplayStringLeftShift>:
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	62 97       	sbiw	r28, 0x12	; 18
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	9a 8b       	std	Y+18, r25	; 0x12
    2fd4:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    2fd6:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    2fd8:	18 8a       	std	Y+16, r1	; 0x10
    2fda:	0e c0       	rjmp	.+28     	; 0x2ff8 <LCD_vidDisplayStringLeftShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    2fdc:	88 89       	ldd	r24, Y+16	; 0x10
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	89 89       	ldd	r24, Y+17	; 0x11
    2fe4:	9a 89       	ldd	r25, Y+18	; 0x12
    2fe6:	fc 01       	movw	r30, r24
    2fe8:	e2 0f       	add	r30, r18
    2fea:	f3 1f       	adc	r31, r19
    2fec:	80 81       	ld	r24, Z
    2fee:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_vidWriteData>
	LCD_vidWriteCmd(0b11000000);
}
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    2ff2:	88 89       	ldd	r24, Y+16	; 0x10
    2ff4:	8f 5f       	subi	r24, 0xFF	; 255
    2ff6:	88 8b       	std	Y+16, r24	; 0x10
    2ff8:	88 89       	ldd	r24, Y+16	; 0x10
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	89 89       	ldd	r24, Y+17	; 0x11
    3000:	9a 89       	ldd	r25, Y+18	; 0x12
    3002:	fc 01       	movw	r30, r24
    3004:	e2 0f       	add	r30, r18
    3006:	f3 1f       	adc	r31, r19
    3008:	80 81       	ld	r24, Z
    300a:	88 23       	and	r24, r24
    300c:	39 f7       	brne	.-50     	; 0x2fdc <LCD_vidDisplayStringLeftShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    300e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3010:	98 89       	ldd	r25, Y+16	; 0x10
    3012:	69 2f       	mov	r22, r25
    3014:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__udivmodqi4>
    3018:	89 2f       	mov	r24, r25
    301a:	80 31       	cpi	r24, 0x10	; 16
    301c:	19 f4       	brne	.+6      	; 0x3024 <LCD_vidDisplayStringLeftShift+0x66>
    301e:	80 e8       	ldi	r24, 0x80	; 128
    3020:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011000);
    3024:	88 e1       	ldi	r24, 0x18	; 24
    3026:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	aa ef       	ldi	r26, 0xFA	; 250
    3030:	b3 e4       	ldi	r27, 0x43	; 67
    3032:	8b 87       	std	Y+11, r24	; 0x0b
    3034:	9c 87       	std	Y+12, r25	; 0x0c
    3036:	ad 87       	std	Y+13, r26	; 0x0d
    3038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303a:	6b 85       	ldd	r22, Y+11	; 0x0b
    303c:	7c 85       	ldd	r23, Y+12	; 0x0c
    303e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3040:	9e 85       	ldd	r25, Y+14	; 0x0e
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	4a ef       	ldi	r20, 0xFA	; 250
    3048:	54 e4       	ldi	r21, 0x44	; 68
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	8f 83       	std	Y+7, r24	; 0x07
    3054:	98 87       	std	Y+8, r25	; 0x08
    3056:	a9 87       	std	Y+9, r26	; 0x09
    3058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305a:	6f 81       	ldd	r22, Y+7	; 0x07
    305c:	78 85       	ldd	r23, Y+8	; 0x08
    305e:	89 85       	ldd	r24, Y+9	; 0x09
    3060:	9a 85       	ldd	r25, Y+10	; 0x0a
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	5f e3       	ldi	r21, 0x3F	; 63
    306a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306e:	88 23       	and	r24, r24
    3070:	2c f4       	brge	.+10     	; 0x307c <LCD_vidDisplayStringLeftShift+0xbe>
		__ticks = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <LCD_vidDisplayStringLeftShift+0x13c>
	else if (__tmp > 65535)
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	3f ef       	ldi	r19, 0xFF	; 255
    3088:	4f e7       	ldi	r20, 0x7F	; 127
    308a:	57 e4       	ldi	r21, 0x47	; 71
    308c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3090:	18 16       	cp	r1, r24
    3092:	4c f5       	brge	.+82     	; 0x30e6 <LCD_vidDisplayStringLeftShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3094:	6b 85       	ldd	r22, Y+11	; 0x0b
    3096:	7c 85       	ldd	r23, Y+12	; 0x0c
    3098:	8d 85       	ldd	r24, Y+13	; 0x0d
    309a:	9e 85       	ldd	r25, Y+14	; 0x0e
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	0f c0       	rjmp	.+30     	; 0x30dc <LCD_vidDisplayStringLeftShift+0x11e>
    30be:	88 ec       	ldi	r24, 0xC8	; 200
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9c 83       	std	Y+4, r25	; 0x04
    30c4:	8b 83       	std	Y+3, r24	; 0x03
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <LCD_vidDisplayStringLeftShift+0x10c>
    30ce:	9c 83       	std	Y+4, r25	; 0x04
    30d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	69 f7       	brne	.-38     	; 0x30be <LCD_vidDisplayStringLeftShift+0x100>
    30e4:	14 c0       	rjmp	.+40     	; 0x310e <LCD_vidDisplayStringLeftShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e6:	6f 81       	ldd	r22, Y+7	; 0x07
    30e8:	78 85       	ldd	r23, Y+8	; 0x08
    30ea:	89 85       	ldd	r24, Y+9	; 0x09
    30ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9e 83       	std	Y+6, r25	; 0x06
    30f8:	8d 83       	std	Y+5, r24	; 0x05
    30fa:	8d 81       	ldd	r24, Y+5	; 0x05
    30fc:	9e 81       	ldd	r25, Y+6	; 0x06
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <LCD_vidDisplayStringLeftShift+0x148>
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    310e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3110:	8f 5f       	subi	r24, 0xFF	; 255
    3112:	8f 87       	std	Y+15, r24	; 0x0f
    3114:	7c cf       	rjmp	.-264    	; 0x300e <LCD_vidDisplayStringLeftShift+0x50>

00003116 <LCD_vidDisplayStringRightShift>:
	}
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	62 97       	sbiw	r28, 0x12	; 18
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	9a 8b       	std	Y+18, r25	; 0x12
    312c:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    312e:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3130:	18 8a       	std	Y+16, r1	; 0x10
    3132:	0e c0       	rjmp	.+28     	; 0x3150 <LCD_vidDisplayStringRightShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3134:	88 89       	ldd	r24, Y+16	; 0x10
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	89 89       	ldd	r24, Y+17	; 0x11
    313c:	9a 89       	ldd	r25, Y+18	; 0x12
    313e:	fc 01       	movw	r30, r24
    3140:	e2 0f       	add	r30, r18
    3142:	f3 1f       	adc	r31, r19
    3144:	80 81       	ld	r24, Z
    3146:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_vidWriteData>
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    314a:	88 89       	ldd	r24, Y+16	; 0x10
    314c:	8f 5f       	subi	r24, 0xFF	; 255
    314e:	88 8b       	std	Y+16, r24	; 0x10
    3150:	88 89       	ldd	r24, Y+16	; 0x10
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	89 89       	ldd	r24, Y+17	; 0x11
    3158:	9a 89       	ldd	r25, Y+18	; 0x12
    315a:	fc 01       	movw	r30, r24
    315c:	e2 0f       	add	r30, r18
    315e:	f3 1f       	adc	r31, r19
    3160:	80 81       	ld	r24, Z
    3162:	88 23       	and	r24, r24
    3164:	39 f7       	brne	.-50     	; 0x3134 <LCD_vidDisplayStringRightShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3166:	8f 85       	ldd	r24, Y+15	; 0x0f
    3168:	98 89       	ldd	r25, Y+16	; 0x10
    316a:	69 2f       	mov	r22, r25
    316c:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__udivmodqi4>
    3170:	89 2f       	mov	r24, r25
    3172:	80 31       	cpi	r24, 0x10	; 16
    3174:	19 f4       	brne	.+6      	; 0x317c <LCD_vidDisplayStringRightShift+0x66>
    3176:	80 e8       	ldi	r24, 0x80	; 128
    3178:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011100);
    317c:	8c e1       	ldi	r24, 0x1C	; 28
    317e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	aa ef       	ldi	r26, 0xFA	; 250
    3188:	b3 e4       	ldi	r27, 0x43	; 67
    318a:	8b 87       	std	Y+11, r24	; 0x0b
    318c:	9c 87       	std	Y+12, r25	; 0x0c
    318e:	ad 87       	std	Y+13, r26	; 0x0d
    3190:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3192:	6b 85       	ldd	r22, Y+11	; 0x0b
    3194:	7c 85       	ldd	r23, Y+12	; 0x0c
    3196:	8d 85       	ldd	r24, Y+13	; 0x0d
    3198:	9e 85       	ldd	r25, Y+14	; 0x0e
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	4a ef       	ldi	r20, 0xFA	; 250
    31a0:	54 e4       	ldi	r21, 0x44	; 68
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	8f 83       	std	Y+7, r24	; 0x07
    31ac:	98 87       	std	Y+8, r25	; 0x08
    31ae:	a9 87       	std	Y+9, r26	; 0x09
    31b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b2:	6f 81       	ldd	r22, Y+7	; 0x07
    31b4:	78 85       	ldd	r23, Y+8	; 0x08
    31b6:	89 85       	ldd	r24, Y+9	; 0x09
    31b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e8       	ldi	r20, 0x80	; 128
    31c0:	5f e3       	ldi	r21, 0x3F	; 63
    31c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c6:	88 23       	and	r24, r24
    31c8:	2c f4       	brge	.+10     	; 0x31d4 <LCD_vidDisplayStringRightShift+0xbe>
		__ticks = 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	9e 83       	std	Y+6, r25	; 0x06
    31d0:	8d 83       	std	Y+5, r24	; 0x05
    31d2:	3f c0       	rjmp	.+126    	; 0x3252 <LCD_vidDisplayStringRightShift+0x13c>
	else if (__tmp > 65535)
    31d4:	6f 81       	ldd	r22, Y+7	; 0x07
    31d6:	78 85       	ldd	r23, Y+8	; 0x08
    31d8:	89 85       	ldd	r24, Y+9	; 0x09
    31da:	9a 85       	ldd	r25, Y+10	; 0x0a
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	3f ef       	ldi	r19, 0xFF	; 255
    31e0:	4f e7       	ldi	r20, 0x7F	; 127
    31e2:	57 e4       	ldi	r21, 0x47	; 71
    31e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e8:	18 16       	cp	r1, r24
    31ea:	4c f5       	brge	.+82     	; 0x323e <LCD_vidDisplayStringRightShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <LCD_vidDisplayStringRightShift+0x11e>
    3216:	88 ec       	ldi	r24, 0xC8	; 200
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	8b 83       	std	Y+3, r24	; 0x03
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <LCD_vidDisplayStringRightShift+0x10c>
    3226:	9c 83       	std	Y+4, r25	; 0x04
    3228:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322a:	8d 81       	ldd	r24, Y+5	; 0x05
    322c:	9e 81       	ldd	r25, Y+6	; 0x06
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	9e 83       	std	Y+6, r25	; 0x06
    3232:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3234:	8d 81       	ldd	r24, Y+5	; 0x05
    3236:	9e 81       	ldd	r25, Y+6	; 0x06
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	69 f7       	brne	.-38     	; 0x3216 <LCD_vidDisplayStringRightShift+0x100>
    323c:	14 c0       	rjmp	.+40     	; 0x3266 <LCD_vidDisplayStringRightShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323e:	6f 81       	ldd	r22, Y+7	; 0x07
    3240:	78 85       	ldd	r23, Y+8	; 0x08
    3242:	89 85       	ldd	r24, Y+9	; 0x09
    3244:	9a 85       	ldd	r25, Y+10	; 0x0a
    3246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	8d 81       	ldd	r24, Y+5	; 0x05
    3254:	9e 81       	ldd	r25, Y+6	; 0x06
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_vidDisplayStringRightShift+0x148>
    3262:	9a 83       	std	Y+2, r25	; 0x02
    3264:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3266:	8f 85       	ldd	r24, Y+15	; 0x0f
    3268:	8f 5f       	subi	r24, 0xFF	; 255
    326a:	8f 87       	std	Y+15, r24	; 0x0f
    326c:	7c cf       	rjmp	.-264    	; 0x3166 <LCD_vidDisplayStringRightShift+0x50>

0000326e <LCD_vidClearDisplay>:
	}
}

void LCD_vidClearDisplay()
{
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b00000001);
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
}
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <LCD_vidGoTo>:

void LCD_vidGoTo(uint8_t x,uint8_t y)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <LCD_vidGoTo+0x6>
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1&&y<=39)LCD_vidWriteCmd((0b10000000+y));
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	41 f4       	brne	.+16     	; 0x32a6 <LCD_vidGoTo+0x24>
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	88 32       	cpi	r24, 0x28	; 40
    329a:	28 f4       	brcc	.+10     	; 0x32a6 <LCD_vidGoTo+0x24>
    329c:	8a 81       	ldd	r24, Y+2	; 0x02
    329e:	80 58       	subi	r24, 0x80	; 128
    32a0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
    32a4:	0f c0       	rjmp	.+30     	; 0x32c4 <LCD_vidGoTo+0x42>
	else if(x==2&&(y+64)<103) LCD_vidWriteCmd((0b11000000+y));
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	82 30       	cpi	r24, 0x02	; 2
    32aa:	61 f4       	brne	.+24     	; 0x32c4 <LCD_vidGoTo+0x42>
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	80 5c       	subi	r24, 0xC0	; 192
    32b4:	9f 4f       	sbci	r25, 0xFF	; 255
    32b6:	87 36       	cpi	r24, 0x67	; 103
    32b8:	91 05       	cpc	r25, r1
    32ba:	24 f4       	brge	.+8      	; 0x32c4 <LCD_vidGoTo+0x42>
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	80 54       	subi	r24, 0x40	; 64
    32c0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
}
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <LCD_vidSetCursor>:

void LCD_vidSetCursor(uint8_t x,uint8_t y)
{
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <LCD_vidSetCursor+0x6>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vidGoTo(x,y);
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	6a 81       	ldd	r22, Y+2	; 0x02
    32e0:	0e 94 41 19 	call	0x3282	; 0x3282 <LCD_vidGoTo>
	LCD_vidWriteCmd(0b00001111);
    32e4:	8f e0       	ldi	r24, 0x0F	; 15
    32e6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <LCD_vidWriteInteger>:

void LCD_vidWriteInteger(uint16_ number)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	28 97       	sbiw	r28, 0x08	; 8
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	98 87       	std	Y+8, r25	; 0x08
    330a:	8f 83       	std	Y+7, r24	; 0x07
	uint16_ num_mask=number,p=1;
    330c:	8f 81       	ldd	r24, Y+7	; 0x07
    330e:	98 85       	ldd	r25, Y+8	; 0x08
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i=0;
    331c:	1a 82       	std	Y+2, r1	; 0x02
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
    3320:	9e 81       	ldd	r25, Y+6	; 0x06
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	f9 f4       	brne	.+62     	; 0x3364 <LCD_vidWriteInteger+0x70>
    3326:	80 e3       	ldi	r24, 0x30	; 48
    3328:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_vidWriteData>
    332c:	1b c0       	rjmp	.+54     	; 0x3364 <LCD_vidWriteInteger+0x70>
	for(;num_mask!=0;i++)
	{
		num_mask/=10;
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	2a e0       	ldi	r18, 0x0A	; 10
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	b9 01       	movw	r22, r18
    3338:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__udivmodhi4>
    333c:	cb 01       	movw	r24, r22
    333e:	9e 83       	std	Y+6, r25	; 0x06
    3340:	8d 83       	std	Y+5, r24	; 0x05
		p*=10;
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	9c 81       	ldd	r25, Y+4	; 0x04
    3346:	9c 01       	movw	r18, r24
    3348:	22 0f       	add	r18, r18
    334a:	33 1f       	adc	r19, r19
    334c:	c9 01       	movw	r24, r18
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	82 0f       	add	r24, r18
    3358:	93 1f       	adc	r25, r19
    335a:	9c 83       	std	Y+4, r25	; 0x04
    335c:	8b 83       	std	Y+3, r24	; 0x03
{
	uint16_ num_mask=number,p=1;
	uint8_t i=0;
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
	for(;num_mask!=0;i++)
    335e:	8a 81       	ldd	r24, Y+2	; 0x02
    3360:	8f 5f       	subi	r24, 0xFF	; 255
    3362:	8a 83       	std	Y+2, r24	; 0x02
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	00 97       	sbiw	r24, 0x00	; 0
    336a:	09 f7       	brne	.-62     	; 0x332e <LCD_vidWriteInteger+0x3a>
	{
		num_mask/=10;
		p*=10;
	}

	p/=10;
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	9c 81       	ldd	r25, Y+4	; 0x04
    3370:	2a e0       	ldi	r18, 0x0A	; 10
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	b9 01       	movw	r22, r18
    3376:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__udivmodhi4>
    337a:	cb 01       	movw	r24, r22
    337c:	9c 83       	std	Y+4, r25	; 0x04
    337e:	8b 83       	std	Y+3, r24	; 0x03
	nxtl = i - 16;
    3380:	8a 81       	ldd	r24, Y+2	; 0x02
    3382:	80 51       	subi	r24, 0x10	; 16
    3384:	89 83       	std	Y+1, r24	; 0x01
	if(nxtl < 0) nxtl =0;
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	88 23       	and	r24, r24
    338a:	0c f0       	brlt	.+2      	; 0x338e <LCD_vidWriteInteger+0x9a>
    338c:	3e c0       	rjmp	.+124    	; 0x340a <LCD_vidWriteInteger+0x116>
    338e:	19 82       	std	Y+1, r1	; 0x01
    3390:	3c c0       	rjmp	.+120    	; 0x340a <LCD_vidWriteInteger+0x116>
	for(;i>0;i--)
	{
		if(i==nxtl)LCD_vidWriteCmd(0b11000000);
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	99 27       	eor	r25, r25
    339c:	87 fd       	sbrc	r24, 7
    339e:	90 95       	com	r25
    33a0:	28 17       	cp	r18, r24
    33a2:	39 07       	cpc	r19, r25
    33a4:	19 f4       	brne	.+6      	; 0x33ac <LCD_vidWriteInteger+0xb8>
    33a6:	80 ec       	ldi	r24, 0xC0	; 192
    33a8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_vidWriteCmd>
		num_mask= (uint8_t)(number/p);
    33ac:	8f 81       	ldd	r24, Y+7	; 0x07
    33ae:	98 85       	ldd	r25, Y+8	; 0x08
    33b0:	2b 81       	ldd	r18, Y+3	; 0x03
    33b2:	3c 81       	ldd	r19, Y+4	; 0x04
    33b4:	b9 01       	movw	r22, r18
    33b6:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__udivmodhi4>
    33ba:	cb 01       	movw	r24, r22
    33bc:	88 2f       	mov	r24, r24
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData((uint8_t)'0'+num_mask);
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	80 5d       	subi	r24, 0xD0	; 208
    33c8:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_vidWriteData>
		number -= num_mask*p;
    33cc:	2d 81       	ldd	r18, Y+5	; 0x05
    33ce:	3e 81       	ldd	r19, Y+6	; 0x06
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	a9 01       	movw	r20, r18
    33d6:	48 9f       	mul	r20, r24
    33d8:	90 01       	movw	r18, r0
    33da:	49 9f       	mul	r20, r25
    33dc:	30 0d       	add	r19, r0
    33de:	58 9f       	mul	r21, r24
    33e0:	30 0d       	add	r19, r0
    33e2:	11 24       	eor	r1, r1
    33e4:	8f 81       	ldd	r24, Y+7	; 0x07
    33e6:	98 85       	ldd	r25, Y+8	; 0x08
    33e8:	82 1b       	sub	r24, r18
    33ea:	93 0b       	sbc	r25, r19
    33ec:	98 87       	std	Y+8, r25	; 0x08
    33ee:	8f 83       	std	Y+7, r24	; 0x07
		p/=10;
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	2a e0       	ldi	r18, 0x0A	; 10
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	b9 01       	movw	r22, r18
    33fa:	0e 94 65 1d 	call	0x3aca	; 0x3aca <__udivmodhi4>
    33fe:	cb 01       	movw	r24, r22
    3400:	9c 83       	std	Y+4, r25	; 0x04
    3402:	8b 83       	std	Y+3, r24	; 0x03
	}

	p/=10;
	nxtl = i - 16;
	if(nxtl < 0) nxtl =0;
	for(;i>0;i--)
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	81 50       	subi	r24, 0x01	; 1
    3408:	8a 83       	std	Y+2, r24	; 0x02
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	88 23       	and	r24, r24
    340e:	09 f6       	brne	.-126    	; 0x3392 <LCD_vidWriteInteger+0x9e>
		num_mask= (uint8_t)(number/p);
		LCD_vidWriteData((uint8_t)'0'+num_mask);
		number -= num_mask*p;
		p/=10;
	}
}
    3410:	28 96       	adiw	r28, 0x08	; 8
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	de bf       	out	0x3e, r29	; 62
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	cd bf       	out	0x3d, r28	; 61
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <FLEX_vidFlexInit>:
#include"../../mcal/adc_driver/adc_int.h"
#include"flex_sensor_int.h"


void FLEX_vidFlexInit(uint8_t sensor_pin)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	89 83       	std	Y+1, r24	; 0x01

	ADC_vidAdcInit(AREF_VOLTAGE);
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <ADC_vidAdcInit>
	ADC_vidAdcPinInit(sensor_pin);
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <ADC_vidAdcPinInit>

}
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <FLEX_vidGetFlexRead>:

void FLEX_vidGetFlexRead(uint16_* sensor_read, uint8_t sensor_pin)
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	00 d0       	rcall	.+0      	; 0x3448 <FLEX_vidGetFlexRead+0x6>
    3448:	0f 92       	push	r0
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	6b 83       	std	Y+3, r22	; 0x03
	ADC_vidSetReadingVariable(sensor_read);
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	9a 81       	ldd	r25, Y+2	; 0x02
    3458:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <ADC_vidSetReadingVariable>
	ADC_vidAdcGetRead(sensor_pin);
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <ADC_vidAdcGetRead>
}
    3462:	0f 90       	pop	r0
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	08 95       	ret

0000346e <FLEX_vidSetCallBack>:

void FLEX_vidSetCallBack(void (*func)(void))
{
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	00 d0       	rcall	.+0      	; 0x3474 <FLEX_vidSetCallBack+0x6>
    3474:	cd b7       	in	r28, 0x3d	; 61
    3476:	de b7       	in	r29, 0x3e	; 62
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetCallBack(func);
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <ADC_vidSetCallBack>
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <M16P_vidInit>:

static uint8_t send_buf[SERIAL_BUFF_SIZE] = {0x7E, 0xFF, 06, 00, 00, 00, 00, 00, 00, 0xEF};
static uint8_t recv_buf[SERIAL_BUFF_SIZE];
static uint8_t is_reply = 0;

void M16P_vidInit(uint16_ baud) {
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	00 d0       	rcall	.+0      	; 0x3494 <M16P_vidInit+0x6>
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	9a 83       	std	Y+2, r25	; 0x02
    349a:	89 83       	std	Y+1, r24	; 0x01
    is_reply = 0;
    349c:	10 92 10 04 	sts	0x0410, r1
    UART_Init(baud);
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	0e 94 ae 10 	call	0x215c	; 0x215c <UART_Init>
}
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <M16P_vidSetReply>:

void M16P_vidSetReply(uint8_t state) {
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	0f 92       	push	r0
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	89 83       	std	Y+1, r24	; 0x01
    is_reply = state;
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	80 93 10 04 	sts	0x0410, r24
    send_buf[4] = is_reply;
    34c4:	80 91 10 04 	lds	r24, 0x0410
    34c8:	80 93 f0 03 	sts	0x03F0, r24
}
    34cc:	0f 90       	pop	r0
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <M16P_vidFillBufUint16>:

static void M16P_vidFillBufUint16(uint8_t *thebuf, uint16_ data) {
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <M16P_vidFillBufUint16+0x6>
    34da:	00 d0       	rcall	.+0      	; 0x34dc <M16P_vidFillBufUint16+0x8>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
    34e4:	7c 83       	std	Y+4, r23	; 0x04
    34e6:	6b 83       	std	Y+3, r22	; 0x03
    *thebuf = (uint8_t)(data >> 8);
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	89 2f       	mov	r24, r25
    34ee:	99 27       	eor	r25, r25
    34f0:	e9 81       	ldd	r30, Y+1	; 0x01
    34f2:	fa 81       	ldd	r31, Y+2	; 0x02
    34f4:	80 83       	st	Z, r24
    *(thebuf + 1) = (uint8_t)data;
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	fc 01       	movw	r30, r24
    34fc:	31 96       	adiw	r30, 0x01	; 1
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	80 83       	st	Z, r24
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <M16P_Uu16GetCheckSum>:

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	00 d0       	rcall	.+0      	; 0x3516 <M16P_Uu16GetCheckSum+0x6>
    3516:	00 d0       	rcall	.+0      	; 0x3518 <M16P_Uu16GetCheckSum+0x8>
    3518:	00 d0       	rcall	.+0      	; 0x351a <M16P_Uu16GetCheckSum+0xa>
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	9e 83       	std	Y+6, r25	; 0x06
    3520:	8d 83       	std	Y+5, r24	; 0x05
    uint16_ sum = 0;
    3522:	1c 82       	std	Y+4, r1	; 0x04
    3524:	1b 82       	std	Y+3, r1	; 0x03
    for (int i = 1; i < 7; i++) {
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	9a 83       	std	Y+2, r25	; 0x02
    352c:	89 83       	std	Y+1, r24	; 0x01
    352e:	15 c0       	rjmp	.+42     	; 0x355a <M16P_Uu16GetCheckSum+0x4a>
        sum += thebuf[i];
    3530:	29 81       	ldd	r18, Y+1	; 0x01
    3532:	3a 81       	ldd	r19, Y+2	; 0x02
    3534:	8d 81       	ldd	r24, Y+5	; 0x05
    3536:	9e 81       	ldd	r25, Y+6	; 0x06
    3538:	fc 01       	movw	r30, r24
    353a:	e2 0f       	add	r30, r18
    353c:	f3 1f       	adc	r31, r19
    353e:	80 81       	ld	r24, Z
    3540:	28 2f       	mov	r18, r24
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	9c 81       	ldd	r25, Y+4	; 0x04
    3548:	82 0f       	add	r24, r18
    354a:	93 1f       	adc	r25, r19
    354c:	9c 83       	std	Y+4, r25	; 0x04
    354e:	8b 83       	std	Y+3, r24	; 0x03
    *(thebuf + 1) = (uint8_t)data;
}

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    uint16_ sum = 0;
    for (int i = 1; i < 7; i++) {
    3550:	89 81       	ldd	r24, Y+1	; 0x01
    3552:	9a 81       	ldd	r25, Y+2	; 0x02
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	9a 83       	std	Y+2, r25	; 0x02
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	87 30       	cpi	r24, 0x07	; 7
    3560:	91 05       	cpc	r25, r1
    3562:	34 f3       	brlt	.-52     	; 0x3530 <M16P_Uu16GetCheckSum+0x20>
        sum += thebuf[i];
    }
    return -sum;
    3564:	8b 81       	ldd	r24, Y+3	; 0x03
    3566:	9c 81       	ldd	r25, Y+4	; 0x04
    3568:	90 95       	com	r25
    356a:	81 95       	neg	r24
    356c:	9f 4f       	sbci	r25, 0xFF	; 255
}
    356e:	26 96       	adiw	r28, 0x06	; 6
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <M16P_vidFillCheckSum>:

static void M16P_vidFillCheckSum() {
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <M16P_vidFillCheckSum+0x6>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    358a:	8c ee       	ldi	r24, 0xEC	; 236
    358c:	93 e0       	ldi	r25, 0x03	; 3
    358e:	0e 94 88 1a 	call	0x3510	; 0x3510 <M16P_Uu16GetCheckSum>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidFillBufUint16(send_buf + 7, checksum);
    3596:	83 ef       	ldi	r24, 0xF3	; 243
    3598:	93 e0       	ldi	r25, 0x03	; 3
    359a:	29 81       	ldd	r18, Y+1	; 0x01
    359c:	3a 81       	ldd	r19, Y+2	; 0x02
    359e:	b9 01       	movw	r22, r18
    35a0:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <M16P_vidFillBufUint16>
}
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <M16P_vidSendFunc>:

static void M16P_vidSendFunc() {
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <M16P_vidSendFunc+0x6>
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    35b8:	1a 82       	std	Y+2, r1	; 0x02
    35ba:	19 82       	std	Y+1, r1	; 0x01
    35bc:	0d c0       	rjmp	.+26     	; 0x35d8 <M16P_vidSendFunc+0x2a>
        UART_Transmit(send_buf[i]);
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	fc 01       	movw	r30, r24
    35c4:	e4 51       	subi	r30, 0x14	; 20
    35c6:	fc 4f       	sbci	r31, 0xFC	; 252
    35c8:	80 81       	ld	r24, Z
    35ca:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <UART_Transmit>
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    M16P_vidFillBufUint16(send_buf + 7, checksum);
}

static void M16P_vidSendFunc() {
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	8a 30       	cpi	r24, 0x0A	; 10
    35de:	91 05       	cpc	r25, r1
    35e0:	74 f3       	brlt	.-36     	; 0x35be <M16P_vidSendFunc+0x10>
        UART_Transmit(send_buf[i]);
    }
}
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <M16P_vidSendCmd>:

static void M16P_vidSendCmd(uint8_t cmd, uint16_ arg1, uint16_ arg2) {
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <M16P_vidSendCmd+0x6>
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <M16P_vidSendCmd+0x8>
    35f4:	0f 92       	push	r0
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	89 83       	std	Y+1, r24	; 0x01
    35fc:	7b 83       	std	Y+3, r23	; 0x03
    35fe:	6a 83       	std	Y+2, r22	; 0x02
    3600:	5d 83       	std	Y+5, r21	; 0x05
    3602:	4c 83       	std	Y+4, r20	; 0x04
    send_buf[3] = cmd;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	80 93 ef 03 	sts	0x03EF, r24
    send_buf[5] = arg1;
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	80 93 f1 03 	sts	0x03F1, r24
    send_buf[6] = arg2;
    3610:	8c 81       	ldd	r24, Y+4	; 0x04
    3612:	80 93 f2 03 	sts	0x03F2, r24
    M16P_vidFillCheckSum();
    3616:	0e 94 c0 1a 	call	0x3580	; 0x3580 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    361a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <M16P_vidSendFunc>
}
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <M16P_vidSendCmdSingleArg>:

static void M16P_vidSendCmdSingleArg(uint8_t cmd, uint16_ arg) {
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	00 d0       	rcall	.+0      	; 0x3634 <M16P_vidSendCmdSingleArg+0x6>
    3634:	0f 92       	push	r0
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	89 83       	std	Y+1, r24	; 0x01
    363c:	7b 83       	std	Y+3, r23	; 0x03
    363e:	6a 83       	std	Y+2, r22	; 0x02
    send_buf[3] = cmd;
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	80 93 ef 03 	sts	0x03EF, r24
    M16P_vidFillBufUint16((send_buf + 5), arg);
    3646:	81 ef       	ldi	r24, 0xF1	; 241
    3648:	93 e0       	ldi	r25, 0x03	; 3
    364a:	2a 81       	ldd	r18, Y+2	; 0x02
    364c:	3b 81       	ldd	r19, Y+3	; 0x03
    364e:	b9 01       	movw	r22, r18
    3650:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    3654:	0e 94 c0 1a 	call	0x3580	; 0x3580 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    3658:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <M16P_vidSendFunc>
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <M16P_vidSendCmdNoArg>:

static void M16P_vidSendCmdNoArg(uint8_t cmd) {
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	0f 92       	push	r0
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	89 83       	std	Y+1, r24	; 0x01
    send_buf[3] = cmd;
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	80 93 ef 03 	sts	0x03EF, r24
    M16P_vidFillBufUint16((send_buf + 5), 0);
    367a:	81 ef       	ldi	r24, 0xF1	; 241
    367c:	93 e0       	ldi	r25, 0x03	; 3
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    3686:	0e 94 c0 1a 	call	0x3580	; 0x3580 <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    368a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <M16P_vidSendFunc>
}
    368e:	0f 90       	pop	r0
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <M16P_vidPlayTrack>:

void M16P_vidPlayTrack(uint16_ num) {
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	00 d0       	rcall	.+0      	; 0x369c <M16P_vidPlayTrack+0x6>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	9a 83       	std	Y+2, r25	; 0x02
    36a2:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x03, num);
    36a4:	29 81       	ldd	r18, Y+1	; 0x01
    36a6:	3a 81       	ldd	r19, Y+2	; 0x02
    36a8:	83 e0       	ldi	r24, 0x03	; 3
    36aa:	b9 01       	movw	r22, r18
    36ac:	0e 94 17 1b 	call	0x362e	; 0x362e <M16P_vidSendCmdSingleArg>
}
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	cf 91       	pop	r28
    36b6:	df 91       	pop	r29
    36b8:	08 95       	ret

000036ba <M16P_vidNextTrack>:

void M16P_vidNextTrack() {
    36ba:	df 93       	push	r29
    36bc:	cf 93       	push	r28
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x01);
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <M16P_vidPreviousTrack>:

void M16P_vidPreviousTrack() {
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	cd b7       	in	r28, 0x3d	; 61
    36d4:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x02);
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <M16P_vidSetVolume>:

void M16P_vidSetVolume(uint16_ volume) {
    36e2:	df 93       	push	r29
    36e4:	cf 93       	push	r28
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <M16P_vidSetVolume+0x6>
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x06, volume);
    36f0:	29 81       	ldd	r18, Y+1	; 0x01
    36f2:	3a 81       	ldd	r19, Y+2	; 0x02
    36f4:	86 e0       	ldi	r24, 0x06	; 6
    36f6:	b9 01       	movw	r22, r18
    36f8:	0e 94 17 1b 	call	0x362e	; 0x362e <M16P_vidSendCmdSingleArg>
}
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <M16P_vidSetEQ>:

void M16P_vidSetEQ(uint16_ eq) {
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	00 d0       	rcall	.+0      	; 0x370c <M16P_vidSetEQ+0x6>
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	9a 83       	std	Y+2, r25	; 0x02
    3712:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x07, eq);
    3714:	29 81       	ldd	r18, Y+1	; 0x01
    3716:	3a 81       	ldd	r19, Y+2	; 0x02
    3718:	87 e0       	ldi	r24, 0x07	; 7
    371a:	b9 01       	movw	r22, r18
    371c:	0e 94 17 1b 	call	0x362e	; 0x362e <M16P_vidSendCmdSingleArg>
}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	cf 91       	pop	r28
    3726:	df 91       	pop	r29
    3728:	08 95       	ret

0000372a <M16P_vidSetPlaybackSource>:

void M16P_vidSetPlaybackSource(uint16_ device) {
    372a:	df 93       	push	r29
    372c:	cf 93       	push	r28
    372e:	00 d0       	rcall	.+0      	; 0x3730 <M16P_vidSetPlaybackSource+0x6>
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	9a 83       	std	Y+2, r25	; 0x02
    3736:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x09, device);
    3738:	29 81       	ldd	r18, Y+1	; 0x01
    373a:	3a 81       	ldd	r19, Y+2	; 0x02
    373c:	89 e0       	ldi	r24, 0x09	; 9
    373e:	b9 01       	movw	r22, r18
    3740:	0e 94 17 1b 	call	0x362e	; 0x362e <M16P_vidSendCmdSingleArg>
}
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <M16P_vidSleep>:

void M16P_vidSleep() {
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0a);
    3756:	8a e0       	ldi	r24, 0x0A	; 10
    3758:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <M16P_vidReset>:

void M16P_vidReset() {
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0c);
    376a:	8c e0       	ldi	r24, 0x0C	; 12
    376c:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <M16P_vidPlayback>:

void M16P_vidPlayback() {
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0d);
    377e:	8d e0       	ldi	r24, 0x0D	; 13
    3780:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <M16P_vidPause>:

void M16P_vidPause() {
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0e);
    3792:	8e e0       	ldi	r24, 0x0E	; 14
    3794:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <M16P_vidPlayFileInFolder>:

void M16P_vidPlayFileInFolder(uint16_ folder, uint16_ file) {
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	00 d0       	rcall	.+0      	; 0x37a4 <M16P_vidPlayFileInFolder+0x6>
    37a4:	00 d0       	rcall	.+0      	; 0x37a6 <M16P_vidPlayFileInFolder+0x8>
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    37ac:	89 83       	std	Y+1, r24	; 0x01
    37ae:	7c 83       	std	Y+4, r23	; 0x04
    37b0:	6b 83       	std	Y+3, r22	; 0x03
    M16P_vidSendCmd(0x0f, folder, file);
    37b2:	29 81       	ldd	r18, Y+1	; 0x01
    37b4:	3a 81       	ldd	r19, Y+2	; 0x02
    37b6:	4b 81       	ldd	r20, Y+3	; 0x03
    37b8:	5c 81       	ldd	r21, Y+4	; 0x04
    37ba:	8f e0       	ldi	r24, 0x0F	; 15
    37bc:	b9 01       	movw	r22, r18
    37be:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <M16P_vidSendCmd>
}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	08 95       	ret

000037d0 <M16P_vidPlayByNumber>:

void M16P_vidPlayByNumber(uint16_ num) {
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <M16P_vidPlayByNumber+0x6>
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x12, num);
    37de:	29 81       	ldd	r18, Y+1	; 0x01
    37e0:	3a 81       	ldd	r19, Y+2	; 0x02
    37e2:	82 e1       	ldi	r24, 0x12	; 18
    37e4:	b9 01       	movw	r22, r18
    37e6:	0e 94 17 1b 	call	0x362e	; 0x362e <M16P_vidSendCmdSingleArg>
}
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <M16P_vidGetState>:

/*---------------------------------------------------------------------------*/



void M16P_vidGetState() {
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x42);
    37fc:	82 e4       	ldi	r24, 0x42	; 66
    37fe:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <M16P_vidGetVolume>:

void M16P_vidGetVolume() {
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x43);
    3810:	83 e4       	ldi	r24, 0x43	; 67
    3812:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <M16P_vidGetUSum>:

void M16P_vidGetUSum() {
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x47);
    3824:	87 e4       	ldi	r24, 0x47	; 71
    3826:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    382a:	cf 91       	pop	r28
    382c:	df 91       	pop	r29
    382e:	08 95       	ret

00003830 <M16P_vidGetTFSum>:

void M16P_vidGetTFSum() {
    3830:	df 93       	push	r29
    3832:	cf 93       	push	r28
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x48);
    3838:	88 e4       	ldi	r24, 0x48	; 72
    383a:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	08 95       	ret

00003844 <M16P_vidGetFlashSum>:

void M16P_vidGetFlashSum() {
    3844:	df 93       	push	r29
    3846:	cf 93       	push	r28
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x49);
    384c:	89 e4       	ldi	r24, 0x49	; 73
    384e:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3852:	cf 91       	pop	r28
    3854:	df 91       	pop	r29
    3856:	08 95       	ret

00003858 <M16P_vidGetTFCurrent>:

void M16P_vidGetTFCurrent() {
    3858:	df 93       	push	r29
    385a:	cf 93       	push	r28
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4c);
    3860:	8c e4       	ldi	r24, 0x4C	; 76
    3862:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	08 95       	ret

0000386c <M16P_vidGetUCurrent>:

void M16P_vidGetUCurrent() {
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4b);
    3874:	8b e4       	ldi	r24, 0x4B	; 75
    3876:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <M16P_vidGetFlashCurrent>:

void M16P_vidGetFlashCurrent() {
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4d);
    3888:	8d e4       	ldi	r24, 0x4D	; 77
    388a:	0e 94 34 1b 	call	0x3668	; 0x3668 <M16P_vidSendCmdNoArg>
}
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <M16P_u8GetDataBuffer>:

uint8_t M16P_u8GetDataBuffer() {
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	df 93       	push	r29
    389a:	cf 93       	push	r28
    389c:	00 d0       	rcall	.+0      	; 0x389e <M16P_u8GetDataBuffer+0xa>
    389e:	0f 92       	push	r0
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    if (UART_Receive() != 0x7E) {
    38a4:	0e 94 06 11 	call	0x220c	; 0x220c <UART_Receive>
    38a8:	8e 37       	cpi	r24, 0x7E	; 126
    38aa:	11 f0       	breq	.+4      	; 0x38b0 <M16P_u8GetDataBuffer+0x1c>
        return 0;
    38ac:	1b 82       	std	Y+3, r1	; 0x03
    38ae:	1c c0       	rjmp	.+56     	; 0x38e8 <M16P_u8GetDataBuffer+0x54>
    }else{
    	recv_buf[0] = 0x7E;
    38b0:	8e e7       	ldi	r24, 0x7E	; 126
    38b2:	80 93 11 04 	sts	0x0411, r24
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	9a 83       	std	Y+2, r25	; 0x02
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	0d c0       	rjmp	.+26     	; 0x38da <M16P_u8GetDataBuffer+0x46>
    		recv_buf[i] = UART_Receive();
    38c0:	09 81       	ldd	r16, Y+1	; 0x01
    38c2:	1a 81       	ldd	r17, Y+2	; 0x02
    38c4:	0e 94 06 11 	call	0x220c	; 0x220c <UART_Receive>
    38c8:	f8 01       	movw	r30, r16
    38ca:	ef 5e       	subi	r30, 0xEF	; 239
    38cc:	fb 4f       	sbci	r31, 0xFB	; 251
    38ce:	80 83       	st	Z, r24
uint8_t M16P_u8GetDataBuffer() {
    if (UART_Receive() != 0x7E) {
        return 0;
    }else{
    	recv_buf[0] = 0x7E;
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	01 96       	adiw	r24, 0x01	; 1
    38d6:	9a 83       	std	Y+2, r25	; 0x02
    38d8:	89 83       	std	Y+1, r24	; 0x01
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	9a 81       	ldd	r25, Y+2	; 0x02
    38de:	8a 30       	cpi	r24, 0x0A	; 10
    38e0:	91 05       	cpc	r25, r1
    38e2:	74 f3       	brlt	.-36     	; 0x38c0 <M16P_u8GetDataBuffer+0x2c>
    		recv_buf[i] = UART_Receive();
    	}
    	return 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	8b 83       	std	Y+3, r24	; 0x03
    38e8:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	08 95       	ret

000038fa <main>:

extern uint16_ compare_cnt1;
void get_word();

int main()
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <main+0x6>
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	0e 94 62 08 	call	0x10c4	; 0x10c4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
	uint8_t compare_value;
	GLOVE_vidSensorsInit();
    390a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <GLOVE_vidSensorsInit>
	SHOW_vidShowAndPlayInit(&ready_flag);
    390e:	8b e1       	ldi	r24, 0x1B	; 27
    3910:	94 e0       	ldi	r25, 0x04	; 4
    3912:	0e 94 a3 05 	call	0xb46	; 0xb46 <SHOW_vidShowAndPlayInit>
	GLOVE_vidSetGloveParams(&sensor_reads[0],7);
    3916:	82 e4       	ldi	r24, 0x42	; 66
    3918:	94 e0       	ldi	r25, 0x04	; 4
    391a:	67 e0       	ldi	r22, 0x07	; 7
    391c:	0e 94 cb 07 	call	0xf96	; 0xf96 <GLOVE_vidSetGloveParams>
	TIMER1_voidInit();
    3920:	0e 94 15 11 	call	0x222a	; 0x222a <TIMER1_voidInit>
	TIMER1_voidGetNumCountCTC(1000, &compare_cnt1, &compare_value);
    3924:	2e e3       	ldi	r18, 0x3E	; 62
    3926:	34 e0       	ldi	r19, 0x04	; 4
    3928:	ae 01       	movw	r20, r28
    392a:	4e 5f       	subi	r20, 0xFE	; 254
    392c:	5f 4f       	sbci	r21, 0xFF	; 255
    392e:	88 ee       	ldi	r24, 0xE8	; 232
    3930:	93 e0       	ldi	r25, 0x03	; 3
    3932:	b9 01       	movw	r22, r18
    3934:	0e 94 99 11 	call	0x2332	; 0x2332 <TIMER1_voidGetNumCountCTC>
	TIMER1_voidSetCTCTime(compare_value);
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	0e 94 8b 11 	call	0x2316	; 0x2316 <TIMER1_voidSetCTCTime>
	TIMER1_voidSetCallBackCTC(&get_word);
    393e:	8d ec       	ldi	r24, 0xCD	; 205
    3940:	9c e1       	ldi	r25, 0x1C	; 28
    3942:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <TIMER1_voidSetCallBackCTC>
	GLOVE_vidGetHandRead();
    3946:	0e 94 e7 07 	call	0xfce	; 0xfce <GLOVE_vidGetHandRead>
	while(1)
	{
		while(ready_flag || get_another_read_flag);
    394a:	80 91 1b 04 	lds	r24, 0x041B
    394e:	88 23       	and	r24, r24
    3950:	e1 f7       	brne	.-8      	; 0x394a <main+0x50>
    3952:	80 91 f6 03 	lds	r24, 0x03F6
    3956:	88 23       	and	r24, r24
    3958:	c1 f7       	brne	.-16     	; 0x394a <main+0x50>
		for(uint8_t i=0;i<10;i++)
    395a:	19 82       	std	Y+1, r1	; 0x01
    395c:	11 c0       	rjmp	.+34     	; 0x3980 <main+0x86>
		{
			word_location[i]=word_location_buffer[i];
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	28 2f       	mov	r18, r24
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	88 2f       	mov	r24, r24
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	fc 01       	movw	r30, r24
    396c:	ee 5a       	subi	r30, 0xAE	; 174
    396e:	fb 4f       	sbci	r31, 0xFB	; 251
    3970:	80 81       	ld	r24, Z
    3972:	f9 01       	movw	r30, r18
    3974:	e4 5a       	subi	r30, 0xA4	; 164
    3976:	fb 4f       	sbci	r31, 0xFB	; 251
    3978:	80 83       	st	Z, r24
	TIMER1_voidSetCallBackCTC(&get_word);
	GLOVE_vidGetHandRead();
	while(1)
	{
		while(ready_flag || get_another_read_flag);
		for(uint8_t i=0;i<10;i++)
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	8f 5f       	subi	r24, 0xFF	; 255
    397e:	89 83       	std	Y+1, r24	; 0x01
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	8a 30       	cpi	r24, 0x0A	; 10
    3984:	60 f3       	brcs	.-40     	; 0x395e <main+0x64>
		{
			word_location[i]=word_location_buffer[i];
		}
		get_another_read_flag = 1;
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	80 93 f6 03 	sts	0x03F6, r24
		GLOVE_vidGetHandRead();
    398c:	0e 94 e7 07 	call	0xfce	; 0xfce <GLOVE_vidGetHandRead>
		SHOW_vidShowAndPlay(&word_location[0]);
    3990:	8c e5       	ldi	r24, 0x5C	; 92
    3992:	94 e0       	ldi	r25, 0x04	; 4
    3994:	0e 94 c4 05 	call	0xb88	; 0xb88 <SHOW_vidShowAndPlay>
    3998:	d8 cf       	rjmp	.-80     	; 0x394a <main+0x50>

0000399a <get_word>:

	return 0;
}

void get_word()
{
    399a:	df 93       	push	r29
    399c:	cf 93       	push	r28
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0;
	if(i<5 && sensor_reads[7] && get_another_read_flag)
    39a2:	80 91 1c 04 	lds	r24, 0x041C
    39a6:	85 30       	cpi	r24, 0x05	; 5
    39a8:	08 f0       	brcs	.+2      	; 0x39ac <get_word+0x12>
    39aa:	5d c0       	rjmp	.+186    	; 0x3a66 <get_word+0xcc>
    39ac:	80 91 50 04 	lds	r24, 0x0450
    39b0:	90 91 51 04 	lds	r25, 0x0451
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	09 f4       	brne	.+2      	; 0x39ba <get_word+0x20>
    39b8:	56 c0       	rjmp	.+172    	; 0x3a66 <get_word+0xcc>
    39ba:	80 91 f6 03 	lds	r24, 0x03F6
    39be:	88 23       	and	r24, r24
    39c0:	09 f4       	brne	.+2      	; 0x39c4 <get_word+0x2a>
    39c2:	51 c0       	rjmp	.+162    	; 0x3a66 <get_word+0xcc>
	{
		GET_vidGetWordAndSound(&sensor_reads[0], &word_location_buffer[i*2]);
    39c4:	80 91 1c 04 	lds	r24, 0x041C
    39c8:	88 2f       	mov	r24, r24
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	9c 01       	movw	r18, r24
    39d2:	2e 5a       	subi	r18, 0xAE	; 174
    39d4:	3b 4f       	sbci	r19, 0xFB	; 251
    39d6:	82 e4       	ldi	r24, 0x42	; 66
    39d8:	94 e0       	ldi	r25, 0x04	; 4
    39da:	b9 01       	movw	r22, r18
    39dc:	0e 94 21 08 	call	0x1042	; 0x1042 <GET_vidGetWordAndSound>
		if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 1 )i--;
    39e0:	80 91 1c 04 	lds	r24, 0x041C
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	fc 01       	movw	r30, r24
    39ee:	ee 5a       	subi	r30, 0xAE	; 174
    39f0:	fb 4f       	sbci	r31, 0xFB	; 251
    39f2:	80 81       	ld	r24, Z
    39f4:	88 23       	and	r24, r24
    39f6:	99 f4       	brne	.+38     	; 0x3a1e <get_word+0x84>
    39f8:	80 91 1c 04 	lds	r24, 0x041C
    39fc:	88 2f       	mov	r24, r24
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	88 0f       	add	r24, r24
    3a02:	99 1f       	adc	r25, r25
    3a04:	01 96       	adiw	r24, 0x01	; 1
    3a06:	fc 01       	movw	r30, r24
    3a08:	ee 5a       	subi	r30, 0xAE	; 174
    3a0a:	fb 4f       	sbci	r31, 0xFB	; 251
    3a0c:	80 81       	ld	r24, Z
    3a0e:	81 30       	cpi	r24, 0x01	; 1
    3a10:	31 f4       	brne	.+12     	; 0x3a1e <get_word+0x84>
    3a12:	80 91 1c 04 	lds	r24, 0x041C
    3a16:	81 50       	subi	r24, 0x01	; 1
    3a18:	80 93 1c 04 	sts	0x041C, r24
    3a1c:	1c c0       	rjmp	.+56     	; 0x3a56 <get_word+0xbc>
		else if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 0 )i=5;
    3a1e:	80 91 1c 04 	lds	r24, 0x041C
    3a22:	88 2f       	mov	r24, r24
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	fc 01       	movw	r30, r24
    3a2c:	ee 5a       	subi	r30, 0xAE	; 174
    3a2e:	fb 4f       	sbci	r31, 0xFB	; 251
    3a30:	80 81       	ld	r24, Z
    3a32:	88 23       	and	r24, r24
    3a34:	81 f4       	brne	.+32     	; 0x3a56 <get_word+0xbc>
    3a36:	80 91 1c 04 	lds	r24, 0x041C
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	88 0f       	add	r24, r24
    3a40:	99 1f       	adc	r25, r25
    3a42:	01 96       	adiw	r24, 0x01	; 1
    3a44:	fc 01       	movw	r30, r24
    3a46:	ee 5a       	subi	r30, 0xAE	; 174
    3a48:	fb 4f       	sbci	r31, 0xFB	; 251
    3a4a:	80 81       	ld	r24, Z
    3a4c:	88 23       	and	r24, r24
    3a4e:	19 f4       	brne	.+6      	; 0x3a56 <get_word+0xbc>
    3a50:	85 e0       	ldi	r24, 0x05	; 5
    3a52:	80 93 1c 04 	sts	0x041C, r24
		GLOVE_vidGetHandRead();
    3a56:	0e 94 e7 07 	call	0xfce	; 0xfce <GLOVE_vidGetHandRead>
		i++;
    3a5a:	80 91 1c 04 	lds	r24, 0x041C
    3a5e:	8f 5f       	subi	r24, 0xFF	; 255
    3a60:	80 93 1c 04 	sts	0x041C, r24
    3a64:	04 c0       	rjmp	.+8      	; 0x3a6e <get_word+0xd4>
	}else {
		i = 0;
    3a66:	10 92 1c 04 	sts	0x041C, r1
		get_another_read_flag = 0;
    3a6a:	10 92 f6 03 	sts	0x03F6, r1
		//LCD_vidDisplayString((uint8_t*)"a");
	}

}
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	08 95       	ret

00003a74 <__mulsi3>:
    3a74:	62 9f       	mul	r22, r18
    3a76:	d0 01       	movw	r26, r0
    3a78:	73 9f       	mul	r23, r19
    3a7a:	f0 01       	movw	r30, r0
    3a7c:	82 9f       	mul	r24, r18
    3a7e:	e0 0d       	add	r30, r0
    3a80:	f1 1d       	adc	r31, r1
    3a82:	64 9f       	mul	r22, r20
    3a84:	e0 0d       	add	r30, r0
    3a86:	f1 1d       	adc	r31, r1
    3a88:	92 9f       	mul	r25, r18
    3a8a:	f0 0d       	add	r31, r0
    3a8c:	83 9f       	mul	r24, r19
    3a8e:	f0 0d       	add	r31, r0
    3a90:	74 9f       	mul	r23, r20
    3a92:	f0 0d       	add	r31, r0
    3a94:	65 9f       	mul	r22, r21
    3a96:	f0 0d       	add	r31, r0
    3a98:	99 27       	eor	r25, r25
    3a9a:	72 9f       	mul	r23, r18
    3a9c:	b0 0d       	add	r27, r0
    3a9e:	e1 1d       	adc	r30, r1
    3aa0:	f9 1f       	adc	r31, r25
    3aa2:	63 9f       	mul	r22, r19
    3aa4:	b0 0d       	add	r27, r0
    3aa6:	e1 1d       	adc	r30, r1
    3aa8:	f9 1f       	adc	r31, r25
    3aaa:	bd 01       	movw	r22, r26
    3aac:	cf 01       	movw	r24, r30
    3aae:	11 24       	eor	r1, r1
    3ab0:	08 95       	ret

00003ab2 <__udivmodqi4>:
    3ab2:	99 1b       	sub	r25, r25
    3ab4:	79 e0       	ldi	r23, 0x09	; 9
    3ab6:	04 c0       	rjmp	.+8      	; 0x3ac0 <__udivmodqi4_ep>

00003ab8 <__udivmodqi4_loop>:
    3ab8:	99 1f       	adc	r25, r25
    3aba:	96 17       	cp	r25, r22
    3abc:	08 f0       	brcs	.+2      	; 0x3ac0 <__udivmodqi4_ep>
    3abe:	96 1b       	sub	r25, r22

00003ac0 <__udivmodqi4_ep>:
    3ac0:	88 1f       	adc	r24, r24
    3ac2:	7a 95       	dec	r23
    3ac4:	c9 f7       	brne	.-14     	; 0x3ab8 <__udivmodqi4_loop>
    3ac6:	80 95       	com	r24
    3ac8:	08 95       	ret

00003aca <__udivmodhi4>:
    3aca:	aa 1b       	sub	r26, r26
    3acc:	bb 1b       	sub	r27, r27
    3ace:	51 e1       	ldi	r21, 0x11	; 17
    3ad0:	07 c0       	rjmp	.+14     	; 0x3ae0 <__udivmodhi4_ep>

00003ad2 <__udivmodhi4_loop>:
    3ad2:	aa 1f       	adc	r26, r26
    3ad4:	bb 1f       	adc	r27, r27
    3ad6:	a6 17       	cp	r26, r22
    3ad8:	b7 07       	cpc	r27, r23
    3ada:	10 f0       	brcs	.+4      	; 0x3ae0 <__udivmodhi4_ep>
    3adc:	a6 1b       	sub	r26, r22
    3ade:	b7 0b       	sbc	r27, r23

00003ae0 <__udivmodhi4_ep>:
    3ae0:	88 1f       	adc	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	5a 95       	dec	r21
    3ae6:	a9 f7       	brne	.-22     	; 0x3ad2 <__udivmodhi4_loop>
    3ae8:	80 95       	com	r24
    3aea:	90 95       	com	r25
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	08 95       	ret

00003af2 <__udivmodsi4>:
    3af2:	a1 e2       	ldi	r26, 0x21	; 33
    3af4:	1a 2e       	mov	r1, r26
    3af6:	aa 1b       	sub	r26, r26
    3af8:	bb 1b       	sub	r27, r27
    3afa:	fd 01       	movw	r30, r26
    3afc:	0d c0       	rjmp	.+26     	; 0x3b18 <__udivmodsi4_ep>

00003afe <__udivmodsi4_loop>:
    3afe:	aa 1f       	adc	r26, r26
    3b00:	bb 1f       	adc	r27, r27
    3b02:	ee 1f       	adc	r30, r30
    3b04:	ff 1f       	adc	r31, r31
    3b06:	a2 17       	cp	r26, r18
    3b08:	b3 07       	cpc	r27, r19
    3b0a:	e4 07       	cpc	r30, r20
    3b0c:	f5 07       	cpc	r31, r21
    3b0e:	20 f0       	brcs	.+8      	; 0x3b18 <__udivmodsi4_ep>
    3b10:	a2 1b       	sub	r26, r18
    3b12:	b3 0b       	sbc	r27, r19
    3b14:	e4 0b       	sbc	r30, r20
    3b16:	f5 0b       	sbc	r31, r21

00003b18 <__udivmodsi4_ep>:
    3b18:	66 1f       	adc	r22, r22
    3b1a:	77 1f       	adc	r23, r23
    3b1c:	88 1f       	adc	r24, r24
    3b1e:	99 1f       	adc	r25, r25
    3b20:	1a 94       	dec	r1
    3b22:	69 f7       	brne	.-38     	; 0x3afe <__udivmodsi4_loop>
    3b24:	60 95       	com	r22
    3b26:	70 95       	com	r23
    3b28:	80 95       	com	r24
    3b2a:	90 95       	com	r25
    3b2c:	9b 01       	movw	r18, r22
    3b2e:	ac 01       	movw	r20, r24
    3b30:	bd 01       	movw	r22, r26
    3b32:	cf 01       	movw	r24, r30
    3b34:	08 95       	ret

00003b36 <__prologue_saves__>:
    3b36:	2f 92       	push	r2
    3b38:	3f 92       	push	r3
    3b3a:	4f 92       	push	r4
    3b3c:	5f 92       	push	r5
    3b3e:	6f 92       	push	r6
    3b40:	7f 92       	push	r7
    3b42:	8f 92       	push	r8
    3b44:	9f 92       	push	r9
    3b46:	af 92       	push	r10
    3b48:	bf 92       	push	r11
    3b4a:	cf 92       	push	r12
    3b4c:	df 92       	push	r13
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	cd b7       	in	r28, 0x3d	; 61
    3b5c:	de b7       	in	r29, 0x3e	; 62
    3b5e:	ca 1b       	sub	r28, r26
    3b60:	db 0b       	sbc	r29, r27
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	09 94       	ijmp

00003b6e <__epilogue_restores__>:
    3b6e:	2a 88       	ldd	r2, Y+18	; 0x12
    3b70:	39 88       	ldd	r3, Y+17	; 0x11
    3b72:	48 88       	ldd	r4, Y+16	; 0x10
    3b74:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b76:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b78:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b80:	b9 84       	ldd	r11, Y+9	; 0x09
    3b82:	c8 84       	ldd	r12, Y+8	; 0x08
    3b84:	df 80       	ldd	r13, Y+7	; 0x07
    3b86:	ee 80       	ldd	r14, Y+6	; 0x06
    3b88:	fd 80       	ldd	r15, Y+5	; 0x05
    3b8a:	0c 81       	ldd	r16, Y+4	; 0x04
    3b8c:	1b 81       	ldd	r17, Y+3	; 0x03
    3b8e:	aa 81       	ldd	r26, Y+2	; 0x02
    3b90:	b9 81       	ldd	r27, Y+1	; 0x01
    3b92:	ce 0f       	add	r28, r30
    3b94:	d1 1d       	adc	r29, r1
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	ed 01       	movw	r28, r26
    3ba2:	08 95       	ret

00003ba4 <_exit>:
    3ba4:	f8 94       	cli

00003ba6 <__stop_program>:
    3ba6:	ff cf       	rjmp	.-2      	; 0x3ba6 <__stop_program>
