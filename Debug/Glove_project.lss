
Glove_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d4  00800060  000048b6  0000494a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000062  00800434  00800434  00004d1e  2**0
                  ALLOC
  3 .stab         00005610  00000000  00000000  00004d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002529  00000000  00000000  0000a330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000c859  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000c9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000cbac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000ebbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000fd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00010ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0001118d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011a3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__vector_9>
      28:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 33       	cpi	r26, 0x34	; 52
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e3       	ldi	r26, 0x34	; 52
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 22 	call	0x4518	; 0x4518 <main>
      8a:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 23 	jmp	0x4784	; 0x4784 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 23 	jmp	0x479c	; 0x479c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 23 	jmp	0x476c	; 0x476c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 ca 23 	jmp	0x4794	; 0x4794 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <SHOW_vidShowAndPlayInit>:
uint8_t sentences_length[7] = {2, 1, 3, 4, 4, 2, 4};

void callback();

void SHOW_vidShowAndPlayInit (uint8_t * ready_flag)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <SHOW_vidShowAndPlayInit+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	ready_flag_glob = ready_flag;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	90 93 79 04 	sts	0x0479, r25
     cec:	80 93 78 04 	sts	0x0478, r24
	(*ready_flag)=0;
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	10 82       	st	Z, r1
	LCD_vidInit();
     cf6:	0e 94 b3 1b 	call	0x3766	; 0x3766 <LCD_vidInit>
	M16P_vidInit(9600);
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	95 e2       	ldi	r25, 0x25	; 37
     cfe:	0e 94 56 20 	call	0x40ac	; 0x40ac <M16P_vidInit>
	TMR0_Init();
     d02:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <TMR0_Init>
	TMR0_SetCallback(&callback);
     d06:	86 eb       	ldi	r24, 0xB6	; 182
     d08:	97 e0       	ldi	r25, 0x07	; 7
     d0a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <TMR0_SetCallback>
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <SHOW_u8CalcTrackNumber>:

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <SHOW_u8CalcTrackNumber+0x6>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <SHOW_u8CalcTrackNumber+0x8>
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t track_number = 0;
     d28:	1a 82       	std	Y+2, r1	; 0x02

	for(uint8_t i = 1; i<folder; i++)
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	0e c0       	rjmp	.+28     	; 0xd4c <SHOW_u8CalcTrackNumber+0x34>
	{
		track_number += sentences_length[i-1];
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	fc 01       	movw	r30, r24
     d3a:	eb 55       	subi	r30, 0x5B	; 91
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	90 81       	ld	r25, Z
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	89 0f       	add	r24, r25
     d44:	8a 83       	std	Y+2, r24	; 0x02

uint8_t SHOW_u8CalcTrackNumber(uint8_t folder, uint8_t file)
{
	uint8_t track_number = 0;

	for(uint8_t i = 1; i<folder; i++)
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	8f 5f       	subi	r24, 0xFF	; 255
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	99 81       	ldd	r25, Y+1	; 0x01
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	98 17       	cp	r25, r24
     d52:	70 f3       	brcs	.-36     	; 0xd30 <SHOW_u8CalcTrackNumber+0x18>
	{
		track_number += sentences_length[i-1];
	}
	track_number += file;
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	89 0f       	add	r24, r25
     d5a:	8a 83       	std	Y+2, r24	; 0x02

	return track_number;
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <SHOW_vidShowAndPlay>:

void SHOW_vidShowAndPlay (uint8_t * words)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	65 97       	sbiw	r28, 0x15	; 21
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	98 8b       	std	Y+16, r25	; 0x10
     d82:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t words_cpy[10];
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
     d84:	1a 82       	std	Y+2, r1	; 0x02
     d86:	15 c0       	rjmp	.+42     	; 0xdb2 <SHOW_vidShowAndPlay+0x46>
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	48 2f       	mov	r20, r24
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	8f 85       	ldd	r24, Y+15	; 0x0f
     d96:	98 89       	ldd	r25, Y+16	; 0x10
     d98:	fc 01       	movw	r30, r24
     d9a:	e2 0f       	add	r30, r18
     d9c:	f3 1f       	adc	r31, r19
     d9e:	20 81       	ld	r18, Z
     da0:	ce 01       	movw	r24, r28
     da2:	05 96       	adiw	r24, 0x05	; 5
     da4:	fc 01       	movw	r30, r24
     da6:	e4 0f       	add	r30, r20
     da8:	f5 1f       	adc	r31, r21
     daa:	20 83       	st	Z, r18
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	8a 83       	std	Y+2, r24	; 0x02
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	8a 30       	cpi	r24, 0x0A	; 10
     db6:	40 f3       	brcs	.-48     	; 0xd88 <SHOW_vidShowAndPlay+0x1c>
	LCD_vidClearDisplay();
     db8:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <LCD_vidClearDisplay>
	(*ready_flag_glob) = 1;
     dbc:	e0 91 78 04 	lds	r30, 0x0478
     dc0:	f0 91 79 04 	lds	r31, 0x0479
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 83       	st	Z, r24
	uint8_t j=0;
     dc8:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t l=0;
     dca:	1b 82       	std	Y+3, r1	; 0x03
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     dcc:	19 82       	std	Y+1, r1	; 0x01
     dce:	93 c0       	rjmp	.+294    	; 0xef6 <SHOW_vidShowAndPlay+0x18a>
	{
		for(j =0; j<NO_OF_WORDS; j++)
     dd0:	1c 82       	std	Y+4, r1	; 0x04
     dd2:	41 c0       	rjmp	.+130    	; 0xe56 <SHOW_vidShowAndPlay+0xea>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	ce 01       	movw	r24, r28
     ddc:	05 96       	adiw	r24, 0x05	; 5
     dde:	fc 01       	movw	r30, r24
     de0:	e2 0f       	add	r30, r18
     de2:	f3 1f       	adc	r31, r19
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	c9 01       	movw	r24, r18
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	fc 01       	movw	r30, r24
     e02:	e8 59       	subi	r30, 0x98	; 152
     e04:	fe 4f       	sbci	r31, 0xFE	; 254
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	48 17       	cp	r20, r24
     e0c:	59 07       	cpc	r21, r25
     e0e:	01 f5       	brne	.+64     	; 0xe50 <SHOW_vidShowAndPlay+0xe4>
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9c 01       	movw	r18, r24
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	ce 01       	movw	r24, r28
     e1e:	05 96       	adiw	r24, 0x05	; 5
     e20:	fc 01       	movw	r30, r24
     e22:	e2 0f       	add	r30, r18
     e24:	f3 1f       	adc	r31, r19
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	c9 01       	movw	r24, r18
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	82 0f       	add	r24, r18
     e3a:	93 1f       	adc	r25, r19
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	fc 01       	movw	r30, r24
     e42:	e4 59       	subi	r30, 0x94	; 148
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	48 17       	cp	r20, r24
     e4c:	59 07       	cpc	r21, r25
     e4e:	39 f0       	breq	.+14     	; 0xe5e <SHOW_vidShowAndPlay+0xf2>
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	uint8_t l=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
	{
		for(j =0; j<NO_OF_WORDS; j++)
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	8c 83       	std	Y+4, r24	; 0x04
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	84 31       	cpi	r24, 0x14	; 20
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <SHOW_vidShowAndPlay+0xf2>
     e5c:	bb cf       	rjmp	.-138    	; 0xdd4 <SHOW_vidShowAndPlay+0x68>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
     e5e:	80 91 34 04 	lds	r24, 0x0434
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 34 04 	sts	0x0434, r24
		sound_buffer[l++]=outputs[j];
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	48 2f       	mov	r20, r24
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	c9 01       	movw	r24, r18
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	82 0f       	add	r24, r18
     e7c:	93 1f       	adc	r25, r19
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	9c 01       	movw	r18, r24
     e84:	26 5a       	subi	r18, 0xA6	; 166
     e86:	3b 4f       	sbci	r19, 0xFB	; 251
     e88:	ca 01       	movw	r24, r20
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	84 0f       	add	r24, r20
     e90:	95 1f       	adc	r25, r21
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	88 59       	subi	r24, 0x98	; 152
     e98:	9e 4f       	sbci	r25, 0xFE	; 254
     e9a:	3a 8b       	std	Y+18, r19	; 0x12
     e9c:	29 8b       	std	Y+17, r18	; 0x11
     e9e:	9c 8b       	std	Y+20, r25	; 0x14
     ea0:	8b 8b       	std	Y+19, r24	; 0x13
     ea2:	86 e0       	ldi	r24, 0x06	; 6
     ea4:	8d 8b       	std	Y+21, r24	; 0x15
     ea6:	eb 89       	ldd	r30, Y+19	; 0x13
     ea8:	fc 89       	ldd	r31, Y+20	; 0x14
     eaa:	00 80       	ld	r0, Z
     eac:	8b 89       	ldd	r24, Y+19	; 0x13
     eae:	9c 89       	ldd	r25, Y+20	; 0x14
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	9c 8b       	std	Y+20, r25	; 0x14
     eb4:	8b 8b       	std	Y+19, r24	; 0x13
     eb6:	e9 89       	ldd	r30, Y+17	; 0x11
     eb8:	fa 89       	ldd	r31, Y+18	; 0x12
     eba:	00 82       	st	Z, r0
     ebc:	89 89       	ldd	r24, Y+17	; 0x11
     ebe:	9a 89       	ldd	r25, Y+18	; 0x12
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	9a 8b       	std	Y+18, r25	; 0x12
     ec4:	89 8b       	std	Y+17, r24	; 0x11
     ec6:	9d 89       	ldd	r25, Y+21	; 0x15
     ec8:	91 50       	subi	r25, 0x01	; 1
     eca:	9d 8b       	std	Y+21, r25	; 0x15
     ecc:	ed 89       	ldd	r30, Y+21	; 0x15
     ece:	ee 23       	and	r30, r30
     ed0:	51 f7       	brne	.-44     	; 0xea6 <SHOW_vidShowAndPlay+0x13a>
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	8b 83       	std	Y+3, r24	; 0x03
		LCD_vidDisplayString(strings[j]);
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	fc 01       	movw	r30, r24
     ee4:	e7 59       	subi	r30, 0x97	; 151
     ee6:	fd 4f       	sbci	r31, 0xFD	; 253
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <LCD_vidDisplayString>
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	uint8_t l=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	8e 5f       	subi	r24, 0xFE	; 254
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	ce 01       	movw	r24, r28
     efe:	05 96       	adiw	r24, 0x05	; 5
     f00:	fc 01       	movw	r30, r24
     f02:	e2 0f       	add	r30, r18
     f04:	f3 1f       	adc	r31, r19
     f06:	80 81       	ld	r24, Z
     f08:	88 23       	and	r24, r24
     f0a:	79 f0       	breq	.+30     	; 0xf2a <SHOW_vidShowAndPlay+0x1be>
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9c 01       	movw	r18, r24
     f14:	2f 5f       	subi	r18, 0xFF	; 255
     f16:	3f 4f       	sbci	r19, 0xFF	; 255
     f18:	ce 01       	movw	r24, r28
     f1a:	05 96       	adiw	r24, 0x05	; 5
     f1c:	fc 01       	movw	r30, r24
     f1e:	e2 0f       	add	r30, r18
     f20:	f3 1f       	adc	r31, r19
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <SHOW_vidShowAndPlay+0x1be>
     f28:	53 cf       	rjmp	.-346    	; 0xdd0 <SHOW_vidShowAndPlay+0x64>
		}
		sound_buffer_size++;
		sound_buffer[l++]=outputs[j];
		LCD_vidDisplayString(strings[j]);
	}
	TMR0_Start(sound_buffer[0].sound_duration);
     f2a:	80 91 5a 04 	lds	r24, 0x045A
     f2e:	90 91 5b 04 	lds	r25, 0x045B
     f32:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TMR0_Start>
	M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[0].folder, sound_buffer[0].file));
     f36:	80 91 5c 04 	lds	r24, 0x045C
     f3a:	90 91 5d 04 	lds	r25, 0x045D
     f3e:	28 2f       	mov	r18, r24
     f40:	80 91 5e 04 	lds	r24, 0x045E
     f44:	90 91 5f 04 	lds	r25, 0x045F
     f48:	98 2f       	mov	r25, r24
     f4a:	82 2f       	mov	r24, r18
     f4c:	69 2f       	mov	r22, r25
     f4e:	0e 94 8c 06 	call	0xd18	; 0xd18 <SHOW_u8CalcTrackNumber>
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <M16P_vidPlayTrack>
}
     f5a:	65 96       	adiw	r28, 0x15	; 21
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <callback>:

void callback()
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	M16P_vidPause();
     f74:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <M16P_vidPause>
	static uint8_t current_file = 1;
	if(current_file < sound_buffer_size)
     f78:	90 91 ac 02 	lds	r25, 0x02AC
     f7c:	80 91 34 04 	lds	r24, 0x0434
     f80:	98 17       	cp	r25, r24
     f82:	08 f0       	brcs	.+2      	; 0xf86 <callback+0x1a>
     f84:	43 c0       	rjmp	.+134    	; 0x100c <callback+0xa0>
	{
		M16P_vidPlayTrack((uint16_)SHOW_u8CalcTrackNumber(sound_buffer[current_file].folder, sound_buffer[current_file].file));
     f86:	80 91 ac 02 	lds	r24, 0x02AC
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	82 0f       	add	r24, r18
     f96:	93 1f       	adc	r25, r19
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	fc 01       	movw	r30, r24
     fa0:	e6 5a       	subi	r30, 0xA6	; 166
     fa2:	fb 4f       	sbci	r31, 0xFB	; 251
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	48 2f       	mov	r20, r24
     faa:	80 91 ac 02 	lds	r24, 0x02AC
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	c9 01       	movw	r24, r18
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	fc 01       	movw	r30, r24
     fc2:	e2 5a       	subi	r30, 0xA2	; 162
     fc4:	fb 4f       	sbci	r31, 0xFB	; 251
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	98 2f       	mov	r25, r24
     fcc:	84 2f       	mov	r24, r20
     fce:	69 2f       	mov	r22, r25
     fd0:	0e 94 8c 06 	call	0xd18	; 0xd18 <SHOW_u8CalcTrackNumber>
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <M16P_vidPlayTrack>
		TMR0_Start(sound_buffer[current_file].sound_duration);
     fdc:	80 91 ac 02 	lds	r24, 0x02AC
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	c9 01       	movw	r24, r18
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	82 0f       	add	r24, r18
     fec:	93 1f       	adc	r25, r19
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	fc 01       	movw	r30, r24
     ff4:	e6 5a       	subi	r30, 0xA6	; 166
     ff6:	fb 4f       	sbci	r31, 0xFB	; 251
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <TMR0_Start>
		current_file++;
    1000:	80 91 ac 02 	lds	r24, 0x02AC
    1004:	8f 5f       	subi	r24, 0xFF	; 255
    1006:	80 93 ac 02 	sts	0x02AC, r24
    100a:	0a c0       	rjmp	.+20     	; 0x1020 <callback+0xb4>

	}else{
		current_file = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 ac 02 	sts	0x02AC, r24
		sound_buffer_size = 0;
    1012:	10 92 34 04 	sts	0x0434, r1
		(*ready_flag_glob) = 0;
    1016:	e0 91 78 04 	lds	r30, 0x0478
    101a:	f0 91 79 04 	lds	r31, 0x0479
    101e:	10 82       	st	Z, r1
	}
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <GLOVE_vidCallBack>:
uint16_ i = 0;

uint8_t FLEX_SENSORS[8] = {FLEX_0, FLEX_1, FLEX_2, FLEX_3, FLEX_4, FLEX_5, FLEX_6, FLEX_7};

void GLOVE_vidCallBack()
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	SENSOR_READ[i]=READ;
    102e:	20 91 35 04 	lds	r18, 0x0435
    1032:	30 91 36 04 	lds	r19, 0x0436
    1036:	80 91 3a 04 	lds	r24, 0x043A
    103a:	90 91 3b 04 	lds	r25, 0x043B
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	f9 01       	movw	r30, r18
    1044:	e8 0f       	add	r30, r24
    1046:	f9 1f       	adc	r31, r25
    1048:	80 91 38 04 	lds	r24, 0x0438
    104c:	90 91 39 04 	lds	r25, 0x0439
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
	if(i < NO_OF_FLEX_SENSORS-1)
    1054:	80 91 37 04 	lds	r24, 0x0437
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	9c 01       	movw	r18, r24
    1060:	80 91 3a 04 	lds	r24, 0x043A
    1064:	90 91 3b 04 	lds	r25, 0x043B
    1068:	82 17       	cp	r24, r18
    106a:	93 07       	cpc	r25, r19
    106c:	58 f5       	brcc	.+86     	; 0x10c4 <GLOVE_vidCallBack+0x9e>
	{
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=0;
    106e:	20 91 35 04 	lds	r18, 0x0435
    1072:	30 91 36 04 	lds	r19, 0x0436
    1076:	80 91 37 04 	lds	r24, 0x0437
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 96       	adiw	r24, 0x02	; 2
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	f9 01       	movw	r30, r18
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	11 82       	std	Z+1, r1	; 0x01
    108c:	10 82       	st	Z, r1
		i++;
    108e:	80 91 3a 04 	lds	r24, 0x043A
    1092:	90 91 3b 04 	lds	r25, 0x043B
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	90 93 3b 04 	sts	0x043B, r25
    109c:	80 93 3a 04 	sts	0x043A, r24
		READ=0;
    10a0:	10 92 39 04 	sts	0x0439, r1
    10a4:	10 92 38 04 	sts	0x0438, r1
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    10a8:	80 91 3a 04 	lds	r24, 0x043A
    10ac:	90 91 3b 04 	lds	r25, 0x043B
    10b0:	fc 01       	movw	r30, r24
    10b2:	e3 55       	subi	r30, 0x53	; 83
    10b4:	fd 4f       	sbci	r31, 0xFD	; 253
    10b6:	20 81       	ld	r18, Z
    10b8:	88 e3       	ldi	r24, 0x38	; 56
    10ba:	94 e0       	ldi	r25, 0x04	; 4
    10bc:	62 2f       	mov	r22, r18
    10be:	0e 94 30 20 	call	0x4060	; 0x4060 <FLEX_vidGetFlexRead>
    10c2:	27 c0       	rjmp	.+78     	; 0x1112 <GLOVE_vidCallBack+0xec>
	}else if(i == NO_OF_FLEX_SENSORS-1)
    10c4:	80 91 37 04 	lds	r24, 0x0437
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	9c 01       	movw	r18, r24
    10d0:	80 91 3a 04 	lds	r24, 0x043A
    10d4:	90 91 3b 04 	lds	r25, 0x043B
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	d1 f4       	brne	.+52     	; 0x1112 <GLOVE_vidCallBack+0xec>
	{
		i=0;
    10de:	10 92 3b 04 	sts	0x043B, r1
    10e2:	10 92 3a 04 	sts	0x043A, r1
		READ=0;
    10e6:	10 92 39 04 	sts	0x0439, r1
    10ea:	10 92 38 04 	sts	0x0438, r1
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=1;
    10ee:	20 91 35 04 	lds	r18, 0x0435
    10f2:	30 91 36 04 	lds	r19, 0x0436
    10f6:	80 91 37 04 	lds	r24, 0x0437
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 96       	adiw	r24, 0x02	; 2
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	f9 01       	movw	r30, r18
    1106:	e8 0f       	add	r30, r24
    1108:	f9 1f       	adc	r31, r25
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
	}
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GLOVE_vidSensorsInit>:

void GLOVE_vidSensorsInit()
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	FLEX_vidFlexInit(FLEX_ALL);
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	0e 94 20 20 	call	0x4040	; 0x4040 <FLEX_vidFlexInit>
	TILT_vidInit(TILT_2);
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <TILT_vidInit>
	TILT_vidInit(TILT_3);
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <TILT_vidInit>
	FLEX_vidSetCallBack(&GLOVE_vidCallBack);
    1132:	83 e1       	ldi	r24, 0x13	; 19
    1134:	98 e0       	ldi	r25, 0x08	; 8
    1136:	0e 94 46 20 	call	0x408c	; 0x408c <FLEX_vidSetCallBack>
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GLOVE_vidSetGloveParams>:

void GLOVE_vidSetGloveParams(uint16_* sensor_read, uint8_t no_of_sensors)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GLOVE_vidSetGloveParams+0x6>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6b 83       	std	Y+3, r22	; 0x03
	SENSOR_READ = sensor_read;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	90 93 36 04 	sts	0x0436, r25
    115a:	80 93 35 04 	sts	0x0435, r24
	if(no_of_sensors<=8)NO_OF_FLEX_SENSORS = no_of_sensors - 2;
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	89 30       	cpi	r24, 0x09	; 9
    1162:	20 f4       	brcc	.+8      	; 0x116c <GLOVE_vidSetGloveParams+0x2c>
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	82 50       	subi	r24, 0x02	; 2
    1168:	80 93 37 04 	sts	0x0437, r24
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <GLOVE_vidGetHandRead>:

void GLOVE_vidGetHandRead()
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	if(i==0)
    1180:	80 91 3a 04 	lds	r24, 0x043A
    1184:	90 91 3b 04 	lds	r25, 0x043B
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	69 f5       	brne	.+90     	; 0x11e6 <GLOVE_vidGetHandRead+0x6e>
	{
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS],TILT_2);
    118c:	80 91 35 04 	lds	r24, 0x0435
    1190:	90 91 36 04 	lds	r25, 0x0436
    1194:	9c 01       	movw	r18, r24
    1196:	80 91 37 04 	lds	r24, 0x0437
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	62 e0       	ldi	r22, 0x02	; 2
    11a8:	0e 94 77 16 	call	0x2cee	; 0x2cee <TILT_vidGetTiltRead>
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS + 1],TILT_3);
    11ac:	20 91 35 04 	lds	r18, 0x0435
    11b0:	30 91 36 04 	lds	r19, 0x0436
    11b4:	80 91 37 04 	lds	r24, 0x0437
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	63 e0       	ldi	r22, 0x03	; 3
    11c8:	0e 94 77 16 	call	0x2cee	; 0x2cee <TILT_vidGetTiltRead>
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    11cc:	80 91 3a 04 	lds	r24, 0x043A
    11d0:	90 91 3b 04 	lds	r25, 0x043B
    11d4:	fc 01       	movw	r30, r24
    11d6:	e3 55       	subi	r30, 0x53	; 83
    11d8:	fd 4f       	sbci	r31, 0xFD	; 253
    11da:	20 81       	ld	r18, Z
    11dc:	88 e3       	ldi	r24, 0x38	; 56
    11de:	94 e0       	ldi	r25, 0x04	; 4
    11e0:	62 2f       	mov	r22, r18
    11e2:	0e 94 30 20 	call	0x4060	; 0x4060 <FLEX_vidGetFlexRead>
	}
}
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <GET_float32CalculateDistance>:
									  STOPPING_WORD, NOT_FOUND};

// HELPING FUNCTIONS 

// 1. Function to calculate Euclidean distance between two sensor readings
float32_t GET_float32CalculateDistance(uint16_* sensor_reads, word* word) {
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	28 97       	sbiw	r28, 0x08	; 8
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	78 87       	std	Y+8, r23	; 0x08
    1206:	6f 83       	std	Y+7, r22	; 0x07

    float32_t distance = 0.0;
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	ab 83       	std	Y+3, r26	; 0x03
    1216:	bc 83       	std	Y+4, r27	; 0x04

    distance += pow((float32_t)(sensor_reads[0] - word->thumb), 2);
    1218:	ed 81       	ldd	r30, Y+5	; 0x05
    121a:	fe 81       	ldd	r31, Y+6	; 0x06
    121c:	20 81       	ld	r18, Z
    121e:	31 81       	ldd	r19, Z+1	; 0x01
    1220:	ef 81       	ldd	r30, Y+7	; 0x07
    1222:	f8 85       	ldd	r31, Y+8	; 0x08
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	a9 01       	movw	r20, r18
    122a:	48 1b       	sub	r20, r24
    122c:	59 0b       	sbc	r21, r25
    122e:	ca 01       	movw	r24, r20
    1230:	cc 01       	movw	r24, r24
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    123e:	9b 01       	movw	r18, r22
    1240:	ac 01       	movw	r20, r24
    1242:	ca 01       	movw	r24, r20
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9c 01       	movw	r18, r24
    1250:	ad 01       	movw	r20, r26
    1252:	69 81       	ldd	r22, Y+1	; 0x01
    1254:	7a 81       	ldd	r23, Y+2	; 0x02
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	ab 83       	std	Y+3, r26	; 0x03
    1268:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[1] - word->finger_1), 2);
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	fc 01       	movw	r30, r24
    1270:	32 96       	adiw	r30, 0x02	; 2
    1272:	20 81       	ld	r18, Z
    1274:	31 81       	ldd	r19, Z+1	; 0x01
    1276:	ef 81       	ldd	r30, Y+7	; 0x07
    1278:	f8 85       	ldd	r31, Y+8	; 0x08
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	a9 01       	movw	r20, r18
    1280:	48 1b       	sub	r20, r24
    1282:	59 0b       	sbc	r21, r25
    1284:	ca 01       	movw	r24, r20
    1286:	cc 01       	movw	r24, r24
    1288:	a0 e0       	ldi	r26, 0x00	; 0
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	ca 01       	movw	r24, r20
    129a:	b9 01       	movw	r22, r18
    129c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9c 01       	movw	r18, r24
    12a6:	ad 01       	movw	r20, r26
    12a8:	69 81       	ldd	r22, Y+1	; 0x01
    12aa:	7a 81       	ldd	r23, Y+2	; 0x02
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	ab 83       	std	Y+3, r26	; 0x03
    12be:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[2] - word->finger_2), 2);
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	fc 01       	movw	r30, r24
    12c6:	34 96       	adiw	r30, 0x04	; 4
    12c8:	20 81       	ld	r18, Z
    12ca:	31 81       	ldd	r19, Z+1	; 0x01
    12cc:	ef 81       	ldd	r30, Y+7	; 0x07
    12ce:	f8 85       	ldd	r31, Y+8	; 0x08
    12d0:	84 81       	ldd	r24, Z+4	; 0x04
    12d2:	95 81       	ldd	r25, Z+5	; 0x05
    12d4:	a9 01       	movw	r20, r18
    12d6:	48 1b       	sub	r20, r24
    12d8:	59 0b       	sbc	r21, r25
    12da:	ca 01       	movw	r24, r20
    12dc:	cc 01       	movw	r24, r24
    12de:	a0 e0       	ldi	r26, 0x00	; 0
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	ca 01       	movw	r24, r20
    12f0:	b9 01       	movw	r22, r18
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9c 01       	movw	r18, r24
    12fc:	ad 01       	movw	r20, r26
    12fe:	69 81       	ldd	r22, Y+1	; 0x01
    1300:	7a 81       	ldd	r23, Y+2	; 0x02
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	ab 83       	std	Y+3, r26	; 0x03
    1314:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[3] - word->finger_3), 2);
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	fc 01       	movw	r30, r24
    131c:	36 96       	adiw	r30, 0x06	; 6
    131e:	20 81       	ld	r18, Z
    1320:	31 81       	ldd	r19, Z+1	; 0x01
    1322:	ef 81       	ldd	r30, Y+7	; 0x07
    1324:	f8 85       	ldd	r31, Y+8	; 0x08
    1326:	86 81       	ldd	r24, Z+6	; 0x06
    1328:	97 81       	ldd	r25, Z+7	; 0x07
    132a:	a9 01       	movw	r20, r18
    132c:	48 1b       	sub	r20, r24
    132e:	59 0b       	sbc	r21, r25
    1330:	ca 01       	movw	r24, r20
    1332:	cc 01       	movw	r24, r24
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1340:	9b 01       	movw	r18, r22
    1342:	ac 01       	movw	r20, r24
    1344:	ca 01       	movw	r24, r20
    1346:	b9 01       	movw	r22, r18
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9c 01       	movw	r18, r24
    1352:	ad 01       	movw	r20, r26
    1354:	69 81       	ldd	r22, Y+1	; 0x01
    1356:	7a 81       	ldd	r23, Y+2	; 0x02
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	ab 83       	std	Y+3, r26	; 0x03
    136a:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[4] - word->finger_4), 2);
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	fc 01       	movw	r30, r24
    1372:	38 96       	adiw	r30, 0x08	; 8
    1374:	20 81       	ld	r18, Z
    1376:	31 81       	ldd	r19, Z+1	; 0x01
    1378:	ef 81       	ldd	r30, Y+7	; 0x07
    137a:	f8 85       	ldd	r31, Y+8	; 0x08
    137c:	80 85       	ldd	r24, Z+8	; 0x08
    137e:	91 85       	ldd	r25, Z+9	; 0x09
    1380:	a9 01       	movw	r20, r18
    1382:	48 1b       	sub	r20, r24
    1384:	59 0b       	sbc	r21, r25
    1386:	ca 01       	movw	r24, r20
    1388:	cc 01       	movw	r24, r24
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	ca 01       	movw	r24, r20
    139c:	b9 01       	movw	r22, r18
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9c 01       	movw	r18, r24
    13a8:	ad 01       	movw	r20, r26
    13aa:	69 81       	ldd	r22, Y+1	; 0x01
    13ac:	7a 81       	ldd	r23, Y+2	; 0x02
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	ab 83       	std	Y+3, r26	; 0x03
    13c0:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[5] - word->tilt0), 2);
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	fc 01       	movw	r30, r24
    13c8:	3a 96       	adiw	r30, 0x0a	; 10
    13ca:	20 81       	ld	r18, Z
    13cc:	31 81       	ldd	r19, Z+1	; 0x01
    13ce:	ef 81       	ldd	r30, Y+7	; 0x07
    13d0:	f8 85       	ldd	r31, Y+8	; 0x08
    13d2:	82 85       	ldd	r24, Z+10	; 0x0a
    13d4:	93 85       	ldd	r25, Z+11	; 0x0b
    13d6:	a9 01       	movw	r20, r18
    13d8:	48 1b       	sub	r20, r24
    13da:	59 0b       	sbc	r21, r25
    13dc:	ca 01       	movw	r24, r20
    13de:	cc 01       	movw	r24, r24
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    13ec:	9b 01       	movw	r18, r22
    13ee:	ac 01       	movw	r20, r24
    13f0:	ca 01       	movw	r24, r20
    13f2:	b9 01       	movw	r22, r18
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9c 01       	movw	r18, r24
    13fe:	ad 01       	movw	r20, r26
    1400:	69 81       	ldd	r22, Y+1	; 0x01
    1402:	7a 81       	ldd	r23, Y+2	; 0x02
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	ab 83       	std	Y+3, r26	; 0x03
    1416:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[6] - word->tilt1), 2);
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	fc 01       	movw	r30, r24
    141e:	3c 96       	adiw	r30, 0x0c	; 12
    1420:	20 81       	ld	r18, Z
    1422:	31 81       	ldd	r19, Z+1	; 0x01
    1424:	ef 81       	ldd	r30, Y+7	; 0x07
    1426:	f8 85       	ldd	r31, Y+8	; 0x08
    1428:	84 85       	ldd	r24, Z+12	; 0x0c
    142a:	95 85       	ldd	r25, Z+13	; 0x0d
    142c:	a9 01       	movw	r20, r18
    142e:	48 1b       	sub	r20, r24
    1430:	59 0b       	sbc	r21, r25
    1432:	ca 01       	movw	r24, r20
    1434:	cc 01       	movw	r24, r24
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	ca 01       	movw	r24, r20
    1448:	b9 01       	movw	r22, r18
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9c 01       	movw	r18, r24
    1454:	ad 01       	movw	r20, r26
    1456:	69 81       	ldd	r22, Y+1	; 0x01
    1458:	7a 81       	ldd	r23, Y+2	; 0x02
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	ab 83       	std	Y+3, r26	; 0x03
    146c:	bc 83       	std	Y+4, r27	; 0x04

    return sqrt(distance);
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	ab 81       	ldd	r26, Y+3	; 0x03
    1474:	bc 81       	ldd	r27, Y+4	; 0x04
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <sqrt>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22

}
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	28 96       	adiw	r28, 0x08	; 8
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <GET_u8FindClosestSensor>:


// 2. Function to find the closest predefined sensor data
uint8_t GET_u8FindClosestSensor(word* words, uint16_* sensor_reads, uint8_t num_words) {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	2f 97       	sbiw	r28, 0x0f	; 15
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	9c 87       	std	Y+12, r25	; 0x0c
    14ae:	8b 87       	std	Y+11, r24	; 0x0b
    14b0:	7e 87       	std	Y+14, r23	; 0x0e
    14b2:	6d 87       	std	Y+13, r22	; 0x0d
    14b4:	4f 87       	std	Y+15, r20	; 0x0f

    uint8_t closest_index = 0;
    14b6:	1a 86       	std	Y+10, r1	; 0x0a

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    14be:	3c 85       	ldd	r19, Y+12	; 0x0c
    14c0:	b9 01       	movw	r22, r18
    14c2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <GET_float32CalculateDistance>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8e 83       	std	Y+6, r24	; 0x06
    14cc:	9f 83       	std	Y+7, r25	; 0x07
    14ce:	a8 87       	std	Y+8, r26	; 0x08
    14d0:	b9 87       	std	Y+9, r27	; 0x09

    for (uint8_t i = 1; i < num_words; i++) {
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	32 c0       	rjmp	.+100    	; 0x153c <GET_u8FindClosestSensor+0xa4>
        float32_t distance = GET_float32CalculateDistance(sensor_reads, &words[i]);
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9c 01       	movw	r18, r24
    14e0:	22 95       	swap	r18
    14e2:	32 95       	swap	r19
    14e4:	30 7f       	andi	r19, 0xF0	; 240
    14e6:	32 27       	eor	r19, r18
    14e8:	20 7f       	andi	r18, 0xF0	; 240
    14ea:	32 27       	eor	r19, r18
    14ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    14f0:	28 0f       	add	r18, r24
    14f2:	39 1f       	adc	r19, r25
    14f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f8:	b9 01       	movw	r22, r18
    14fa:	0e 94 f6 08 	call	0x11ec	; 0x11ec <GET_float32CalculateDistance>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	ab 83       	std	Y+3, r26	; 0x03
    1508:	bc 83       	std	Y+4, r27	; 0x04
        if (distance < min_distance) {
    150a:	69 81       	ldd	r22, Y+1	; 0x01
    150c:	7a 81       	ldd	r23, Y+2	; 0x02
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	2e 81       	ldd	r18, Y+6	; 0x06
    1514:	3f 81       	ldd	r19, Y+7	; 0x07
    1516:	48 85       	ldd	r20, Y+8	; 0x08
    1518:	59 85       	ldd	r21, Y+9	; 0x09
    151a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	54 f4       	brge	.+20     	; 0x1536 <GET_u8FindClosestSensor+0x9e>
            min_distance = distance;
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	ab 81       	ldd	r26, Y+3	; 0x03
    1528:	bc 81       	ldd	r27, Y+4	; 0x04
    152a:	8e 83       	std	Y+6, r24	; 0x06
    152c:	9f 83       	std	Y+7, r25	; 0x07
    152e:	a8 87       	std	Y+8, r26	; 0x08
    1530:	b9 87       	std	Y+9, r27	; 0x09
            closest_index = i;
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	8a 87       	std	Y+10, r24	; 0x0a

    uint8_t closest_index = 0;

    float32_t min_distance = GET_float32CalculateDistance(sensor_reads, &words[0]);

    for (uint8_t i = 1; i < num_words; i++) {
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1540:	98 17       	cp	r25, r24
    1542:	50 f2       	brcs	.-108    	; 0x14d8 <GET_u8FindClosestSensor+0x40>
            min_distance = distance;
            closest_index = i;
        }
    }

    return closest_index;
    1544:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1546:	2f 96       	adiw	r28, 0x0f	; 15
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <GET_vidGetWordAndSound>:


// Main Function 
void GET_vidGetWordAndSound(uint16_ * sensor_reads, uint8_t * word_location )
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <GET_vidGetWordAndSound+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <GET_vidGetWordAndSound+0x8>
    1560:	0f 92       	push	r0
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9b 83       	std	Y+3, r25	; 0x03
    1568:	8a 83       	std	Y+2, r24	; 0x02
    156a:	7d 83       	std	Y+5, r23	; 0x05
    156c:	6c 83       	std	Y+4, r22	; 0x04
	
uint8_t i = GET_u8FindClosestSensor(words, sensor_reads, TOTAL_NO_OF_WORDS-1);
    156e:	85 eb       	ldi	r24, 0xB5	; 181
    1570:	92 e0       	ldi	r25, 0x02	; 2
    1572:	2a 81       	ldd	r18, Y+2	; 0x02
    1574:	3b 81       	ldd	r19, Y+3	; 0x03
    1576:	b9 01       	movw	r22, r18
    1578:	45 e1       	ldi	r20, 0x15	; 21
    157a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GET_u8FindClosestSensor>
    157e:	89 83       	std	Y+1, r24	; 0x01

word_location[0] = words[i].sentence;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	82 95       	swap	r24
    1588:	92 95       	swap	r25
    158a:	90 7f       	andi	r25, 0xF0	; 240
    158c:	98 27       	eor	r25, r24
    158e:	80 7f       	andi	r24, 0xF0	; 240
    1590:	98 27       	eor	r25, r24
    1592:	fc 01       	movw	r30, r24
    1594:	ed 53       	subi	r30, 0x3D	; 61
    1596:	fd 4f       	sbci	r31, 0xFD	; 253
    1598:	80 81       	ld	r24, Z
    159a:	ec 81       	ldd	r30, Y+4	; 0x04
    159c:	fd 81       	ldd	r31, Y+5	; 0x05
    159e:	80 83       	st	Z, r24
word_location[1] = words[i].word;
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	dc 01       	movw	r26, r24
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	82 95       	swap	r24
    15b0:	92 95       	swap	r25
    15b2:	90 7f       	andi	r25, 0xF0	; 240
    15b4:	98 27       	eor	r25, r24
    15b6:	80 7f       	andi	r24, 0xF0	; 240
    15b8:	98 27       	eor	r25, r24
    15ba:	fc 01       	movw	r30, r24
    15bc:	ec 53       	subi	r30, 0x3C	; 60
    15be:	fd 4f       	sbci	r31, 0xFD	; 253
    15c0:	80 81       	ld	r24, Z
    15c2:	8c 93       	st	X, r24

}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>:
#include"../../libraries/bit_math.h"
#include "../global_interrupt_driver/global_interrupt_int.h"
#include "../global_interrupt_driver/global_interrupt_register.h"

void GLOBAL_INTERRUPT_vidGlobalInterruptEnable(uint8_t mode)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	00 d0       	rcall	.+0      	; 0x15da <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x6>
    15da:	0f 92       	push	r0
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3b 83       	std	Y+3, r19	; 0x03
    15ea:	2a 83       	std	Y+2, r18	; 0x02
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f0       	breq	.+26     	; 0x160e <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x3a>
    15f4:	2a 81       	ldd	r18, Y+2	; 0x02
    15f6:	3b 81       	ldd	r19, Y+3	; 0x03
    15f8:	21 30       	cpi	r18, 0x01	; 1
    15fa:	31 05       	cpc	r19, r1
    15fc:	79 f4       	brne	.+30     	; 0x161c <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
	{
		case ENABLED:
			SET_BIT(SREG,7);
    15fe:	af e5       	ldi	r26, 0x5F	; 95
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ef e5       	ldi	r30, 0x5F	; 95
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 68       	ori	r24, 0x80	; 128
    160a:	8c 93       	st	X, r24
    160c:	07 c0       	rjmp	.+14     	; 0x161c <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
			break;
		case DISABLED:
			CLR_BIT(SREG,7);
    160e:	af e5       	ldi	r26, 0x5F	; 95
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e5       	ldi	r30, 0x5F	; 95
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 77       	andi	r24, 0x7F	; 127
    161a:	8c 93       	st	X, r24
			break;
	}
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <DIO_u8SetPinMode>:
#include"../../libraries/bit_math.h"
#include"dio_register.h"
#include"dio_int.h"

uint8_t DIO_u8SetPinMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <DIO_u8SetPinMode+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <DIO_u8SetPinMode+0x8>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <DIO_u8SetPinMode+0xa>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6b 83       	std	Y+3, r22	; 0x03
    163a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    163c:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3e 83       	std	Y+6, r19	; 0x06
    1646:	2d 83       	std	Y+5, r18	; 0x05
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <DIO_u8SetPinMode+0x2c>
    1652:	49 c0       	rjmp	.+146    	; 0x16e6 <DIO_u8SetPinMode+0xbe>
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	2c f4       	brge	.+10     	; 0x1668 <DIO_u8SetPinMode+0x40>
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	71 f0       	breq	.+28     	; 0x1682 <DIO_u8SetPinMode+0x5a>
    1666:	d5 c0       	rjmp	.+426    	; 0x1812 <DIO_u8SetPinMode+0x1ea>
    1668:	2d 81       	ldd	r18, Y+5	; 0x05
    166a:	3e 81       	ldd	r19, Y+6	; 0x06
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <DIO_u8SetPinMode+0x4c>
    1672:	6b c0       	rjmp	.+214    	; 0x174a <DIO_u8SetPinMode+0x122>
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	91 05       	cpc	r25, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <DIO_u8SetPinMode+0x58>
    167e:	97 c0       	rjmp	.+302    	; 0x17ae <DIO_u8SetPinMode+0x186>
    1680:	c8 c0       	rjmp	.+400    	; 0x1812 <DIO_u8SetPinMode+0x1ea>
		{
		case PORT_A:
			if(mode==INPUT)CLR_BIT(DDRA_REG,pin_no);
    1682:	8c 81       	ldd	r24, Y+4	; 0x04
    1684:	88 23       	and	r24, r24
    1686:	a9 f4       	brne	.+42     	; 0x16b2 <DIO_u8SetPinMode+0x8a>
    1688:	aa e3       	ldi	r26, 0x3A	; 58
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ea e3       	ldi	r30, 0x3A	; 58
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_u8SetPinMode+0x7e>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_u8SetPinMode+0x7a>
    16aa:	80 95       	com	r24
    16ac:	84 23       	and	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	b2 c0       	rjmp	.+356    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRA_REG,pin_no);
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	a1 f4       	brne	.+40     	; 0x16e0 <DIO_u8SetPinMode+0xb8>
    16b8:	aa e3       	ldi	r26, 0x3A	; 58
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ea e3       	ldi	r30, 0x3A	; 58
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_u8SetPinMode+0xae>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_u8SetPinMode+0xaa>
    16da:	84 2b       	or	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	9b c0       	rjmp	.+310    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	98 c0       	rjmp	.+304    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_B:
			if(mode==INPUT)CLR_BIT(DDRB_REG,pin_no);
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	88 23       	and	r24, r24
    16ea:	a9 f4       	brne	.+42     	; 0x1716 <DIO_u8SetPinMode+0xee>
    16ec:	a7 e3       	ldi	r26, 0x37	; 55
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e7 e3       	ldi	r30, 0x37	; 55
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_u8SetPinMode+0xe2>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_u8SetPinMode+0xde>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	80 c0       	rjmp	.+256    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRB_REG,pin_no);
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	a1 f4       	brne	.+40     	; 0x1744 <DIO_u8SetPinMode+0x11c>
    171c:	a7 e3       	ldi	r26, 0x37	; 55
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e7 e3       	ldi	r30, 0x37	; 55
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_u8SetPinMode+0x112>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_u8SetPinMode+0x10e>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	69 c0       	rjmp	.+210    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	66 c0       	rjmp	.+204    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_C:
			if(mode==INPUT)CLR_BIT(DDRC_REG,pin_no);
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	88 23       	and	r24, r24
    174e:	a9 f4       	brne	.+42     	; 0x177a <DIO_u8SetPinMode+0x152>
    1750:	a4 e3       	ldi	r26, 0x34	; 52
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e4 e3       	ldi	r30, 0x34	; 52
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8SetPinMode+0x146>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8SetPinMode+0x142>
    1772:	80 95       	com	r24
    1774:	84 23       	and	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	4e c0       	rjmp	.+156    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRC_REG,pin_no);
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	a1 f4       	brne	.+40     	; 0x17a8 <DIO_u8SetPinMode+0x180>
    1780:	a4 e3       	ldi	r26, 0x34	; 52
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e4 e3       	ldi	r30, 0x34	; 52
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_u8SetPinMode+0x176>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <DIO_u8SetPinMode+0x172>
    17a2:	84 2b       	or	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	37 c0       	rjmp	.+110    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	34 c0       	rjmp	.+104    	; 0x1816 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_D:
			if(mode==INPUT)CLR_BIT(DDRD_REG,pin_no);
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	88 23       	and	r24, r24
    17b2:	a9 f4       	brne	.+42     	; 0x17de <DIO_u8SetPinMode+0x1b6>
    17b4:	a1 e3       	ldi	r26, 0x31	; 49
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e1 e3       	ldi	r30, 0x31	; 49
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	48 2f       	mov	r20, r24
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	02 2e       	mov	r0, r18
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_u8SetPinMode+0x1aa>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	0a 94       	dec	r0
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_u8SetPinMode+0x1a6>
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	8c 93       	st	X, r24
    17dc:	1c c0       	rjmp	.+56     	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRD_REG,pin_no);
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	a1 f4       	brne	.+40     	; 0x180c <DIO_u8SetPinMode+0x1e4>
    17e4:	a1 e3       	ldi	r26, 0x31	; 49
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e1 e3       	ldi	r30, 0x31	; 49
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_u8SetPinMode+0x1da>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_u8SetPinMode+0x1d6>
    1806:	84 2b       	or	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_u8SetPinMode+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	26 96       	adiw	r28, 0x06	; 6
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_u8SetPinValue>:
uint8_t DIO_u8SetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t value)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_u8SetPinValue+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_u8SetPinValue+0x8>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_u8SetPinValue+0xa>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	6b 83       	std	Y+3, r22	; 0x03
    183c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    183e:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3e 83       	std	Y+6, r19	; 0x06
    1848:	2d 83       	std	Y+5, r18	; 0x05
    184a:	8d 81       	ldd	r24, Y+5	; 0x05
    184c:	9e 81       	ldd	r25, Y+6	; 0x06
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <DIO_u8SetPinValue+0x2c>
    1854:	49 c0       	rjmp	.+146    	; 0x18e8 <DIO_u8SetPinValue+0xbe>
    1856:	2d 81       	ldd	r18, Y+5	; 0x05
    1858:	3e 81       	ldd	r19, Y+6	; 0x06
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <DIO_u8SetPinValue+0x40>
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	71 f0       	breq	.+28     	; 0x1884 <DIO_u8SetPinValue+0x5a>
    1868:	d5 c0       	rjmp	.+426    	; 0x1a14 <DIO_u8SetPinValue+0x1ea>
    186a:	2d 81       	ldd	r18, Y+5	; 0x05
    186c:	3e 81       	ldd	r19, Y+6	; 0x06
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <DIO_u8SetPinValue+0x4c>
    1874:	6b c0       	rjmp	.+214    	; 0x194c <DIO_u8SetPinValue+0x122>
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <DIO_u8SetPinValue+0x58>
    1880:	97 c0       	rjmp	.+302    	; 0x19b0 <DIO_u8SetPinValue+0x186>
    1882:	c8 c0       	rjmp	.+400    	; 0x1a14 <DIO_u8SetPinValue+0x1ea>
		{
		case PORT_A:
			if(value==LOW)CLR_BIT(PORTA_REG,pin_no);
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	88 23       	and	r24, r24
    1888:	a9 f4       	brne	.+42     	; 0x18b4 <DIO_u8SetPinValue+0x8a>
    188a:	ab e3       	ldi	r26, 0x3B	; 59
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e3       	ldi	r30, 0x3B	; 59
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_u8SetPinValue+0x7e>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_u8SetPinValue+0x7a>
    18ac:	80 95       	com	r24
    18ae:	84 23       	and	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	b2 c0       	rjmp	.+356    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTA_REG,pin_no);
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	81 30       	cpi	r24, 0x01	; 1
    18b8:	a1 f4       	brne	.+40     	; 0x18e2 <DIO_u8SetPinValue+0xb8>
    18ba:	ab e3       	ldi	r26, 0x3B	; 59
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	eb e3       	ldi	r30, 0x3B	; 59
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_u8SetPinValue+0xae>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_u8SetPinValue+0xaa>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	9b c0       	rjmp	.+310    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	98 c0       	rjmp	.+304    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_B:
			if(value==LOW)CLR_BIT(PORTB_REG,pin_no);
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	88 23       	and	r24, r24
    18ec:	a9 f4       	brne	.+42     	; 0x1918 <DIO_u8SetPinValue+0xee>
    18ee:	a8 e3       	ldi	r26, 0x38	; 56
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e8 e3       	ldi	r30, 0x38	; 56
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_u8SetPinValue+0xe2>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_u8SetPinValue+0xde>
    1910:	80 95       	com	r24
    1912:	84 23       	and	r24, r20
    1914:	8c 93       	st	X, r24
    1916:	80 c0       	rjmp	.+256    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTB_REG,pin_no);
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	a1 f4       	brne	.+40     	; 0x1946 <DIO_u8SetPinValue+0x11c>
    191e:	a8 e3       	ldi	r26, 0x38	; 56
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e8 e3       	ldi	r30, 0x38	; 56
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_u8SetPinValue+0x112>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_u8SetPinValue+0x10e>
    1940:	84 2b       	or	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	69 c0       	rjmp	.+210    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	66 c0       	rjmp	.+204    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_C:
			if(value==LOW)CLR_BIT(PORTC_REG,pin_no);
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	88 23       	and	r24, r24
    1950:	a9 f4       	brne	.+42     	; 0x197c <DIO_u8SetPinValue+0x152>
    1952:	a5 e3       	ldi	r26, 0x35	; 53
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e3       	ldi	r30, 0x35	; 53
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_u8SetPinValue+0x146>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_u8SetPinValue+0x142>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	4e c0       	rjmp	.+156    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTC_REG,pin_no);
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	a1 f4       	brne	.+40     	; 0x19aa <DIO_u8SetPinValue+0x180>
    1982:	a5 e3       	ldi	r26, 0x35	; 53
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_u8SetPinValue+0x176>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <DIO_u8SetPinValue+0x172>
    19a4:	84 2b       	or	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	37 c0       	rjmp	.+110    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	34 c0       	rjmp	.+104    	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_D:
			if(value==LOW)CLR_BIT(PORTD_REG,pin_no);
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	88 23       	and	r24, r24
    19b4:	a9 f4       	brne	.+42     	; 0x19e0 <DIO_u8SetPinValue+0x1b6>
    19b6:	a2 e3       	ldi	r26, 0x32	; 50
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e2 e3       	ldi	r30, 0x32	; 50
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <DIO_u8SetPinValue+0x1aa>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <DIO_u8SetPinValue+0x1a6>
    19d8:	80 95       	com	r24
    19da:	84 23       	and	r24, r20
    19dc:	8c 93       	st	X, r24
    19de:	1c c0       	rjmp	.+56     	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTD_REG,pin_no);
    19e0:	8c 81       	ldd	r24, Y+4	; 0x04
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	a1 f4       	brne	.+40     	; 0x1a0e <DIO_u8SetPinValue+0x1e4>
    19e6:	a2 e3       	ldi	r26, 0x32	; 50
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e2 e3       	ldi	r30, 0x32	; 50
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_u8SetPinValue+0x1da>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_u8SetPinValue+0x1d6>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_u8SetPinValue+0x1ee>
		break;
		default : error_status = E_NOK; break;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a1a:	26 96       	adiw	r28, 0x06	; 6
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <DIO_u8GetPinValue>:
uint8_t DIO_u8GetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	27 97       	sbiw	r28, 0x07	; 7
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	8a 83       	std	Y+2, r24	; 0x02
    1a42:	6b 83       	std	Y+3, r22	; 0x03
    1a44:	5d 83       	std	Y+5, r21	; 0x05
    1a46:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1a48:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	88 30       	cpi	r24, 0x08	; 8
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <DIO_u8GetPinValue+0x26>
    1a50:	74 c0       	rjmp	.+232    	; 0x1b3a <DIO_u8GetPinValue+0x10e>
	{
		switch(port_id)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3f 83       	std	Y+7, r19	; 0x07
    1a5a:	2e 83       	std	Y+6, r18	; 0x06
    1a5c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a5e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a60:	41 30       	cpi	r20, 0x01	; 1
    1a62:	51 05       	cpc	r21, r1
    1a64:	59 f1       	breq	.+86     	; 0x1abc <DIO_u8GetPinValue+0x90>
    1a66:	8e 81       	ldd	r24, Y+6	; 0x06
    1a68:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6a:	82 30       	cpi	r24, 0x02	; 2
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	34 f4       	brge	.+12     	; 0x1a7c <DIO_u8GetPinValue+0x50>
    1a70:	2e 81       	ldd	r18, Y+6	; 0x06
    1a72:	3f 81       	ldd	r19, Y+7	; 0x07
    1a74:	21 15       	cp	r18, r1
    1a76:	31 05       	cpc	r19, r1
    1a78:	69 f0       	breq	.+26     	; 0x1a94 <DIO_u8GetPinValue+0x68>
    1a7a:	5c c0       	rjmp	.+184    	; 0x1b34 <DIO_u8GetPinValue+0x108>
    1a7c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a7e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a80:	42 30       	cpi	r20, 0x02	; 2
    1a82:	51 05       	cpc	r21, r1
    1a84:	79 f1       	breq	.+94     	; 0x1ae4 <DIO_u8GetPinValue+0xb8>
    1a86:	8e 81       	ldd	r24, Y+6	; 0x06
    1a88:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8a:	83 30       	cpi	r24, 0x03	; 3
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <DIO_u8GetPinValue+0x66>
    1a90:	3d c0       	rjmp	.+122    	; 0x1b0c <DIO_u8GetPinValue+0xe0>
    1a92:	50 c0       	rjmp	.+160    	; 0x1b34 <DIO_u8GetPinValue+0x108>
		{
		case PORT_A: *value = GET_BIT(PINA_REG,pin_no); break;
    1a94:	e9 e3       	ldi	r30, 0x39	; 57
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_u8GetPinValue+0x80>
    1aa8:	55 95       	asr	r21
    1aaa:	47 95       	ror	r20
    1aac:	8a 95       	dec	r24
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_u8GetPinValue+0x7c>
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab8:	80 83       	st	Z, r24
    1aba:	41 c0       	rjmp	.+130    	; 0x1b3e <DIO_u8GetPinValue+0x112>
		case PORT_B: *value = GET_BIT(PINB_REG,pin_no); break;
    1abc:	e6 e3       	ldi	r30, 0x36	; 54
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	a9 01       	movw	r20, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <DIO_u8GetPinValue+0xa8>
    1ad0:	55 95       	asr	r21
    1ad2:	47 95       	ror	r20
    1ad4:	8a 95       	dec	r24
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <DIO_u8GetPinValue+0xa4>
    1ad8:	ca 01       	movw	r24, r20
    1ada:	81 70       	andi	r24, 0x01	; 1
    1adc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ade:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae0:	80 83       	st	Z, r24
    1ae2:	2d c0       	rjmp	.+90     	; 0x1b3e <DIO_u8GetPinValue+0x112>
		case PORT_C: *value = GET_BIT(PINC_REG,pin_no); break;
    1ae4:	e3 e3       	ldi	r30, 0x33	; 51
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a9 01       	movw	r20, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <DIO_u8GetPinValue+0xd0>
    1af8:	55 95       	asr	r21
    1afa:	47 95       	ror	r20
    1afc:	8a 95       	dec	r24
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <DIO_u8GetPinValue+0xcc>
    1b00:	ca 01       	movw	r24, r20
    1b02:	81 70       	andi	r24, 0x01	; 1
    1b04:	ec 81       	ldd	r30, Y+4	; 0x04
    1b06:	fd 81       	ldd	r31, Y+5	; 0x05
    1b08:	80 83       	st	Z, r24
    1b0a:	19 c0       	rjmp	.+50     	; 0x1b3e <DIO_u8GetPinValue+0x112>
		case PORT_D: *value = GET_BIT(PIND_REG,pin_no); break;
    1b0c:	e0 e3       	ldi	r30, 0x30	; 48
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a9 01       	movw	r20, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_u8GetPinValue+0xf8>
    1b20:	55 95       	asr	r21
    1b22:	47 95       	ror	r20
    1b24:	8a 95       	dec	r24
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_u8GetPinValue+0xf4>
    1b28:	ca 01       	movw	r24, r20
    1b2a:	81 70       	andi	r24, 0x01	; 1
    1b2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b30:	80 83       	st	Z, r24
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <DIO_u8GetPinValue+0x112>
		default : error_status = E_NOK; break;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <DIO_u8GetPinValue+0x112>
		}
	}else error_status = E_NOK;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b40:	27 96       	adiw	r28, 0x07	; 7
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <DIO_u8IsPinOutPut>:
uint8_t DIO_u8IsPinOutPut(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	27 97       	sbiw	r28, 0x07	; 7
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	6b 83       	std	Y+3, r22	; 0x03
    1b6a:	5d 83       	std	Y+5, r21	; 0x05
    1b6c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	88 30       	cpi	r24, 0x08	; 8
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <DIO_u8IsPinOutPut+0x26>
    1b76:	74 c0       	rjmp	.+232    	; 0x1c60 <DIO_u8IsPinOutPut+0x10e>
		{
			switch(port_id)
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3f 83       	std	Y+7, r19	; 0x07
    1b80:	2e 83       	std	Y+6, r18	; 0x06
    1b82:	4e 81       	ldd	r20, Y+6	; 0x06
    1b84:	5f 81       	ldd	r21, Y+7	; 0x07
    1b86:	41 30       	cpi	r20, 0x01	; 1
    1b88:	51 05       	cpc	r21, r1
    1b8a:	59 f1       	breq	.+86     	; 0x1be2 <DIO_u8IsPinOutPut+0x90>
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	91 05       	cpc	r25, r1
    1b94:	34 f4       	brge	.+12     	; 0x1ba2 <DIO_u8IsPinOutPut+0x50>
    1b96:	2e 81       	ldd	r18, Y+6	; 0x06
    1b98:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9a:	21 15       	cp	r18, r1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	69 f0       	breq	.+26     	; 0x1bba <DIO_u8IsPinOutPut+0x68>
    1ba0:	5c c0       	rjmp	.+184    	; 0x1c5a <DIO_u8IsPinOutPut+0x108>
    1ba2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba6:	42 30       	cpi	r20, 0x02	; 2
    1ba8:	51 05       	cpc	r21, r1
    1baa:	79 f1       	breq	.+94     	; 0x1c0a <DIO_u8IsPinOutPut+0xb8>
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <DIO_u8IsPinOutPut+0x66>
    1bb6:	3d c0       	rjmp	.+122    	; 0x1c32 <DIO_u8IsPinOutPut+0xe0>
    1bb8:	50 c0       	rjmp	.+160    	; 0x1c5a <DIO_u8IsPinOutPut+0x108>
			{
			case PORT_A: *value = GET_BIT(DDRA_REG,pin_no); break;
    1bba:	ea e3       	ldi	r30, 0x3A	; 58
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a9 01       	movw	r20, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_u8IsPinOutPut+0x80>
    1bce:	55 95       	asr	r21
    1bd0:	47 95       	ror	r20
    1bd2:	8a 95       	dec	r24
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_u8IsPinOutPut+0x7c>
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	81 70       	andi	r24, 0x01	; 1
    1bda:	ec 81       	ldd	r30, Y+4	; 0x04
    1bdc:	fd 81       	ldd	r31, Y+5	; 0x05
    1bde:	80 83       	st	Z, r24
    1be0:	41 c0       	rjmp	.+130    	; 0x1c64 <DIO_u8IsPinOutPut+0x112>
			case PORT_B: *value = GET_BIT(DDRB_REG,pin_no); break;
    1be2:	e7 e3       	ldi	r30, 0x37	; 55
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_u8IsPinOutPut+0xa8>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_u8IsPinOutPut+0xa4>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	ec 81       	ldd	r30, Y+4	; 0x04
    1c04:	fd 81       	ldd	r31, Y+5	; 0x05
    1c06:	80 83       	st	Z, r24
    1c08:	2d c0       	rjmp	.+90     	; 0x1c64 <DIO_u8IsPinOutPut+0x112>
			case PORT_C: *value = GET_BIT(DDRC_REG,pin_no); break;
    1c0a:	e4 e3       	ldi	r30, 0x34	; 52
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	88 2f       	mov	r24, r24
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_u8IsPinOutPut+0xd0>
    1c1e:	55 95       	asr	r21
    1c20:	47 95       	ror	r20
    1c22:	8a 95       	dec	r24
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_u8IsPinOutPut+0xcc>
    1c26:	ca 01       	movw	r24, r20
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2e:	80 83       	st	Z, r24
    1c30:	19 c0       	rjmp	.+50     	; 0x1c64 <DIO_u8IsPinOutPut+0x112>
			case PORT_D: *value = GET_BIT(DDRD_REG,pin_no); break;
    1c32:	e1 e3       	ldi	r30, 0x31	; 49
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <DIO_u8IsPinOutPut+0xf8>
    1c46:	55 95       	asr	r21
    1c48:	47 95       	ror	r20
    1c4a:	8a 95       	dec	r24
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <DIO_u8IsPinOutPut+0xf4>
    1c4e:	ca 01       	movw	r24, r20
    1c50:	81 70       	andi	r24, 0x01	; 1
    1c52:	ec 81       	ldd	r30, Y+4	; 0x04
    1c54:	fd 81       	ldd	r31, Y+5	; 0x05
    1c56:	80 83       	st	Z, r24
    1c58:	05 c0       	rjmp	.+10     	; 0x1c64 <DIO_u8IsPinOutPut+0x112>
			default : error_status = E_NOK; break;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_u8IsPinOutPut+0x112>
			}
		}else error_status = E_NOK;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c66:	27 96       	adiw	r28, 0x07	; 7
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <DIO_u8SetPullUpMode>:
uint8_t DIO_u8SetPullUpMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	2e 97       	sbiw	r28, 0x0e	; 14
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
    1c90:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1c92:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <DIO_u8SetPullUpMode+0x24>
    1c9a:	db c0       	rjmp	.+438    	; 0x1e52 <DIO_u8SetPullUpMode+0x1da>
	{
	switch(port_id)
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	3e 87       	std	Y+14, r19	; 0x0e
    1ca4:	2d 87       	std	Y+13, r18	; 0x0d
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_u8SetPullUpMode+0x3a>
    1cb0:	44 c0       	rjmp	.+136    	; 0x1d3a <DIO_u8SetPullUpMode+0xc2>
    1cb2:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cb4:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cb6:	22 30       	cpi	r18, 0x02	; 2
    1cb8:	31 05       	cpc	r19, r1
    1cba:	2c f4       	brge	.+10     	; 0x1cc6 <DIO_u8SetPullUpMode+0x4e>
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	71 f0       	breq	.+28     	; 0x1ce0 <DIO_u8SetPullUpMode+0x68>
    1cc4:	c3 c0       	rjmp	.+390    	; 0x1e4c <DIO_u8SetPullUpMode+0x1d4>
    1cc6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1cc8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1cca:	22 30       	cpi	r18, 0x02	; 2
    1ccc:	31 05       	cpc	r19, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <DIO_u8SetPullUpMode+0x5a>
    1cd0:	62 c0       	rjmp	.+196    	; 0x1d96 <DIO_u8SetPullUpMode+0x11e>
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	83 30       	cpi	r24, 0x03	; 3
    1cd8:	91 05       	cpc	r25, r1
    1cda:	09 f4       	brne	.+2      	; 0x1cde <DIO_u8SetPullUpMode+0x66>
    1cdc:	89 c0       	rjmp	.+274    	; 0x1df0 <DIO_u8SetPullUpMode+0x178>
    1cde:	b6 c0       	rjmp	.+364    	; 0x1e4c <DIO_u8SetPullUpMode+0x1d4>
	{
	case PORT_A: mode==Enabled?SET_BIT(PORTA_REG,pin_no):CLR_BIT(PORTA_REG,pin_no); break;
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	a9 f4       	brne	.+42     	; 0x1d10 <DIO_u8SetPullUpMode+0x98>
    1ce6:	ab e3       	ldi	r26, 0x3B	; 59
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	eb e3       	ldi	r30, 0x3B	; 59
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_u8SetPullUpMode+0x8c>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_u8SetPullUpMode+0x88>
    1d08:	84 2b       	or	r24, r20
    1d0a:	8c 93       	st	X, r24
    1d0c:	9c 91       	ld	r25, X
    1d0e:	a3 c0       	rjmp	.+326    	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
    1d10:	ab e3       	ldi	r26, 0x3B	; 59
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	eb e3       	ldi	r30, 0x3B	; 59
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_u8SetPullUpMode+0xb4>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	2a 95       	dec	r18
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_u8SetPullUpMode+0xb0>
    1d30:	80 95       	com	r24
    1d32:	84 23       	and	r24, r20
    1d34:	8c 93       	st	X, r24
    1d36:	2c 91       	ld	r18, X
    1d38:	8e c0       	rjmp	.+284    	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
	case PORT_B: mode==Enabled?SET_BIT(PORTB_REG,pin_no):CLR_BIT(PORTB_REG,pin_no); break;
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	a9 f4       	brne	.+42     	; 0x1d6a <DIO_u8SetPullUpMode+0xf2>
    1d40:	a8 e3       	ldi	r26, 0x38	; 56
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_u8SetPullUpMode+0xe6>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_u8SetPullUpMode+0xe2>
    1d62:	84 2b       	or	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	3c 91       	ld	r19, X
    1d68:	76 c0       	rjmp	.+236    	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
    1d6a:	a8 e3       	ldi	r26, 0x38	; 56
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e8 e3       	ldi	r30, 0x38	; 56
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <DIO_u8SetPullUpMode+0x110>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <DIO_u8SetPullUpMode+0x10c>
    1d8c:	80 95       	com	r24
    1d8e:	84 23       	and	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	8c 91       	ld	r24, X
    1d94:	60 c0       	rjmp	.+192    	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
	case PORT_C: mode==Enabled?SET_BIT(PORTC_REG,pin_no):CLR_BIT(PORTC_REG,pin_no); break;
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	a9 f4       	brne	.+42     	; 0x1dc6 <DIO_u8SetPullUpMode+0x14e>
    1d9c:	a5 e3       	ldi	r26, 0x35	; 53
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e5 e3       	ldi	r30, 0x35	; 53
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_u8SetPullUpMode+0x142>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_u8SetPullUpMode+0x13e>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	9c 91       	ld	r25, X
    1dc4:	48 c0       	rjmp	.+144    	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
    1dc6:	a5 e3       	ldi	r26, 0x35	; 53
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e5 e3       	ldi	r30, 0x35	; 53
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_u8SetPullUpMode+0x16a>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	2a 95       	dec	r18
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <DIO_u8SetPullUpMode+0x166>
    1de6:	80 95       	com	r24
    1de8:	84 23       	and	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	2c 91       	ld	r18, X
    1dee:	33 c0       	rjmp	.+102    	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
	case PORT_D: mode==Enabled?SET_BIT(PORTD_REG,pin_no):CLR_BIT(PORTD_REG,pin_no); break;
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	a9 f4       	brne	.+42     	; 0x1e20 <DIO_u8SetPullUpMode+0x1a8>
    1df6:	a2 e3       	ldi	r26, 0x32	; 50
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e2 e3       	ldi	r30, 0x32	; 50
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_u8SetPullUpMode+0x19c>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <DIO_u8SetPullUpMode+0x198>
    1e18:	84 2b       	or	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	3c 91       	ld	r19, X
    1e1e:	1b c0       	rjmp	.+54     	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
    1e20:	a2 e3       	ldi	r26, 0x32	; 50
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e2 e3       	ldi	r30, 0x32	; 50
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	48 2f       	mov	r20, r24
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	02 2e       	mov	r0, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <DIO_u8SetPullUpMode+0x1c6>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	0a 94       	dec	r0
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <DIO_u8SetPullUpMode+0x1c2>
    1e42:	80 95       	com	r24
    1e44:	84 23       	and	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	8c 91       	ld	r24, X
    1e4a:	05 c0       	rjmp	.+10     	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
	default : error_status = E_NOK; break;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <DIO_u8SetPullUpMode+0x1de>
	}
	}else error_status=E_NOK;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e58:	2e 96       	adiw	r28, 0x0e	; 14
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <DIO_u8SetPortMode>:

uint8_t DIO_u8SetPortMode(uint8_t port_id,uint8_t mode)
{
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <DIO_u8SetPortMode+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <DIO_u8SetPortMode+0x8>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1e7c:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	3d 83       	std	Y+5, r19	; 0x05
    1e86:	2c 83       	std	Y+4, r18	; 0x04
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	91 05       	cpc	r25, r1
    1e90:	d1 f0       	breq	.+52     	; 0x1ec6 <DIO_u8SetPortMode+0x5c>
    1e92:	2c 81       	ldd	r18, Y+4	; 0x04
    1e94:	3d 81       	ldd	r19, Y+5	; 0x05
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <DIO_u8SetPortMode+0x3c>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <DIO_u8SetPortMode+0x52>
    1ea4:	1f c0       	rjmp	.+62     	; 0x1ee4 <DIO_u8SetPortMode+0x7a>
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <DIO_u8SetPortMode+0x66>
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	81 f0       	breq	.+32     	; 0x1eda <DIO_u8SetPortMode+0x70>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <DIO_u8SetPortMode+0x7a>
	{
	case PORT_A: DDRA_REG = mode; break;
    1ebc:	ea e3       	ldi	r30, 0x3A	; 58
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	80 83       	st	Z, r24
    1ec4:	11 c0       	rjmp	.+34     	; 0x1ee8 <DIO_u8SetPortMode+0x7e>
	case PORT_B: DDRB_REG = mode; break;
    1ec6:	e7 e3       	ldi	r30, 0x37	; 55
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	80 83       	st	Z, r24
    1ece:	0c c0       	rjmp	.+24     	; 0x1ee8 <DIO_u8SetPortMode+0x7e>
	case PORT_C: DDRC_REG = mode; break;
    1ed0:	e4 e3       	ldi	r30, 0x34	; 52
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	80 83       	st	Z, r24
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <DIO_u8SetPortMode+0x7e>
	case PORT_D: DDRD_REG = mode; break;
    1eda:	e1 e3       	ldi	r30, 0x31	; 49
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	80 83       	st	Z, r24
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_u8SetPortMode+0x7e>
	default : error_status = E_NOK; break;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <DIO_u8SetPortValue>:
uint8_t DIO_u8SetPortValue(uint8_t port_id,uint8_t value)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <DIO_u8SetPortValue+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <DIO_u8SetPortValue+0x8>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8a 83       	std	Y+2, r24	; 0x02
    1f0a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1f0c:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3d 83       	std	Y+5, r19	; 0x05
    1f16:	2c 83       	std	Y+4, r18	; 0x04
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	d1 f0       	breq	.+52     	; 0x1f56 <DIO_u8SetPortValue+0x5c>
    1f22:	2c 81       	ldd	r18, Y+4	; 0x04
    1f24:	3d 81       	ldd	r19, Y+5	; 0x05
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <DIO_u8SetPortValue+0x3c>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <DIO_u8SetPortValue+0x52>
    1f34:	1f c0       	rjmp	.+62     	; 0x1f74 <DIO_u8SetPortValue+0x7a>
    1f36:	2c 81       	ldd	r18, Y+4	; 0x04
    1f38:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <DIO_u8SetPortValue+0x66>
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	81 f0       	breq	.+32     	; 0x1f6a <DIO_u8SetPortValue+0x70>
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A: PORTA_REG = value; break;
    1f4c:	eb e3       	ldi	r30, 0x3B	; 59
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	80 83       	st	Z, r24
    1f54:	11 c0       	rjmp	.+34     	; 0x1f78 <DIO_u8SetPortValue+0x7e>
		case PORT_B: PORTB_REG = value; break;
    1f56:	e8 e3       	ldi	r30, 0x38	; 56
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	80 83       	st	Z, r24
    1f5e:	0c c0       	rjmp	.+24     	; 0x1f78 <DIO_u8SetPortValue+0x7e>
		case PORT_C: PORTC_REG = value; break;
    1f60:	e5 e3       	ldi	r30, 0x35	; 53
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	80 83       	st	Z, r24
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <DIO_u8SetPortValue+0x7e>
		case PORT_D: PORTD_REG = value; break;
    1f6a:	e2 e3       	ldi	r30, 0x32	; 50
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	80 83       	st	Z, r24
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_u8SetPortValue+0x7e>
		default : error_status = E_NOK; break;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <DIO_u8GetPortValue>:
uint8_t DIO_u8GetPortValue(uint8_t port_id,uint8_t * value)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <DIO_u8GetPortValue+0x6>
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <DIO_u8GetPortValue+0x8>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <DIO_u8GetPortValue+0xa>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	8a 83       	std	Y+2, r24	; 0x02
    1f9a:	7c 83       	std	Y+4, r23	; 0x04
    1f9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	3e 83       	std	Y+6, r19	; 0x06
    1fa8:	2d 83       	std	Y+5, r18	; 0x05
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	e1 f0       	breq	.+56     	; 0x1fec <DIO_u8GetPortValue+0x62>
    1fb4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb8:	22 30       	cpi	r18, 0x02	; 2
    1fba:	31 05       	cpc	r19, r1
    1fbc:	2c f4       	brge	.+10     	; 0x1fc8 <DIO_u8GetPortValue+0x3e>
    1fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	61 f0       	breq	.+24     	; 0x1fde <DIO_u8GetPortValue+0x54>
    1fc6:	27 c0       	rjmp	.+78     	; 0x2016 <DIO_u8GetPortValue+0x8c>
    1fc8:	2d 81       	ldd	r18, Y+5	; 0x05
    1fca:	3e 81       	ldd	r19, Y+6	; 0x06
    1fcc:	22 30       	cpi	r18, 0x02	; 2
    1fce:	31 05       	cpc	r19, r1
    1fd0:	a1 f0       	breq	.+40     	; 0x1ffa <DIO_u8GetPortValue+0x70>
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd6:	83 30       	cpi	r24, 0x03	; 3
    1fd8:	91 05       	cpc	r25, r1
    1fda:	b1 f0       	breq	.+44     	; 0x2008 <DIO_u8GetPortValue+0x7e>
    1fdc:	1c c0       	rjmp	.+56     	; 0x2016 <DIO_u8GetPortValue+0x8c>
		{
		case PORT_A: *value = PINA_REG; break;
    1fde:	e9 e3       	ldi	r30, 0x39	; 57
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe8:	80 83       	st	Z, r24
    1fea:	17 c0       	rjmp	.+46     	; 0x201a <DIO_u8GetPortValue+0x90>
		case PORT_B: *value = PINB_REG; break;
    1fec:	e6 e3       	ldi	r30, 0x36	; 54
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff6:	80 83       	st	Z, r24
    1ff8:	10 c0       	rjmp	.+32     	; 0x201a <DIO_u8GetPortValue+0x90>
		case PORT_C: *value = PINC_REG; break;
    1ffa:	e3 e3       	ldi	r30, 0x33	; 51
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	eb 81       	ldd	r30, Y+3	; 0x03
    2002:	fc 81       	ldd	r31, Y+4	; 0x04
    2004:	80 83       	st	Z, r24
    2006:	09 c0       	rjmp	.+18     	; 0x201a <DIO_u8GetPortValue+0x90>
		case PORT_D: *value = PIND_REG; break;
    2008:	e0 e3       	ldi	r30, 0x30	; 48
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	80 83       	st	Z, r24
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_u8GetPortValue+0x90>
		default : error_status = E_NOK; break;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
}
    201c:	26 96       	adiw	r28, 0x06	; 6
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <DIO_u8SetPortPullUpMode>:

uint8_t DIO_u8SetPortPullUpMode(uint8_t port_id,uint8_t mode)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <DIO_u8SetPortPullUpMode+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <DIO_u8SetPortPullUpMode+0x8>
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	8a 83       	std	Y+2, r24	; 0x02
    203e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    2040:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	3d 83       	std	Y+5, r19	; 0x05
    204a:	2c 83       	std	Y+4, r18	; 0x04
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	9d 81       	ldd	r25, Y+5	; 0x05
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	91 05       	cpc	r25, r1
    2054:	d1 f0       	breq	.+52     	; 0x208a <DIO_u8SetPortPullUpMode+0x5c>
    2056:	2c 81       	ldd	r18, Y+4	; 0x04
    2058:	3d 81       	ldd	r19, Y+5	; 0x05
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <DIO_u8SetPortPullUpMode+0x3c>
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	61 f0       	breq	.+24     	; 0x2080 <DIO_u8SetPortPullUpMode+0x52>
    2068:	1f c0       	rjmp	.+62     	; 0x20a8 <DIO_u8SetPortPullUpMode+0x7a>
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	81 f0       	breq	.+32     	; 0x2094 <DIO_u8SetPortPullUpMode+0x66>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	81 f0       	breq	.+32     	; 0x209e <DIO_u8SetPortPullUpMode+0x70>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <DIO_u8SetPortPullUpMode+0x7a>
	{
	case PORT_A: PORTA_REG=mode; break;
    2080:	eb e3       	ldi	r30, 0x3B	; 59
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	80 83       	st	Z, r24
    2088:	11 c0       	rjmp	.+34     	; 0x20ac <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_B: PORTB_REG=mode; break;
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	80 83       	st	Z, r24
    2092:	0c c0       	rjmp	.+24     	; 0x20ac <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_C: PORTC_REG=mode; break;
    2094:	e5 e3       	ldi	r30, 0x35	; 53
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	80 83       	st	Z, r24
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_D: PORTD_REG=mode; break;
    209e:	e2 e3       	ldi	r30, 0x32	; 50
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	80 83       	st	Z, r24
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_u8SetPortPullUpMode+0x7e>
	default : error_status = E_NOK; break;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <ADC_vidAdcInit>:
uint16_* ADC_READ=NULL;

static void ADC_vidSetMultiPlexer(uint8_t adc_pin);

void ADC_vidAdcInit(uint8_t voltage_reference)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <ADC_vidAdcInit+0x6>
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,7);
    20cc:	a6 e2       	ldi	r26, 0x26	; 38
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e6 e2       	ldi	r30, 0x26	; 38
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 68       	ori	r24, 0x80	; 128
    20d8:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,2);
    20da:	a6 e2       	ldi	r26, 0x26	; 38
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e6 e2       	ldi	r30, 0x26	; 38
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8b 7f       	andi	r24, 0xFB	; 251
    20e6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    20e8:	a6 e2       	ldi	r26, 0x26	; 38
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e6 e2       	ldi	r30, 0x26	; 38
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	82 60       	ori	r24, 0x02	; 2
    20f4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    20f6:	a6 e2       	ldi	r26, 0x26	; 38
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e6 e2       	ldi	r30, 0x26	; 38
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	8e 7f       	andi	r24, 0xFE	; 254
    2102:	8c 93       	st	X, r24
	switch(voltage_reference)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	3b 83       	std	Y+3, r19	; 0x03
    210c:	2a 83       	std	Y+2, r18	; 0x02
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	91 05       	cpc	r25, r1
    2116:	c9 f0       	breq	.+50     	; 0x214a <ADC_vidAdcInit+0x8c>
    2118:	2a 81       	ldd	r18, Y+2	; 0x02
    211a:	3b 81       	ldd	r19, Y+3	; 0x03
    211c:	22 30       	cpi	r18, 0x02	; 2
    211e:	31 05       	cpc	r19, r1
    2120:	29 f0       	breq	.+10     	; 0x212c <ADC_vidAdcInit+0x6e>
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	9b 81       	ldd	r25, Y+3	; 0x03
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	f9 f0       	breq	.+62     	; 0x2168 <ADC_vidAdcInit+0xaa>
    212a:	2c c0       	rjmp	.+88     	; 0x2184 <ADC_vidAdcInit+0xc6>
	{
	case AREF_VOLTAGE:
		CLR_BIT(ADMUX,7);
    212c:	a7 e2       	ldi	r26, 0x27	; 39
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e7 e2       	ldi	r30, 0x27	; 39
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 77       	andi	r24, 0x7F	; 127
    2138:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,6);
    213a:	a7 e2       	ldi	r26, 0x27	; 39
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e7 e2       	ldi	r30, 0x27	; 39
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	8f 7b       	andi	r24, 0xBF	; 191
    2146:	8c 93       	st	X, r24
    2148:	1d c0       	rjmp	.+58     	; 0x2184 <ADC_vidAdcInit+0xc6>
		break;
	case VCC:
		CLR_BIT(ADMUX,7);
    214a:	a7 e2       	ldi	r26, 0x27	; 39
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e7 e2       	ldi	r30, 0x27	; 39
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	8f 77       	andi	r24, 0x7F	; 127
    2156:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2158:	a7 e2       	ldi	r26, 0x27	; 39
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e7 e2       	ldi	r30, 0x27	; 39
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 64       	ori	r24, 0x40	; 64
    2164:	8c 93       	st	X, r24
    2166:	0e c0       	rjmp	.+28     	; 0x2184 <ADC_vidAdcInit+0xc6>
		break;
	case INTERNAL_2_56_:
		SET_BIT(ADMUX,7);
    2168:	a7 e2       	ldi	r26, 0x27	; 39
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e7 e2       	ldi	r30, 0x27	; 39
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	80 68       	ori	r24, 0x80	; 128
    2174:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2176:	a7 e2       	ldi	r26, 0x27	; 39
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e7 e2       	ldi	r30, 0x27	; 39
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	80 64       	ori	r24, 0x40	; 64
    2182:	8c 93       	st	X, r24
	ADC_vidAdcPinInit(ADC_AUTO_TRIGGER_PIN);
	ADC_vidSetMultiPlexer(ADC_AUTO_TRIGGER_PIN);
	ADC_VIDSetAutoTriggerMode(INT_0);
	SET_BIT(ADCSRA,5);
#elif ADC_TRIGGERING_MODE == 1
	CLR_BIT(ADCSRA,5);
    2184:	a6 e2       	ldi	r26, 0x26	; 38
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e6 e2       	ldi	r30, 0x26	; 38
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8f 7d       	andi	r24, 0xDF	; 223
    2190:	8c 93       	st	X, r24
#endif

#if ADC_READING_TECHNIQUE == 0
	SET_BIT(ADCSRA,3);
    2192:	a6 e2       	ldi	r26, 0x26	; 38
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e6 e2       	ldi	r30, 0x26	; 38
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	88 60       	ori	r24, 0x08	; 8
    219e:	8c 93       	st	X, r24
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
#endif

#if ADC_READING_NO_OF_BITS == 0
	SET_BIT(ADMUX,5);
#elif ADC_READING_NO_OF_BITS == 1
	CLR_BIT(ADMUX,5);
    21a6:	a7 e2       	ldi	r26, 0x27	; 39
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e7 e2       	ldi	r30, 0x27	; 39
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8f 7d       	andi	r24, 0xDF	; 223
    21b2:	8c 93       	st	X, r24
#endif

}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <ADC_vidAdcPinInit>:

void ADC_vidAdcPinInit(uint8_t adc_pin)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <ADC_vidAdcPinInit+0x6>
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	8a 83       	std	Y+2, r24	; 0x02
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	c0 f4       	brcc	.+48     	; 0x2202 <ADC_vidAdcPinInit+0x42>
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	fc 01       	movw	r30, r24
    21de:	eb 5e       	subi	r30, 0xEB	; 235
    21e0:	fb 4f       	sbci	r31, 0xFB	; 251
    21e2:	20 81       	ld	r18, Z
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	88 2f       	mov	r24, r24
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	fc 01       	movw	r30, r24
    21f0:	ea 5e       	subi	r30, 0xEA	; 234
    21f2:	fb 4f       	sbci	r31, 0xFB	; 251
    21f4:	90 81       	ld	r25, Z
    21f6:	82 2f       	mov	r24, r18
    21f8:	69 2f       	mov	r22, r25
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
    2200:	22 c0       	rjmp	.+68     	; 0x2246 <ADC_vidAdcPinInit+0x86>
	else if(adc_pin==8)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	88 30       	cpi	r24, 0x08	; 8
    2206:	f9 f4       	brne	.+62     	; 0x2246 <ADC_vidAdcPinInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2208:	19 82       	std	Y+1, r1	; 0x01
    220a:	1a c0       	rjmp	.+52     	; 0x2240 <ADC_vidAdcPinInit+0x80>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	fc 01       	movw	r30, r24
    2218:	eb 5e       	subi	r30, 0xEB	; 235
    221a:	fb 4f       	sbci	r31, 0xFB	; 251
    221c:	20 81       	ld	r18, Z
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	fc 01       	movw	r30, r24
    222a:	ea 5e       	subi	r30, 0xEA	; 234
    222c:	fb 4f       	sbci	r31, 0xFB	; 251
    222e:	90 81       	ld	r25, Z
    2230:	82 2f       	mov	r24, r18
    2232:	69 2f       	mov	r22, r25
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
void ADC_vidAdcPinInit(uint8_t adc_pin)
{
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
	else if(adc_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	8f 5f       	subi	r24, 0xFF	; 255
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	88 30       	cpi	r24, 0x08	; 8
    2244:	18 f3       	brcs	.-58     	; 0x220c <ADC_vidAdcPinInit+0x4c>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
		}
	}
}
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <ADC_vidAdcGetRead>:

void ADC_vidAdcGetRead(uint8_t adc_pin)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetMultiPlexer(adc_pin);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <ADC_vidSetMultiPlexer>
	SET_BIT(ADCSRA,6);
    2262:	a6 e2       	ldi	r26, 0x26	; 38
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e6 e2       	ldi	r30, 0x26	; 38
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	80 64       	ori	r24, 0x40	; 64
    226e:	8c 93       	st	X, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <ADC_vidGetAutoTriggerRead>:

void ADC_vidGetAutoTriggerRead()
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <ADC_VIDSetAutoTriggerMode>:

void ADC_VIDSetAutoTriggerMode(uint8_t mode)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	0f 92       	push	r0
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	91 05       	cpc	r25, r1
    229c:	a9 f4       	brne	.+42     	; 0x22c8 <ADC_VIDSetAutoTriggerMode+0x42>
	{
	case INT_0:
		CLR_BIT(SFIOR,5);
    229e:	a0 e5       	ldi	r26, 0x50	; 80
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e0 e5       	ldi	r30, 0x50	; 80
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	8f 7d       	andi	r24, 0xDF	; 223
    22aa:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    22ac:	a0 e5       	ldi	r26, 0x50	; 80
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e0 e5       	ldi	r30, 0x50	; 80
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,7);
    22ba:	a0 e5       	ldi	r26, 0x50	; 80
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e0 e5       	ldi	r30, 0x50	; 80
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8f 77       	andi	r24, 0x7F	; 127
    22c6:	8c 93       	st	X, r24
		break;
	}
}
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <ADC_vidSetReadingVariable>:

void ADC_vidSetReadingVariable(uint16_* adc_read)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <ADC_vidSetReadingVariable+0x6>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
	ADC_READ=adc_read;
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	90 93 3f 04 	sts	0x043F, r25
    22e6:	80 93 3e 04 	sts	0x043E, r24
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <ADC_vidSetCallBack>:

void ADC_vidSetCallBack(void (*func)(void))
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <ADC_vidSetCallBack+0x6>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	9a 83       	std	Y+2, r25	; 0x02
    2300:	89 83       	std	Y+1, r24	; 0x01
	vector_16=func;
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	9a 81       	ldd	r25, Y+2	; 0x02
    2306:	90 93 3d 04 	sts	0x043D, r25
    230a:	80 93 3c 04 	sts	0x043C, r24
}
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    2318:	1f 92       	push	r1
    231a:	0f 92       	push	r0
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	0f 92       	push	r0
    2320:	11 24       	eor	r1, r1
    2322:	2f 93       	push	r18
    2324:	3f 93       	push	r19
    2326:	4f 93       	push	r20
    2328:	5f 93       	push	r21
    232a:	6f 93       	push	r22
    232c:	7f 93       	push	r23
    232e:	8f 93       	push	r24
    2330:	9f 93       	push	r25
    2332:	af 93       	push	r26
    2334:	bf 93       	push	r27
    2336:	ef 93       	push	r30
    2338:	ff 93       	push	r31
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
#if ADC_READING_TECHNIQUE == 0
	if(ADC_READ!=NULL)
    2342:	80 91 3e 04 	lds	r24, 0x043E
    2346:	90 91 3f 04 	lds	r25, 0x043F
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	59 f0       	breq	.+22     	; 0x2364 <__vector_16+0x4c>
	{
#if ADC_READING_NO_OF_BITS == 1
	*ADC_READ=ADCL16;
    234e:	e0 91 3e 04 	lds	r30, 0x043E
    2352:	f0 91 3f 04 	lds	r31, 0x043F
    2356:	a4 e2       	ldi	r26, 0x24	; 36
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	8d 91       	ld	r24, X+
    235c:	9c 91       	ld	r25, X
    235e:	11 97       	sbiw	r26, 0x01	; 1
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	}
	if(vector_16!=NULL)vector_16();
    2364:	80 91 3c 04 	lds	r24, 0x043C
    2368:	90 91 3d 04 	lds	r25, 0x043D
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	29 f0       	breq	.+10     	; 0x237a <__vector_16+0x62>
    2370:	e0 91 3c 04 	lds	r30, 0x043C
    2374:	f0 91 3d 04 	lds	r31, 0x043D
    2378:	09 95       	icall
#endif
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	ff 91       	pop	r31
    2380:	ef 91       	pop	r30
    2382:	bf 91       	pop	r27
    2384:	af 91       	pop	r26
    2386:	9f 91       	pop	r25
    2388:	8f 91       	pop	r24
    238a:	7f 91       	pop	r23
    238c:	6f 91       	pop	r22
    238e:	5f 91       	pop	r21
    2390:	4f 91       	pop	r20
    2392:	3f 91       	pop	r19
    2394:	2f 91       	pop	r18
    2396:	0f 90       	pop	r0
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	0f 90       	pop	r0
    239c:	1f 90       	pop	r1
    239e:	18 95       	reti

000023a0 <ADC_vidSetMultiPlexer>:

static void ADC_vidSetMultiPlexer(uint8_t adc_pin)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <ADC_vidSetMultiPlexer+0x6>
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	89 83       	std	Y+1, r24	; 0x01
	switch(adc_pin)
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	3b 83       	std	Y+3, r19	; 0x03
    23b6:	2a 83       	std	Y+2, r18	; 0x02
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <ADC_vidSetMultiPlexer+0x24>
    23c2:	9b c0       	rjmp	.+310    	; 0x24fa <ADC_vidSetMultiPlexer+0x15a>
    23c4:	2a 81       	ldd	r18, Y+2	; 0x02
    23c6:	3b 81       	ldd	r19, Y+3	; 0x03
    23c8:	24 30       	cpi	r18, 0x04	; 4
    23ca:	31 05       	cpc	r19, r1
    23cc:	8c f4       	brge	.+34     	; 0x23f0 <ADC_vidSetMultiPlexer+0x50>
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <ADC_vidSetMultiPlexer+0x3a>
    23d8:	48 c0       	rjmp	.+144    	; 0x246a <ADC_vidSetMultiPlexer+0xca>
    23da:	2a 81       	ldd	r18, Y+2	; 0x02
    23dc:	3b 81       	ldd	r19, Y+3	; 0x03
    23de:	22 30       	cpi	r18, 0x02	; 2
    23e0:	31 05       	cpc	r19, r1
    23e2:	0c f0       	brlt	.+2      	; 0x23e6 <ADC_vidSetMultiPlexer+0x46>
    23e4:	66 c0       	rjmp	.+204    	; 0x24b2 <ADC_vidSetMultiPlexer+0x112>
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	d1 f0       	breq	.+52     	; 0x2422 <ADC_vidSetMultiPlexer+0x82>
    23ee:	38 c1       	rjmp	.+624    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
    23f0:	2a 81       	ldd	r18, Y+2	; 0x02
    23f2:	3b 81       	ldd	r19, Y+3	; 0x03
    23f4:	25 30       	cpi	r18, 0x05	; 5
    23f6:	31 05       	cpc	r19, r1
    23f8:	09 f4       	brne	.+2      	; 0x23fc <ADC_vidSetMultiPlexer+0x5c>
    23fa:	c7 c0       	rjmp	.+398    	; 0x258a <ADC_vidSetMultiPlexer+0x1ea>
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	85 30       	cpi	r24, 0x05	; 5
    2402:	91 05       	cpc	r25, r1
    2404:	0c f4       	brge	.+2      	; 0x2408 <ADC_vidSetMultiPlexer+0x68>
    2406:	9d c0       	rjmp	.+314    	; 0x2542 <ADC_vidSetMultiPlexer+0x1a2>
    2408:	2a 81       	ldd	r18, Y+2	; 0x02
    240a:	3b 81       	ldd	r19, Y+3	; 0x03
    240c:	26 30       	cpi	r18, 0x06	; 6
    240e:	31 05       	cpc	r19, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <ADC_vidSetMultiPlexer+0x74>
    2412:	df c0       	rjmp	.+446    	; 0x25d2 <ADC_vidSetMultiPlexer+0x232>
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	9b 81       	ldd	r25, Y+3	; 0x03
    2418:	87 30       	cpi	r24, 0x07	; 7
    241a:	91 05       	cpc	r25, r1
    241c:	09 f4       	brne	.+2      	; 0x2420 <ADC_vidSetMultiPlexer+0x80>
    241e:	fd c0       	rjmp	.+506    	; 0x261a <ADC_vidSetMultiPlexer+0x27a>
    2420:	1f c1       	rjmp	.+574    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
	{
	case ADC_0:
			CLR_BIT(ADMUX,4);
    2422:	a7 e2       	ldi	r26, 0x27	; 39
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e7 e2       	ldi	r30, 0x27	; 39
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8f 7e       	andi	r24, 0xEF	; 239
    242e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2430:	a7 e2       	ldi	r26, 0x27	; 39
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e7 e2       	ldi	r30, 0x27	; 39
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	87 7f       	andi	r24, 0xF7	; 247
    243c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    243e:	a7 e2       	ldi	r26, 0x27	; 39
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e7 e2       	ldi	r30, 0x27	; 39
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	8b 7f       	andi	r24, 0xFB	; 251
    244a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    244c:	a7 e2       	ldi	r26, 0x27	; 39
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e7 e2       	ldi	r30, 0x27	; 39
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	8d 7f       	andi	r24, 0xFD	; 253
    2458:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    245a:	a7 e2       	ldi	r26, 0x27	; 39
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e7 e2       	ldi	r30, 0x27	; 39
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	8e 7f       	andi	r24, 0xFE	; 254
    2466:	8c 93       	st	X, r24
    2468:	fb c0       	rjmp	.+502    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_1:
			CLR_BIT(ADMUX,4);
    246a:	a7 e2       	ldi	r26, 0x27	; 39
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e7 e2       	ldi	r30, 0x27	; 39
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8f 7e       	andi	r24, 0xEF	; 239
    2476:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2478:	a7 e2       	ldi	r26, 0x27	; 39
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e7 e2       	ldi	r30, 0x27	; 39
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	87 7f       	andi	r24, 0xF7	; 247
    2484:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2486:	a7 e2       	ldi	r26, 0x27	; 39
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e7 e2       	ldi	r30, 0x27	; 39
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	8b 7f       	andi	r24, 0xFB	; 251
    2492:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2494:	a7 e2       	ldi	r26, 0x27	; 39
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e7 e2       	ldi	r30, 0x27	; 39
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	8d 7f       	andi	r24, 0xFD	; 253
    24a0:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    24a2:	a7 e2       	ldi	r26, 0x27	; 39
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e2       	ldi	r30, 0x27	; 39
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	81 60       	ori	r24, 0x01	; 1
    24ae:	8c 93       	st	X, r24
    24b0:	d7 c0       	rjmp	.+430    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_2:
			CLR_BIT(ADMUX,4);
    24b2:	a7 e2       	ldi	r26, 0x27	; 39
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e7 e2       	ldi	r30, 0x27	; 39
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	8f 7e       	andi	r24, 0xEF	; 239
    24be:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    24c0:	a7 e2       	ldi	r26, 0x27	; 39
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e7 e2       	ldi	r30, 0x27	; 39
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	87 7f       	andi	r24, 0xF7	; 247
    24cc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    24ce:	a7 e2       	ldi	r26, 0x27	; 39
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e7 e2       	ldi	r30, 0x27	; 39
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	8b 7f       	andi	r24, 0xFB	; 251
    24da:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    24dc:	a7 e2       	ldi	r26, 0x27	; 39
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e7 e2       	ldi	r30, 0x27	; 39
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	82 60       	ori	r24, 0x02	; 2
    24e8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    24ea:	a7 e2       	ldi	r26, 0x27	; 39
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e7 e2       	ldi	r30, 0x27	; 39
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	8e 7f       	andi	r24, 0xFE	; 254
    24f6:	8c 93       	st	X, r24
    24f8:	b3 c0       	rjmp	.+358    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_3:
			CLR_BIT(ADMUX,4);
    24fa:	a7 e2       	ldi	r26, 0x27	; 39
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e7 e2       	ldi	r30, 0x27	; 39
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8f 7e       	andi	r24, 0xEF	; 239
    2506:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2508:	a7 e2       	ldi	r26, 0x27	; 39
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e7 e2       	ldi	r30, 0x27	; 39
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	87 7f       	andi	r24, 0xF7	; 247
    2514:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2516:	a7 e2       	ldi	r26, 0x27	; 39
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e7 e2       	ldi	r30, 0x27	; 39
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8b 7f       	andi	r24, 0xFB	; 251
    2522:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2524:	a7 e2       	ldi	r26, 0x27	; 39
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e7 e2       	ldi	r30, 0x27	; 39
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	82 60       	ori	r24, 0x02	; 2
    2530:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2532:	a7 e2       	ldi	r26, 0x27	; 39
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e7 e2       	ldi	r30, 0x27	; 39
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	81 60       	ori	r24, 0x01	; 1
    253e:	8c 93       	st	X, r24
    2540:	8f c0       	rjmp	.+286    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_4:
			CLR_BIT(ADMUX,4);
    2542:	a7 e2       	ldi	r26, 0x27	; 39
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 e2       	ldi	r30, 0x27	; 39
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8f 7e       	andi	r24, 0xEF	; 239
    254e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2550:	a7 e2       	ldi	r26, 0x27	; 39
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e7 e2       	ldi	r30, 0x27	; 39
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	87 7f       	andi	r24, 0xF7	; 247
    255c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    255e:	a7 e2       	ldi	r26, 0x27	; 39
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e7 e2       	ldi	r30, 0x27	; 39
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	84 60       	ori	r24, 0x04	; 4
    256a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    256c:	a7 e2       	ldi	r26, 0x27	; 39
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e7 e2       	ldi	r30, 0x27	; 39
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8d 7f       	andi	r24, 0xFD	; 253
    2578:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    257a:	a7 e2       	ldi	r26, 0x27	; 39
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e7 e2       	ldi	r30, 0x27	; 39
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	8e 7f       	andi	r24, 0xFE	; 254
    2586:	8c 93       	st	X, r24
    2588:	6b c0       	rjmp	.+214    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_5:
			CLR_BIT(ADMUX,4);
    258a:	a7 e2       	ldi	r26, 0x27	; 39
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e7 e2       	ldi	r30, 0x27	; 39
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	8f 7e       	andi	r24, 0xEF	; 239
    2596:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2598:	a7 e2       	ldi	r26, 0x27	; 39
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e7 e2       	ldi	r30, 0x27	; 39
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	87 7f       	andi	r24, 0xF7	; 247
    25a4:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    25a6:	a7 e2       	ldi	r26, 0x27	; 39
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e7 e2       	ldi	r30, 0x27	; 39
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	84 60       	ori	r24, 0x04	; 4
    25b2:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    25b4:	a7 e2       	ldi	r26, 0x27	; 39
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e7 e2       	ldi	r30, 0x27	; 39
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8d 7f       	andi	r24, 0xFD	; 253
    25c0:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    25c2:	a7 e2       	ldi	r26, 0x27	; 39
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e7 e2       	ldi	r30, 0x27	; 39
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	81 60       	ori	r24, 0x01	; 1
    25ce:	8c 93       	st	X, r24
    25d0:	47 c0       	rjmp	.+142    	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_6:
			CLR_BIT(ADMUX,4);
    25d2:	a7 e2       	ldi	r26, 0x27	; 39
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e7 e2       	ldi	r30, 0x27	; 39
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	8f 7e       	andi	r24, 0xEF	; 239
    25de:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    25e0:	a7 e2       	ldi	r26, 0x27	; 39
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e7 e2       	ldi	r30, 0x27	; 39
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	87 7f       	andi	r24, 0xF7	; 247
    25ec:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    25ee:	a7 e2       	ldi	r26, 0x27	; 39
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e7 e2       	ldi	r30, 0x27	; 39
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	84 60       	ori	r24, 0x04	; 4
    25fa:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    25fc:	a7 e2       	ldi	r26, 0x27	; 39
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e7 e2       	ldi	r30, 0x27	; 39
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	82 60       	ori	r24, 0x02	; 2
    2608:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    260a:	a7 e2       	ldi	r26, 0x27	; 39
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e7 e2       	ldi	r30, 0x27	; 39
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8e 7f       	andi	r24, 0xFE	; 254
    2616:	8c 93       	st	X, r24
    2618:	23 c0       	rjmp	.+70     	; 0x2660 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_7:
			CLR_BIT(ADMUX,4);
    261a:	a7 e2       	ldi	r26, 0x27	; 39
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e7 e2       	ldi	r30, 0x27	; 39
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 7e       	andi	r24, 0xEF	; 239
    2626:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2628:	a7 e2       	ldi	r26, 0x27	; 39
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e7 e2       	ldi	r30, 0x27	; 39
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	87 7f       	andi	r24, 0xF7	; 247
    2634:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2636:	a7 e2       	ldi	r26, 0x27	; 39
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e7 e2       	ldi	r30, 0x27	; 39
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	84 60       	ori	r24, 0x04	; 4
    2642:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2644:	a7 e2       	ldi	r26, 0x27	; 39
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e7 e2       	ldi	r30, 0x27	; 39
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	82 60       	ori	r24, 0x02	; 2
    2650:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2652:	a7 e2       	ldi	r26, 0x27	; 39
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e7 e2       	ldi	r30, 0x27	; 39
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	81 60       	ori	r24, 0x01	; 1
    265e:	8c 93       	st	X, r24
			break;
	}
}
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <UART_Init>:
#include "../../libraries/std_types.h"
#include "../../libraries/bit_math.h"
#include "UART.h"
#include "UART_REGISTERS.h"

void UART_Init(uint16_ baud) {
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <UART_Init+0x6>
    2672:	00 d0       	rcall	.+0      	; 0x2674 <UART_Init+0x8>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9c 83       	std	Y+4, r25	; 0x04
    267a:	8b 83       	std	Y+3, r24	; 0x03
    uint16_ ubrr = (uint16_)(((uint32_t)8000000/16)/baud-1);
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	9c 01       	movw	r18, r24
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	80 e2       	ldi	r24, 0x20	; 32
    2688:	91 ea       	ldi	r25, 0xA1	; 161
    268a:	a7 e0       	ldi	r26, 0x07	; 7
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 84 23 	call	0x4708	; 0x4708 <__udivmodsi4>
    2696:	da 01       	movw	r26, r20
    2698:	c9 01       	movw	r24, r18
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01

    UBRRH = (uint8_t)(ubrr>>8);
    26a0:	e0 e4       	ldi	r30, 0x40	; 64
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	89 2f       	mov	r24, r25
    26aa:	99 27       	eor	r25, r25
    26ac:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr;
    26ae:	e9 e2       	ldi	r30, 0x29	; 41
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 83       	st	Z, r24
    SET_BIT(UCSRB,4);
    26b6:	aa e2       	ldi	r26, 0x2A	; 42
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	ea e2       	ldi	r30, 0x2A	; 42
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	80 61       	ori	r24, 0x10	; 16
    26c2:	8c 93       	st	X, r24
    SET_BIT(UCSRB,3);
    26c4:	aa e2       	ldi	r26, 0x2A	; 42
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	ea e2       	ldi	r30, 0x2A	; 42
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	88 60       	ori	r24, 0x08	; 8
    26d0:	8c 93       	st	X, r24
    UCSRC = (1<<7) | (3<<1);
    26d2:	e0 e4       	ldi	r30, 0x40	; 64
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	86 e8       	ldi	r24, 0x86	; 134
    26d8:	80 83       	st	Z, r24
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <UART_Transmit>:

void UART_Transmit(uint8_t data) {
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	0f 92       	push	r0
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	89 83       	std	Y+1, r24	; 0x01
    while (!GET_BIT(UCSRA,5));
    26f4:	eb e2       	ldi	r30, 0x2B	; 43
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	82 95       	swap	r24
    26fc:	86 95       	lsr	r24
    26fe:	87 70       	andi	r24, 0x07	; 7
    2700:	88 2f       	mov	r24, r24
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	81 70       	andi	r24, 0x01	; 1
    2706:	90 70       	andi	r25, 0x00	; 0
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	a1 f3       	breq	.-24     	; 0x26f4 <UART_Transmit+0xc>
    UDR = data;
    270c:	ec e2       	ldi	r30, 0x2C	; 44
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	80 83       	st	Z, r24
}
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <UART_Receive>:

uint8_t UART_Receive(void) {
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA,7));
    2724:	eb e2       	ldi	r30, 0x2B	; 43
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	88 23       	and	r24, r24
    272c:	dc f7       	brge	.-10     	; 0x2724 <UART_Receive+0x8>
    return UDR;
    272e:	ec e2       	ldi	r30, 0x2C	; 44
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <TIMER1_voidInit>:

void (* TIMER1_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt1;

void TIMER1_voidInit(void){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
	TCCR1B |= TIMER1_PRESCALER;

#elif TIMER1_MODE == CTC_T_MODE

	CLR_BIT(TCCR1A , WGM10);
    2742:	af e4       	ldi	r26, 0x4F	; 79
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	ef e4       	ldi	r30, 0x4F	; 79
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	8e 7f       	andi	r24, 0xFE	; 254
    274e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , WGM11);
    2750:	af e4       	ldi	r26, 0x4F	; 79
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ef e4       	ldi	r30, 0x4F	; 79
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	8d 7f       	andi	r24, 0xFD	; 253
    275c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    275e:	ae e4       	ldi	r26, 0x4E	; 78
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ee e4       	ldi	r30, 0x4E	; 78
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	88 60       	ori	r24, 0x08	; 8
    276a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , WGM13);
    276c:	ae e4       	ldi	r26, 0x4E	; 78
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	ee e4       	ldi	r30, 0x4E	; 78
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	8f 7e       	andi	r24, 0xEF	; 239
    2778:	8c 93       	st	X, r24

	//Enabling timer flag;
	SET_BIT(TIMSK , OCIE1A);
    277a:	a9 e5       	ldi	r26, 0x59	; 89
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e9 e5       	ldi	r30, 0x59	; 89
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	80 61       	ori	r24, 0x10	; 16
    2786:	8c 93       	st	X, r24

	//selecting prescaler;
	TCCR1B &= 0b11111000;
    2788:	ae e4       	ldi	r26, 0x4E	; 78
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	ee e4       	ldi	r30, 0x4E	; 78
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	88 7f       	andi	r24, 0xF8	; 248
    2794:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER;
    2796:	ae e4       	ldi	r26, 0x4E	; 78
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	ee e4       	ldi	r30, 0x4E	; 78
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	80 81       	ld	r24, Z
    27a0:	85 60       	ori	r24, 0x05	; 5
    27a2:	8c 93       	st	X, r24
#else

#error "wrong timer mode"

#endif
}
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <TIMER1_voidDisable>:

void TIMER1_voidDisable(void){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62

	TCCR1B &= 0b11111000;
    27b2:	ae e4       	ldi	r26, 0x4E	; 78
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ee e4       	ldi	r30, 0x4E	; 78
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	88 7f       	andi	r24, 0xF8	; 248
    27be:	8c 93       	st	X, r24

}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <TIMER1_uint8SetPrescaler>:

uint8_t TIMER1_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <TIMER1_uint8SetPrescaler+0x6>
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    27d2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	88 30       	cpi	r24, 0x08	; 8
    27d8:	80 f4       	brcc	.+32     	; 0x27fa <TIMER1_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR1B &= 0b11111000;
    27da:	ae e4       	ldi	r26, 0x4E	; 78
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ee e4       	ldi	r30, 0x4E	; 78
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	88 7f       	andi	r24, 0xF8	; 248
    27e6:	8c 93       	st	X, r24
		TCCR1B |= Copy_uint8Prescaler;
    27e8:	ae e4       	ldi	r26, 0x4E	; 78
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ee e4       	ldi	r30, 0x4E	; 78
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	90 81       	ld	r25, Z
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	89 2b       	or	r24, r25
    27f6:	8c 93       	st	X, r24
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <TIMER1_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    27fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <TIMER1_voidSetCounterRegister>:
void TIMER1_voidSetCounterRegister(uint8_t Copy_uint8Counter1Start){
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	0f 92       	push	r0
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	89 83       	std	Y+1, r24	; 0x01

	TCNT1L = Copy_uint8Counter1Start;
    2816:	ec e4       	ldi	r30, 0x4C	; 76
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	80 83       	st	Z, r24
}
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <TIMER1_voidSetCTCTime>:

void TIMER1_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	0f 92       	push	r0
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	89 83       	std	Y+1, r24	; 0x01

	 OCR1AL = Copy_uint8CompareTime;
    2832:	ea e4       	ldi	r30, 0x4A	; 74
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	80 83       	st	Z, r24

}
    283a:	0f 90       	pop	r0
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <TIMER1_voidGetNumCountCTC>:

void TIMER1_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <TIMER1_voidGetNumCountCTC+0x6>
    2848:	00 d0       	rcall	.+0      	; 0x284a <TIMER1_voidGetNumCountCTC+0x8>
    284a:	00 d0       	rcall	.+0      	; 0x284c <TIMER1_voidGetNumCountCTC+0xa>
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	9a 83       	std	Y+2, r25	; 0x02
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	7c 83       	std	Y+4, r23	; 0x04
    2856:	6b 83       	std	Y+3, r22	; 0x03
    2858:	5e 83       	std	Y+6, r21	; 0x06
    285a:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER1_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	cc 01       	movw	r24, r24
    2862:	a0 e0       	ldi	r26, 0x00	; 0
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	28 ee       	ldi	r18, 0xE8	; 232
    2868:	33 e0       	ldi	r19, 0x03	; 3
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 45 23 	call	0x468a	; 0x468a <__mulsi3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	3d e7       	ldi	r19, 0x7D	; 125
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 84 23 	call	0x4708	; 0x4708 <__udivmodsi4>
    288a:	da 01       	movw	r26, r20
    288c:	c9 01       	movw	r24, r18
    288e:	eb 81       	ldd	r30, Y+3	; 0x03
    2890:	fc 81       	ldd	r31, Y+4	; 0x04
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    2896:	ed 81       	ldd	r30, Y+5	; 0x05
    2898:	fe 81       	ldd	r31, Y+6	; 0x06
    289a:	8a ef       	ldi	r24, 0xFA	; 250
    289c:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    289e:	26 96       	adiw	r28, 0x06	; 6
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <TIMER1_voidSetCallBackNormal>:


void TIMER1_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal1)(void)){
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <TIMER1_voidSetCallBackNormal+0x6>
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal1;
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	9a 81       	ldd	r25, Y+2	; 0x02
    28c2:	90 93 41 04 	sts	0x0441, r25
    28c6:	80 93 40 04 	sts	0x0440, r24

}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC1)(void)){
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <TIMER1_voidSetCallBackCTC+0x6>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC1;
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	90 93 43 04 	sts	0x0443, r25
    28ea:	80 93 42 04 	sts	0x0442, r24

}
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    28f8:	1f 92       	push	r1
    28fa:	0f 92       	push	r0
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	0f 92       	push	r0
    2900:	11 24       	eor	r1, r1
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	ef 93       	push	r30
    2918:	ff 93       	push	r31
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62

	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    2922:	80 91 44 04 	lds	r24, 0x0444
    2926:	90 91 45 04 	lds	r25, 0x0445
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	90 93 45 04 	sts	0x0445, r25
    2930:	80 93 44 04 	sts	0x0444, r24
	if(cnt == compare_cnt1){
    2934:	20 91 44 04 	lds	r18, 0x0444
    2938:	30 91 45 04 	lds	r19, 0x0445
    293c:	80 91 7a 04 	lds	r24, 0x047A
    2940:	90 91 7b 04 	lds	r25, 0x047B
    2944:	28 17       	cp	r18, r24
    2946:	39 07       	cpc	r19, r25
    2948:	79 f4       	brne	.+30     	; 0x2968 <__vector_7+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER1_voidpSetCallBackCTC != NULL){
    294a:	80 91 42 04 	lds	r24, 0x0442
    294e:	90 91 43 04 	lds	r25, 0x0443
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	49 f0       	breq	.+18     	; 0x2968 <__vector_7+0x70>

			TIMER1_voidpSetCallBackCTC();
    2956:	e0 91 42 04 	lds	r30, 0x0442
    295a:	f0 91 43 04 	lds	r31, 0x0443
    295e:	09 95       	icall
			cnt = 0;
    2960:	10 92 45 04 	sts	0x0445, r1
    2964:	10 92 44 04 	sts	0x0444, r1
		}

	}


}
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	ff 91       	pop	r31
    296e:	ef 91       	pop	r30
    2970:	bf 91       	pop	r27
    2972:	af 91       	pop	r26
    2974:	9f 91       	pop	r25
    2976:	8f 91       	pop	r24
    2978:	7f 91       	pop	r23
    297a:	6f 91       	pop	r22
    297c:	5f 91       	pop	r21
    297e:	4f 91       	pop	r20
    2980:	3f 91       	pop	r19
    2982:	2f 91       	pop	r18
    2984:	0f 90       	pop	r0
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	0f 90       	pop	r0
    298a:	1f 90       	pop	r1
    298c:	18 95       	reti

0000298e <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    298e:	1f 92       	push	r1
    2990:	0f 92       	push	r0
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	0f 92       	push	r0
    2996:	11 24       	eor	r1, r1
    2998:	2f 93       	push	r18
    299a:	3f 93       	push	r19
    299c:	4f 93       	push	r20
    299e:	5f 93       	push	r21
    29a0:	6f 93       	push	r22
    29a2:	7f 93       	push	r23
    29a4:	8f 93       	push	r24
    29a6:	9f 93       	push	r25
    29a8:	af 93       	push	r26
    29aa:	bf 93       	push	r27
    29ac:	ef 93       	push	r30
    29ae:	ff 93       	push	r31
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_voidpSetCallBackNormal != NULL){
    29b8:	80 91 40 04 	lds	r24, 0x0440
    29bc:	90 91 41 04 	lds	r25, 0x0441
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	29 f0       	breq	.+10     	; 0x29ce <__vector_9+0x40>

		TIMER1_voidpSetCallBackNormal();
    29c4:	e0 91 40 04 	lds	r30, 0x0440
    29c8:	f0 91 41 04 	lds	r31, 0x0441
    29cc:	09 95       	icall

		//do nothing;

	}

}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	ff 91       	pop	r31
    29d4:	ef 91       	pop	r30
    29d6:	bf 91       	pop	r27
    29d8:	af 91       	pop	r26
    29da:	9f 91       	pop	r25
    29dc:	8f 91       	pop	r24
    29de:	7f 91       	pop	r23
    29e0:	6f 91       	pop	r22
    29e2:	5f 91       	pop	r21
    29e4:	4f 91       	pop	r20
    29e6:	3f 91       	pop	r19
    29e8:	2f 91       	pop	r18
    29ea:	0f 90       	pop	r0
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	0f 90       	pop	r0
    29f0:	1f 90       	pop	r1
    29f2:	18 95       	reti

000029f4 <TMR0_Init>:

// Function prototypes
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds);

void TMR0_Init(void)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
	// Set mode based on configuration
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
	TCCR0_REG &= ~(1 << TCCR0_WGM01);  // Normal mode
	#elif TMR0_MODE == TMR0_MODE_CTC
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
    29fc:	a3 e5       	ldi	r26, 0x53	; 83
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e3 e5       	ldi	r30, 0x53	; 83
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	8f 7b       	andi	r24, 0xBF	; 191
    2a08:	8c 93       	st	X, r24
	TCCR0_REG |= (1 << TCCR0_WGM01);   // CTC mode
    2a0a:	a3 e5       	ldi	r26, 0x53	; 83
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e3 e5       	ldi	r30, 0x53	; 83
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	88 60       	ori	r24, 0x08	; 8
    2a16:	8c 93       	st	X, r24

	// Enable Timer interrupt based on the mode
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TIMSK_REG |= (1 << TIMSK_TOIE0);   // Enable Overflow Interrupt
	#elif TMR0_MODE == TMR0_MODE_CTC
	TIMSK_REG |= (1 << TIMSK_OCIE0);   // Enable Compare Match Interrupt
    2a18:	a9 e5       	ldi	r26, 0x59	; 89
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e9 e5       	ldi	r30, 0x59	; 89
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	82 60       	ori	r24, 0x02	; 2
    2a24:	8c 93       	st	X, r24
	#endif
	// Enable global interrupts
	SREG |= (1 << 7);
    2a26:	af e5       	ldi	r26, 0x5F	; 95
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	ef e5       	ldi	r30, 0x5F	; 95
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 68       	ori	r24, 0x80	; 128
    2a32:	8c 93       	st	X, r24
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <TMR0_Start>:

void TMR0_Start(uint16_ milliseconds)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <TMR0_Start+0x6>
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <TMR0_Start+0x8>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
	uint16_ ticks = TMR0_CalculateTicks(milliseconds);
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <TMR0_CalculateTicks>
    2a52:	9a 83       	std	Y+2, r25	; 0x02
    2a54:	89 83       	std	Y+1, r24	; 0x01

	// Set compare value for CTC mode
	if (TMR0_MODE == TMR0_MODE_CTC)
	{
		OCR0_REG = ticks;
    2a56:	ec e5       	ldi	r30, 0x5C	; 92
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	80 83       	st	Z, r24
	}

	// Reset the match counter
	TMR0_CurrentMatches = 0;
    2a5e:	10 92 4b 04 	sts	0x044B, r1
    2a62:	10 92 4a 04 	sts	0x044A, r1
		break;
		case TMR0_PRESCALER_8:
		TCCR0_REG |= (1 << TCCR0_CS01);
		break;
		case TMR0_PRESCALER_64:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS01);
    2a66:	a3 e5       	ldi	r26, 0x53	; 83
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e3 e5       	ldi	r30, 0x53	; 83
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	83 60       	ori	r24, 0x03	; 3
    2a72:	8c 93       	st	X, r24
		break;
		case TMR0_PRESCALER_1024:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS02);
		break;
	}
}
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <TMR0_Stop>:

void TMR0_Stop(void)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	// Stop the timer by clearing the clock source bits
	TCCR0_REG &= ~((1 << TCCR0_CS00) | (1 << TCCR0_CS01) | (1 << TCCR0_CS02));
    2a8a:	a3 e5       	ldi	r26, 0x53	; 83
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	e3 e5       	ldi	r30, 0x53	; 83
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	88 7f       	andi	r24, 0xF8	; 248
    2a96:	8c 93       	st	X, r24
}
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <TMR0_SetCallback>:

void TMR0_SetCallback(void (*callbackFunc)(void))
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <TMR0_SetCallback+0x6>
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9a 83       	std	Y+2, r25	; 0x02
    2aaa:	89 83       	std	Y+1, r24	; 0x01
	TMR0_Callback = callbackFunc;
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab0:	90 93 47 04 	sts	0x0447, r25
    2ab4:	80 93 46 04 	sts	0x0446, r24
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <__vector_10>:

// Interrupt Service Routine for Timer0 Compare Match
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2ac2:	1f 92       	push	r1
    2ac4:	0f 92       	push	r0
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	0f 92       	push	r0
    2aca:	11 24       	eor	r1, r1
    2acc:	2f 93       	push	r18
    2ace:	3f 93       	push	r19
    2ad0:	4f 93       	push	r20
    2ad2:	5f 93       	push	r21
    2ad4:	6f 93       	push	r22
    2ad6:	7f 93       	push	r23
    2ad8:	8f 93       	push	r24
    2ada:	9f 93       	push	r25
    2adc:	af 93       	push	r26
    2ade:	bf 93       	push	r27
    2ae0:	ef 93       	push	r30
    2ae2:	ff 93       	push	r31
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62

	TMR0_CurrentMatches++;
    2aec:	80 91 4a 04 	lds	r24, 0x044A
    2af0:	90 91 4b 04 	lds	r25, 0x044B
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	90 93 4b 04 	sts	0x044B, r25
    2afa:	80 93 4a 04 	sts	0x044A, r24
	
	// Check if we've reached the required number of matches
	if (TMR0_CurrentMatches >= TMR0_RequiredMatches)
    2afe:	20 91 4a 04 	lds	r18, 0x044A
    2b02:	30 91 4b 04 	lds	r19, 0x044B
    2b06:	80 91 48 04 	lds	r24, 0x0448
    2b0a:	90 91 49 04 	lds	r25, 0x0449
    2b0e:	28 17       	cp	r18, r24
    2b10:	39 07       	cpc	r19, r25
    2b12:	78 f0       	brcs	.+30     	; 0x2b32 <__vector_10+0x70>
	{
		if (TMR0_Callback != 0)
    2b14:	80 91 46 04 	lds	r24, 0x0446
    2b18:	90 91 47 04 	lds	r25, 0x0447
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	29 f0       	breq	.+10     	; 0x2b2a <__vector_10+0x68>
		{
			TMR0_Callback();
    2b20:	e0 91 46 04 	lds	r30, 0x0446
    2b24:	f0 91 47 04 	lds	r31, 0x0447
    2b28:	09 95       	icall
		}
		TMR0_CurrentMatches = 0;  // Reset matches for the next cycle
    2b2a:	10 92 4b 04 	sts	0x044B, r1
    2b2e:	10 92 4a 04 	sts	0x044A, r1
	}
}
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	ff 91       	pop	r31
    2b38:	ef 91       	pop	r30
    2b3a:	bf 91       	pop	r27
    2b3c:	af 91       	pop	r26
    2b3e:	9f 91       	pop	r25
    2b40:	8f 91       	pop	r24
    2b42:	7f 91       	pop	r23
    2b44:	6f 91       	pop	r22
    2b46:	5f 91       	pop	r21
    2b48:	4f 91       	pop	r20
    2b4a:	3f 91       	pop	r19
    2b4c:	2f 91       	pop	r18
    2b4e:	0f 90       	pop	r0
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	0f 90       	pop	r0
    2b54:	1f 90       	pop	r1
    2b56:	18 95       	reti

00002b58 <TMR0_CalculateTicks>:

// Function to calculate ticks based on the desired time in milliseconds and the configured prescaler
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds)
{
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	2a 97       	sbiw	r28, 0x0a	; 10
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	9a 87       	std	Y+10, r25	; 0x0a
    2b76:	89 87       	std	Y+9, r24	; 0x09
	uint32_t prescaler_value = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	9e 83       	std	Y+6, r25	; 0x06
    2b84:	af 83       	std	Y+7, r26	; 0x07
    2b86:	b8 87       	std	Y+8, r27	; 0x08
		break;
		case TMR0_PRESCALER_8:
		prescaler_value = 8;
		break;
		case TMR0_PRESCALER_64:
		prescaler_value = 64;
    2b88:	80 e4       	ldi	r24, 0x40	; 64
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a0 e0       	ldi	r26, 0x00	; 0
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	af 83       	std	Y+7, r26	; 0x07
    2b96:	b8 87       	std	Y+8, r27	; 0x08
		prescaler_value = 1024;
		break;
	}

	// Calculate ticks based on prescaler and the desired time in milliseconds
	uint32_t ticks = ((8000000 / (prescaler_value * 1000)) * milliseconds);
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	af 81       	ldd	r26, Y+7	; 0x07
    2b9e:	b8 85       	ldd	r27, Y+8	; 0x08
    2ba0:	28 ee       	ldi	r18, 0xE8	; 232
    2ba2:	33 e0       	ldi	r19, 0x03	; 3
    2ba4:	40 e0       	ldi	r20, 0x00	; 0
    2ba6:	50 e0       	ldi	r21, 0x00	; 0
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 45 23 	call	0x468a	; 0x468a <__mulsi3>
    2bb0:	9b 01       	movw	r18, r22
    2bb2:	ac 01       	movw	r20, r24
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	92 e1       	ldi	r25, 0x12	; 18
    2bb8:	aa e7       	ldi	r26, 0x7A	; 122
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 84 23 	call	0x4708	; 0x4708 <__udivmodsi4>
    2bc4:	da 01       	movw	r26, r20
    2bc6:	c9 01       	movw	r24, r18
    2bc8:	7c 01       	movw	r14, r24
    2bca:	8d 01       	movw	r16, r26
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	9c 01       	movw	r18, r24
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	b7 01       	movw	r22, r14
    2bda:	0e 94 45 23 	call	0x468a	; 0x468a <__mulsi3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	9a 83       	std	Y+2, r25	; 0x02
    2be6:	ab 83       	std	Y+3, r26	; 0x03
    2be8:	bc 83       	std	Y+4, r27	; 0x04

	// If the number of ticks exceeds 255 (the max value for an 8-bit timer), calculate how many compare matches are required
	if (ticks > 255)
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	ab 81       	ldd	r26, Y+3	; 0x03
    2bf0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	a1 05       	cpc	r26, r1
    2bf8:	b1 05       	cpc	r27, r1
    2bfa:	e1 f0       	breq	.+56     	; 0x2c34 <TMR0_CalculateTicks+0xdc>
    2bfc:	d8 f0       	brcs	.+54     	; 0x2c34 <TMR0_CalculateTicks+0xdc>
	{
		TMR0_RequiredMatches = ticks / 255;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	ab 81       	ldd	r26, Y+3	; 0x03
    2c04:	bc 81       	ldd	r27, Y+4	; 0x04
    2c06:	2f ef       	ldi	r18, 0xFF	; 255
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 84 23 	call	0x4708	; 0x4708 <__udivmodsi4>
    2c16:	da 01       	movw	r26, r20
    2c18:	c9 01       	movw	r24, r18
    2c1a:	90 93 49 04 	sts	0x0449, r25
    2c1e:	80 93 48 04 	sts	0x0448, r24
		ticks = 255;  // Set the compare value to the maximum for the first match
    2c22:	8f ef       	ldi	r24, 0xFF	; 255
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a0 e0       	ldi	r26, 0x00	; 0
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	89 83       	std	Y+1, r24	; 0x01
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	ab 83       	std	Y+3, r26	; 0x03
    2c30:	bc 83       	std	Y+4, r27	; 0x04
    2c32:	06 c0       	rjmp	.+12     	; 0x2c40 <TMR0_CalculateTicks+0xe8>
	}
	else
	{
		TMR0_RequiredMatches = 1;  // Only one match is needed
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	90 93 49 04 	sts	0x0449, r25
    2c3c:	80 93 48 04 	sts	0x0448, r24
	}

	return (uint16_)ticks;
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c44:	2a 96       	adiw	r28, 0x0a	; 10
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	08 95       	ret

00002c5e <TILT_vidInit>:
TILT_SENSOR_PIN tilt_pins[NO_OF_SENSORS] ={TILT_1_PIN,TILT_2_PIN,TILT_3_PIN,TILT_4_PIN,
										TILT_5_PIN,TILT_6_PIN,TILT_7_PIN,TILT_8_PIN};


void TILT_vidInit(uint8_t tilt_pin)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <TILT_vidInit+0x6>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	8a 83       	std	Y+2, r24	; 0x02
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	88 30       	cpi	r24, 0x08	; 8
    2c6e:	c0 f4       	brcc	.+48     	; 0x2ca0 <TILT_vidInit+0x42>
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	88 2f       	mov	r24, r24
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	eb 5d       	subi	r30, 0xDB	; 219
    2c7e:	fb 4f       	sbci	r31, 0xFB	; 251
    2c80:	20 81       	ld	r18, Z
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	ea 5d       	subi	r30, 0xDA	; 218
    2c90:	fb 4f       	sbci	r31, 0xFB	; 251
    2c92:	90 81       	ld	r25, Z
    2c94:	82 2f       	mov	r24, r18
    2c96:	69 2f       	mov	r22, r25
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
    2c9e:	22 c0       	rjmp	.+68     	; 0x2ce4 <TILT_vidInit+0x86>
	else if(tilt_pin==8)
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	88 30       	cpi	r24, 0x08	; 8
    2ca4:	f9 f4       	brne	.+62     	; 0x2ce4 <TILT_vidInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2ca6:	19 82       	std	Y+1, r1	; 0x01
    2ca8:	1a c0       	rjmp	.+52     	; 0x2cde <TILT_vidInit+0x80>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	eb 5d       	subi	r30, 0xDB	; 219
    2cb8:	fb 4f       	sbci	r31, 0xFB	; 251
    2cba:	20 81       	ld	r18, Z
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	ea 5d       	subi	r30, 0xDA	; 218
    2cca:	fb 4f       	sbci	r31, 0xFB	; 251
    2ccc:	90 81       	ld	r25, Z
    2cce:	82 2f       	mov	r24, r18
    2cd0:	69 2f       	mov	r22, r25
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
void TILT_vidInit(uint8_t tilt_pin)
{
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
	else if(tilt_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	88 30       	cpi	r24, 0x08	; 8
    2ce2:	18 f3       	brcs	.-58     	; 0x2caa <TILT_vidInit+0x4c>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
		}
	}
}
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <TILT_vidGetTiltRead>:

void TILT_vidGetTiltRead(uint8_t * tilt_read, uint8_t tilt_pin)
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <TILT_vidGetTiltRead+0x6>
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,tilt_read);
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	88 2f       	mov	r24, r24
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	eb 5d       	subi	r30, 0xDB	; 219
    2d0e:	fb 4f       	sbci	r31, 0xFB	; 251
    2d10:	40 81       	ld	r20, Z
    2d12:	8b 81       	ldd	r24, Y+3	; 0x03
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	ea 5d       	subi	r30, 0xDA	; 218
    2d20:	fb 4f       	sbci	r31, 0xFB	; 251
    2d22:	90 81       	ld	r25, Z
    2d24:	29 81       	ldd	r18, Y+1	; 0x01
    2d26:	3a 81       	ldd	r19, Y+2	; 0x02
    2d28:	84 2f       	mov	r24, r20
    2d2a:	69 2f       	mov	r22, r25
    2d2c:	a9 01       	movw	r20, r18
    2d2e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <DIO_u8GetPinValue>
}
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <TILT_vidGetAllTiltRead>:

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <TILT_vidGetAllTiltRead+0x6>
    2d44:	0f 92       	push	r0
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	9b 83       	std	Y+3, r25	; 0x03
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
	tilt_read[NO_OF_SENSORS]=0;
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	9b 81       	ldd	r25, Y+3	; 0x03
    2d52:	fc 01       	movw	r30, r24
    2d54:	32 96       	adiw	r30, 0x02	; 2
    2d56:	10 82       	st	Z, r1
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    2d58:	19 82       	std	Y+1, r1	; 0x01
    2d5a:	21 c0       	rjmp	.+66     	; 0x2d9e <TILT_vidGetAllTiltRead+0x60>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	88 2f       	mov	r24, r24
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	88 0f       	add	r24, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	fc 01       	movw	r30, r24
    2d68:	eb 5d       	subi	r30, 0xDB	; 219
    2d6a:	fb 4f       	sbci	r31, 0xFB	; 251
    2d6c:	40 81       	ld	r20, Z
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	fc 01       	movw	r30, r24
    2d7a:	ea 5d       	subi	r30, 0xDA	; 218
    2d7c:	fb 4f       	sbci	r31, 0xFB	; 251
    2d7e:	50 81       	ld	r21, Z
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	28 0f       	add	r18, r24
    2d8c:	39 1f       	adc	r19, r25
    2d8e:	84 2f       	mov	r24, r20
    2d90:	65 2f       	mov	r22, r21
    2d92:	a9 01       	movw	r20, r18
    2d94:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <DIO_u8GetPinValue>
}

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
	tilt_read[NO_OF_SENSORS]=0;
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	8f 5f       	subi	r24, 0xFF	; 255
    2d9c:	89 83       	std	Y+1, r24	; 0x01
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	82 30       	cpi	r24, 0x02	; 2
    2da2:	e0 f2       	brcs	.-72     	; 0x2d5c <TILT_vidGetAllTiltRead+0x1e>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
	}
	tilt_read[NO_OF_SENSORS]=1;
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	9b 81       	ldd	r25, Y+3	; 0x03
    2da8:	fc 01       	movw	r30, r24
    2daa:	32 96       	adiw	r30, 0x02	; 2
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	80 83       	st	Z, r24
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <LED_u8InitializeLed>:
#include"../../libraries/std_types.h"
#include "../../mcal/dio_driver/dio_int.h"

uint8_t LED_u8InitializeLed(uint8_t port_id,uint8_t led_pin)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <LED_u8InitializeLed+0x6>
    2dc2:	0f 92       	push	r0
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	8a 83       	std	Y+2, r24	; 0x02
    2dca:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = DIO_u8SetPinMode(port_id,led_pin,OUTPUT);
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	6b 81       	ldd	r22, Y+3	; 0x03
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
    2dd6:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <LED_u8InitializeLedPort>:

uint8_t LED_u8InitializeLedPort(uint8_t port_id)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <LED_u8InitializeLedPort+0x6>
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t error_status = DIO_u8SetPortMode(port_id,255);
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	6f ef       	ldi	r22, 0xFF	; 255
    2df6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortMode>
    2dfa:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <LED_u8LedOn>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"led_helper.h"

uint8_t LED_u8LedOn(uint8_t port_id,uint8_t led_pin)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <LED_u8LedOn+0x6>
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <LED_u8LedOn+0x8>
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	8b 83       	std	Y+3, r24	; 0x03
    2e16:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2e18:	9e 01       	movw	r18, r28
    2e1a:	2e 5f       	subi	r18, 0xFE	; 254
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	6c 81       	ldd	r22, Y+4	; 0x04
    2e22:	a9 01       	movw	r20, r18
    2e24:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    2e28:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	88 23       	and	r24, r24
    2e2e:	71 f4       	brne	.+28     	; 0x2e4c <LED_u8LedOn+0x44>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	88 23       	and	r24, r24
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <LED_u8LedOn+0x38>
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	6c 81       	ldd	r22, Y+4	; 0x04
    2e3a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <LED_u8InitializeLed>
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPinValue(port_id,led_pin,HIGH);
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	6c 81       	ldd	r22, Y+4	; 0x04
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <LED_u8LedOff>:
uint8_t LED_u8LedOff(uint8_t port_id,uint8_t led_pin)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <LED_u8LedOff+0x6>
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <LED_u8LedOff+0x8>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	8b 83       	std	Y+3, r24	; 0x03
    2e6a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2e6c:	9e 01       	movw	r18, r28
    2e6e:	2e 5f       	subi	r18, 0xFE	; 254
    2e70:	3f 4f       	sbci	r19, 0xFF	; 255
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	6c 81       	ldd	r22, Y+4	; 0x04
    2e76:	a9 01       	movw	r20, r18
    2e78:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    2e7c:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	88 23       	and	r24, r24
    2e82:	71 f4       	brne	.+28     	; 0x2ea0 <LED_u8LedOff+0x44>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	88 23       	and	r24, r24
    2e88:	29 f4       	brne	.+10     	; 0x2e94 <LED_u8LedOff+0x38>
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e8e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <LED_u8InitializeLed>
    2e92:	89 83       	std	Y+1, r24	; 0x01
	    error_status = DIO_u8SetPinValue(port_id,led_pin,LOW);
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	6c 81       	ldd	r22, Y+4	; 0x04
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
    2e9e:	89 83       	std	Y+1, r24	; 0x01
		}
	return error_status;
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <LED_u8LedToggle>:
uint8_t LED_u8LedToggle(uint8_t port_id,uint8_t led_pin)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <LED_u8LedToggle+0x6>
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <LED_u8LedToggle+0x8>
    2eb8:	0f 92       	push	r0
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	8c 83       	std	Y+4, r24	; 0x04
    2ec0:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t value;
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2ec2:	9e 01       	movw	r18, r28
    2ec4:	2d 5f       	subi	r18, 0xFD	; 253
    2ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	6d 81       	ldd	r22, Y+5	; 0x05
    2ecc:	a9 01       	movw	r20, r18
    2ece:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    2ed2:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	88 23       	and	r24, r24
    2ed8:	21 f5       	brne	.+72     	; 0x2f22 <LED_u8LedToggle+0x72>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2eda:	8b 81       	ldd	r24, Y+3	; 0x03
    2edc:	88 23       	and	r24, r24
    2ede:	29 f4       	brne	.+10     	; 0x2eea <LED_u8LedToggle+0x3a>
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ee4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <LED_u8InitializeLed>
    2ee8:	89 83       	std	Y+1, r24	; 0x01
		error_status = DIO_u8GetPinValue(port_id,led_pin,&value);
    2eea:	9e 01       	movw	r18, r28
    2eec:	2e 5f       	subi	r18, 0xFE	; 254
    2eee:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ef4:	a9 01       	movw	r20, r18
    2ef6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <DIO_u8GetPinValue>
    2efa:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK){
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	88 23       	and	r24, r24
    2f00:	81 f4       	brne	.+32     	; 0x2f22 <LED_u8LedToggle+0x72>
			if(value==HIGH)error_status=DIO_u8SetPinValue(port_id,led_pin,LOW);
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	81 30       	cpi	r24, 0x01	; 1
    2f06:	39 f4       	brne	.+14     	; 0x2f16 <LED_u8LedToggle+0x66>
    2f08:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0a:	6d 81       	ldd	r22, Y+5	; 0x05
    2f0c:	40 e0       	ldi	r20, 0x00	; 0
    2f0e:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	06 c0       	rjmp	.+12     	; 0x2f22 <LED_u8LedToggle+0x72>
			else error_status=DIO_u8SetPinValue(port_id,led_pin,HIGH);
    2f16:	8c 81       	ldd	r24, Y+4	; 0x04
    2f18:	6d 81       	ldd	r22, Y+5	; 0x05
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
    2f20:	89 83       	std	Y+1, r24	; 0x01
		}
		}
	return error_status;
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <LED_u8LedBlink>:
uint8_t LED_u8LedBlink(uint8_t port_id,uint8_t led_pin,uint16_ delay_time_ms)
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	a2 97       	sbiw	r28, 0x22	; 34
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	8f 8f       	std	Y+31, r24	; 0x1f
    2f4a:	68 a3       	std	Y+32, r22	; 0x20
    2f4c:	5a a3       	std	Y+34, r21	; 0x22
    2f4e:	49 a3       	std	Y+33, r20	; 0x21
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2f50:	9e 01       	movw	r18, r28
    2f52:	22 5e       	subi	r18, 0xE2	; 226
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f58:	68 a1       	ldd	r22, Y+32	; 0x20
    2f5a:	a9 01       	movw	r20, r18
    2f5c:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    2f60:	8d 8f       	std	Y+29, r24	; 0x1d
	if(error_status==E_OK)
    2f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f64:	88 23       	and	r24, r24
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <LED_u8LedBlink+0x36>
    2f68:	08 c1       	rjmp	.+528    	; 0x317a <LED_u8LedBlink+0x246>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2f6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f6c:	88 23       	and	r24, r24
    2f6e:	29 f4       	brne	.+10     	; 0x2f7a <LED_u8LedBlink+0x46>
    2f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f72:	68 a1       	ldd	r22, Y+32	; 0x20
    2f74:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <LED_u8InitializeLed>
    2f78:	8d 8f       	std	Y+29, r24	; 0x1d
	error_status = LED_u8LedOn(port_id,led_pin);
    2f7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f7c:	68 a1       	ldd	r22, Y+32	; 0x20
    2f7e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LED_u8LedOn>
    2f82:	8d 8f       	std	Y+29, r24	; 0x1d
 	 _delay_ms(delay_time_ms);
    2f84:	89 a1       	ldd	r24, Y+33	; 0x21
    2f86:	9a a1       	ldd	r25, Y+34	; 0x22
    2f88:	cc 01       	movw	r24, r24
    2f8a:	a0 e0       	ldi	r26, 0x00	; 0
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	89 8f       	std	Y+25, r24	; 0x19
    2f9c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f9e:	ab 8f       	std	Y+27, r26	; 0x1b
    2fa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	4a ef       	ldi	r20, 0xFA	; 250
    2fb0:	54 e4       	ldi	r21, 0x44	; 68
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	8d 8b       	std	Y+21, r24	; 0x15
    2fbc:	9e 8b       	std	Y+22, r25	; 0x16
    2fbe:	af 8b       	std	Y+23, r26	; 0x17
    2fc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e8       	ldi	r20, 0x80	; 128
    2fd0:	5f e3       	ldi	r21, 0x3F	; 63
    2fd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd6:	88 23       	and	r24, r24
    2fd8:	2c f4       	brge	.+10     	; 0x2fe4 <LED_u8LedBlink+0xb0>
		__ticks = 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9c 8b       	std	Y+20, r25	; 0x14
    2fe0:	8b 8b       	std	Y+19, r24	; 0x13
    2fe2:	3f c0       	rjmp	.+126    	; 0x3062 <LED_u8LedBlink+0x12e>
	else if (__tmp > 65535)
    2fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fea:	98 8d       	ldd	r25, Y+24	; 0x18
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	3f ef       	ldi	r19, 0xFF	; 255
    2ff0:	4f e7       	ldi	r20, 0x7F	; 127
    2ff2:	57 e4       	ldi	r21, 0x47	; 71
    2ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff8:	18 16       	cp	r1, r24
    2ffa:	4c f5       	brge	.+82     	; 0x304e <LED_u8LedBlink+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 e2       	ldi	r20, 0x20	; 32
    300a:	51 e4       	ldi	r21, 0x41	; 65
    300c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9c 8b       	std	Y+20, r25	; 0x14
    3022:	8b 8b       	std	Y+19, r24	; 0x13
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <LED_u8LedBlink+0x110>
    3026:	88 ec       	ldi	r24, 0xC8	; 200
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9a 8b       	std	Y+18, r25	; 0x12
    302c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    302e:	89 89       	ldd	r24, Y+17	; 0x11
    3030:	9a 89       	ldd	r25, Y+18	; 0x12
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LED_u8LedBlink+0xfe>
    3036:	9a 8b       	std	Y+18, r25	; 0x12
    3038:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303a:	8b 89       	ldd	r24, Y+19	; 0x13
    303c:	9c 89       	ldd	r25, Y+20	; 0x14
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	9c 8b       	std	Y+20, r25	; 0x14
    3042:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3044:	8b 89       	ldd	r24, Y+19	; 0x13
    3046:	9c 89       	ldd	r25, Y+20	; 0x14
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	69 f7       	brne	.-38     	; 0x3026 <LED_u8LedBlink+0xf2>
    304c:	14 c0       	rjmp	.+40     	; 0x3076 <LED_u8LedBlink+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304e:	6d 89       	ldd	r22, Y+21	; 0x15
    3050:	7e 89       	ldd	r23, Y+22	; 0x16
    3052:	8f 89       	ldd	r24, Y+23	; 0x17
    3054:	98 8d       	ldd	r25, Y+24	; 0x18
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9c 8b       	std	Y+20, r25	; 0x14
    3060:	8b 8b       	std	Y+19, r24	; 0x13
    3062:	8b 89       	ldd	r24, Y+19	; 0x13
    3064:	9c 89       	ldd	r25, Y+20	; 0x14
    3066:	98 8b       	std	Y+16, r25	; 0x10
    3068:	8f 87       	std	Y+15, r24	; 0x0f
    306a:	8f 85       	ldd	r24, Y+15	; 0x0f
    306c:	98 89       	ldd	r25, Y+16	; 0x10
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <LED_u8LedBlink+0x13a>
    3072:	98 8b       	std	Y+16, r25	; 0x10
    3074:	8f 87       	std	Y+15, r24	; 0x0f
	if(error_status==E_OK){
    3076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3078:	88 23       	and	r24, r24
    307a:	09 f0       	breq	.+2      	; 0x307e <LED_u8LedBlink+0x14a>
    307c:	7e c0       	rjmp	.+252    	; 0x317a <LED_u8LedBlink+0x246>
	error_status = LED_u8LedOff(port_id,led_pin);
    307e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3080:	68 a1       	ldd	r22, Y+32	; 0x20
    3082:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LED_u8LedOff>
    3086:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(delay_time_ms);
    3088:	89 a1       	ldd	r24, Y+33	; 0x21
    308a:	9a a1       	ldd	r25, Y+34	; 0x22
    308c:	cc 01       	movw	r24, r24
    308e:	a0 e0       	ldi	r26, 0x00	; 0
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8b 87       	std	Y+11, r24	; 0x0b
    30a0:	9c 87       	std	Y+12, r25	; 0x0c
    30a2:	ad 87       	std	Y+13, r26	; 0x0d
    30a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a ef       	ldi	r20, 0xFA	; 250
    30b4:	54 e4       	ldi	r21, 0x44	; 68
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	8f 83       	std	Y+7, r24	; 0x07
    30c0:	98 87       	std	Y+8, r25	; 0x08
    30c2:	a9 87       	std	Y+9, r26	; 0x09
    30c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30c6:	6f 81       	ldd	r22, Y+7	; 0x07
    30c8:	78 85       	ldd	r23, Y+8	; 0x08
    30ca:	89 85       	ldd	r24, Y+9	; 0x09
    30cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	5f e3       	ldi	r21, 0x3F	; 63
    30d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30da:	88 23       	and	r24, r24
    30dc:	2c f4       	brge	.+10     	; 0x30e8 <LED_u8LedBlink+0x1b4>
		__ticks = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	3f c0       	rjmp	.+126    	; 0x3166 <LED_u8LedBlink+0x232>
	else if (__tmp > 65535)
    30e8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ea:	78 85       	ldd	r23, Y+8	; 0x08
    30ec:	89 85       	ldd	r24, Y+9	; 0x09
    30ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	4c f5       	brge	.+82     	; 0x3152 <LED_u8LedBlink+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	6b 85       	ldd	r22, Y+11	; 0x0b
    3102:	7c 85       	ldd	r23, Y+12	; 0x0c
    3104:	8d 85       	ldd	r24, Y+13	; 0x0d
    3106:	9e 85       	ldd	r25, Y+14	; 0x0e
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	51 e4       	ldi	r21, 0x41	; 65
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <LED_u8LedBlink+0x214>
    312a:	88 ec       	ldi	r24, 0xC8	; 200
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9c 83       	std	Y+4, r25	; 0x04
    3130:	8b 83       	std	Y+3, r24	; 0x03
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	9c 81       	ldd	r25, Y+4	; 0x04
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LED_u8LedBlink+0x202>
    313a:	9c 83       	std	Y+4, r25	; 0x04
    313c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	8d 81       	ldd	r24, Y+5	; 0x05
    3140:	9e 81       	ldd	r25, Y+6	; 0x06
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f7       	brne	.-38     	; 0x312a <LED_u8LedBlink+0x1f6>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <LED_u8LedBlink+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3152:	6f 81       	ldd	r22, Y+7	; 0x07
    3154:	78 85       	ldd	r23, Y+8	; 0x08
    3156:	89 85       	ldd	r24, Y+9	; 0x09
    3158:	9a 85       	ldd	r25, Y+10	; 0x0a
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <LED_u8LedBlink+0x23e>
    3176:	9a 83       	std	Y+2, r25	; 0x02
    3178:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    317a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    317c:	a2 96       	adiw	r28, 0x22	; 34
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	cf 91       	pop	r28
    318a:	df 91       	pop	r29
    318c:	08 95       	ret

0000318e <LED_u8LedPortOn>:


uint8_t LED_u8LedPortOn(uint8_t port_id)
{
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	00 d0       	rcall	.+0      	; 0x3194 <LED_u8LedPortOn+0x6>
    3194:	0f 92       	push	r0
    3196:	cd b7       	in	r28, 0x3d	; 61
    3198:	de b7       	in	r29, 0x3e	; 62
    319a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    319c:	9e 01       	movw	r18, r28
    319e:	2e 5f       	subi	r18, 0xFE	; 254
    31a0:	3f 4f       	sbci	r19, 0xFF	; 255
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	a9 01       	movw	r20, r18
    31a8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    31ac:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	88 23       	and	r24, r24
    31b2:	61 f4       	brne	.+24     	; 0x31cc <LED_u8LedPortOn+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	88 23       	and	r24, r24
    31b8:	21 f4       	brne	.+8      	; 0x31c2 <LED_u8LedPortOn+0x34>
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LED_u8InitializeLedPort>
    31c0:	89 83       	std	Y+1, r24	; 0x01
    error_status = DIO_u8SetPortValue(port_id,255);
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	6f ef       	ldi	r22, 0xFF	; 255
    31c6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_u8SetPortValue>
    31ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    31cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <LED_u8LedPortOff>:
uint8_t LED_u8LedPortOff(uint8_t port_id)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <LED_u8LedPortOff+0x6>
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    31e8:	9e 01       	movw	r18, r28
    31ea:	2e 5f       	subi	r18, 0xFE	; 254
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	8b 81       	ldd	r24, Y+3	; 0x03
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	a9 01       	movw	r20, r18
    31f4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    31f8:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	88 23       	and	r24, r24
    31fe:	61 f4       	brne	.+24     	; 0x3218 <LED_u8LedPortOff+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	88 23       	and	r24, r24
    3204:	21 f4       	brne	.+8      	; 0x320e <LED_u8LedPortOff+0x34>
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LED_u8InitializeLedPort>
    320c:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPortValue(port_id,LOW);
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_u8SetPortValue>
    3216:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
}
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	cf 91       	pop	r28
    3222:	df 91       	pop	r29
    3224:	08 95       	ret

00003226 <LED_u8LedPortToggle>:
uint8_t LED_u8LedPortToggle(uint8_t port_id)
{
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	00 d0       	rcall	.+0      	; 0x322c <LED_u8LedPortToggle+0x6>
    322c:	00 d0       	rcall	.+0      	; 0x322e <LED_u8LedPortToggle+0x8>
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t value;
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    3234:	9e 01       	movw	r18, r28
    3236:	2d 5f       	subi	r18, 0xFD	; 253
    3238:	3f 4f       	sbci	r19, 0xFF	; 255
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	a9 01       	movw	r20, r18
    3240:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    3244:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	88 23       	and	r24, r24
    324a:	01 f5       	brne	.+64     	; 0x328c <LED_u8LedPortToggle+0x66>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	88 23       	and	r24, r24
    3250:	21 f4       	brne	.+8      	; 0x325a <LED_u8LedPortToggle+0x34>
    3252:	8c 81       	ldd	r24, Y+4	; 0x04
    3254:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LED_u8InitializeLedPort>
    3258:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8GetPortValue(port_id,&value);
    325a:	9e 01       	movw	r18, r28
    325c:	2e 5f       	subi	r18, 0xFE	; 254
    325e:	3f 4f       	sbci	r19, 0xFF	; 255
    3260:	8c 81       	ldd	r24, Y+4	; 0x04
    3262:	b9 01       	movw	r22, r18
    3264:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <DIO_u8GetPortValue>
    3268:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK){
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	88 23       	and	r24, r24
    326e:	71 f4       	brne	.+28     	; 0x328c <LED_u8LedPortToggle+0x66>
		if(value==HIGH)error_status=DIO_u8SetPortValue(port_id,LOW);
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	81 30       	cpi	r24, 0x01	; 1
    3274:	31 f4       	brne	.+12     	; 0x3282 <LED_u8LedPortToggle+0x5c>
    3276:	8c 81       	ldd	r24, Y+4	; 0x04
    3278:	60 e0       	ldi	r22, 0x00	; 0
    327a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_u8SetPortValue>
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	05 c0       	rjmp	.+10     	; 0x328c <LED_u8LedPortToggle+0x66>
		else error_status=DIO_u8SetPortValue(port_id,255);
    3282:	8c 81       	ldd	r24, Y+4	; 0x04
    3284:	6f ef       	ldi	r22, 0xFF	; 255
    3286:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_u8SetPortValue>
    328a:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    328c:	89 81       	ldd	r24, Y+1	; 0x01
}
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <LED_u8LedPortBlink>:
uint8_t LED_u8LedPortBlink(uint8_t port_id,uint16_ delay_time_ms)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	a1 97       	sbiw	r28, 0x21	; 33
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	8f 8f       	std	Y+31, r24	; 0x1f
    32b2:	79 a3       	std	Y+33, r23	; 0x21
    32b4:	68 a3       	std	Y+32, r22	; 0x20
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    32b6:	9e 01       	movw	r18, r28
    32b8:	22 5e       	subi	r18, 0xE2	; 226
    32ba:	3f 4f       	sbci	r19, 0xFF	; 255
    32bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	a9 01       	movw	r20, r18
    32c2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8IsPinOutPut>
    32c6:	8d 8f       	std	Y+29, r24	; 0x1d
		if(error_status==E_OK)
    32c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ca:	88 23       	and	r24, r24
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <LED_u8LedPortBlink+0x34>
    32ce:	05 c1       	rjmp	.+522    	; 0x34da <LED_u8LedPortBlink+0x23e>
		{
		if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    32d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32d2:	88 23       	and	r24, r24
    32d4:	21 f4       	brne	.+8      	; 0x32de <LED_u8LedPortBlink+0x42>
    32d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32d8:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <LED_u8InitializeLedPort>
    32dc:	8d 8f       	std	Y+29, r24	; 0x1d
		error_status = LED_u8LedPortOn(port_id);
    32de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32e0:	0e 94 c7 18 	call	0x318e	; 0x318e <LED_u8LedPortOn>
    32e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    32e6:	88 a1       	ldd	r24, Y+32	; 0x20
    32e8:	99 a1       	ldd	r25, Y+33	; 0x21
    32ea:	cc 01       	movw	r24, r24
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	bc 01       	movw	r22, r24
    32f2:	cd 01       	movw	r24, r26
    32f4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	89 8f       	std	Y+25, r24	; 0x19
    32fe:	9a 8f       	std	Y+26, r25	; 0x1a
    3300:	ab 8f       	std	Y+27, r26	; 0x1b
    3302:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3304:	69 8d       	ldd	r22, Y+25	; 0x19
    3306:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3308:	8b 8d       	ldd	r24, Y+27	; 0x1b
    330a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	4a ef       	ldi	r20, 0xFA	; 250
    3312:	54 e4       	ldi	r21, 0x44	; 68
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	8d 8b       	std	Y+21, r24	; 0x15
    331e:	9e 8b       	std	Y+22, r25	; 0x16
    3320:	af 8b       	std	Y+23, r26	; 0x17
    3322:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3324:	6d 89       	ldd	r22, Y+21	; 0x15
    3326:	7e 89       	ldd	r23, Y+22	; 0x16
    3328:	8f 89       	ldd	r24, Y+23	; 0x17
    332a:	98 8d       	ldd	r25, Y+24	; 0x18
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e8       	ldi	r20, 0x80	; 128
    3332:	5f e3       	ldi	r21, 0x3F	; 63
    3334:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3338:	88 23       	and	r24, r24
    333a:	2c f4       	brge	.+10     	; 0x3346 <LED_u8LedPortBlink+0xaa>
		__ticks = 1;
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	9c 8b       	std	Y+20, r25	; 0x14
    3342:	8b 8b       	std	Y+19, r24	; 0x13
    3344:	3f c0       	rjmp	.+126    	; 0x33c4 <LED_u8LedPortBlink+0x128>
	else if (__tmp > 65535)
    3346:	6d 89       	ldd	r22, Y+21	; 0x15
    3348:	7e 89       	ldd	r23, Y+22	; 0x16
    334a:	8f 89       	ldd	r24, Y+23	; 0x17
    334c:	98 8d       	ldd	r25, Y+24	; 0x18
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	3f ef       	ldi	r19, 0xFF	; 255
    3352:	4f e7       	ldi	r20, 0x7F	; 127
    3354:	57 e4       	ldi	r21, 0x47	; 71
    3356:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    335a:	18 16       	cp	r1, r24
    335c:	4c f5       	brge	.+82     	; 0x33b0 <LED_u8LedPortBlink+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335e:	69 8d       	ldd	r22, Y+25	; 0x19
    3360:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e2       	ldi	r20, 0x20	; 32
    336c:	51 e4       	ldi	r21, 0x41	; 65
    336e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	bc 01       	movw	r22, r24
    3378:	cd 01       	movw	r24, r26
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	9c 8b       	std	Y+20, r25	; 0x14
    3384:	8b 8b       	std	Y+19, r24	; 0x13
    3386:	0f c0       	rjmp	.+30     	; 0x33a6 <LED_u8LedPortBlink+0x10a>
    3388:	88 ec       	ldi	r24, 0xC8	; 200
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	9a 8b       	std	Y+18, r25	; 0x12
    338e:	89 8b       	std	Y+17, r24	; 0x11
    3390:	89 89       	ldd	r24, Y+17	; 0x11
    3392:	9a 89       	ldd	r25, Y+18	; 0x12
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <LED_u8LedPortBlink+0xf8>
    3398:	9a 8b       	std	Y+18, r25	; 0x12
    339a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    339c:	8b 89       	ldd	r24, Y+19	; 0x13
    339e:	9c 89       	ldd	r25, Y+20	; 0x14
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	9c 8b       	std	Y+20, r25	; 0x14
    33a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a6:	8b 89       	ldd	r24, Y+19	; 0x13
    33a8:	9c 89       	ldd	r25, Y+20	; 0x14
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	69 f7       	brne	.-38     	; 0x3388 <LED_u8LedPortBlink+0xec>
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <LED_u8LedPortBlink+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b0:	6d 89       	ldd	r22, Y+21	; 0x15
    33b2:	7e 89       	ldd	r23, Y+22	; 0x16
    33b4:	8f 89       	ldd	r24, Y+23	; 0x17
    33b6:	98 8d       	ldd	r25, Y+24	; 0x18
    33b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	9c 8b       	std	Y+20, r25	; 0x14
    33c2:	8b 8b       	std	Y+19, r24	; 0x13
    33c4:	8b 89       	ldd	r24, Y+19	; 0x13
    33c6:	9c 89       	ldd	r25, Y+20	; 0x14
    33c8:	98 8b       	std	Y+16, r25	; 0x10
    33ca:	8f 87       	std	Y+15, r24	; 0x0f
    33cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ce:	98 89       	ldd	r25, Y+16	; 0x10
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <LED_u8LedPortBlink+0x134>
    33d4:	98 8b       	std	Y+16, r25	; 0x10
    33d6:	8f 87       	std	Y+15, r24	; 0x0f
		if(error_status==E_OK){
    33d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33da:	88 23       	and	r24, r24
    33dc:	09 f0       	breq	.+2      	; 0x33e0 <LED_u8LedPortBlink+0x144>
    33de:	7d c0       	rjmp	.+250    	; 0x34da <LED_u8LedPortBlink+0x23e>
		error_status = LED_u8LedPortOff(port_id);
    33e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33e2:	0e 94 ed 18 	call	0x31da	; 0x31da <LED_u8LedPortOff>
    33e6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    33e8:	88 a1       	ldd	r24, Y+32	; 0x20
    33ea:	99 a1       	ldd	r25, Y+33	; 0x21
    33ec:	cc 01       	movw	r24, r24
    33ee:	a0 e0       	ldi	r26, 0x00	; 0
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8b 87       	std	Y+11, r24	; 0x0b
    3400:	9c 87       	std	Y+12, r25	; 0x0c
    3402:	ad 87       	std	Y+13, r26	; 0x0d
    3404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3406:	6b 85       	ldd	r22, Y+11	; 0x0b
    3408:	7c 85       	ldd	r23, Y+12	; 0x0c
    340a:	8d 85       	ldd	r24, Y+13	; 0x0d
    340c:	9e 85       	ldd	r25, Y+14	; 0x0e
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	4a ef       	ldi	r20, 0xFA	; 250
    3414:	54 e4       	ldi	r21, 0x44	; 68
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	8f 83       	std	Y+7, r24	; 0x07
    3420:	98 87       	std	Y+8, r25	; 0x08
    3422:	a9 87       	std	Y+9, r26	; 0x09
    3424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3426:	6f 81       	ldd	r22, Y+7	; 0x07
    3428:	78 85       	ldd	r23, Y+8	; 0x08
    342a:	89 85       	ldd	r24, Y+9	; 0x09
    342c:	9a 85       	ldd	r25, Y+10	; 0x0a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	2c f4       	brge	.+10     	; 0x3448 <LED_u8LedPortBlink+0x1ac>
		__ticks = 1;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9e 83       	std	Y+6, r25	; 0x06
    3444:	8d 83       	std	Y+5, r24	; 0x05
    3446:	3f c0       	rjmp	.+126    	; 0x34c6 <LED_u8LedPortBlink+0x22a>
	else if (__tmp > 65535)
    3448:	6f 81       	ldd	r22, Y+7	; 0x07
    344a:	78 85       	ldd	r23, Y+8	; 0x08
    344c:	89 85       	ldd	r24, Y+9	; 0x09
    344e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	3f ef       	ldi	r19, 0xFF	; 255
    3454:	4f e7       	ldi	r20, 0x7F	; 127
    3456:	57 e4       	ldi	r21, 0x47	; 71
    3458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345c:	18 16       	cp	r1, r24
    345e:	4c f5       	brge	.+82     	; 0x34b2 <LED_u8LedPortBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3460:	6b 85       	ldd	r22, Y+11	; 0x0b
    3462:	7c 85       	ldd	r23, Y+12	; 0x0c
    3464:	8d 85       	ldd	r24, Y+13	; 0x0d
    3466:	9e 85       	ldd	r25, Y+14	; 0x0e
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	40 e2       	ldi	r20, 0x20	; 32
    346e:	51 e4       	ldi	r21, 0x41	; 65
    3470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	bc 01       	movw	r22, r24
    347a:	cd 01       	movw	r24, r26
    347c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	9e 83       	std	Y+6, r25	; 0x06
    3486:	8d 83       	std	Y+5, r24	; 0x05
    3488:	0f c0       	rjmp	.+30     	; 0x34a8 <LED_u8LedPortBlink+0x20c>
    348a:	88 ec       	ldi	r24, 0xC8	; 200
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9c 83       	std	Y+4, r25	; 0x04
    3490:	8b 83       	std	Y+3, r24	; 0x03
    3492:	8b 81       	ldd	r24, Y+3	; 0x03
    3494:	9c 81       	ldd	r25, Y+4	; 0x04
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <LED_u8LedPortBlink+0x1fa>
    349a:	9c 83       	std	Y+4, r25	; 0x04
    349c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	9e 83       	std	Y+6, r25	; 0x06
    34a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	69 f7       	brne	.-38     	; 0x348a <LED_u8LedPortBlink+0x1ee>
    34b0:	14 c0       	rjmp	.+40     	; 0x34da <LED_u8LedPortBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b2:	6f 81       	ldd	r22, Y+7	; 0x07
    34b4:	78 85       	ldd	r23, Y+8	; 0x08
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	9e 83       	std	Y+6, r25	; 0x06
    34c4:	8d 83       	std	Y+5, r24	; 0x05
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <LED_u8LedPortBlink+0x236>
    34d6:	9a 83       	std	Y+2, r25	; 0x02
    34d8:	89 83       	std	Y+1, r24	; 0x01
		}
		}

	return error_status;
    34da:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    34dc:	a1 96       	adiw	r28, 0x21	; 33
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <LCD_vidWriteData>:
#include"lcd_cfg.h"

uint8_t next_char_position = 0;

void LCD_vidWriteData(uint8_t data)
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	2f 97       	sbiw	r28, 0x0f	; 15
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    3504:	82 e0       	ldi	r24, 0x02	; 2
    3506:	67 e0       	ldi	r22, 0x07	; 7
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	65 e0       	ldi	r22, 0x05	; 5
    3512:	40 e0       	ldi	r20, 0x00	; 0
    3514:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,data);
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	6f 85       	ldd	r22, Y+15	; 0x0f
    351c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    3520:	82 e0       	ldi	r24, 0x02	; 2
    3522:	66 e0       	ldi	r22, 0x06	; 6
    3524:	41 e0       	ldi	r20, 0x01	; 1
    3526:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a0 e0       	ldi	r26, 0x00	; 0
    3530:	b0 e4       	ldi	r27, 0x40	; 64
    3532:	8b 87       	std	Y+11, r24	; 0x0b
    3534:	9c 87       	std	Y+12, r25	; 0x0c
    3536:	ad 87       	std	Y+13, r26	; 0x0d
    3538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353a:	6b 85       	ldd	r22, Y+11	; 0x0b
    353c:	7c 85       	ldd	r23, Y+12	; 0x0c
    353e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3540:	9e 85       	ldd	r25, Y+14	; 0x0e
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	4a ef       	ldi	r20, 0xFA	; 250
    3548:	54 e4       	ldi	r21, 0x44	; 68
    354a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	8f 83       	std	Y+7, r24	; 0x07
    3554:	98 87       	std	Y+8, r25	; 0x08
    3556:	a9 87       	std	Y+9, r26	; 0x09
    3558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    355a:	6f 81       	ldd	r22, Y+7	; 0x07
    355c:	78 85       	ldd	r23, Y+8	; 0x08
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e8       	ldi	r20, 0x80	; 128
    3568:	5f e3       	ldi	r21, 0x3F	; 63
    356a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    356e:	88 23       	and	r24, r24
    3570:	2c f4       	brge	.+10     	; 0x357c <LCD_vidWriteData+0x8e>
		__ticks = 1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	3f c0       	rjmp	.+126    	; 0x35fa <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    357c:	6f 81       	ldd	r22, Y+7	; 0x07
    357e:	78 85       	ldd	r23, Y+8	; 0x08
    3580:	89 85       	ldd	r24, Y+9	; 0x09
    3582:	9a 85       	ldd	r25, Y+10	; 0x0a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	3f ef       	ldi	r19, 0xFF	; 255
    3588:	4f e7       	ldi	r20, 0x7F	; 127
    358a:	57 e4       	ldi	r21, 0x47	; 71
    358c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3590:	18 16       	cp	r1, r24
    3592:	4c f5       	brge	.+82     	; 0x35e6 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3594:	6b 85       	ldd	r22, Y+11	; 0x0b
    3596:	7c 85       	ldd	r23, Y+12	; 0x0c
    3598:	8d 85       	ldd	r24, Y+13	; 0x0d
    359a:	9e 85       	ldd	r25, Y+14	; 0x0e
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	30 e0       	ldi	r19, 0x00	; 0
    35a0:	40 e2       	ldi	r20, 0x20	; 32
    35a2:	51 e4       	ldi	r21, 0x41	; 65
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9e 83       	std	Y+6, r25	; 0x06
    35ba:	8d 83       	std	Y+5, r24	; 0x05
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <LCD_vidWriteData+0xee>
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	9c 83       	std	Y+4, r25	; 0x04
    35c4:	8b 83       	std	Y+3, r24	; 0x03
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <LCD_vidWriteData+0xdc>
    35ce:	9c 83       	std	Y+4, r25	; 0x04
    35d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	9e 83       	std	Y+6, r25	; 0x06
    35da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35dc:	8d 81       	ldd	r24, Y+5	; 0x05
    35de:	9e 81       	ldd	r25, Y+6	; 0x06
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	69 f7       	brne	.-38     	; 0x35be <LCD_vidWriteData+0xd0>
    35e4:	14 c0       	rjmp	.+40     	; 0x360e <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	8d 81       	ldd	r24, Y+5	; 0x05
    35fc:	9e 81       	ldd	r25, Y+6	; 0x06
    35fe:	9a 83       	std	Y+2, r25	; 0x02
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <LCD_vidWriteData+0x118>
    360a:	9a 83       	std	Y+2, r25	; 0x02
    360c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	66 e0       	ldi	r22, 0x06	; 6
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
}
    3618:	2f 96       	adiw	r28, 0x0f	; 15
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	cf 91       	pop	r28
    3626:	df 91       	pop	r29
    3628:	08 95       	ret

0000362a <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8_t command)
{
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	2f 97       	sbiw	r28, 0x0f	; 15
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    3640:	82 e0       	ldi	r24, 0x02	; 2
    3642:	67 e0       	ldi	r22, 0x07	; 7
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    364a:	82 e0       	ldi	r24, 0x02	; 2
    364c:	65 e0       	ldi	r22, 0x05	; 5
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,command);
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	6f 85       	ldd	r22, Y+15	; 0x0f
    3658:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	66 e0       	ldi	r22, 0x06	; 6
    3660:	41 e0       	ldi	r20, 0x01	; 1
    3662:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	a0 e0       	ldi	r26, 0x00	; 0
    366c:	b0 e4       	ldi	r27, 0x40	; 64
    366e:	8b 87       	std	Y+11, r24	; 0x0b
    3670:	9c 87       	std	Y+12, r25	; 0x0c
    3672:	ad 87       	std	Y+13, r26	; 0x0d
    3674:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3676:	6b 85       	ldd	r22, Y+11	; 0x0b
    3678:	7c 85       	ldd	r23, Y+12	; 0x0c
    367a:	8d 85       	ldd	r24, Y+13	; 0x0d
    367c:	9e 85       	ldd	r25, Y+14	; 0x0e
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	4a ef       	ldi	r20, 0xFA	; 250
    3684:	54 e4       	ldi	r21, 0x44	; 68
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	8f 83       	std	Y+7, r24	; 0x07
    3690:	98 87       	std	Y+8, r25	; 0x08
    3692:	a9 87       	std	Y+9, r26	; 0x09
    3694:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3696:	6f 81       	ldd	r22, Y+7	; 0x07
    3698:	78 85       	ldd	r23, Y+8	; 0x08
    369a:	89 85       	ldd	r24, Y+9	; 0x09
    369c:	9a 85       	ldd	r25, Y+10	; 0x0a
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	5f e3       	ldi	r21, 0x3F	; 63
    36a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36aa:	88 23       	and	r24, r24
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <LCD_vidWriteCmd+0x8e>
		__ticks = 1;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	3f c0       	rjmp	.+126    	; 0x3736 <LCD_vidWriteCmd+0x10c>
	else if (__tmp > 65535)
    36b8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ba:	78 85       	ldd	r23, Y+8	; 0x08
    36bc:	89 85       	ldd	r24, Y+9	; 0x09
    36be:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	3f ef       	ldi	r19, 0xFF	; 255
    36c4:	4f e7       	ldi	r20, 0x7F	; 127
    36c6:	57 e4       	ldi	r21, 0x47	; 71
    36c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36cc:	18 16       	cp	r1, r24
    36ce:	4c f5       	brge	.+82     	; 0x3722 <LCD_vidWriteCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e2       	ldi	r20, 0x20	; 32
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9e 83       	std	Y+6, r25	; 0x06
    36f6:	8d 83       	std	Y+5, r24	; 0x05
    36f8:	0f c0       	rjmp	.+30     	; 0x3718 <LCD_vidWriteCmd+0xee>
    36fa:	88 ec       	ldi	r24, 0xC8	; 200
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	9c 83       	std	Y+4, r25	; 0x04
    3700:	8b 83       	std	Y+3, r24	; 0x03
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	9c 81       	ldd	r25, Y+4	; 0x04
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <LCD_vidWriteCmd+0xdc>
    370a:	9c 83       	std	Y+4, r25	; 0x04
    370c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370e:	8d 81       	ldd	r24, Y+5	; 0x05
    3710:	9e 81       	ldd	r25, Y+6	; 0x06
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3718:	8d 81       	ldd	r24, Y+5	; 0x05
    371a:	9e 81       	ldd	r25, Y+6	; 0x06
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	69 f7       	brne	.-38     	; 0x36fa <LCD_vidWriteCmd+0xd0>
    3720:	14 c0       	rjmp	.+40     	; 0x374a <LCD_vidWriteCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3722:	6f 81       	ldd	r22, Y+7	; 0x07
    3724:	78 85       	ldd	r23, Y+8	; 0x08
    3726:	89 85       	ldd	r24, Y+9	; 0x09
    3728:	9a 85       	ldd	r25, Y+10	; 0x0a
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	9e 83       	std	Y+6, r25	; 0x06
    3734:	8d 83       	std	Y+5, r24	; 0x05
    3736:	8d 81       	ldd	r24, Y+5	; 0x05
    3738:	9e 81       	ldd	r25, Y+6	; 0x06
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <LCD_vidWriteCmd+0x118>
    3746:	9a 83       	std	Y+2, r25	; 0x02
    3748:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    374a:	82 e0       	ldi	r24, 0x02	; 2
    374c:	66 e0       	ldi	r22, 0x06	; 6
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPinValue>
}
    3754:	2f 96       	adiw	r28, 0x0f	; 15
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <LCD_vidInit>:

void LCD_vidInit(void)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	e8 97       	sbiw	r28, 0x38	; 56
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    377a:	82 e0       	ldi	r24, 0x02	; 2
    377c:	67 e0       	ldi	r22, 0x07	; 7
    377e:	41 e0       	ldi	r20, 0x01	; 1
    3780:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	65 e0       	ldi	r22, 0x05	; 5
    3788:	41 e0       	ldi	r20, 0x01	; 1
    378a:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	66 e0       	ldi	r22, 0x06	; 6
    3792:	41 e0       	ldi	r20, 0x01	; 1
    3794:	0e 94 14 0b 	call	0x1628	; 0x1628 <DIO_u8SetPinMode>
	DIO_u8SetPortMode(LCD_Data_PORT,255);
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	6f ef       	ldi	r22, 0xFF	; 255
    379c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortMode>
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	a0 e2       	ldi	r26, 0x20	; 32
    37a6:	b2 e4       	ldi	r27, 0x42	; 66
    37a8:	8d ab       	std	Y+53, r24	; 0x35
    37aa:	9e ab       	std	Y+54, r25	; 0x36
    37ac:	af ab       	std	Y+55, r26	; 0x37
    37ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b0:	6d a9       	ldd	r22, Y+53	; 0x35
    37b2:	7e a9       	ldd	r23, Y+54	; 0x36
    37b4:	8f a9       	ldd	r24, Y+55	; 0x37
    37b6:	98 ad       	ldd	r25, Y+56	; 0x38
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	4a ef       	ldi	r20, 0xFA	; 250
    37be:	54 e4       	ldi	r21, 0x44	; 68
    37c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	89 ab       	std	Y+49, r24	; 0x31
    37ca:	9a ab       	std	Y+50, r25	; 0x32
    37cc:	ab ab       	std	Y+51, r26	; 0x33
    37ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37d0:	69 a9       	ldd	r22, Y+49	; 0x31
    37d2:	7a a9       	ldd	r23, Y+50	; 0x32
    37d4:	8b a9       	ldd	r24, Y+51	; 0x33
    37d6:	9c a9       	ldd	r25, Y+52	; 0x34
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	40 e8       	ldi	r20, 0x80	; 128
    37de:	5f e3       	ldi	r21, 0x3F	; 63
    37e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37e4:	88 23       	and	r24, r24
    37e6:	2c f4       	brge	.+10     	; 0x37f2 <LCD_vidInit+0x8c>
		__ticks = 1;
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	98 ab       	std	Y+48, r25	; 0x30
    37ee:	8f a7       	std	Y+47, r24	; 0x2f
    37f0:	3f c0       	rjmp	.+126    	; 0x3870 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    37f2:	69 a9       	ldd	r22, Y+49	; 0x31
    37f4:	7a a9       	ldd	r23, Y+50	; 0x32
    37f6:	8b a9       	ldd	r24, Y+51	; 0x33
    37f8:	9c a9       	ldd	r25, Y+52	; 0x34
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	3f ef       	ldi	r19, 0xFF	; 255
    37fe:	4f e7       	ldi	r20, 0x7F	; 127
    3800:	57 e4       	ldi	r21, 0x47	; 71
    3802:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3806:	18 16       	cp	r1, r24
    3808:	4c f5       	brge	.+82     	; 0x385c <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    380a:	6d a9       	ldd	r22, Y+53	; 0x35
    380c:	7e a9       	ldd	r23, Y+54	; 0x36
    380e:	8f a9       	ldd	r24, Y+55	; 0x37
    3810:	98 ad       	ldd	r25, Y+56	; 0x38
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e2       	ldi	r20, 0x20	; 32
    3818:	51 e4       	ldi	r21, 0x41	; 65
    381a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	bc 01       	movw	r22, r24
    3824:	cd 01       	movw	r24, r26
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	98 ab       	std	Y+48, r25	; 0x30
    3830:	8f a7       	std	Y+47, r24	; 0x2f
    3832:	0f c0       	rjmp	.+30     	; 0x3852 <LCD_vidInit+0xec>
    3834:	88 ec       	ldi	r24, 0xC8	; 200
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	9e a7       	std	Y+46, r25	; 0x2e
    383a:	8d a7       	std	Y+45, r24	; 0x2d
    383c:	8d a5       	ldd	r24, Y+45	; 0x2d
    383e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <LCD_vidInit+0xda>
    3844:	9e a7       	std	Y+46, r25	; 0x2e
    3846:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3848:	8f a5       	ldd	r24, Y+47	; 0x2f
    384a:	98 a9       	ldd	r25, Y+48	; 0x30
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	98 ab       	std	Y+48, r25	; 0x30
    3850:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3852:	8f a5       	ldd	r24, Y+47	; 0x2f
    3854:	98 a9       	ldd	r25, Y+48	; 0x30
    3856:	00 97       	sbiw	r24, 0x00	; 0
    3858:	69 f7       	brne	.-38     	; 0x3834 <LCD_vidInit+0xce>
    385a:	14 c0       	rjmp	.+40     	; 0x3884 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    385c:	69 a9       	ldd	r22, Y+49	; 0x31
    385e:	7a a9       	ldd	r23, Y+50	; 0x32
    3860:	8b a9       	ldd	r24, Y+51	; 0x33
    3862:	9c a9       	ldd	r25, Y+52	; 0x34
    3864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	98 ab       	std	Y+48, r25	; 0x30
    386e:	8f a7       	std	Y+47, r24	; 0x2f
    3870:	8f a5       	ldd	r24, Y+47	; 0x2f
    3872:	98 a9       	ldd	r25, Y+48	; 0x30
    3874:	9c a7       	std	Y+44, r25	; 0x2c
    3876:	8b a7       	std	Y+43, r24	; 0x2b
    3878:	8b a5       	ldd	r24, Y+43	; 0x2b
    387a:	9c a5       	ldd	r25, Y+44	; 0x2c
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <LCD_vidInit+0x116>
    3880:	9c a7       	std	Y+44, r25	; 0x2c
    3882:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_vidWriteCmd(0b00111000);
    3884:	88 e3       	ldi	r24, 0x38	; 56
    3886:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e0       	ldi	r26, 0x00	; 0
    3890:	b0 e4       	ldi	r27, 0x40	; 64
    3892:	8f a3       	std	Y+39, r24	; 0x27
    3894:	98 a7       	std	Y+40, r25	; 0x28
    3896:	a9 a7       	std	Y+41, r26	; 0x29
    3898:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	6f a1       	ldd	r22, Y+39	; 0x27
    389c:	78 a5       	ldd	r23, Y+40	; 0x28
    389e:	89 a5       	ldd	r24, Y+41	; 0x29
    38a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	4a ef       	ldi	r20, 0xFA	; 250
    38a8:	54 e4       	ldi	r21, 0x44	; 68
    38aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	8b a3       	std	Y+35, r24	; 0x23
    38b4:	9c a3       	std	Y+36, r25	; 0x24
    38b6:	ad a3       	std	Y+37, r26	; 0x25
    38b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38ba:	6b a1       	ldd	r22, Y+35	; 0x23
    38bc:	7c a1       	ldd	r23, Y+36	; 0x24
    38be:	8d a1       	ldd	r24, Y+37	; 0x25
    38c0:	9e a1       	ldd	r25, Y+38	; 0x26
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e8       	ldi	r20, 0x80	; 128
    38c8:	5f e3       	ldi	r21, 0x3F	; 63
    38ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38ce:	88 23       	and	r24, r24
    38d0:	2c f4       	brge	.+10     	; 0x38dc <LCD_vidInit+0x176>
		__ticks = 1;
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9a a3       	std	Y+34, r25	; 0x22
    38d8:	89 a3       	std	Y+33, r24	; 0x21
    38da:	3f c0       	rjmp	.+126    	; 0x395a <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    38dc:	6b a1       	ldd	r22, Y+35	; 0x23
    38de:	7c a1       	ldd	r23, Y+36	; 0x24
    38e0:	8d a1       	ldd	r24, Y+37	; 0x25
    38e2:	9e a1       	ldd	r25, Y+38	; 0x26
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	3f ef       	ldi	r19, 0xFF	; 255
    38e8:	4f e7       	ldi	r20, 0x7F	; 127
    38ea:	57 e4       	ldi	r21, 0x47	; 71
    38ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f0:	18 16       	cp	r1, r24
    38f2:	4c f5       	brge	.+82     	; 0x3946 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f4:	6f a1       	ldd	r22, Y+39	; 0x27
    38f6:	78 a5       	ldd	r23, Y+40	; 0x28
    38f8:	89 a5       	ldd	r24, Y+41	; 0x29
    38fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	9a a3       	std	Y+34, r25	; 0x22
    391a:	89 a3       	std	Y+33, r24	; 0x21
    391c:	0f c0       	rjmp	.+30     	; 0x393c <LCD_vidInit+0x1d6>
    391e:	88 ec       	ldi	r24, 0xC8	; 200
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	98 a3       	std	Y+32, r25	; 0x20
    3924:	8f 8f       	std	Y+31, r24	; 0x1f
    3926:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3928:	98 a1       	ldd	r25, Y+32	; 0x20
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	f1 f7       	brne	.-4      	; 0x392a <LCD_vidInit+0x1c4>
    392e:	98 a3       	std	Y+32, r25	; 0x20
    3930:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3932:	89 a1       	ldd	r24, Y+33	; 0x21
    3934:	9a a1       	ldd	r25, Y+34	; 0x22
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	9a a3       	std	Y+34, r25	; 0x22
    393a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393c:	89 a1       	ldd	r24, Y+33	; 0x21
    393e:	9a a1       	ldd	r25, Y+34	; 0x22
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	69 f7       	brne	.-38     	; 0x391e <LCD_vidInit+0x1b8>
    3944:	14 c0       	rjmp	.+40     	; 0x396e <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3946:	6b a1       	ldd	r22, Y+35	; 0x23
    3948:	7c a1       	ldd	r23, Y+36	; 0x24
    394a:	8d a1       	ldd	r24, Y+37	; 0x25
    394c:	9e a1       	ldd	r25, Y+38	; 0x26
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9a a3       	std	Y+34, r25	; 0x22
    3958:	89 a3       	std	Y+33, r24	; 0x21
    395a:	89 a1       	ldd	r24, Y+33	; 0x21
    395c:	9a a1       	ldd	r25, Y+34	; 0x22
    395e:	9e 8f       	std	Y+30, r25	; 0x1e
    3960:	8d 8f       	std	Y+29, r24	; 0x1d
    3962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <LCD_vidInit+0x200>
    396a:	9e 8f       	std	Y+30, r25	; 0x1e
    396c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidWriteCmd(0b00001100);
    396e:	8c e0       	ldi	r24, 0x0C	; 12
    3970:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	a0 e0       	ldi	r26, 0x00	; 0
    397a:	b0 e4       	ldi	r27, 0x40	; 64
    397c:	89 8f       	std	Y+25, r24	; 0x19
    397e:	9a 8f       	std	Y+26, r25	; 0x1a
    3980:	ab 8f       	std	Y+27, r26	; 0x1b
    3982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3984:	69 8d       	ldd	r22, Y+25	; 0x19
    3986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	4a ef       	ldi	r20, 0xFA	; 250
    3992:	54 e4       	ldi	r21, 0x44	; 68
    3994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	8d 8b       	std	Y+21, r24	; 0x15
    399e:	9e 8b       	std	Y+22, r25	; 0x16
    39a0:	af 8b       	std	Y+23, r26	; 0x17
    39a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39a4:	6d 89       	ldd	r22, Y+21	; 0x15
    39a6:	7e 89       	ldd	r23, Y+22	; 0x16
    39a8:	8f 89       	ldd	r24, Y+23	; 0x17
    39aa:	98 8d       	ldd	r25, Y+24	; 0x18
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e8       	ldi	r20, 0x80	; 128
    39b2:	5f e3       	ldi	r21, 0x3F	; 63
    39b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39b8:	88 23       	and	r24, r24
    39ba:	2c f4       	brge	.+10     	; 0x39c6 <LCD_vidInit+0x260>
		__ticks = 1;
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	9c 8b       	std	Y+20, r25	; 0x14
    39c2:	8b 8b       	std	Y+19, r24	; 0x13
    39c4:	3f c0       	rjmp	.+126    	; 0x3a44 <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    39c6:	6d 89       	ldd	r22, Y+21	; 0x15
    39c8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	98 8d       	ldd	r25, Y+24	; 0x18
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	3f ef       	ldi	r19, 0xFF	; 255
    39d2:	4f e7       	ldi	r20, 0x7F	; 127
    39d4:	57 e4       	ldi	r21, 0x47	; 71
    39d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39da:	18 16       	cp	r1, r24
    39dc:	4c f5       	brge	.+82     	; 0x3a30 <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39de:	69 8d       	ldd	r22, Y+25	; 0x19
    39e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e2       	ldi	r20, 0x20	; 32
    39ec:	51 e4       	ldi	r21, 0x41	; 65
    39ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	bc 01       	movw	r22, r24
    39f8:	cd 01       	movw	r24, r26
    39fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	9c 8b       	std	Y+20, r25	; 0x14
    3a04:	8b 8b       	std	Y+19, r24	; 0x13
    3a06:	0f c0       	rjmp	.+30     	; 0x3a26 <LCD_vidInit+0x2c0>
    3a08:	88 ec       	ldi	r24, 0xC8	; 200
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9a 8b       	std	Y+18, r25	; 0x12
    3a0e:	89 8b       	std	Y+17, r24	; 0x11
    3a10:	89 89       	ldd	r24, Y+17	; 0x11
    3a12:	9a 89       	ldd	r25, Y+18	; 0x12
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <LCD_vidInit+0x2ae>
    3a18:	9a 8b       	std	Y+18, r25	; 0x12
    3a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	9c 8b       	std	Y+20, r25	; 0x14
    3a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a26:	8b 89       	ldd	r24, Y+19	; 0x13
    3a28:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	69 f7       	brne	.-38     	; 0x3a08 <LCD_vidInit+0x2a2>
    3a2e:	14 c0       	rjmp	.+40     	; 0x3a58 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a30:	6d 89       	ldd	r22, Y+21	; 0x15
    3a32:	7e 89       	ldd	r23, Y+22	; 0x16
    3a34:	8f 89       	ldd	r24, Y+23	; 0x17
    3a36:	98 8d       	ldd	r25, Y+24	; 0x18
    3a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	9c 8b       	std	Y+20, r25	; 0x14
    3a42:	8b 8b       	std	Y+19, r24	; 0x13
    3a44:	8b 89       	ldd	r24, Y+19	; 0x13
    3a46:	9c 89       	ldd	r25, Y+20	; 0x14
    3a48:	98 8b       	std	Y+16, r25	; 0x10
    3a4a:	8f 87       	std	Y+15, r24	; 0x0f
    3a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a4e:	98 89       	ldd	r25, Y+16	; 0x10
    3a50:	01 97       	sbiw	r24, 0x01	; 1
    3a52:	f1 f7       	brne	.-4      	; 0x3a50 <LCD_vidInit+0x2ea>
    3a54:	98 8b       	std	Y+16, r25	; 0x10
    3a56:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000001);
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	a0 e0       	ldi	r26, 0x00	; 0
    3a64:	b0 e4       	ldi	r27, 0x40	; 64
    3a66:	8b 87       	std	Y+11, r24	; 0x0b
    3a68:	9c 87       	std	Y+12, r25	; 0x0c
    3a6a:	ad 87       	std	Y+13, r26	; 0x0d
    3a6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	4a ef       	ldi	r20, 0xFA	; 250
    3a7c:	54 e4       	ldi	r21, 0x44	; 68
    3a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	8f 83       	std	Y+7, r24	; 0x07
    3a88:	98 87       	std	Y+8, r25	; 0x08
    3a8a:	a9 87       	std	Y+9, r26	; 0x09
    3a8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a90:	78 85       	ldd	r23, Y+8	; 0x08
    3a92:	89 85       	ldd	r24, Y+9	; 0x09
    3a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e8       	ldi	r20, 0x80	; 128
    3a9c:	5f e3       	ldi	r21, 0x3F	; 63
    3a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aa2:	88 23       	and	r24, r24
    3aa4:	2c f4       	brge	.+10     	; 0x3ab0 <LCD_vidInit+0x34a>
		__ticks = 1;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
    3aaa:	9e 83       	std	Y+6, r25	; 0x06
    3aac:	8d 83       	std	Y+5, r24	; 0x05
    3aae:	3f c0       	rjmp	.+126    	; 0x3b2e <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	3f ef       	ldi	r19, 0xFF	; 255
    3abc:	4f e7       	ldi	r20, 0x7F	; 127
    3abe:	57 e4       	ldi	r21, 0x47	; 71
    3ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ac4:	18 16       	cp	r1, r24
    3ac6:	4c f5       	brge	.+82     	; 0x3b1a <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e2       	ldi	r20, 0x20	; 32
    3ad6:	51 e4       	ldi	r21, 0x41	; 65
    3ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	9e 83       	std	Y+6, r25	; 0x06
    3aee:	8d 83       	std	Y+5, r24	; 0x05
    3af0:	0f c0       	rjmp	.+30     	; 0x3b10 <LCD_vidInit+0x3aa>
    3af2:	88 ec       	ldi	r24, 0xC8	; 200
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	9c 83       	std	Y+4, r25	; 0x04
    3af8:	8b 83       	std	Y+3, r24	; 0x03
    3afa:	8b 81       	ldd	r24, Y+3	; 0x03
    3afc:	9c 81       	ldd	r25, Y+4	; 0x04
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <LCD_vidInit+0x398>
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b06:	8d 81       	ldd	r24, Y+5	; 0x05
    3b08:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	9e 83       	std	Y+6, r25	; 0x06
    3b0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b10:	8d 81       	ldd	r24, Y+5	; 0x05
    3b12:	9e 81       	ldd	r25, Y+6	; 0x06
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	69 f7       	brne	.-38     	; 0x3af2 <LCD_vidInit+0x38c>
    3b18:	14 c0       	rjmp	.+40     	; 0x3b42 <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1c:	78 85       	ldd	r23, Y+8	; 0x08
    3b1e:	89 85       	ldd	r24, Y+9	; 0x09
    3b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	8d 83       	std	Y+5, r24	; 0x05
    3b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b30:	9e 81       	ldd	r25, Y+6	; 0x06
    3b32:	9a 83       	std	Y+2, r25	; 0x02
    3b34:	89 83       	std	Y+1, r24	; 0x01
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <LCD_vidInit+0x3d4>
    3b3e:	9a 83       	std	Y+2, r25	; 0x02
    3b40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000110);
    3b42:	86 e0       	ldi	r24, 0x06	; 6
    3b44:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
}
    3b48:	e8 96       	adiw	r28, 0x38	; 56
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	cd bf       	out	0x3d, r28	; 61
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <LCD_vidDisplayString>:

void LCD_vidDisplayString(uint8_t * string)
{
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	00 d0       	rcall	.+0      	; 0x3b60 <LCD_vidDisplayString+0x6>
    3b60:	0f 92       	push	r0
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	9b 83       	std	Y+3, r25	; 0x03
    3b68:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; string[i]!='\0'; i++)
    3b6a:	19 82       	std	Y+1, r1	; 0x01
    3b6c:	1a c0       	rjmp	.+52     	; 0x3ba2 <LCD_vidDisplayString+0x48>
	{
		if(next_char_position==16)LCD_vidWriteCmd(0b11000000);
    3b6e:	80 91 4c 04 	lds	r24, 0x044C
    3b72:	80 31       	cpi	r24, 0x10	; 16
    3b74:	19 f4       	brne	.+6      	; 0x3b7c <LCD_vidDisplayString+0x22>
    3b76:	80 ec       	ldi	r24, 0xC0	; 192
    3b78:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
		LCD_vidWriteData(string[i]);
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	28 2f       	mov	r18, r24
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	9b 81       	ldd	r25, Y+3	; 0x03
    3b86:	fc 01       	movw	r30, r24
    3b88:	e2 0f       	add	r30, r18
    3b8a:	f3 1f       	adc	r31, r19
    3b8c:	80 81       	ld	r24, Z
    3b8e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vidWriteData>
		next_char_position++;
    3b92:	80 91 4c 04 	lds	r24, 0x044C
    3b96:	8f 5f       	subi	r24, 0xFF	; 255
    3b98:	80 93 4c 04 	sts	0x044C, r24
	LCD_vidWriteCmd(0b00000110);
}

void LCD_vidDisplayString(uint8_t * string)
{
	for(uint8_t i=0; string[i]!='\0'; i++)
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ba0:	89 83       	std	Y+1, r24	; 0x01
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	28 2f       	mov	r18, r24
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    3baa:	9b 81       	ldd	r25, Y+3	; 0x03
    3bac:	fc 01       	movw	r30, r24
    3bae:	e2 0f       	add	r30, r18
    3bb0:	f3 1f       	adc	r31, r19
    3bb2:	80 81       	ld	r24, Z
    3bb4:	88 23       	and	r24, r24
    3bb6:	d9 f6       	brne	.-74     	; 0x3b6e <LCD_vidDisplayString+0x14>
	{
		if(next_char_position==16)LCD_vidWriteCmd(0b11000000);
		LCD_vidWriteData(string[i]);
		next_char_position++;
	}
}
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <LCD_vidNewLine>:
void LCD_vidNewLine()
{
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b11000000);
    3bcc:	80 ec       	ldi	r24, 0xC0	; 192
    3bce:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
}
    3bd2:	cf 91       	pop	r28
    3bd4:	df 91       	pop	r29
    3bd6:	08 95       	ret

00003bd8 <LCD_vidDisplayStringLeftShift>:
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
    3bd8:	df 93       	push	r29
    3bda:	cf 93       	push	r28
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	62 97       	sbiw	r28, 0x12	; 18
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	9a 8b       	std	Y+18, r25	; 0x12
    3bee:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3bf0:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3bf2:	18 8a       	std	Y+16, r1	; 0x10
    3bf4:	0e c0       	rjmp	.+28     	; 0x3c12 <LCD_vidDisplayStringLeftShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3bf6:	88 89       	ldd	r24, Y+16	; 0x10
    3bf8:	28 2f       	mov	r18, r24
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	89 89       	ldd	r24, Y+17	; 0x11
    3bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    3c00:	fc 01       	movw	r30, r24
    3c02:	e2 0f       	add	r30, r18
    3c04:	f3 1f       	adc	r31, r19
    3c06:	80 81       	ld	r24, Z
    3c08:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vidWriteData>
	LCD_vidWriteCmd(0b11000000);
}
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3c0c:	88 89       	ldd	r24, Y+16	; 0x10
    3c0e:	8f 5f       	subi	r24, 0xFF	; 255
    3c10:	88 8b       	std	Y+16, r24	; 0x10
    3c12:	88 89       	ldd	r24, Y+16	; 0x10
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	89 89       	ldd	r24, Y+17	; 0x11
    3c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	e2 0f       	add	r30, r18
    3c20:	f3 1f       	adc	r31, r19
    3c22:	80 81       	ld	r24, Z
    3c24:	88 23       	and	r24, r24
    3c26:	39 f7       	brne	.-50     	; 0x3bf6 <LCD_vidDisplayStringLeftShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c2a:	98 89       	ldd	r25, Y+16	; 0x10
    3c2c:	69 2f       	mov	r22, r25
    3c2e:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodqi4>
    3c32:	89 2f       	mov	r24, r25
    3c34:	80 31       	cpi	r24, 0x10	; 16
    3c36:	19 f4       	brne	.+6      	; 0x3c3e <LCD_vidDisplayStringLeftShift+0x66>
    3c38:	80 e8       	ldi	r24, 0x80	; 128
    3c3a:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011000);
    3c3e:	88 e1       	ldi	r24, 0x18	; 24
    3c40:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	aa ef       	ldi	r26, 0xFA	; 250
    3c4a:	b3 e4       	ldi	r27, 0x43	; 67
    3c4c:	8b 87       	std	Y+11, r24	; 0x0b
    3c4e:	9c 87       	std	Y+12, r25	; 0x0c
    3c50:	ad 87       	std	Y+13, r26	; 0x0d
    3c52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	4a ef       	ldi	r20, 0xFA	; 250
    3c62:	54 e4       	ldi	r21, 0x44	; 68
    3c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	8f 83       	std	Y+7, r24	; 0x07
    3c6e:	98 87       	std	Y+8, r25	; 0x08
    3c70:	a9 87       	std	Y+9, r26	; 0x09
    3c72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c74:	6f 81       	ldd	r22, Y+7	; 0x07
    3c76:	78 85       	ldd	r23, Y+8	; 0x08
    3c78:	89 85       	ldd	r24, Y+9	; 0x09
    3c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e8       	ldi	r20, 0x80	; 128
    3c82:	5f e3       	ldi	r21, 0x3F	; 63
    3c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c88:	88 23       	and	r24, r24
    3c8a:	2c f4       	brge	.+10     	; 0x3c96 <LCD_vidDisplayStringLeftShift+0xbe>
		__ticks = 1;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	3f c0       	rjmp	.+126    	; 0x3d14 <LCD_vidDisplayStringLeftShift+0x13c>
	else if (__tmp > 65535)
    3c96:	6f 81       	ldd	r22, Y+7	; 0x07
    3c98:	78 85       	ldd	r23, Y+8	; 0x08
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	3f ef       	ldi	r19, 0xFF	; 255
    3ca2:	4f e7       	ldi	r20, 0x7F	; 127
    3ca4:	57 e4       	ldi	r21, 0x47	; 71
    3ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3caa:	18 16       	cp	r1, r24
    3cac:	4c f5       	brge	.+82     	; 0x3d00 <LCD_vidDisplayStringLeftShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	9e 83       	std	Y+6, r25	; 0x06
    3cd4:	8d 83       	std	Y+5, r24	; 0x05
    3cd6:	0f c0       	rjmp	.+30     	; 0x3cf6 <LCD_vidDisplayStringLeftShift+0x11e>
    3cd8:	88 ec       	ldi	r24, 0xC8	; 200
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	9c 83       	std	Y+4, r25	; 0x04
    3cde:	8b 83       	std	Y+3, r24	; 0x03
    3ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <LCD_vidDisplayStringLeftShift+0x10c>
    3ce8:	9c 83       	std	Y+4, r25	; 0x04
    3cea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cec:	8d 81       	ldd	r24, Y+5	; 0x05
    3cee:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	9e 83       	std	Y+6, r25	; 0x06
    3cf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	69 f7       	brne	.-38     	; 0x3cd8 <LCD_vidDisplayStringLeftShift+0x100>
    3cfe:	14 c0       	rjmp	.+40     	; 0x3d28 <LCD_vidDisplayStringLeftShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d00:	6f 81       	ldd	r22, Y+7	; 0x07
    3d02:	78 85       	ldd	r23, Y+8	; 0x08
    3d04:	89 85       	ldd	r24, Y+9	; 0x09
    3d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	cb 01       	movw	r24, r22
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	8d 83       	std	Y+5, r24	; 0x05
    3d14:	8d 81       	ldd	r24, Y+5	; 0x05
    3d16:	9e 81       	ldd	r25, Y+6	; 0x06
    3d18:	9a 83       	std	Y+2, r25	; 0x02
    3d1a:	89 83       	std	Y+1, r24	; 0x01
    3d1c:	89 81       	ldd	r24, Y+1	; 0x01
    3d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d20:	01 97       	sbiw	r24, 0x01	; 1
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCD_vidDisplayStringLeftShift+0x148>
    3d24:	9a 83       	std	Y+2, r25	; 0x02
    3d26:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d2a:	8f 5f       	subi	r24, 0xFF	; 255
    3d2c:	8f 87       	std	Y+15, r24	; 0x0f
    3d2e:	7c cf       	rjmp	.-264    	; 0x3c28 <LCD_vidDisplayStringLeftShift+0x50>

00003d30 <LCD_vidDisplayStringRightShift>:
	}
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	62 97       	sbiw	r28, 0x12	; 18
    3d3a:	0f b6       	in	r0, 0x3f	; 63
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	9a 8b       	std	Y+18, r25	; 0x12
    3d46:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3d48:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3d4a:	18 8a       	std	Y+16, r1	; 0x10
    3d4c:	0e c0       	rjmp	.+28     	; 0x3d6a <LCD_vidDisplayStringRightShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3d4e:	88 89       	ldd	r24, Y+16	; 0x10
    3d50:	28 2f       	mov	r18, r24
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	89 89       	ldd	r24, Y+17	; 0x11
    3d56:	9a 89       	ldd	r25, Y+18	; 0x12
    3d58:	fc 01       	movw	r30, r24
    3d5a:	e2 0f       	add	r30, r18
    3d5c:	f3 1f       	adc	r31, r19
    3d5e:	80 81       	ld	r24, Z
    3d60:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vidWriteData>
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3d64:	88 89       	ldd	r24, Y+16	; 0x10
    3d66:	8f 5f       	subi	r24, 0xFF	; 255
    3d68:	88 8b       	std	Y+16, r24	; 0x10
    3d6a:	88 89       	ldd	r24, Y+16	; 0x10
    3d6c:	28 2f       	mov	r18, r24
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	89 89       	ldd	r24, Y+17	; 0x11
    3d72:	9a 89       	ldd	r25, Y+18	; 0x12
    3d74:	fc 01       	movw	r30, r24
    3d76:	e2 0f       	add	r30, r18
    3d78:	f3 1f       	adc	r31, r19
    3d7a:	80 81       	ld	r24, Z
    3d7c:	88 23       	and	r24, r24
    3d7e:	39 f7       	brne	.-50     	; 0x3d4e <LCD_vidDisplayStringRightShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d82:	98 89       	ldd	r25, Y+16	; 0x10
    3d84:	69 2f       	mov	r22, r25
    3d86:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodqi4>
    3d8a:	89 2f       	mov	r24, r25
    3d8c:	80 31       	cpi	r24, 0x10	; 16
    3d8e:	19 f4       	brne	.+6      	; 0x3d96 <LCD_vidDisplayStringRightShift+0x66>
    3d90:	80 e8       	ldi	r24, 0x80	; 128
    3d92:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011100);
    3d96:	8c e1       	ldi	r24, 0x1C	; 28
    3d98:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	aa ef       	ldi	r26, 0xFA	; 250
    3da2:	b3 e4       	ldi	r27, 0x43	; 67
    3da4:	8b 87       	std	Y+11, r24	; 0x0b
    3da6:	9c 87       	std	Y+12, r25	; 0x0c
    3da8:	ad 87       	std	Y+13, r26	; 0x0d
    3daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	4a ef       	ldi	r20, 0xFA	; 250
    3dba:	54 e4       	ldi	r21, 0x44	; 68
    3dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	8f 83       	std	Y+7, r24	; 0x07
    3dc6:	98 87       	std	Y+8, r25	; 0x08
    3dc8:	a9 87       	std	Y+9, r26	; 0x09
    3dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    3dce:	78 85       	ldd	r23, Y+8	; 0x08
    3dd0:	89 85       	ldd	r24, Y+9	; 0x09
    3dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e8       	ldi	r20, 0x80	; 128
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3de0:	88 23       	and	r24, r24
    3de2:	2c f4       	brge	.+10     	; 0x3dee <LCD_vidDisplayStringRightShift+0xbe>
		__ticks = 1;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	9e 83       	std	Y+6, r25	; 0x06
    3dea:	8d 83       	std	Y+5, r24	; 0x05
    3dec:	3f c0       	rjmp	.+126    	; 0x3e6c <LCD_vidDisplayStringRightShift+0x13c>
	else if (__tmp > 65535)
    3dee:	6f 81       	ldd	r22, Y+7	; 0x07
    3df0:	78 85       	ldd	r23, Y+8	; 0x08
    3df2:	89 85       	ldd	r24, Y+9	; 0x09
    3df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	3f ef       	ldi	r19, 0xFF	; 255
    3dfa:	4f e7       	ldi	r20, 0x7F	; 127
    3dfc:	57 e4       	ldi	r21, 0x47	; 71
    3dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e02:	18 16       	cp	r1, r24
    3e04:	4c f5       	brge	.+82     	; 0x3e58 <LCD_vidDisplayStringRightShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	40 e2       	ldi	r20, 0x20	; 32
    3e14:	51 e4       	ldi	r21, 0x41	; 65
    3e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1a:	dc 01       	movw	r26, r24
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	bc 01       	movw	r22, r24
    3e20:	cd 01       	movw	r24, r26
    3e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	9e 83       	std	Y+6, r25	; 0x06
    3e2c:	8d 83       	std	Y+5, r24	; 0x05
    3e2e:	0f c0       	rjmp	.+30     	; 0x3e4e <LCD_vidDisplayStringRightShift+0x11e>
    3e30:	88 ec       	ldi	r24, 0xC8	; 200
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	9c 83       	std	Y+4, r25	; 0x04
    3e36:	8b 83       	std	Y+3, r24	; 0x03
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3c:	01 97       	sbiw	r24, 0x01	; 1
    3e3e:	f1 f7       	brne	.-4      	; 0x3e3c <LCD_vidDisplayStringRightShift+0x10c>
    3e40:	9c 83       	std	Y+4, r25	; 0x04
    3e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e44:	8d 81       	ldd	r24, Y+5	; 0x05
    3e46:	9e 81       	ldd	r25, Y+6	; 0x06
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	9e 83       	std	Y+6, r25	; 0x06
    3e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e50:	9e 81       	ldd	r25, Y+6	; 0x06
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	69 f7       	brne	.-38     	; 0x3e30 <LCD_vidDisplayStringRightShift+0x100>
    3e56:	14 c0       	rjmp	.+40     	; 0x3e80 <LCD_vidDisplayStringRightShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e58:	6f 81       	ldd	r22, Y+7	; 0x07
    3e5a:	78 85       	ldd	r23, Y+8	; 0x08
    3e5c:	89 85       	ldd	r24, Y+9	; 0x09
    3e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	9e 83       	std	Y+6, r25	; 0x06
    3e6a:	8d 83       	std	Y+5, r24	; 0x05
    3e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e70:	9a 83       	std	Y+2, r25	; 0x02
    3e72:	89 83       	std	Y+1, r24	; 0x01
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	9a 81       	ldd	r25, Y+2	; 0x02
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	f1 f7       	brne	.-4      	; 0x3e78 <LCD_vidDisplayStringRightShift+0x148>
    3e7c:	9a 83       	std	Y+2, r25	; 0x02
    3e7e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e82:	8f 5f       	subi	r24, 0xFF	; 255
    3e84:	8f 87       	std	Y+15, r24	; 0x0f
    3e86:	7c cf       	rjmp	.-264    	; 0x3d80 <LCD_vidDisplayStringRightShift+0x50>

00003e88 <LCD_vidClearDisplay>:
	}
}

void LCD_vidClearDisplay()
{
    3e88:	df 93       	push	r29
    3e8a:	cf 93       	push	r28
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b00000001);
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
	next_char_position = 0;
    3e96:	10 92 4c 04 	sts	0x044C, r1
}
    3e9a:	cf 91       	pop	r28
    3e9c:	df 91       	pop	r29
    3e9e:	08 95       	ret

00003ea0 <LCD_vidGoTo>:

void LCD_vidGoTo(uint8_t x,uint8_t y)
{
    3ea0:	df 93       	push	r29
    3ea2:	cf 93       	push	r28
    3ea4:	00 d0       	rcall	.+0      	; 0x3ea6 <LCD_vidGoTo+0x6>
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    3eac:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1&&y<=39)LCD_vidWriteCmd((0b10000000+y));
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	81 30       	cpi	r24, 0x01	; 1
    3eb2:	41 f4       	brne	.+16     	; 0x3ec4 <LCD_vidGoTo+0x24>
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	88 32       	cpi	r24, 0x28	; 40
    3eb8:	28 f4       	brcc	.+10     	; 0x3ec4 <LCD_vidGoTo+0x24>
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	80 58       	subi	r24, 0x80	; 128
    3ebe:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
    3ec2:	0f c0       	rjmp	.+30     	; 0x3ee2 <LCD_vidGoTo+0x42>
	else if(x==2&&(y+64)<103) LCD_vidWriteCmd((0b11000000+y));
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	82 30       	cpi	r24, 0x02	; 2
    3ec8:	61 f4       	brne	.+24     	; 0x3ee2 <LCD_vidGoTo+0x42>
    3eca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ecc:	88 2f       	mov	r24, r24
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	80 5c       	subi	r24, 0xC0	; 192
    3ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed4:	87 36       	cpi	r24, 0x67	; 103
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	24 f4       	brge	.+8      	; 0x3ee2 <LCD_vidGoTo+0x42>
    3eda:	8a 81       	ldd	r24, Y+2	; 0x02
    3edc:	80 54       	subi	r24, 0x40	; 64
    3ede:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
}
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <LCD_vidSetCursor>:

void LCD_vidSetCursor(uint8_t x,uint8_t y)
{
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <LCD_vidSetCursor+0x6>
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    3ef6:	89 83       	std	Y+1, r24	; 0x01
    3ef8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vidGoTo(x,y);
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	6a 81       	ldd	r22, Y+2	; 0x02
    3efe:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <LCD_vidGoTo>
	LCD_vidWriteCmd(0b00001111);
    3f02:	8f e0       	ldi	r24, 0x0F	; 15
    3f04:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
}
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	08 95       	ret

00003f12 <LCD_vidWriteInteger>:

void LCD_vidWriteInteger(uint16_ number)
{
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
    3f1a:	28 97       	sbiw	r28, 0x08	; 8
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	98 87       	std	Y+8, r25	; 0x08
    3f28:	8f 83       	std	Y+7, r24	; 0x07
	uint16_ num_mask=number,p=1;
    3f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f2c:	98 85       	ldd	r25, Y+8	; 0x08
    3f2e:	9e 83       	std	Y+6, r25	; 0x06
    3f30:	8d 83       	std	Y+5, r24	; 0x05
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	9c 83       	std	Y+4, r25	; 0x04
    3f38:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i=0;
    3f3a:	1a 82       	std	Y+2, r1	; 0x02
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
    3f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f40:	00 97       	sbiw	r24, 0x00	; 0
    3f42:	f9 f4       	brne	.+62     	; 0x3f82 <LCD_vidWriteInteger+0x70>
    3f44:	80 e3       	ldi	r24, 0x30	; 48
    3f46:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vidWriteData>
    3f4a:	1b c0       	rjmp	.+54     	; 0x3f82 <LCD_vidWriteInteger+0x70>
	for(;num_mask!=0;i++)
	{
		num_mask/=10;
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f50:	2a e0       	ldi	r18, 0x0A	; 10
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	b9 01       	movw	r22, r18
    3f56:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__udivmodhi4>
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	9e 83       	std	Y+6, r25	; 0x06
    3f5e:	8d 83       	std	Y+5, r24	; 0x05
		p*=10;
    3f60:	8b 81       	ldd	r24, Y+3	; 0x03
    3f62:	9c 81       	ldd	r25, Y+4	; 0x04
    3f64:	9c 01       	movw	r18, r24
    3f66:	22 0f       	add	r18, r18
    3f68:	33 1f       	adc	r19, r19
    3f6a:	c9 01       	movw	r24, r18
    3f6c:	88 0f       	add	r24, r24
    3f6e:	99 1f       	adc	r25, r25
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	82 0f       	add	r24, r18
    3f76:	93 1f       	adc	r25, r19
    3f78:	9c 83       	std	Y+4, r25	; 0x04
    3f7a:	8b 83       	std	Y+3, r24	; 0x03
{
	uint16_ num_mask=number,p=1;
	uint8_t i=0;
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
	for(;num_mask!=0;i++)
    3f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7e:	8f 5f       	subi	r24, 0xFF	; 255
    3f80:	8a 83       	std	Y+2, r24	; 0x02
    3f82:	8d 81       	ldd	r24, Y+5	; 0x05
    3f84:	9e 81       	ldd	r25, Y+6	; 0x06
    3f86:	00 97       	sbiw	r24, 0x00	; 0
    3f88:	09 f7       	brne	.-62     	; 0x3f4c <LCD_vidWriteInteger+0x3a>
	{
		num_mask/=10;
		p*=10;
	}

	p/=10;
    3f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8e:	2a e0       	ldi	r18, 0x0A	; 10
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	b9 01       	movw	r22, r18
    3f94:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__udivmodhi4>
    3f98:	cb 01       	movw	r24, r22
    3f9a:	9c 83       	std	Y+4, r25	; 0x04
    3f9c:	8b 83       	std	Y+3, r24	; 0x03
	nxtl = i - 16;
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	80 51       	subi	r24, 0x10	; 16
    3fa2:	89 83       	std	Y+1, r24	; 0x01
	if(nxtl < 0) nxtl =0;
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	88 23       	and	r24, r24
    3fa8:	0c f0       	brlt	.+2      	; 0x3fac <LCD_vidWriteInteger+0x9a>
    3faa:	3e c0       	rjmp	.+124    	; 0x4028 <LCD_vidWriteInteger+0x116>
    3fac:	19 82       	std	Y+1, r1	; 0x01
    3fae:	3c c0       	rjmp	.+120    	; 0x4028 <LCD_vidWriteInteger+0x116>
	for(;i>0;i--)
	{
		if(i==nxtl)LCD_vidWriteCmd(0b11000000);
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	28 2f       	mov	r18, r24
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	99 27       	eor	r25, r25
    3fba:	87 fd       	sbrc	r24, 7
    3fbc:	90 95       	com	r25
    3fbe:	28 17       	cp	r18, r24
    3fc0:	39 07       	cpc	r19, r25
    3fc2:	19 f4       	brne	.+6      	; 0x3fca <LCD_vidWriteInteger+0xb8>
    3fc4:	80 ec       	ldi	r24, 0xC0	; 192
    3fc6:	0e 94 15 1b 	call	0x362a	; 0x362a <LCD_vidWriteCmd>
		num_mask= (uint8_t)(number/p);
    3fca:	8f 81       	ldd	r24, Y+7	; 0x07
    3fcc:	98 85       	ldd	r25, Y+8	; 0x08
    3fce:	2b 81       	ldd	r18, Y+3	; 0x03
    3fd0:	3c 81       	ldd	r19, Y+4	; 0x04
    3fd2:	b9 01       	movw	r22, r18
    3fd4:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__udivmodhi4>
    3fd8:	cb 01       	movw	r24, r22
    3fda:	88 2f       	mov	r24, r24
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	9e 83       	std	Y+6, r25	; 0x06
    3fe0:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData((uint8_t)'0'+num_mask);
    3fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe4:	80 5d       	subi	r24, 0xD0	; 208
    3fe6:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_vidWriteData>
		number -= num_mask*p;
    3fea:	2d 81       	ldd	r18, Y+5	; 0x05
    3fec:	3e 81       	ldd	r19, Y+6	; 0x06
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff2:	a9 01       	movw	r20, r18
    3ff4:	48 9f       	mul	r20, r24
    3ff6:	90 01       	movw	r18, r0
    3ff8:	49 9f       	mul	r20, r25
    3ffa:	30 0d       	add	r19, r0
    3ffc:	58 9f       	mul	r21, r24
    3ffe:	30 0d       	add	r19, r0
    4000:	11 24       	eor	r1, r1
    4002:	8f 81       	ldd	r24, Y+7	; 0x07
    4004:	98 85       	ldd	r25, Y+8	; 0x08
    4006:	82 1b       	sub	r24, r18
    4008:	93 0b       	sbc	r25, r19
    400a:	98 87       	std	Y+8, r25	; 0x08
    400c:	8f 83       	std	Y+7, r24	; 0x07
		p/=10;
    400e:	8b 81       	ldd	r24, Y+3	; 0x03
    4010:	9c 81       	ldd	r25, Y+4	; 0x04
    4012:	2a e0       	ldi	r18, 0x0A	; 10
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	b9 01       	movw	r22, r18
    4018:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__udivmodhi4>
    401c:	cb 01       	movw	r24, r22
    401e:	9c 83       	std	Y+4, r25	; 0x04
    4020:	8b 83       	std	Y+3, r24	; 0x03
	}

	p/=10;
	nxtl = i - 16;
	if(nxtl < 0) nxtl =0;
	for(;i>0;i--)
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	81 50       	subi	r24, 0x01	; 1
    4026:	8a 83       	std	Y+2, r24	; 0x02
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	88 23       	and	r24, r24
    402c:	09 f6       	brne	.-126    	; 0x3fb0 <LCD_vidWriteInteger+0x9e>
		num_mask= (uint8_t)(number/p);
		LCD_vidWriteData((uint8_t)'0'+num_mask);
		number -= num_mask*p;
		p/=10;
	}
}
    402e:	28 96       	adiw	r28, 0x08	; 8
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	cf 91       	pop	r28
    403c:	df 91       	pop	r29
    403e:	08 95       	ret

00004040 <FLEX_vidFlexInit>:
#include"../../mcal/adc_driver/adc_int.h"
#include"flex_sensor_int.h"


void FLEX_vidFlexInit(uint8_t sensor_pin)
{
    4040:	df 93       	push	r29
    4042:	cf 93       	push	r28
    4044:	0f 92       	push	r0
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
    404a:	89 83       	std	Y+1, r24	; 0x01

	ADC_vidAdcInit(AREF_VOLTAGE);
    404c:	82 e0       	ldi	r24, 0x02	; 2
    404e:	0e 94 5f 10 	call	0x20be	; 0x20be <ADC_vidAdcInit>
	ADC_vidAdcPinInit(sensor_pin);
    4052:	89 81       	ldd	r24, Y+1	; 0x01
    4054:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <ADC_vidAdcPinInit>

}
    4058:	0f 90       	pop	r0
    405a:	cf 91       	pop	r28
    405c:	df 91       	pop	r29
    405e:	08 95       	ret

00004060 <FLEX_vidGetFlexRead>:

void FLEX_vidGetFlexRead(uint16_* sensor_read, uint8_t sensor_pin)
{
    4060:	df 93       	push	r29
    4062:	cf 93       	push	r28
    4064:	00 d0       	rcall	.+0      	; 0x4066 <FLEX_vidGetFlexRead+0x6>
    4066:	0f 92       	push	r0
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	9a 83       	std	Y+2, r25	; 0x02
    406e:	89 83       	std	Y+1, r24	; 0x01
    4070:	6b 83       	std	Y+3, r22	; 0x03
	ADC_vidSetReadingVariable(sensor_read);
    4072:	89 81       	ldd	r24, Y+1	; 0x01
    4074:	9a 81       	ldd	r25, Y+2	; 0x02
    4076:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ADC_vidSetReadingVariable>
	ADC_vidAdcGetRead(sensor_pin);
    407a:	8b 81       	ldd	r24, Y+3	; 0x03
    407c:	0e 94 28 11 	call	0x2250	; 0x2250 <ADC_vidAdcGetRead>
}
    4080:	0f 90       	pop	r0
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	cf 91       	pop	r28
    4088:	df 91       	pop	r29
    408a:	08 95       	ret

0000408c <FLEX_vidSetCallBack>:

void FLEX_vidSetCallBack(void (*func)(void))
{
    408c:	df 93       	push	r29
    408e:	cf 93       	push	r28
    4090:	00 d0       	rcall	.+0      	; 0x4092 <FLEX_vidSetCallBack+0x6>
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetCallBack(func);
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <ADC_vidSetCallBack>
}
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	cf 91       	pop	r28
    40a8:	df 91       	pop	r29
    40aa:	08 95       	ret

000040ac <M16P_vidInit>:

static uint8_t send_buf[SERIAL_BUFF_SIZE] = {0x7E, 0xFF, 06, 00, 00, 00, 00, 00, 00, 0xEF};
static uint8_t recv_buf[SERIAL_BUFF_SIZE];
static uint8_t is_reply = 0;

void M16P_vidInit(uint16_ baud) {
    40ac:	df 93       	push	r29
    40ae:	cf 93       	push	r28
    40b0:	00 d0       	rcall	.+0      	; 0x40b2 <M16P_vidInit+0x6>
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	9a 83       	std	Y+2, r25	; 0x02
    40b8:	89 83       	std	Y+1, r24	; 0x01
    is_reply = 0;
    40ba:	10 92 4d 04 	sts	0x044D, r1
    UART_Init(baud);
    40be:	89 81       	ldd	r24, Y+1	; 0x01
    40c0:	9a 81       	ldd	r25, Y+2	; 0x02
    40c2:	0e 94 36 13 	call	0x266c	; 0x266c <UART_Init>
}
    40c6:	0f 90       	pop	r0
    40c8:	0f 90       	pop	r0
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <M16P_vidSetReply>:

void M16P_vidSetReply(uint8_t state) {
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	0f 92       	push	r0
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
    40da:	89 83       	std	Y+1, r24	; 0x01
    is_reply = state;
    40dc:	89 81       	ldd	r24, Y+1	; 0x01
    40de:	80 93 4d 04 	sts	0x044D, r24
    send_buf[4] = is_reply;
    40e2:	80 91 4d 04 	lds	r24, 0x044D
    40e6:	80 93 2d 04 	sts	0x042D, r24
}
    40ea:	0f 90       	pop	r0
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <M16P_vidFillBufUint16>:

static void M16P_vidFillBufUint16(uint8_t *thebuf, uint16_ data) {
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	00 d0       	rcall	.+0      	; 0x40f8 <M16P_vidFillBufUint16+0x6>
    40f8:	00 d0       	rcall	.+0      	; 0x40fa <M16P_vidFillBufUint16+0x8>
    40fa:	cd b7       	in	r28, 0x3d	; 61
    40fc:	de b7       	in	r29, 0x3e	; 62
    40fe:	9a 83       	std	Y+2, r25	; 0x02
    4100:	89 83       	std	Y+1, r24	; 0x01
    4102:	7c 83       	std	Y+4, r23	; 0x04
    4104:	6b 83       	std	Y+3, r22	; 0x03
    *thebuf = (uint8_t)(data >> 8);
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	89 2f       	mov	r24, r25
    410c:	99 27       	eor	r25, r25
    410e:	e9 81       	ldd	r30, Y+1	; 0x01
    4110:	fa 81       	ldd	r31, Y+2	; 0x02
    4112:	80 83       	st	Z, r24
    *(thebuf + 1) = (uint8_t)data;
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	9a 81       	ldd	r25, Y+2	; 0x02
    4118:	fc 01       	movw	r30, r24
    411a:	31 96       	adiw	r30, 0x01	; 1
    411c:	8b 81       	ldd	r24, Y+3	; 0x03
    411e:	80 83       	st	Z, r24
}
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	cf 91       	pop	r28
    412a:	df 91       	pop	r29
    412c:	08 95       	ret

0000412e <M16P_Uu16GetCheckSum>:

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    412e:	df 93       	push	r29
    4130:	cf 93       	push	r28
    4132:	00 d0       	rcall	.+0      	; 0x4134 <M16P_Uu16GetCheckSum+0x6>
    4134:	00 d0       	rcall	.+0      	; 0x4136 <M16P_Uu16GetCheckSum+0x8>
    4136:	00 d0       	rcall	.+0      	; 0x4138 <M16P_Uu16GetCheckSum+0xa>
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	8d 83       	std	Y+5, r24	; 0x05
    uint16_ sum = 0;
    4140:	1c 82       	std	Y+4, r1	; 0x04
    4142:	1b 82       	std	Y+3, r1	; 0x03
    for (int i = 1; i < 7; i++) {
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	89 83       	std	Y+1, r24	; 0x01
    414c:	15 c0       	rjmp	.+42     	; 0x4178 <M16P_Uu16GetCheckSum+0x4a>
        sum += thebuf[i];
    414e:	29 81       	ldd	r18, Y+1	; 0x01
    4150:	3a 81       	ldd	r19, Y+2	; 0x02
    4152:	8d 81       	ldd	r24, Y+5	; 0x05
    4154:	9e 81       	ldd	r25, Y+6	; 0x06
    4156:	fc 01       	movw	r30, r24
    4158:	e2 0f       	add	r30, r18
    415a:	f3 1f       	adc	r31, r19
    415c:	80 81       	ld	r24, Z
    415e:	28 2f       	mov	r18, r24
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	8b 81       	ldd	r24, Y+3	; 0x03
    4164:	9c 81       	ldd	r25, Y+4	; 0x04
    4166:	82 0f       	add	r24, r18
    4168:	93 1f       	adc	r25, r19
    416a:	9c 83       	std	Y+4, r25	; 0x04
    416c:	8b 83       	std	Y+3, r24	; 0x03
    *(thebuf + 1) = (uint8_t)data;
}

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    uint16_ sum = 0;
    for (int i = 1; i < 7; i++) {
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	9a 81       	ldd	r25, Y+2	; 0x02
    4172:	01 96       	adiw	r24, 0x01	; 1
    4174:	9a 83       	std	Y+2, r25	; 0x02
    4176:	89 83       	std	Y+1, r24	; 0x01
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	9a 81       	ldd	r25, Y+2	; 0x02
    417c:	87 30       	cpi	r24, 0x07	; 7
    417e:	91 05       	cpc	r25, r1
    4180:	34 f3       	brlt	.-52     	; 0x414e <M16P_Uu16GetCheckSum+0x20>
        sum += thebuf[i];
    }
    return -sum;
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	90 95       	com	r25
    4188:	81 95       	neg	r24
    418a:	9f 4f       	sbci	r25, 0xFF	; 255
}
    418c:	26 96       	adiw	r28, 0x06	; 6
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	cf 91       	pop	r28
    419a:	df 91       	pop	r29
    419c:	08 95       	ret

0000419e <M16P_vidFillCheckSum>:

static void M16P_vidFillCheckSum() {
    419e:	df 93       	push	r29
    41a0:	cf 93       	push	r28
    41a2:	00 d0       	rcall	.+0      	; 0x41a4 <M16P_vidFillCheckSum+0x6>
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    41a8:	89 e2       	ldi	r24, 0x29	; 41
    41aa:	94 e0       	ldi	r25, 0x04	; 4
    41ac:	0e 94 97 20 	call	0x412e	; 0x412e <M16P_Uu16GetCheckSum>
    41b0:	9a 83       	std	Y+2, r25	; 0x02
    41b2:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidFillBufUint16(send_buf + 7, checksum);
    41b4:	80 e3       	ldi	r24, 0x30	; 48
    41b6:	94 e0       	ldi	r25, 0x04	; 4
    41b8:	29 81       	ldd	r18, Y+1	; 0x01
    41ba:	3a 81       	ldd	r19, Y+2	; 0x02
    41bc:	b9 01       	movw	r22, r18
    41be:	0e 94 79 20 	call	0x40f2	; 0x40f2 <M16P_vidFillBufUint16>
}
    41c2:	0f 90       	pop	r0
    41c4:	0f 90       	pop	r0
    41c6:	cf 91       	pop	r28
    41c8:	df 91       	pop	r29
    41ca:	08 95       	ret

000041cc <M16P_vidSendFunc>:

static void M16P_vidSendFunc() {
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	00 d0       	rcall	.+0      	; 0x41d2 <M16P_vidSendFunc+0x6>
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    41d6:	1a 82       	std	Y+2, r1	; 0x02
    41d8:	19 82       	std	Y+1, r1	; 0x01
    41da:	0d c0       	rjmp	.+26     	; 0x41f6 <M16P_vidSendFunc+0x2a>
        UART_Transmit(send_buf[i]);
    41dc:	89 81       	ldd	r24, Y+1	; 0x01
    41de:	9a 81       	ldd	r25, Y+2	; 0x02
    41e0:	fc 01       	movw	r30, r24
    41e2:	e7 5d       	subi	r30, 0xD7	; 215
    41e4:	fb 4f       	sbci	r31, 0xFB	; 251
    41e6:	80 81       	ld	r24, Z
    41e8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <UART_Transmit>
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    M16P_vidFillBufUint16(send_buf + 7, checksum);
}

static void M16P_vidSendFunc() {
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	9a 81       	ldd	r25, Y+2	; 0x02
    41f0:	01 96       	adiw	r24, 0x01	; 1
    41f2:	9a 83       	std	Y+2, r25	; 0x02
    41f4:	89 83       	std	Y+1, r24	; 0x01
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	9a 81       	ldd	r25, Y+2	; 0x02
    41fa:	8a 30       	cpi	r24, 0x0A	; 10
    41fc:	91 05       	cpc	r25, r1
    41fe:	74 f3       	brlt	.-36     	; 0x41dc <M16P_vidSendFunc+0x10>
        UART_Transmit(send_buf[i]);
    }
}
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	cf 91       	pop	r28
    4206:	df 91       	pop	r29
    4208:	08 95       	ret

0000420a <M16P_vidSendCmd>:

static void M16P_vidSendCmd(uint8_t cmd, uint16_ arg1, uint16_ arg2) {
    420a:	df 93       	push	r29
    420c:	cf 93       	push	r28
    420e:	00 d0       	rcall	.+0      	; 0x4210 <M16P_vidSendCmd+0x6>
    4210:	00 d0       	rcall	.+0      	; 0x4212 <M16P_vidSendCmd+0x8>
    4212:	0f 92       	push	r0
    4214:	cd b7       	in	r28, 0x3d	; 61
    4216:	de b7       	in	r29, 0x3e	; 62
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	7b 83       	std	Y+3, r23	; 0x03
    421c:	6a 83       	std	Y+2, r22	; 0x02
    421e:	5d 83       	std	Y+5, r21	; 0x05
    4220:	4c 83       	std	Y+4, r20	; 0x04
    send_buf[3] = cmd;
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	80 93 2c 04 	sts	0x042C, r24
    send_buf[5] = arg1;
    4228:	8a 81       	ldd	r24, Y+2	; 0x02
    422a:	80 93 2e 04 	sts	0x042E, r24
    send_buf[6] = arg2;
    422e:	8c 81       	ldd	r24, Y+4	; 0x04
    4230:	80 93 2f 04 	sts	0x042F, r24
    M16P_vidFillCheckSum();
    4234:	0e 94 cf 20 	call	0x419e	; 0x419e <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4238:	0e 94 e6 20 	call	0x41cc	; 0x41cc <M16P_vidSendFunc>
}
    423c:	0f 90       	pop	r0
    423e:	0f 90       	pop	r0
    4240:	0f 90       	pop	r0
    4242:	0f 90       	pop	r0
    4244:	0f 90       	pop	r0
    4246:	cf 91       	pop	r28
    4248:	df 91       	pop	r29
    424a:	08 95       	ret

0000424c <M16P_vidSendCmdSingleArg>:

static void M16P_vidSendCmdSingleArg(uint8_t cmd, uint16_ arg) {
    424c:	df 93       	push	r29
    424e:	cf 93       	push	r28
    4250:	00 d0       	rcall	.+0      	; 0x4252 <M16P_vidSendCmdSingleArg+0x6>
    4252:	0f 92       	push	r0
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	89 83       	std	Y+1, r24	; 0x01
    425a:	7b 83       	std	Y+3, r23	; 0x03
    425c:	6a 83       	std	Y+2, r22	; 0x02
    send_buf[3] = cmd;
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	80 93 2c 04 	sts	0x042C, r24
    M16P_vidFillBufUint16((send_buf + 5), arg);
    4264:	8e e2       	ldi	r24, 0x2E	; 46
    4266:	94 e0       	ldi	r25, 0x04	; 4
    4268:	2a 81       	ldd	r18, Y+2	; 0x02
    426a:	3b 81       	ldd	r19, Y+3	; 0x03
    426c:	b9 01       	movw	r22, r18
    426e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    4272:	0e 94 cf 20 	call	0x419e	; 0x419e <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4276:	0e 94 e6 20 	call	0x41cc	; 0x41cc <M16P_vidSendFunc>
}
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <M16P_vidSendCmdNoArg>:

static void M16P_vidSendCmdNoArg(uint8_t cmd) {
    4286:	df 93       	push	r29
    4288:	cf 93       	push	r28
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	89 83       	std	Y+1, r24	; 0x01
    send_buf[3] = cmd;
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	80 93 2c 04 	sts	0x042C, r24
    M16P_vidFillBufUint16((send_buf + 5), 0);
    4298:	8e e2       	ldi	r24, 0x2E	; 46
    429a:	94 e0       	ldi	r25, 0x04	; 4
    429c:	60 e0       	ldi	r22, 0x00	; 0
    429e:	70 e0       	ldi	r23, 0x00	; 0
    42a0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    42a4:	0e 94 cf 20 	call	0x419e	; 0x419e <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    42a8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <M16P_vidSendFunc>
}
    42ac:	0f 90       	pop	r0
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <M16P_vidPlayTrack>:

void M16P_vidPlayTrack(uint16_ num) {
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	00 d0       	rcall	.+0      	; 0x42ba <M16P_vidPlayTrack+0x6>
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	9a 83       	std	Y+2, r25	; 0x02
    42c0:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x03, num);
    42c2:	29 81       	ldd	r18, Y+1	; 0x01
    42c4:	3a 81       	ldd	r19, Y+2	; 0x02
    42c6:	83 e0       	ldi	r24, 0x03	; 3
    42c8:	b9 01       	movw	r22, r18
    42ca:	0e 94 26 21 	call	0x424c	; 0x424c <M16P_vidSendCmdSingleArg>
}
    42ce:	0f 90       	pop	r0
    42d0:	0f 90       	pop	r0
    42d2:	cf 91       	pop	r28
    42d4:	df 91       	pop	r29
    42d6:	08 95       	ret

000042d8 <M16P_vidNextTrack>:

void M16P_vidNextTrack() {
    42d8:	df 93       	push	r29
    42da:	cf 93       	push	r28
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x01);
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <M16P_vidPreviousTrack>:

void M16P_vidPreviousTrack() {
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x02);
    42f4:	82 e0       	ldi	r24, 0x02	; 2
    42f6:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    42fa:	cf 91       	pop	r28
    42fc:	df 91       	pop	r29
    42fe:	08 95       	ret

00004300 <M16P_vidSetVolume>:

void M16P_vidSetVolume(uint16_ volume) {
    4300:	df 93       	push	r29
    4302:	cf 93       	push	r28
    4304:	00 d0       	rcall	.+0      	; 0x4306 <M16P_vidSetVolume+0x6>
    4306:	cd b7       	in	r28, 0x3d	; 61
    4308:	de b7       	in	r29, 0x3e	; 62
    430a:	9a 83       	std	Y+2, r25	; 0x02
    430c:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x06, volume);
    430e:	29 81       	ldd	r18, Y+1	; 0x01
    4310:	3a 81       	ldd	r19, Y+2	; 0x02
    4312:	86 e0       	ldi	r24, 0x06	; 6
    4314:	b9 01       	movw	r22, r18
    4316:	0e 94 26 21 	call	0x424c	; 0x424c <M16P_vidSendCmdSingleArg>
}
    431a:	0f 90       	pop	r0
    431c:	0f 90       	pop	r0
    431e:	cf 91       	pop	r28
    4320:	df 91       	pop	r29
    4322:	08 95       	ret

00004324 <M16P_vidSetEQ>:

void M16P_vidSetEQ(uint16_ eq) {
    4324:	df 93       	push	r29
    4326:	cf 93       	push	r28
    4328:	00 d0       	rcall	.+0      	; 0x432a <M16P_vidSetEQ+0x6>
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
    432e:	9a 83       	std	Y+2, r25	; 0x02
    4330:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x07, eq);
    4332:	29 81       	ldd	r18, Y+1	; 0x01
    4334:	3a 81       	ldd	r19, Y+2	; 0x02
    4336:	87 e0       	ldi	r24, 0x07	; 7
    4338:	b9 01       	movw	r22, r18
    433a:	0e 94 26 21 	call	0x424c	; 0x424c <M16P_vidSendCmdSingleArg>
}
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	08 95       	ret

00004348 <M16P_vidSetPlaybackSource>:

void M16P_vidSetPlaybackSource(uint16_ device) {
    4348:	df 93       	push	r29
    434a:	cf 93       	push	r28
    434c:	00 d0       	rcall	.+0      	; 0x434e <M16P_vidSetPlaybackSource+0x6>
    434e:	cd b7       	in	r28, 0x3d	; 61
    4350:	de b7       	in	r29, 0x3e	; 62
    4352:	9a 83       	std	Y+2, r25	; 0x02
    4354:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x09, device);
    4356:	29 81       	ldd	r18, Y+1	; 0x01
    4358:	3a 81       	ldd	r19, Y+2	; 0x02
    435a:	89 e0       	ldi	r24, 0x09	; 9
    435c:	b9 01       	movw	r22, r18
    435e:	0e 94 26 21 	call	0x424c	; 0x424c <M16P_vidSendCmdSingleArg>
}
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	cf 91       	pop	r28
    4368:	df 91       	pop	r29
    436a:	08 95       	ret

0000436c <M16P_vidSleep>:

void M16P_vidSleep() {
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0a);
    4374:	8a e0       	ldi	r24, 0x0A	; 10
    4376:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    437a:	cf 91       	pop	r28
    437c:	df 91       	pop	r29
    437e:	08 95       	ret

00004380 <M16P_vidReset>:

void M16P_vidReset() {
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	cd b7       	in	r28, 0x3d	; 61
    4386:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0c);
    4388:	8c e0       	ldi	r24, 0x0C	; 12
    438a:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    438e:	cf 91       	pop	r28
    4390:	df 91       	pop	r29
    4392:	08 95       	ret

00004394 <M16P_vidPlayback>:

void M16P_vidPlayback() {
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0d);
    439c:	8d e0       	ldi	r24, 0x0D	; 13
    439e:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    43a2:	cf 91       	pop	r28
    43a4:	df 91       	pop	r29
    43a6:	08 95       	ret

000043a8 <M16P_vidPause>:

void M16P_vidPause() {
    43a8:	df 93       	push	r29
    43aa:	cf 93       	push	r28
    43ac:	cd b7       	in	r28, 0x3d	; 61
    43ae:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0e);
    43b0:	8e e0       	ldi	r24, 0x0E	; 14
    43b2:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    43b6:	cf 91       	pop	r28
    43b8:	df 91       	pop	r29
    43ba:	08 95       	ret

000043bc <M16P_vidPlayFileInFolder>:

void M16P_vidPlayFileInFolder(uint16_ folder, uint16_ file) {
    43bc:	df 93       	push	r29
    43be:	cf 93       	push	r28
    43c0:	00 d0       	rcall	.+0      	; 0x43c2 <M16P_vidPlayFileInFolder+0x6>
    43c2:	00 d0       	rcall	.+0      	; 0x43c4 <M16P_vidPlayFileInFolder+0x8>
    43c4:	cd b7       	in	r28, 0x3d	; 61
    43c6:	de b7       	in	r29, 0x3e	; 62
    43c8:	9a 83       	std	Y+2, r25	; 0x02
    43ca:	89 83       	std	Y+1, r24	; 0x01
    43cc:	7c 83       	std	Y+4, r23	; 0x04
    43ce:	6b 83       	std	Y+3, r22	; 0x03
    M16P_vidSendCmd(0x0f, folder, file);
    43d0:	29 81       	ldd	r18, Y+1	; 0x01
    43d2:	3a 81       	ldd	r19, Y+2	; 0x02
    43d4:	4b 81       	ldd	r20, Y+3	; 0x03
    43d6:	5c 81       	ldd	r21, Y+4	; 0x04
    43d8:	8f e0       	ldi	r24, 0x0F	; 15
    43da:	b9 01       	movw	r22, r18
    43dc:	0e 94 05 21 	call	0x420a	; 0x420a <M16P_vidSendCmd>
}
    43e0:	0f 90       	pop	r0
    43e2:	0f 90       	pop	r0
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	cf 91       	pop	r28
    43ea:	df 91       	pop	r29
    43ec:	08 95       	ret

000043ee <M16P_vidPlayByNumber>:

void M16P_vidPlayByNumber(uint16_ num) {
    43ee:	df 93       	push	r29
    43f0:	cf 93       	push	r28
    43f2:	00 d0       	rcall	.+0      	; 0x43f4 <M16P_vidPlayByNumber+0x6>
    43f4:	cd b7       	in	r28, 0x3d	; 61
    43f6:	de b7       	in	r29, 0x3e	; 62
    43f8:	9a 83       	std	Y+2, r25	; 0x02
    43fa:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x12, num);
    43fc:	29 81       	ldd	r18, Y+1	; 0x01
    43fe:	3a 81       	ldd	r19, Y+2	; 0x02
    4400:	82 e1       	ldi	r24, 0x12	; 18
    4402:	b9 01       	movw	r22, r18
    4404:	0e 94 26 21 	call	0x424c	; 0x424c <M16P_vidSendCmdSingleArg>
}
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <M16P_vidGetState>:

/*---------------------------------------------------------------------------*/



void M16P_vidGetState() {
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x42);
    441a:	82 e4       	ldi	r24, 0x42	; 66
    441c:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    4420:	cf 91       	pop	r28
    4422:	df 91       	pop	r29
    4424:	08 95       	ret

00004426 <M16P_vidGetVolume>:

void M16P_vidGetVolume() {
    4426:	df 93       	push	r29
    4428:	cf 93       	push	r28
    442a:	cd b7       	in	r28, 0x3d	; 61
    442c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x43);
    442e:	83 e4       	ldi	r24, 0x43	; 67
    4430:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <M16P_vidGetUSum>:

void M16P_vidGetUSum() {
    443a:	df 93       	push	r29
    443c:	cf 93       	push	r28
    443e:	cd b7       	in	r28, 0x3d	; 61
    4440:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x47);
    4442:	87 e4       	ldi	r24, 0x47	; 71
    4444:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	08 95       	ret

0000444e <M16P_vidGetTFSum>:

void M16P_vidGetTFSum() {
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x48);
    4456:	88 e4       	ldi	r24, 0x48	; 72
    4458:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    445c:	cf 91       	pop	r28
    445e:	df 91       	pop	r29
    4460:	08 95       	ret

00004462 <M16P_vidGetFlashSum>:

void M16P_vidGetFlashSum() {
    4462:	df 93       	push	r29
    4464:	cf 93       	push	r28
    4466:	cd b7       	in	r28, 0x3d	; 61
    4468:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x49);
    446a:	89 e4       	ldi	r24, 0x49	; 73
    446c:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    4470:	cf 91       	pop	r28
    4472:	df 91       	pop	r29
    4474:	08 95       	ret

00004476 <M16P_vidGetTFCurrent>:

void M16P_vidGetTFCurrent() {
    4476:	df 93       	push	r29
    4478:	cf 93       	push	r28
    447a:	cd b7       	in	r28, 0x3d	; 61
    447c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4c);
    447e:	8c e4       	ldi	r24, 0x4C	; 76
    4480:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	08 95       	ret

0000448a <M16P_vidGetUCurrent>:

void M16P_vidGetUCurrent() {
    448a:	df 93       	push	r29
    448c:	cf 93       	push	r28
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4b);
    4492:	8b e4       	ldi	r24, 0x4B	; 75
    4494:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    4498:	cf 91       	pop	r28
    449a:	df 91       	pop	r29
    449c:	08 95       	ret

0000449e <M16P_vidGetFlashCurrent>:

void M16P_vidGetFlashCurrent() {
    449e:	df 93       	push	r29
    44a0:	cf 93       	push	r28
    44a2:	cd b7       	in	r28, 0x3d	; 61
    44a4:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4d);
    44a6:	8d e4       	ldi	r24, 0x4D	; 77
    44a8:	0e 94 43 21 	call	0x4286	; 0x4286 <M16P_vidSendCmdNoArg>
}
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	08 95       	ret

000044b2 <M16P_u8GetDataBuffer>:

uint8_t M16P_u8GetDataBuffer() {
    44b2:	0f 93       	push	r16
    44b4:	1f 93       	push	r17
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <M16P_u8GetDataBuffer+0xa>
    44bc:	0f 92       	push	r0
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    if (UART_Receive() != 0x7E) {
    44c2:	0e 94 8e 13 	call	0x271c	; 0x271c <UART_Receive>
    44c6:	8e 37       	cpi	r24, 0x7E	; 126
    44c8:	11 f0       	breq	.+4      	; 0x44ce <M16P_u8GetDataBuffer+0x1c>
        return 0;
    44ca:	1b 82       	std	Y+3, r1	; 0x03
    44cc:	1c c0       	rjmp	.+56     	; 0x4506 <M16P_u8GetDataBuffer+0x54>
    }else{
    	recv_buf[0] = 0x7E;
    44ce:	8e e7       	ldi	r24, 0x7E	; 126
    44d0:	80 93 4e 04 	sts	0x044E, r24
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	9a 83       	std	Y+2, r25	; 0x02
    44da:	89 83       	std	Y+1, r24	; 0x01
    44dc:	0d c0       	rjmp	.+26     	; 0x44f8 <M16P_u8GetDataBuffer+0x46>
    		recv_buf[i] = UART_Receive();
    44de:	09 81       	ldd	r16, Y+1	; 0x01
    44e0:	1a 81       	ldd	r17, Y+2	; 0x02
    44e2:	0e 94 8e 13 	call	0x271c	; 0x271c <UART_Receive>
    44e6:	f8 01       	movw	r30, r16
    44e8:	e2 5b       	subi	r30, 0xB2	; 178
    44ea:	fb 4f       	sbci	r31, 0xFB	; 251
    44ec:	80 83       	st	Z, r24
uint8_t M16P_u8GetDataBuffer() {
    if (UART_Receive() != 0x7E) {
        return 0;
    }else{
    	recv_buf[0] = 0x7E;
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	9a 81       	ldd	r25, Y+2	; 0x02
    44f2:	01 96       	adiw	r24, 0x01	; 1
    44f4:	9a 83       	std	Y+2, r25	; 0x02
    44f6:	89 83       	std	Y+1, r24	; 0x01
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	9a 81       	ldd	r25, Y+2	; 0x02
    44fc:	8a 30       	cpi	r24, 0x0A	; 10
    44fe:	91 05       	cpc	r25, r1
    4500:	74 f3       	brlt	.-36     	; 0x44de <M16P_u8GetDataBuffer+0x2c>
    		recv_buf[i] = UART_Receive();
    	}
    	return 1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	8b 83       	std	Y+3, r24	; 0x03
    4506:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    4508:	0f 90       	pop	r0
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	cf 91       	pop	r28
    4510:	df 91       	pop	r29
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	08 95       	ret

00004518 <main>:

extern uint16_ compare_cnt1;
void get_word();

int main()
{
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	0f 92       	push	r0
    451e:	cd b7       	in	r28, 0x3d	; 61
    4520:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
	uint8_t compare_value;
	GLOVE_vidSensorsInit();
    4528:	0e 94 8c 08 	call	0x1118	; 0x1118 <GLOVE_vidSensorsInit>
	GLOVE_vidSetGloveParams(&sensor_reads[0],7);
    452c:	8c e7       	ldi	r24, 0x7C	; 124
    452e:	94 e0       	ldi	r25, 0x04	; 4
    4530:	67 e0       	ldi	r22, 0x07	; 7
    4532:	0e 94 a0 08 	call	0x1140	; 0x1140 <GLOVE_vidSetGloveParams>
	TIMER1_voidInit();
    4536:	0e 94 9d 13 	call	0x273a	; 0x273a <TIMER1_voidInit>
	TIMER1_voidGetNumCountCTC(1000, &compare_cnt1, &compare_value);
    453a:	2a e7       	ldi	r18, 0x7A	; 122
    453c:	34 e0       	ldi	r19, 0x04	; 4
    453e:	88 ee       	ldi	r24, 0xE8	; 232
    4540:	93 e0       	ldi	r25, 0x03	; 3
    4542:	b9 01       	movw	r22, r18
    4544:	9e 01       	movw	r18, r28
    4546:	2f 5f       	subi	r18, 0xFF	; 255
    4548:	3f 4f       	sbci	r19, 0xFF	; 255
    454a:	a9 01       	movw	r20, r18
    454c:	0e 94 21 14 	call	0x2842	; 0x2842 <TIMER1_voidGetNumCountCTC>
	TIMER1_voidSetCTCTime(compare_value);
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	0e 94 13 14 	call	0x2826	; 0x2826 <TIMER1_voidSetCTCTime>
	TIMER1_voidSetCallBackCTC(&get_word);
    4556:	87 ec       	ldi	r24, 0xC7	; 199
    4558:	92 e2       	ldi	r25, 0x22	; 34
    455a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <TIMER1_voidSetCallBackCTC>
	GLOVE_vidGetHandRead();
    455e:	0e 94 bc 08 	call	0x1178	; 0x1178 <GLOVE_vidGetHandRead>
	SHOW_vidShowAndPlayInit(&ready_flag);
    4562:	88 e5       	ldi	r24, 0x58	; 88
    4564:	94 e0       	ldi	r25, 0x04	; 4
    4566:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SHOW_vidShowAndPlayInit>
	while(1)
	{
		while(ready_flag || get_another_read_flag);
    456a:	80 91 58 04 	lds	r24, 0x0458
    456e:	88 23       	and	r24, r24
    4570:	e1 f7       	brne	.-8      	; 0x456a <main+0x52>
    4572:	80 91 33 04 	lds	r24, 0x0433
    4576:	88 23       	and	r24, r24
    4578:	c1 f7       	brne	.-16     	; 0x456a <main+0x52>

		SHOW_vidShowAndPlay(&word_location[0]);
    457a:	8c e8       	ldi	r24, 0x8C	; 140
    457c:	94 e0       	ldi	r25, 0x04	; 4
    457e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <SHOW_vidShowAndPlay>
		get_another_read_flag = 1;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	80 93 33 04 	sts	0x0433, r24
		GLOVE_vidGetHandRead();
    4588:	0e 94 bc 08 	call	0x1178	; 0x1178 <GLOVE_vidGetHandRead>
    458c:	ee cf       	rjmp	.-36     	; 0x456a <main+0x52>

0000458e <get_word>:
	return 0;
}


void get_word()
{
    458e:	df 93       	push	r29
    4590:	cf 93       	push	r28
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0;
	if(i<5 && sensor_reads[7] && get_another_read_flag)
    4596:	80 91 59 04 	lds	r24, 0x0459
    459a:	85 30       	cpi	r24, 0x05	; 5
    459c:	08 f0       	brcs	.+2      	; 0x45a0 <get_word+0x12>
    459e:	61 c0       	rjmp	.+194    	; 0x4662 <get_word+0xd4>
    45a0:	80 91 8a 04 	lds	r24, 0x048A
    45a4:	90 91 8b 04 	lds	r25, 0x048B
    45a8:	00 97       	sbiw	r24, 0x00	; 0
    45aa:	09 f4       	brne	.+2      	; 0x45ae <get_word+0x20>
    45ac:	5a c0       	rjmp	.+180    	; 0x4662 <get_word+0xd4>
    45ae:	80 91 33 04 	lds	r24, 0x0433
    45b2:	88 23       	and	r24, r24
    45b4:	09 f4       	brne	.+2      	; 0x45b8 <get_word+0x2a>
    45b6:	55 c0       	rjmp	.+170    	; 0x4662 <get_word+0xd4>
	{
		LED_u8LedToggle(PORT_D, PIN_7);
    45b8:	83 e0       	ldi	r24, 0x03	; 3
    45ba:	67 e0       	ldi	r22, 0x07	; 7
    45bc:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <LED_u8LedToggle>
		GET_vidGetWordAndSound(&sensor_reads[0], &word_location[i*2]);
    45c0:	80 91 59 04 	lds	r24, 0x0459
    45c4:	88 2f       	mov	r24, r24
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	88 0f       	add	r24, r24
    45ca:	99 1f       	adc	r25, r25
    45cc:	9c 01       	movw	r18, r24
    45ce:	24 57       	subi	r18, 0x74	; 116
    45d0:	3b 4f       	sbci	r19, 0xFB	; 251
    45d2:	8c e7       	ldi	r24, 0x7C	; 124
    45d4:	94 e0       	ldi	r25, 0x04	; 4
    45d6:	b9 01       	movw	r22, r18
    45d8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <GET_vidGetWordAndSound>
		if(word_location[i*2]== 0 && word_location[i*2+1]== 1 )i--;
    45dc:	80 91 59 04 	lds	r24, 0x0459
    45e0:	88 2f       	mov	r24, r24
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	88 0f       	add	r24, r24
    45e6:	99 1f       	adc	r25, r25
    45e8:	fc 01       	movw	r30, r24
    45ea:	e4 57       	subi	r30, 0x74	; 116
    45ec:	fb 4f       	sbci	r31, 0xFB	; 251
    45ee:	80 81       	ld	r24, Z
    45f0:	88 23       	and	r24, r24
    45f2:	99 f4       	brne	.+38     	; 0x461a <get_word+0x8c>
    45f4:	80 91 59 04 	lds	r24, 0x0459
    45f8:	88 2f       	mov	r24, r24
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	01 96       	adiw	r24, 0x01	; 1
    4602:	fc 01       	movw	r30, r24
    4604:	e4 57       	subi	r30, 0x74	; 116
    4606:	fb 4f       	sbci	r31, 0xFB	; 251
    4608:	80 81       	ld	r24, Z
    460a:	81 30       	cpi	r24, 0x01	; 1
    460c:	31 f4       	brne	.+12     	; 0x461a <get_word+0x8c>
    460e:	80 91 59 04 	lds	r24, 0x0459
    4612:	81 50       	subi	r24, 0x01	; 1
    4614:	80 93 59 04 	sts	0x0459, r24
    4618:	1c c0       	rjmp	.+56     	; 0x4652 <get_word+0xc4>
		else if(word_location[i*2]== 0 && word_location[i*2+1]== 0 )i=5;
    461a:	80 91 59 04 	lds	r24, 0x0459
    461e:	88 2f       	mov	r24, r24
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	88 0f       	add	r24, r24
    4624:	99 1f       	adc	r25, r25
    4626:	fc 01       	movw	r30, r24
    4628:	e4 57       	subi	r30, 0x74	; 116
    462a:	fb 4f       	sbci	r31, 0xFB	; 251
    462c:	80 81       	ld	r24, Z
    462e:	88 23       	and	r24, r24
    4630:	81 f4       	brne	.+32     	; 0x4652 <get_word+0xc4>
    4632:	80 91 59 04 	lds	r24, 0x0459
    4636:	88 2f       	mov	r24, r24
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	88 0f       	add	r24, r24
    463c:	99 1f       	adc	r25, r25
    463e:	01 96       	adiw	r24, 0x01	; 1
    4640:	fc 01       	movw	r30, r24
    4642:	e4 57       	subi	r30, 0x74	; 116
    4644:	fb 4f       	sbci	r31, 0xFB	; 251
    4646:	80 81       	ld	r24, Z
    4648:	88 23       	and	r24, r24
    464a:	19 f4       	brne	.+6      	; 0x4652 <get_word+0xc4>
    464c:	85 e0       	ldi	r24, 0x05	; 5
    464e:	80 93 59 04 	sts	0x0459, r24
		GLOVE_vidGetHandRead();
    4652:	0e 94 bc 08 	call	0x1178	; 0x1178 <GLOVE_vidGetHandRead>
		i++;
    4656:	80 91 59 04 	lds	r24, 0x0459
    465a:	8f 5f       	subi	r24, 0xFF	; 255
    465c:	80 93 59 04 	sts	0x0459, r24
    4660:	11 c0       	rjmp	.+34     	; 0x4684 <get_word+0xf6>
	}else if (i == 5){
    4662:	80 91 59 04 	lds	r24, 0x0459
    4666:	85 30       	cpi	r24, 0x05	; 5
    4668:	49 f4       	brne	.+18     	; 0x467c <get_word+0xee>
		word_location[9] = 0;
    466a:	10 92 95 04 	sts	0x0495, r1
		word_location[10] = 0;
    466e:	10 92 96 04 	sts	0x0496, r1
		i = 0;
    4672:	10 92 59 04 	sts	0x0459, r1
		get_another_read_flag = 0;
    4676:	10 92 33 04 	sts	0x0433, r1
    467a:	04 c0       	rjmp	.+8      	; 0x4684 <get_word+0xf6>
	}else{
		i = 0;
    467c:	10 92 59 04 	sts	0x0459, r1
		get_another_read_flag = 0;
    4680:	10 92 33 04 	sts	0x0433, r1
	}

}
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <__mulsi3>:
    468a:	62 9f       	mul	r22, r18
    468c:	d0 01       	movw	r26, r0
    468e:	73 9f       	mul	r23, r19
    4690:	f0 01       	movw	r30, r0
    4692:	82 9f       	mul	r24, r18
    4694:	e0 0d       	add	r30, r0
    4696:	f1 1d       	adc	r31, r1
    4698:	64 9f       	mul	r22, r20
    469a:	e0 0d       	add	r30, r0
    469c:	f1 1d       	adc	r31, r1
    469e:	92 9f       	mul	r25, r18
    46a0:	f0 0d       	add	r31, r0
    46a2:	83 9f       	mul	r24, r19
    46a4:	f0 0d       	add	r31, r0
    46a6:	74 9f       	mul	r23, r20
    46a8:	f0 0d       	add	r31, r0
    46aa:	65 9f       	mul	r22, r21
    46ac:	f0 0d       	add	r31, r0
    46ae:	99 27       	eor	r25, r25
    46b0:	72 9f       	mul	r23, r18
    46b2:	b0 0d       	add	r27, r0
    46b4:	e1 1d       	adc	r30, r1
    46b6:	f9 1f       	adc	r31, r25
    46b8:	63 9f       	mul	r22, r19
    46ba:	b0 0d       	add	r27, r0
    46bc:	e1 1d       	adc	r30, r1
    46be:	f9 1f       	adc	r31, r25
    46c0:	bd 01       	movw	r22, r26
    46c2:	cf 01       	movw	r24, r30
    46c4:	11 24       	eor	r1, r1
    46c6:	08 95       	ret

000046c8 <__udivmodqi4>:
    46c8:	99 1b       	sub	r25, r25
    46ca:	79 e0       	ldi	r23, 0x09	; 9
    46cc:	04 c0       	rjmp	.+8      	; 0x46d6 <__udivmodqi4_ep>

000046ce <__udivmodqi4_loop>:
    46ce:	99 1f       	adc	r25, r25
    46d0:	96 17       	cp	r25, r22
    46d2:	08 f0       	brcs	.+2      	; 0x46d6 <__udivmodqi4_ep>
    46d4:	96 1b       	sub	r25, r22

000046d6 <__udivmodqi4_ep>:
    46d6:	88 1f       	adc	r24, r24
    46d8:	7a 95       	dec	r23
    46da:	c9 f7       	brne	.-14     	; 0x46ce <__udivmodqi4_loop>
    46dc:	80 95       	com	r24
    46de:	08 95       	ret

000046e0 <__udivmodhi4>:
    46e0:	aa 1b       	sub	r26, r26
    46e2:	bb 1b       	sub	r27, r27
    46e4:	51 e1       	ldi	r21, 0x11	; 17
    46e6:	07 c0       	rjmp	.+14     	; 0x46f6 <__udivmodhi4_ep>

000046e8 <__udivmodhi4_loop>:
    46e8:	aa 1f       	adc	r26, r26
    46ea:	bb 1f       	adc	r27, r27
    46ec:	a6 17       	cp	r26, r22
    46ee:	b7 07       	cpc	r27, r23
    46f0:	10 f0       	brcs	.+4      	; 0x46f6 <__udivmodhi4_ep>
    46f2:	a6 1b       	sub	r26, r22
    46f4:	b7 0b       	sbc	r27, r23

000046f6 <__udivmodhi4_ep>:
    46f6:	88 1f       	adc	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	5a 95       	dec	r21
    46fc:	a9 f7       	brne	.-22     	; 0x46e8 <__udivmodhi4_loop>
    46fe:	80 95       	com	r24
    4700:	90 95       	com	r25
    4702:	bc 01       	movw	r22, r24
    4704:	cd 01       	movw	r24, r26
    4706:	08 95       	ret

00004708 <__udivmodsi4>:
    4708:	a1 e2       	ldi	r26, 0x21	; 33
    470a:	1a 2e       	mov	r1, r26
    470c:	aa 1b       	sub	r26, r26
    470e:	bb 1b       	sub	r27, r27
    4710:	fd 01       	movw	r30, r26
    4712:	0d c0       	rjmp	.+26     	; 0x472e <__udivmodsi4_ep>

00004714 <__udivmodsi4_loop>:
    4714:	aa 1f       	adc	r26, r26
    4716:	bb 1f       	adc	r27, r27
    4718:	ee 1f       	adc	r30, r30
    471a:	ff 1f       	adc	r31, r31
    471c:	a2 17       	cp	r26, r18
    471e:	b3 07       	cpc	r27, r19
    4720:	e4 07       	cpc	r30, r20
    4722:	f5 07       	cpc	r31, r21
    4724:	20 f0       	brcs	.+8      	; 0x472e <__udivmodsi4_ep>
    4726:	a2 1b       	sub	r26, r18
    4728:	b3 0b       	sbc	r27, r19
    472a:	e4 0b       	sbc	r30, r20
    472c:	f5 0b       	sbc	r31, r21

0000472e <__udivmodsi4_ep>:
    472e:	66 1f       	adc	r22, r22
    4730:	77 1f       	adc	r23, r23
    4732:	88 1f       	adc	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	1a 94       	dec	r1
    4738:	69 f7       	brne	.-38     	; 0x4714 <__udivmodsi4_loop>
    473a:	60 95       	com	r22
    473c:	70 95       	com	r23
    473e:	80 95       	com	r24
    4740:	90 95       	com	r25
    4742:	9b 01       	movw	r18, r22
    4744:	ac 01       	movw	r20, r24
    4746:	bd 01       	movw	r22, r26
    4748:	cf 01       	movw	r24, r30
    474a:	08 95       	ret

0000474c <__prologue_saves__>:
    474c:	2f 92       	push	r2
    474e:	3f 92       	push	r3
    4750:	4f 92       	push	r4
    4752:	5f 92       	push	r5
    4754:	6f 92       	push	r6
    4756:	7f 92       	push	r7
    4758:	8f 92       	push	r8
    475a:	9f 92       	push	r9
    475c:	af 92       	push	r10
    475e:	bf 92       	push	r11
    4760:	cf 92       	push	r12
    4762:	df 92       	push	r13
    4764:	ef 92       	push	r14
    4766:	ff 92       	push	r15
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    4774:	ca 1b       	sub	r28, r26
    4776:	db 0b       	sbc	r29, r27
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	cd bf       	out	0x3d, r28	; 61
    4782:	09 94       	ijmp

00004784 <__epilogue_restores__>:
    4784:	2a 88       	ldd	r2, Y+18	; 0x12
    4786:	39 88       	ldd	r3, Y+17	; 0x11
    4788:	48 88       	ldd	r4, Y+16	; 0x10
    478a:	5f 84       	ldd	r5, Y+15	; 0x0f
    478c:	6e 84       	ldd	r6, Y+14	; 0x0e
    478e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4790:	8c 84       	ldd	r8, Y+12	; 0x0c
    4792:	9b 84       	ldd	r9, Y+11	; 0x0b
    4794:	aa 84       	ldd	r10, Y+10	; 0x0a
    4796:	b9 84       	ldd	r11, Y+9	; 0x09
    4798:	c8 84       	ldd	r12, Y+8	; 0x08
    479a:	df 80       	ldd	r13, Y+7	; 0x07
    479c:	ee 80       	ldd	r14, Y+6	; 0x06
    479e:	fd 80       	ldd	r15, Y+5	; 0x05
    47a0:	0c 81       	ldd	r16, Y+4	; 0x04
    47a2:	1b 81       	ldd	r17, Y+3	; 0x03
    47a4:	aa 81       	ldd	r26, Y+2	; 0x02
    47a6:	b9 81       	ldd	r27, Y+1	; 0x01
    47a8:	ce 0f       	add	r28, r30
    47aa:	d1 1d       	adc	r29, r1
    47ac:	0f b6       	in	r0, 0x3f	; 63
    47ae:	f8 94       	cli
    47b0:	de bf       	out	0x3e, r29	; 62
    47b2:	0f be       	out	0x3f, r0	; 63
    47b4:	cd bf       	out	0x3d, r28	; 61
    47b6:	ed 01       	movw	r28, r26
    47b8:	08 95       	ret
    47ba:	11 f4       	brne	.+4      	; 0x47c0 <__epilogue_restores__+0x3c>
    47bc:	0e f4       	brtc	.+2      	; 0x47c0 <__epilogue_restores__+0x3c>
    47be:	4d c0       	rjmp	.+154    	; 0x485a <__fp_nan>
    47c0:	3e c0       	rjmp	.+124    	; 0x483e <__fp_mpack>

000047c2 <sqrt>:
    47c2:	5d d0       	rcall	.+186    	; 0x487e <__fp_splitA>
    47c4:	d0 f3       	brcs	.-12     	; 0x47ba <__epilogue_restores__+0x36>
    47c6:	99 23       	and	r25, r25
    47c8:	d9 f3       	breq	.-10     	; 0x47c0 <__epilogue_restores__+0x3c>
    47ca:	ce f3       	brts	.-14     	; 0x47be <__epilogue_restores__+0x3a>
    47cc:	9f 57       	subi	r25, 0x7F	; 127
    47ce:	55 0b       	sbc	r21, r21
    47d0:	87 ff       	sbrs	r24, 7
    47d2:	46 d0       	rcall	.+140    	; 0x4860 <__fp_norm2>
    47d4:	00 24       	eor	r0, r0
    47d6:	a0 e6       	ldi	r26, 0x60	; 96
    47d8:	40 ea       	ldi	r20, 0xA0	; 160
    47da:	90 01       	movw	r18, r0
    47dc:	80 58       	subi	r24, 0x80	; 128
    47de:	56 95       	lsr	r21
    47e0:	97 95       	ror	r25
    47e2:	28 f4       	brcc	.+10     	; 0x47ee <sqrt+0x2c>
    47e4:	80 5c       	subi	r24, 0xC0	; 192
    47e6:	66 0f       	add	r22, r22
    47e8:	77 1f       	adc	r23, r23
    47ea:	88 1f       	adc	r24, r24
    47ec:	20 f0       	brcs	.+8      	; 0x47f6 <sqrt+0x34>
    47ee:	26 17       	cp	r18, r22
    47f0:	37 07       	cpc	r19, r23
    47f2:	48 07       	cpc	r20, r24
    47f4:	30 f4       	brcc	.+12     	; 0x4802 <sqrt+0x40>
    47f6:	62 1b       	sub	r22, r18
    47f8:	73 0b       	sbc	r23, r19
    47fa:	84 0b       	sbc	r24, r20
    47fc:	20 29       	or	r18, r0
    47fe:	31 29       	or	r19, r1
    4800:	4a 2b       	or	r20, r26
    4802:	a6 95       	lsr	r26
    4804:	17 94       	ror	r1
    4806:	07 94       	ror	r0
    4808:	20 25       	eor	r18, r0
    480a:	31 25       	eor	r19, r1
    480c:	4a 27       	eor	r20, r26
    480e:	58 f7       	brcc	.-42     	; 0x47e6 <sqrt+0x24>
    4810:	66 0f       	add	r22, r22
    4812:	77 1f       	adc	r23, r23
    4814:	88 1f       	adc	r24, r24
    4816:	20 f0       	brcs	.+8      	; 0x4820 <sqrt+0x5e>
    4818:	26 17       	cp	r18, r22
    481a:	37 07       	cpc	r19, r23
    481c:	48 07       	cpc	r20, r24
    481e:	30 f4       	brcc	.+12     	; 0x482c <sqrt+0x6a>
    4820:	62 0b       	sbc	r22, r18
    4822:	73 0b       	sbc	r23, r19
    4824:	84 0b       	sbc	r24, r20
    4826:	20 0d       	add	r18, r0
    4828:	31 1d       	adc	r19, r1
    482a:	41 1d       	adc	r20, r1
    482c:	a0 95       	com	r26
    482e:	81 f7       	brne	.-32     	; 0x4810 <sqrt+0x4e>
    4830:	b9 01       	movw	r22, r18
    4832:	84 2f       	mov	r24, r20
    4834:	91 58       	subi	r25, 0x81	; 129
    4836:	88 0f       	add	r24, r24
    4838:	96 95       	lsr	r25
    483a:	87 95       	ror	r24
    483c:	08 95       	ret

0000483e <__fp_mpack>:
    483e:	9f 3f       	cpi	r25, 0xFF	; 255
    4840:	31 f0       	breq	.+12     	; 0x484e <__fp_mpack_finite+0xc>

00004842 <__fp_mpack_finite>:
    4842:	91 50       	subi	r25, 0x01	; 1
    4844:	20 f4       	brcc	.+8      	; 0x484e <__fp_mpack_finite+0xc>
    4846:	87 95       	ror	r24
    4848:	77 95       	ror	r23
    484a:	67 95       	ror	r22
    484c:	b7 95       	ror	r27
    484e:	88 0f       	add	r24, r24
    4850:	91 1d       	adc	r25, r1
    4852:	96 95       	lsr	r25
    4854:	87 95       	ror	r24
    4856:	97 f9       	bld	r25, 7
    4858:	08 95       	ret

0000485a <__fp_nan>:
    485a:	9f ef       	ldi	r25, 0xFF	; 255
    485c:	80 ec       	ldi	r24, 0xC0	; 192
    485e:	08 95       	ret

00004860 <__fp_norm2>:
    4860:	91 50       	subi	r25, 0x01	; 1
    4862:	50 40       	sbci	r21, 0x00	; 0
    4864:	66 0f       	add	r22, r22
    4866:	77 1f       	adc	r23, r23
    4868:	88 1f       	adc	r24, r24
    486a:	d2 f7       	brpl	.-12     	; 0x4860 <__fp_norm2>
    486c:	08 95       	ret

0000486e <__fp_split3>:
    486e:	57 fd       	sbrc	r21, 7
    4870:	90 58       	subi	r25, 0x80	; 128
    4872:	44 0f       	add	r20, r20
    4874:	55 1f       	adc	r21, r21
    4876:	59 f0       	breq	.+22     	; 0x488e <__fp_splitA+0x10>
    4878:	5f 3f       	cpi	r21, 0xFF	; 255
    487a:	71 f0       	breq	.+28     	; 0x4898 <__fp_splitA+0x1a>
    487c:	47 95       	ror	r20

0000487e <__fp_splitA>:
    487e:	88 0f       	add	r24, r24
    4880:	97 fb       	bst	r25, 7
    4882:	99 1f       	adc	r25, r25
    4884:	61 f0       	breq	.+24     	; 0x489e <__fp_splitA+0x20>
    4886:	9f 3f       	cpi	r25, 0xFF	; 255
    4888:	79 f0       	breq	.+30     	; 0x48a8 <__fp_splitA+0x2a>
    488a:	87 95       	ror	r24
    488c:	08 95       	ret
    488e:	12 16       	cp	r1, r18
    4890:	13 06       	cpc	r1, r19
    4892:	14 06       	cpc	r1, r20
    4894:	55 1f       	adc	r21, r21
    4896:	f2 cf       	rjmp	.-28     	; 0x487c <__fp_split3+0xe>
    4898:	46 95       	lsr	r20
    489a:	f1 df       	rcall	.-30     	; 0x487e <__fp_splitA>
    489c:	08 c0       	rjmp	.+16     	; 0x48ae <__fp_splitA+0x30>
    489e:	16 16       	cp	r1, r22
    48a0:	17 06       	cpc	r1, r23
    48a2:	18 06       	cpc	r1, r24
    48a4:	99 1f       	adc	r25, r25
    48a6:	f1 cf       	rjmp	.-30     	; 0x488a <__fp_splitA+0xc>
    48a8:	86 95       	lsr	r24
    48aa:	71 05       	cpc	r23, r1
    48ac:	61 05       	cpc	r22, r1
    48ae:	08 94       	sec
    48b0:	08 95       	ret

000048b2 <_exit>:
    48b2:	f8 94       	cli

000048b4 <__stop_program>:
    48b4:	ff cf       	rjmp	.-2      	; 0x48b4 <__stop_program>
