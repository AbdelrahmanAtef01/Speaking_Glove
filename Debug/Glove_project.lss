
Glove_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003ae  00800060  00004876  0000490a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  0080040e  0080040e  00004cb8  2**0
                  ALLOC
  3 .stab         000055c8  00000000  00000000  00004cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024e2  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000c762  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000c8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000cab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000eac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000fc34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00011099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011947  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__vector_9>
      28:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 22 	call	0x44c8	; 0x44c8 <main>
      8a:	0c 94 39 24 	jmp	0x4872	; 0x4872 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 23 	jmp	0x470c	; 0x470c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 23 	jmp	0x470c	; 0x470c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 23 	jmp	0x4744	; 0x4744 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ae 23 	jmp	0x475c	; 0x475c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 96 23 	jmp	0x472c	; 0x472c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 8e 23 	jmp	0x471c	; 0x471c <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 aa 23 	jmp	0x4754	; 0x4754 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <SHOW_vidShowAndPlayInit>:
uint8_t strings_length[20] = {4, 12, 10, 7, 4, 8, 2, 5, 3, 7, 4, 4, 5, 9, 7, 5, 2, 5, 7, 7};

void callback();

void SHOW_vidShowAndPlayInit (uint8_t * ready_flag)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <SHOW_vidShowAndPlayInit+0x6>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	ready_flag_glob = ready_flag;
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	90 93 52 04 	sts	0x0452, r25
     cec:	80 93 51 04 	sts	0x0451, r24
	(*ready_flag)=0;
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	10 82       	st	Z, r1
	LCD_vidInit();
     cf6:	0e 94 93 1b 	call	0x3726	; 0x3726 <LCD_vidInit>
	M16P_vidInit(9600);
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	95 e2       	ldi	r25, 0x25	; 37
     cfe:	0e 94 2e 20 	call	0x405c	; 0x405c <M16P_vidInit>
	TMR0_Init();
     d02:	0e 94 da 14 	call	0x29b4	; 0x29b4 <TMR0_Init>
	TMR0_SetCallback(&callback);
     d06:	86 eb       	ldi	r24, 0xB6	; 182
     d08:	97 e0       	ldi	r25, 0x07	; 7
     d0a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <TMR0_SetCallback>
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <SHOW_vidShowAndPlay>:



void SHOW_vidShowAndPlay (uint8_t * words)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	e8 97       	sbiw	r28, 0x38	; 56
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	9b ab       	std	Y+51, r25	; 0x33
     d2e:	8a ab       	std	Y+50, r24	; 0x32
	uint8_t string_output[32] ={0};
     d30:	80 e2       	ldi	r24, 0x20	; 32
     d32:	fe 01       	movw	r30, r28
     d34:	38 96       	adiw	r30, 0x08	; 8
     d36:	df 01       	movw	r26, r30
     d38:	98 2f       	mov	r25, r24
     d3a:	1d 92       	st	X+, r1
     d3c:	9a 95       	dec	r25
     d3e:	e9 f7       	brne	.-6      	; 0xd3a <SHOW_vidShowAndPlay+0x22>
	uint8_t words_cpy[10];
	uint8_t l = 0;
     d40:	1f 82       	std	Y+7, r1	; 0x07
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
     d42:	1d 82       	std	Y+5, r1	; 0x05
     d44:	15 c0       	rjmp	.+42     	; 0xd70 <SHOW_vidShowAndPlay+0x58>
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	48 2f       	mov	r20, r24
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8a a9       	ldd	r24, Y+50	; 0x32
     d54:	9b a9       	ldd	r25, Y+51	; 0x33
     d56:	fc 01       	movw	r30, r24
     d58:	e2 0f       	add	r30, r18
     d5a:	f3 1f       	adc	r31, r19
     d5c:	20 81       	ld	r18, Z
     d5e:	ce 01       	movw	r24, r28
     d60:	88 96       	adiw	r24, 0x28	; 40
     d62:	fc 01       	movw	r30, r24
     d64:	e4 0f       	add	r30, r20
     d66:	f5 1f       	adc	r31, r21
     d68:	20 83       	st	Z, r18
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8d 83       	std	Y+5, r24	; 0x05
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	8a 30       	cpi	r24, 0x0A	; 10
     d74:	40 f3       	brcs	.-48     	; 0xd46 <SHOW_vidShowAndPlay+0x2e>
	LCD_vidClearDisplay();
     d76:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <LCD_vidClearDisplay>
	(*ready_flag_glob) = 1;
     d7a:	e0 91 51 04 	lds	r30, 0x0451
     d7e:	f0 91 52 04 	lds	r31, 0x0452
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
	uint8_t j=0;
     d86:	1e 82       	std	Y+6, r1	; 0x06
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     d88:	1c 82       	std	Y+4, r1	; 0x04
     d8a:	b4 c0       	rjmp	.+360    	; 0xef4 <SHOW_vidShowAndPlay+0x1dc>
	{
		for(j =0; j<NO_OF_WORDS; j++)
     d8c:	1e 82       	std	Y+6, r1	; 0x06
     d8e:	41 c0       	rjmp	.+130    	; 0xe12 <SHOW_vidShowAndPlay+0xfa>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	ce 01       	movw	r24, r28
     d98:	88 96       	adiw	r24, 0x28	; 40
     d9a:	fc 01       	movw	r30, r24
     d9c:	e2 0f       	add	r30, r18
     d9e:	f3 1f       	adc	r31, r19
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	8e 81       	ldd	r24, Y+6	; 0x06
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	c9 01       	movw	r24, r18
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	fc 01       	movw	r30, r24
     dbe:	e8 59       	subi	r30, 0x98	; 152
     dc0:	fe 4f       	sbci	r31, 0xFE	; 254
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	48 17       	cp	r20, r24
     dc8:	59 07       	cpc	r21, r25
     dca:	01 f5       	brne	.+64     	; 0xe0c <SHOW_vidShowAndPlay+0xf4>
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9c 01       	movw	r18, r24
     dd4:	2f 5f       	subi	r18, 0xFF	; 255
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	ce 01       	movw	r24, r28
     dda:	88 96       	adiw	r24, 0x28	; 40
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	c9 01       	movw	r24, r18
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	fc 01       	movw	r30, r24
     dfe:	e4 59       	subi	r30, 0x94	; 148
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	48 17       	cp	r20, r24
     e08:	59 07       	cpc	r21, r25
     e0a:	39 f0       	breq	.+14     	; 0xe1a <SHOW_vidShowAndPlay+0x102>
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
	{
		for(j =0; j<NO_OF_WORDS; j++)
     e0c:	8e 81       	ldd	r24, Y+6	; 0x06
     e0e:	8f 5f       	subi	r24, 0xFF	; 255
     e10:	8e 83       	std	Y+6, r24	; 0x06
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	84 31       	cpi	r24, 0x14	; 20
     e16:	08 f4       	brcc	.+2      	; 0xe1a <SHOW_vidShowAndPlay+0x102>
     e18:	bb cf       	rjmp	.-138    	; 0xd90 <SHOW_vidShowAndPlay+0x78>
		{
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
     e1a:	80 91 0e 04 	lds	r24, 0x040E
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	80 93 0e 04 	sts	0x040E, r24
		sound_buffer[i]=outputs[j];
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	8e 81       	ldd	r24, Y+6	; 0x06
     e2c:	48 2f       	mov	r20, r24
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	c9 01       	movw	r24, r18
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	9c 01       	movw	r18, r24
     e40:	2d 5c       	subi	r18, 0xCD	; 205
     e42:	3b 4f       	sbci	r19, 0xFB	; 251
     e44:	ca 01       	movw	r24, r20
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	84 0f       	add	r24, r20
     e4c:	95 1f       	adc	r25, r21
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	88 59       	subi	r24, 0x98	; 152
     e54:	9e 4f       	sbci	r25, 0xFE	; 254
     e56:	3d ab       	std	Y+53, r19	; 0x35
     e58:	2c ab       	std	Y+52, r18	; 0x34
     e5a:	9f ab       	std	Y+55, r25	; 0x37
     e5c:	8e ab       	std	Y+54, r24	; 0x36
     e5e:	a6 e0       	ldi	r26, 0x06	; 6
     e60:	a8 af       	std	Y+56, r26	; 0x38
     e62:	ee a9       	ldd	r30, Y+54	; 0x36
     e64:	ff a9       	ldd	r31, Y+55	; 0x37
     e66:	00 80       	ld	r0, Z
     e68:	8e a9       	ldd	r24, Y+54	; 0x36
     e6a:	9f a9       	ldd	r25, Y+55	; 0x37
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	9f ab       	std	Y+55, r25	; 0x37
     e70:	8e ab       	std	Y+54, r24	; 0x36
     e72:	ac a9       	ldd	r26, Y+52	; 0x34
     e74:	bd a9       	ldd	r27, Y+53	; 0x35
     e76:	0c 92       	st	X, r0
     e78:	ec a9       	ldd	r30, Y+52	; 0x34
     e7a:	fd a9       	ldd	r31, Y+53	; 0x35
     e7c:	31 96       	adiw	r30, 0x01	; 1
     e7e:	fd ab       	std	Y+53, r31	; 0x35
     e80:	ec ab       	std	Y+52, r30	; 0x34
     e82:	f8 ad       	ldd	r31, Y+56	; 0x38
     e84:	f1 50       	subi	r31, 0x01	; 1
     e86:	f8 af       	std	Y+56, r31	; 0x38
     e88:	88 ad       	ldd	r24, Y+56	; 0x38
     e8a:	88 23       	and	r24, r24
     e8c:	51 f7       	brne	.-44     	; 0xe62 <SHOW_vidShowAndPlay+0x14a>
		uint8_t * ptr = strings[j];
     e8e:	8e 81       	ldd	r24, Y+6	; 0x06
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	fc 01       	movw	r30, r24
     e9a:	e7 59       	subi	r30, 0x97	; 151
     e9c:	fd 4f       	sbci	r31, 0xFD	; 253
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	9b 83       	std	Y+3, r25	; 0x03
     ea4:	8a 83       	std	Y+2, r24	; 0x02
		for(uint8_t k = 0; k < strings_length[j]; k++)
     ea6:	19 82       	std	Y+1, r1	; 0x01
     ea8:	18 c0       	rjmp	.+48     	; 0xeda <SHOW_vidShowAndPlay+0x1c2>
		{
			string_output[l++] = ptr[k];
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	48 2f       	mov	r20, r24
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	fc 01       	movw	r30, r24
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	20 81       	ld	r18, Z
     ec2:	ce 01       	movw	r24, r28
     ec4:	08 96       	adiw	r24, 0x08	; 8
     ec6:	fc 01       	movw	r30, r24
     ec8:	e4 0f       	add	r30, r20
     eca:	f5 1f       	adc	r31, r21
     ecc:	20 83       	st	Z, r18
     ece:	8f 81       	ldd	r24, Y+7	; 0x07
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	8f 83       	std	Y+7, r24	; 0x07
			if(words_cpy[i]==outputs[j].folder && words_cpy[i+1]==outputs[j].file)break;
		}
		sound_buffer_size++;
		sound_buffer[i]=outputs[j];
		uint8_t * ptr = strings[j];
		for(uint8_t k = 0; k < strings_length[j]; k++)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	fc 01       	movw	r30, r24
     ee2:	ef 56       	subi	r30, 0x6F	; 111
     ee4:	fd 4f       	sbci	r31, 0xFD	; 253
     ee6:	90 81       	ld	r25, Z
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	89 17       	cp	r24, r25
     eec:	f0 f2       	brcs	.-68     	; 0xeaa <SHOW_vidShowAndPlay+0x192>
	uint8_t l = 0;
	for(uint8_t i=0; i<10; i++)words_cpy[i]=words[i];
	LCD_vidClearDisplay();
	(*ready_flag_glob) = 1;
	uint8_t j=0;
	for(uint8_t i=0; words_cpy[i]!=0 && words_cpy[i+1]!=0; i +=2)
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	8e 5f       	subi	r24, 0xFE	; 254
     ef2:	8c 83       	std	Y+4, r24	; 0x04
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	ce 01       	movw	r24, r28
     efc:	88 96       	adiw	r24, 0x28	; 40
     efe:	fc 01       	movw	r30, r24
     f00:	e2 0f       	add	r30, r18
     f02:	f3 1f       	adc	r31, r19
     f04:	80 81       	ld	r24, Z
     f06:	88 23       	and	r24, r24
     f08:	79 f0       	breq	.+30     	; 0xf28 <SHOW_vidShowAndPlay+0x210>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	ce 01       	movw	r24, r28
     f18:	88 96       	adiw	r24, 0x28	; 40
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	80 81       	ld	r24, Z
     f22:	88 23       	and	r24, r24
     f24:	09 f0       	breq	.+2      	; 0xf28 <SHOW_vidShowAndPlay+0x210>
     f26:	32 cf       	rjmp	.-412    	; 0xd8c <SHOW_vidShowAndPlay+0x74>
		for(uint8_t k = 0; k < strings_length[j]; k++)
		{
			string_output[l++] = ptr[k];
		}
	}
	string_output[l]= 0;
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	ce 01       	movw	r24, r28
     f30:	08 96       	adiw	r24, 0x08	; 8
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	10 82       	st	Z, r1
	LCD_vidDisplayString(&string_output[0]);
     f3a:	ce 01       	movw	r24, r28
     f3c:	08 96       	adiw	r24, 0x08	; 8
     f3e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_vidDisplayString>
	TMR0_Start(sound_buffer[0].sound_duration);
     f42:	80 91 33 04 	lds	r24, 0x0433
     f46:	90 91 34 04 	lds	r25, 0x0434
     f4a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <TMR0_Start>
	//M16P_vidPlayFileInFolder(sound_buffer[0].folder, sound_buffer[0].file);
	M16P_vidPlayTrack(sound_buffer[0].file);
     f4e:	80 91 37 04 	lds	r24, 0x0437
     f52:	90 91 38 04 	lds	r25, 0x0438
     f56:	0e 94 32 21 	call	0x4264	; 0x4264 <M16P_vidPlayTrack>
}
     f5a:	e8 96       	adiw	r28, 0x38	; 56
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <callback>:

void callback()
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	M16P_vidPause();
     f74:	0e 94 ac 21 	call	0x4358	; 0x4358 <M16P_vidPause>
	static uint8_t current_file = 1;
	if(current_file < (sound_buffer_size-1))
     f78:	80 91 a5 02 	lds	r24, 0x02A5
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	80 91 0e 04 	lds	r24, 0x040E
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	28 17       	cp	r18, r24
     f8c:	39 07       	cpc	r19, r25
     f8e:	f4 f4       	brge	.+60     	; 0xfcc <callback+0x60>
	{
		M16P_vidPlayTrack(sound_buffer[0].file);
     f90:	80 91 37 04 	lds	r24, 0x0437
     f94:	90 91 38 04 	lds	r25, 0x0438
     f98:	0e 94 32 21 	call	0x4264	; 0x4264 <M16P_vidPlayTrack>
		//M16P_vidPlayFileInFolder(sound_buffer[current_file].folder, sound_buffer[current_file].file);
		TMR0_Start(sound_buffer[current_file].sound_duration);
     f9c:	80 91 a5 02 	lds	r24, 0x02A5
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	c9 01       	movw	r24, r18
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	82 0f       	add	r24, r18
     fac:	93 1f       	adc	r25, r19
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	fc 01       	movw	r30, r24
     fb4:	ed 5c       	subi	r30, 0xCD	; 205
     fb6:	fb 4f       	sbci	r31, 0xFB	; 251
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <TMR0_Start>
		current_file++;
     fc0:	80 91 a5 02 	lds	r24, 0x02A5
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	80 93 a5 02 	sts	0x02A5, r24
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <callback+0x74>

	}else{
		current_file = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 a5 02 	sts	0x02A5, r24
		sound_buffer_size = 0;
     fd2:	10 92 0e 04 	sts	0x040E, r1
		(*ready_flag_glob) = 0;
     fd6:	e0 91 51 04 	lds	r30, 0x0451
     fda:	f0 91 52 04 	lds	r31, 0x0452
     fde:	10 82       	st	Z, r1
	}
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <GLOVE_vidCallBack>:
uint16_ i = 0;

uint8_t FLEX_SENSORS[8] = {FLEX_0, FLEX_1, FLEX_2, FLEX_3, FLEX_4, FLEX_5, FLEX_6, FLEX_7};

void GLOVE_vidCallBack()
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	SENSOR_READ[i]=READ;
     fee:	20 91 0f 04 	lds	r18, 0x040F
     ff2:	30 91 10 04 	lds	r19, 0x0410
     ff6:	80 91 14 04 	lds	r24, 0x0414
     ffa:	90 91 15 04 	lds	r25, 0x0415
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	f9 01       	movw	r30, r18
    1004:	e8 0f       	add	r30, r24
    1006:	f9 1f       	adc	r31, r25
    1008:	80 91 12 04 	lds	r24, 0x0412
    100c:	90 91 13 04 	lds	r25, 0x0413
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
	if(i < NO_OF_FLEX_SENSORS-1)
    1014:	80 91 11 04 	lds	r24, 0x0411
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	9c 01       	movw	r18, r24
    1020:	80 91 14 04 	lds	r24, 0x0414
    1024:	90 91 15 04 	lds	r25, 0x0415
    1028:	82 17       	cp	r24, r18
    102a:	93 07       	cpc	r25, r19
    102c:	58 f5       	brcc	.+86     	; 0x1084 <GLOVE_vidCallBack+0x9e>
	{
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=0;
    102e:	20 91 0f 04 	lds	r18, 0x040F
    1032:	30 91 10 04 	lds	r19, 0x0410
    1036:	80 91 11 04 	lds	r24, 0x0411
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 96       	adiw	r24, 0x02	; 2
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	f9 01       	movw	r30, r18
    1046:	e8 0f       	add	r30, r24
    1048:	f9 1f       	adc	r31, r25
    104a:	11 82       	std	Z+1, r1	; 0x01
    104c:	10 82       	st	Z, r1
		i++;
    104e:	80 91 14 04 	lds	r24, 0x0414
    1052:	90 91 15 04 	lds	r25, 0x0415
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	90 93 15 04 	sts	0x0415, r25
    105c:	80 93 14 04 	sts	0x0414, r24
		READ=0;
    1060:	10 92 13 04 	sts	0x0413, r1
    1064:	10 92 12 04 	sts	0x0412, r1
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    1068:	80 91 14 04 	lds	r24, 0x0414
    106c:	90 91 15 04 	lds	r25, 0x0415
    1070:	fc 01       	movw	r30, r24
    1072:	ea 55       	subi	r30, 0x5A	; 90
    1074:	fd 4f       	sbci	r31, 0xFD	; 253
    1076:	20 81       	ld	r18, Z
    1078:	82 e1       	ldi	r24, 0x12	; 18
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	62 2f       	mov	r22, r18
    107e:	0e 94 08 20 	call	0x4010	; 0x4010 <FLEX_vidGetFlexRead>
    1082:	27 c0       	rjmp	.+78     	; 0x10d2 <GLOVE_vidCallBack+0xec>
	}else if(i == NO_OF_FLEX_SENSORS-1)
    1084:	80 91 11 04 	lds	r24, 0x0411
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9c 01       	movw	r18, r24
    1090:	80 91 14 04 	lds	r24, 0x0414
    1094:	90 91 15 04 	lds	r25, 0x0415
    1098:	28 17       	cp	r18, r24
    109a:	39 07       	cpc	r19, r25
    109c:	d1 f4       	brne	.+52     	; 0x10d2 <GLOVE_vidCallBack+0xec>
	{
		i=0;
    109e:	10 92 15 04 	sts	0x0415, r1
    10a2:	10 92 14 04 	sts	0x0414, r1
		READ=0;
    10a6:	10 92 13 04 	sts	0x0413, r1
    10aa:	10 92 12 04 	sts	0x0412, r1
		SENSOR_READ[NO_OF_FLEX_SENSORS + 2]=1;
    10ae:	20 91 0f 04 	lds	r18, 0x040F
    10b2:	30 91 10 04 	lds	r19, 0x0410
    10b6:	80 91 11 04 	lds	r24, 0x0411
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 96       	adiw	r24, 0x02	; 2
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	f9 01       	movw	r30, r18
    10c6:	e8 0f       	add	r30, r24
    10c8:	f9 1f       	adc	r31, r25
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
	}
}
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <GLOVE_vidSensorsInit>:

void GLOVE_vidSensorsInit()
{
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
	FLEX_vidFlexInit(FLEX_ALL);
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <FLEX_vidFlexInit>
	TILT_vidInit(TILT_2);
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TILT_vidInit>
	TILT_vidInit(TILT_3);
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <TILT_vidInit>
	FLEX_vidSetCallBack(&GLOVE_vidCallBack);
    10f2:	83 ef       	ldi	r24, 0xF3	; 243
    10f4:	97 e0       	ldi	r25, 0x07	; 7
    10f6:	0e 94 1e 20 	call	0x403c	; 0x403c <FLEX_vidSetCallBack>
}
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <GLOVE_vidSetGloveParams>:

void GLOVE_vidSetGloveParams(uint16_* sensor_read, uint8_t no_of_sensors)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <GLOVE_vidSetGloveParams+0x6>
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	6b 83       	std	Y+3, r22	; 0x03
	SENSOR_READ = sensor_read;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	90 93 10 04 	sts	0x0410, r25
    111a:	80 93 0f 04 	sts	0x040F, r24
	if(no_of_sensors<=8)NO_OF_FLEX_SENSORS = no_of_sensors - 2;
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	89 30       	cpi	r24, 0x09	; 9
    1122:	20 f4       	brcc	.+8      	; 0x112c <GLOVE_vidSetGloveParams+0x2c>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	82 50       	subi	r24, 0x02	; 2
    1128:	80 93 11 04 	sts	0x0411, r24
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GLOVE_vidGetHandRead>:

void GLOVE_vidGetHandRead()
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	if(i==0)
    1140:	80 91 14 04 	lds	r24, 0x0414
    1144:	90 91 15 04 	lds	r25, 0x0415
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	69 f5       	brne	.+90     	; 0x11a6 <GLOVE_vidGetHandRead+0x6e>
	{
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS],TILT_2);
    114c:	80 91 0f 04 	lds	r24, 0x040F
    1150:	90 91 10 04 	lds	r25, 0x0410
    1154:	9c 01       	movw	r18, r24
    1156:	80 91 11 04 	lds	r24, 0x0411
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	82 0f       	add	r24, r18
    1164:	93 1f       	adc	r25, r19
    1166:	62 e0       	ldi	r22, 0x02	; 2
    1168:	0e 94 57 16 	call	0x2cae	; 0x2cae <TILT_vidGetTiltRead>
		TILT_vidGetTiltRead(&SENSOR_READ[NO_OF_FLEX_SENSORS + 1],TILT_3);
    116c:	20 91 0f 04 	lds	r18, 0x040F
    1170:	30 91 10 04 	lds	r19, 0x0410
    1174:	80 91 11 04 	lds	r24, 0x0411
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	63 e0       	ldi	r22, 0x03	; 3
    1188:	0e 94 57 16 	call	0x2cae	; 0x2cae <TILT_vidGetTiltRead>
		FLEX_vidGetFlexRead(&READ,FLEX_SENSORS[i]);
    118c:	80 91 14 04 	lds	r24, 0x0414
    1190:	90 91 15 04 	lds	r25, 0x0415
    1194:	fc 01       	movw	r30, r24
    1196:	ea 55       	subi	r30, 0x5A	; 90
    1198:	fd 4f       	sbci	r31, 0xFD	; 253
    119a:	20 81       	ld	r18, Z
    119c:	82 e1       	ldi	r24, 0x12	; 18
    119e:	94 e0       	ldi	r25, 0x04	; 4
    11a0:	62 2f       	mov	r22, r18
    11a2:	0e 94 08 20 	call	0x4010	; 0x4010 <FLEX_vidGetFlexRead>
	}
}
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <calculate_distance>:
//	}


// HELPING FUNCTIONS 
// #1 Function to calculate Euclidean distance between two sensor readings
float32_t calculate_distance(uint16_* sensor_reads, word* word) {
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	28 97       	sbiw	r28, 0x08	; 8
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	8d 83       	std	Y+5, r24	; 0x05
    11c4:	78 87       	std	Y+8, r23	; 0x08
    11c6:	6f 83       	std	Y+7, r22	; 0x07
    float32_t distance = 0.0;
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	ab 83       	std	Y+3, r26	; 0x03
    11d6:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[0] - word->thumb), 2);
    11d8:	ed 81       	ldd	r30, Y+5	; 0x05
    11da:	fe 81       	ldd	r31, Y+6	; 0x06
    11dc:	20 81       	ld	r18, Z
    11de:	31 81       	ldd	r19, Z+1	; 0x01
    11e0:	ef 81       	ldd	r30, Y+7	; 0x07
    11e2:	f8 85       	ldd	r31, Y+8	; 0x08
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	a9 01       	movw	r20, r18
    11ea:	48 1b       	sub	r20, r24
    11ec:	59 0b       	sbc	r21, r25
    11ee:	ca 01       	movw	r24, r20
    11f0:	cc 01       	movw	r24, r24
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	ca 01       	movw	r24, r20
    1204:	b9 01       	movw	r22, r18
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	9c 01       	movw	r18, r24
    1210:	ad 01       	movw	r20, r26
    1212:	69 81       	ldd	r22, Y+1	; 0x01
    1214:	7a 81       	ldd	r23, Y+2	; 0x02
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	ab 83       	std	Y+3, r26	; 0x03
    1228:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[1] - word->finger_1), 2);
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	fc 01       	movw	r30, r24
    1230:	32 96       	adiw	r30, 0x02	; 2
    1232:	20 81       	ld	r18, Z
    1234:	31 81       	ldd	r19, Z+1	; 0x01
    1236:	ef 81       	ldd	r30, Y+7	; 0x07
    1238:	f8 85       	ldd	r31, Y+8	; 0x08
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	a9 01       	movw	r20, r18
    1240:	48 1b       	sub	r20, r24
    1242:	59 0b       	sbc	r21, r25
    1244:	ca 01       	movw	r24, r20
    1246:	cc 01       	movw	r24, r24
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1254:	9b 01       	movw	r18, r22
    1256:	ac 01       	movw	r20, r24
    1258:	ca 01       	movw	r24, r20
    125a:	b9 01       	movw	r22, r18
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9c 01       	movw	r18, r24
    1266:	ad 01       	movw	r20, r26
    1268:	69 81       	ldd	r22, Y+1	; 0x01
    126a:	7a 81       	ldd	r23, Y+2	; 0x02
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	ab 83       	std	Y+3, r26	; 0x03
    127e:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[2] - word->finger_2), 2);
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	fc 01       	movw	r30, r24
    1286:	34 96       	adiw	r30, 0x04	; 4
    1288:	20 81       	ld	r18, Z
    128a:	31 81       	ldd	r19, Z+1	; 0x01
    128c:	ef 81       	ldd	r30, Y+7	; 0x07
    128e:	f8 85       	ldd	r31, Y+8	; 0x08
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	95 81       	ldd	r25, Z+5	; 0x05
    1294:	a9 01       	movw	r20, r18
    1296:	48 1b       	sub	r20, r24
    1298:	59 0b       	sbc	r21, r25
    129a:	ca 01       	movw	r24, r20
    129c:	cc 01       	movw	r24, r24
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	ca 01       	movw	r24, r20
    12b0:	b9 01       	movw	r22, r18
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	9c 01       	movw	r18, r24
    12bc:	ad 01       	movw	r20, r26
    12be:	69 81       	ldd	r22, Y+1	; 0x01
    12c0:	7a 81       	ldd	r23, Y+2	; 0x02
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	ab 83       	std	Y+3, r26	; 0x03
    12d4:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[3] - word->finger_3), 2);
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	fc 01       	movw	r30, r24
    12dc:	36 96       	adiw	r30, 0x06	; 6
    12de:	20 81       	ld	r18, Z
    12e0:	31 81       	ldd	r19, Z+1	; 0x01
    12e2:	ef 81       	ldd	r30, Y+7	; 0x07
    12e4:	f8 85       	ldd	r31, Y+8	; 0x08
    12e6:	86 81       	ldd	r24, Z+6	; 0x06
    12e8:	97 81       	ldd	r25, Z+7	; 0x07
    12ea:	a9 01       	movw	r20, r18
    12ec:	48 1b       	sub	r20, r24
    12ee:	59 0b       	sbc	r21, r25
    12f0:	ca 01       	movw	r24, r20
    12f2:	cc 01       	movw	r24, r24
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1300:	9b 01       	movw	r18, r22
    1302:	ac 01       	movw	r20, r24
    1304:	ca 01       	movw	r24, r20
    1306:	b9 01       	movw	r22, r18
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9c 01       	movw	r18, r24
    1312:	ad 01       	movw	r20, r26
    1314:	69 81       	ldd	r22, Y+1	; 0x01
    1316:	7a 81       	ldd	r23, Y+2	; 0x02
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	ab 83       	std	Y+3, r26	; 0x03
    132a:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[4] - word->finger_4), 2);
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	fc 01       	movw	r30, r24
    1332:	38 96       	adiw	r30, 0x08	; 8
    1334:	20 81       	ld	r18, Z
    1336:	31 81       	ldd	r19, Z+1	; 0x01
    1338:	ef 81       	ldd	r30, Y+7	; 0x07
    133a:	f8 85       	ldd	r31, Y+8	; 0x08
    133c:	80 85       	ldd	r24, Z+8	; 0x08
    133e:	91 85       	ldd	r25, Z+9	; 0x09
    1340:	a9 01       	movw	r20, r18
    1342:	48 1b       	sub	r20, r24
    1344:	59 0b       	sbc	r21, r25
    1346:	ca 01       	movw	r24, r20
    1348:	cc 01       	movw	r24, r24
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1356:	9b 01       	movw	r18, r22
    1358:	ac 01       	movw	r20, r24
    135a:	ca 01       	movw	r24, r20
    135c:	b9 01       	movw	r22, r18
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9c 01       	movw	r18, r24
    1368:	ad 01       	movw	r20, r26
    136a:	69 81       	ldd	r22, Y+1	; 0x01
    136c:	7a 81       	ldd	r23, Y+2	; 0x02
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	ab 83       	std	Y+3, r26	; 0x03
    1380:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[5] - word->tilt0), 2);
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	fc 01       	movw	r30, r24
    1388:	3a 96       	adiw	r30, 0x0a	; 10
    138a:	20 81       	ld	r18, Z
    138c:	31 81       	ldd	r19, Z+1	; 0x01
    138e:	ef 81       	ldd	r30, Y+7	; 0x07
    1390:	f8 85       	ldd	r31, Y+8	; 0x08
    1392:	82 85       	ldd	r24, Z+10	; 0x0a
    1394:	93 85       	ldd	r25, Z+11	; 0x0b
    1396:	a9 01       	movw	r20, r18
    1398:	48 1b       	sub	r20, r24
    139a:	59 0b       	sbc	r21, r25
    139c:	ca 01       	movw	r24, r20
    139e:	cc 01       	movw	r24, r24
    13a0:	a0 e0       	ldi	r26, 0x00	; 0
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	ca 01       	movw	r24, r20
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9c 01       	movw	r18, r24
    13be:	ad 01       	movw	r20, r26
    13c0:	69 81       	ldd	r22, Y+1	; 0x01
    13c2:	7a 81       	ldd	r23, Y+2	; 0x02
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	ab 83       	std	Y+3, r26	; 0x03
    13d6:	bc 83       	std	Y+4, r27	; 0x04
    distance += pow((float32_t)(sensor_reads[6] - word->tilt1), 2);
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	fc 01       	movw	r30, r24
    13de:	3c 96       	adiw	r30, 0x0c	; 12
    13e0:	20 81       	ld	r18, Z
    13e2:	31 81       	ldd	r19, Z+1	; 0x01
    13e4:	ef 81       	ldd	r30, Y+7	; 0x07
    13e6:	f8 85       	ldd	r31, Y+8	; 0x08
    13e8:	84 85       	ldd	r24, Z+12	; 0x0c
    13ea:	95 85       	ldd	r25, Z+13	; 0x0d
    13ec:	a9 01       	movw	r20, r18
    13ee:	48 1b       	sub	r20, r24
    13f0:	59 0b       	sbc	r21, r25
    13f2:	ca 01       	movw	r24, r20
    13f4:	cc 01       	movw	r24, r24
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1402:	9b 01       	movw	r18, r22
    1404:	ac 01       	movw	r20, r24
    1406:	ca 01       	movw	r24, r20
    1408:	b9 01       	movw	r22, r18
    140a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9c 01       	movw	r18, r24
    1414:	ad 01       	movw	r20, r26
    1416:	69 81       	ldd	r22, Y+1	; 0x01
    1418:	7a 81       	ldd	r23, Y+2	; 0x02
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	9a 83       	std	Y+2, r25	; 0x02
    142a:	ab 83       	std	Y+3, r26	; 0x03
    142c:	bc 83       	std	Y+4, r27	; 0x04
    return sqrt(distance);
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	ab 81       	ldd	r26, Y+3	; 0x03
    1434:	bc 81       	ldd	r27, Y+4	; 0x04
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 c1 23 	call	0x4782	; 0x4782 <sqrt>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22

}
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	28 96       	adiw	r28, 0x08	; 8
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <find_closest_sensor>:


// #2 Function to find the closest predefined sensor data
uint8_t find_closest_sensor(word* words, uint16_* sensor_reads, uint8_t num_words) {
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	2f 97       	sbiw	r28, 0x0f	; 15
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	9c 87       	std	Y+12, r25	; 0x0c
    146e:	8b 87       	std	Y+11, r24	; 0x0b
    1470:	7e 87       	std	Y+14, r23	; 0x0e
    1472:	6d 87       	std	Y+13, r22	; 0x0d
    1474:	4f 87       	std	Y+15, r20	; 0x0f
    uint8_t closest_index = 0;
    1476:	1a 86       	std	Y+10, r1	; 0x0a
    float32_t min_distance = calculate_distance(sensor_reads, &words[0]);
    1478:	8d 85       	ldd	r24, Y+13	; 0x0d
    147a:	9e 85       	ldd	r25, Y+14	; 0x0e
    147c:	2b 85       	ldd	r18, Y+11	; 0x0b
    147e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1480:	b9 01       	movw	r22, r18
    1482:	0e 94 d6 08 	call	0x11ac	; 0x11ac <calculate_distance>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8e 83       	std	Y+6, r24	; 0x06
    148c:	9f 83       	std	Y+7, r25	; 0x07
    148e:	a8 87       	std	Y+8, r26	; 0x08
    1490:	b9 87       	std	Y+9, r27	; 0x09

    for (uint8_t i = 1; i < num_words; i++) {
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	32 c0       	rjmp	.+100    	; 0x14fc <find_closest_sensor+0xa4>
        float32_t distance = calculate_distance(sensor_reads, &words[i]);
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9c 01       	movw	r18, r24
    14a0:	22 95       	swap	r18
    14a2:	32 95       	swap	r19
    14a4:	30 7f       	andi	r19, 0xF0	; 240
    14a6:	32 27       	eor	r19, r18
    14a8:	20 7f       	andi	r18, 0xF0	; 240
    14aa:	32 27       	eor	r19, r18
    14ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b0:	28 0f       	add	r18, r24
    14b2:	39 1f       	adc	r19, r25
    14b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b8:	b9 01       	movw	r22, r18
    14ba:	0e 94 d6 08 	call	0x11ac	; 0x11ac <calculate_distance>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	ab 83       	std	Y+3, r26	; 0x03
    14c8:	bc 83       	std	Y+4, r27	; 0x04
        if (distance < min_distance) {
    14ca:	69 81       	ldd	r22, Y+1	; 0x01
    14cc:	7a 81       	ldd	r23, Y+2	; 0x02
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	2e 81       	ldd	r18, Y+6	; 0x06
    14d4:	3f 81       	ldd	r19, Y+7	; 0x07
    14d6:	48 85       	ldd	r20, Y+8	; 0x08
    14d8:	59 85       	ldd	r21, Y+9	; 0x09
    14da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14de:	88 23       	and	r24, r24
    14e0:	54 f4       	brge	.+20     	; 0x14f6 <find_closest_sensor+0x9e>
            min_distance = distance;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	ab 81       	ldd	r26, Y+3	; 0x03
    14e8:	bc 81       	ldd	r27, Y+4	; 0x04
    14ea:	8e 83       	std	Y+6, r24	; 0x06
    14ec:	9f 83       	std	Y+7, r25	; 0x07
    14ee:	a8 87       	std	Y+8, r26	; 0x08
    14f0:	b9 87       	std	Y+9, r27	; 0x09
            closest_index = i;
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	8a 87       	std	Y+10, r24	; 0x0a
// #2 Function to find the closest predefined sensor data
uint8_t find_closest_sensor(word* words, uint16_* sensor_reads, uint8_t num_words) {
    uint8_t closest_index = 0;
    float32_t min_distance = calculate_distance(sensor_reads, &words[0]);

    for (uint8_t i = 1; i < num_words; i++) {
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1500:	98 17       	cp	r25, r24
    1502:	50 f2       	brcs	.-108    	; 0x1498 <find_closest_sensor+0x40>
        if (distance < min_distance) {
            min_distance = distance;
            closest_index = i;
        }
    }
    return closest_index;
    1504:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1506:	2f 96       	adiw	r28, 0x0f	; 15
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <GET_vidGetWordAndSound>:


// Main Function 
void GET_vidGetWordAndSound(uint16_ * sensor_reads, uint8_t * word_location )
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <GET_vidGetWordAndSound+0x6>
    151e:	00 d0       	rcall	.+0      	; 0x1520 <GET_vidGetWordAndSound+0x8>
    1520:	0f 92       	push	r0
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9b 83       	std	Y+3, r25	; 0x03
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	7d 83       	std	Y+5, r23	; 0x05
    152c:	6c 83       	std	Y+4, r22	; 0x04
	
uint8_t i = find_closest_sensor(words, sensor_reads, TOTAL_NO_OF_WORDS);
    152e:	8e ea       	ldi	r24, 0xAE	; 174
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	2a 81       	ldd	r18, Y+2	; 0x02
    1534:	3b 81       	ldd	r19, Y+3	; 0x03
    1536:	b9 01       	movw	r22, r18
    1538:	44 e1       	ldi	r20, 0x14	; 20
    153a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <find_closest_sensor>
    153e:	89 83       	std	Y+1, r24	; 0x01

word_location[0] = words[i].sentence;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	82 95       	swap	r24
    1548:	92 95       	swap	r25
    154a:	90 7f       	andi	r25, 0xF0	; 240
    154c:	98 27       	eor	r25, r24
    154e:	80 7f       	andi	r24, 0xF0	; 240
    1550:	98 27       	eor	r25, r24
    1552:	fc 01       	movw	r30, r24
    1554:	e4 54       	subi	r30, 0x44	; 68
    1556:	fd 4f       	sbci	r31, 0xFD	; 253
    1558:	80 81       	ld	r24, Z
    155a:	ec 81       	ldd	r30, Y+4	; 0x04
    155c:	fd 81       	ldd	r31, Y+5	; 0x05
    155e:	80 83       	st	Z, r24
word_location[1] = words[i].word;
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	9d 81       	ldd	r25, Y+5	; 0x05
    1564:	dc 01       	movw	r26, r24
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	82 95       	swap	r24
    1570:	92 95       	swap	r25
    1572:	90 7f       	andi	r25, 0xF0	; 240
    1574:	98 27       	eor	r25, r24
    1576:	80 7f       	andi	r24, 0xF0	; 240
    1578:	98 27       	eor	r25, r24
    157a:	fc 01       	movw	r30, r24
    157c:	e3 54       	subi	r30, 0x43	; 67
    157e:	fd 4f       	sbci	r31, 0xFD	; 253
    1580:	80 81       	ld	r24, Z
    1582:	8c 93       	st	X, r24

}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>:
#include"../../libraries/bit_math.h"
#include "../global_interrupt_driver/global_interrupt_int.h"
#include "../global_interrupt_driver/global_interrupt_register.h"

void GLOBAL_INTERRUPT_vidGlobalInterruptEnable(uint8_t mode)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x6>
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3b 83       	std	Y+3, r19	; 0x03
    15aa:	2a 83       	std	Y+2, r18	; 0x02
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	69 f0       	breq	.+26     	; 0x15ce <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x3a>
    15b4:	2a 81       	ldd	r18, Y+2	; 0x02
    15b6:	3b 81       	ldd	r19, Y+3	; 0x03
    15b8:	21 30       	cpi	r18, 0x01	; 1
    15ba:	31 05       	cpc	r19, r1
    15bc:	79 f4       	brne	.+30     	; 0x15dc <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
	{
		case ENABLED:
			SET_BIT(SREG,7);
    15be:	af e5       	ldi	r26, 0x5F	; 95
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ef e5       	ldi	r30, 0x5F	; 95
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	8c 93       	st	X, r24
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <GLOBAL_INTERRUPT_vidGlobalInterruptEnable+0x48>
			break;
		case DISABLED:
			CLR_BIT(SREG,7);
    15ce:	af e5       	ldi	r26, 0x5F	; 95
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ef e5       	ldi	r30, 0x5F	; 95
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 77       	andi	r24, 0x7F	; 127
    15da:	8c 93       	st	X, r24
			break;
	}
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <DIO_u8SetPinMode>:
#include"../../libraries/bit_math.h"
#include"dio_register.h"
#include"dio_int.h"

uint8_t DIO_u8SetPinMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <DIO_u8SetPinMode+0x6>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <DIO_u8SetPinMode+0x8>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <DIO_u8SetPinMode+0xa>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03
    15fa:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    15fc:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <DIO_u8SetPinMode+0x2c>
    1612:	49 c0       	rjmp	.+146    	; 0x16a6 <DIO_u8SetPinMode+0xbe>
    1614:	2d 81       	ldd	r18, Y+5	; 0x05
    1616:	3e 81       	ldd	r19, Y+6	; 0x06
    1618:	22 30       	cpi	r18, 0x02	; 2
    161a:	31 05       	cpc	r19, r1
    161c:	2c f4       	brge	.+10     	; 0x1628 <DIO_u8SetPinMode+0x40>
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	71 f0       	breq	.+28     	; 0x1642 <DIO_u8SetPinMode+0x5a>
    1626:	d5 c0       	rjmp	.+426    	; 0x17d2 <DIO_u8SetPinMode+0x1ea>
    1628:	2d 81       	ldd	r18, Y+5	; 0x05
    162a:	3e 81       	ldd	r19, Y+6	; 0x06
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <DIO_u8SetPinMode+0x4c>
    1632:	6b c0       	rjmp	.+214    	; 0x170a <DIO_u8SetPinMode+0x122>
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	83 30       	cpi	r24, 0x03	; 3
    163a:	91 05       	cpc	r25, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <DIO_u8SetPinMode+0x58>
    163e:	97 c0       	rjmp	.+302    	; 0x176e <DIO_u8SetPinMode+0x186>
    1640:	c8 c0       	rjmp	.+400    	; 0x17d2 <DIO_u8SetPinMode+0x1ea>
		{
		case PORT_A:
			if(mode==INPUT)CLR_BIT(DDRA_REG,pin_no);
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	88 23       	and	r24, r24
    1646:	a9 f4       	brne	.+42     	; 0x1672 <DIO_u8SetPinMode+0x8a>
    1648:	aa e3       	ldi	r26, 0x3A	; 58
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	ea e3       	ldi	r30, 0x3A	; 58
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_u8SetPinMode+0x7e>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_u8SetPinMode+0x7a>
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	b2 c0       	rjmp	.+356    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRA_REG,pin_no);
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <DIO_u8SetPinMode+0xb8>
    1678:	aa e3       	ldi	r26, 0x3A	; 58
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ea e3       	ldi	r30, 0x3A	; 58
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_u8SetPinMode+0xae>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_u8SetPinMode+0xaa>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	9b c0       	rjmp	.+310    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	98 c0       	rjmp	.+304    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_B:
			if(mode==INPUT)CLR_BIT(DDRB_REG,pin_no);
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	88 23       	and	r24, r24
    16aa:	a9 f4       	brne	.+42     	; 0x16d6 <DIO_u8SetPinMode+0xee>
    16ac:	a7 e3       	ldi	r26, 0x37	; 55
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e7 e3       	ldi	r30, 0x37	; 55
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_u8SetPinMode+0xe2>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_u8SetPinMode+0xde>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	80 c0       	rjmp	.+256    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRB_REG,pin_no);
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	a1 f4       	brne	.+40     	; 0x1704 <DIO_u8SetPinMode+0x11c>
    16dc:	a7 e3       	ldi	r26, 0x37	; 55
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e3       	ldi	r30, 0x37	; 55
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_u8SetPinMode+0x112>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_u8SetPinMode+0x10e>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	69 c0       	rjmp	.+210    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	66 c0       	rjmp	.+204    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_C:
			if(mode==INPUT)CLR_BIT(DDRC_REG,pin_no);
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	88 23       	and	r24, r24
    170e:	a9 f4       	brne	.+42     	; 0x173a <DIO_u8SetPinMode+0x152>
    1710:	a4 e3       	ldi	r26, 0x34	; 52
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e4 e3       	ldi	r30, 0x34	; 52
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_u8SetPinMode+0x146>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_u8SetPinMode+0x142>
    1732:	80 95       	com	r24
    1734:	84 23       	and	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	4e c0       	rjmp	.+156    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRC_REG,pin_no);
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	a1 f4       	brne	.+40     	; 0x1768 <DIO_u8SetPinMode+0x180>
    1740:	a4 e3       	ldi	r26, 0x34	; 52
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e4 e3       	ldi	r30, 0x34	; 52
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <DIO_u8SetPinMode+0x176>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <DIO_u8SetPinMode+0x172>
    1762:	84 2b       	or	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	37 c0       	rjmp	.+110    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	34 c0       	rjmp	.+104    	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
		break;
		case PORT_D:
			if(mode==INPUT)CLR_BIT(DDRD_REG,pin_no);
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	88 23       	and	r24, r24
    1772:	a9 f4       	brne	.+42     	; 0x179e <DIO_u8SetPinMode+0x1b6>
    1774:	a1 e3       	ldi	r26, 0x31	; 49
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e1 e3       	ldi	r30, 0x31	; 49
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_u8SetPinMode+0x1aa>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_u8SetPinMode+0x1a6>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	1c c0       	rjmp	.+56     	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else if(mode==OUTPUT)SET_BIT(DDRD_REG,pin_no);
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	a1 f4       	brne	.+40     	; 0x17cc <DIO_u8SetPinMode+0x1e4>
    17a4:	a1 e3       	ldi	r26, 0x31	; 49
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e1 e3       	ldi	r30, 0x31	; 49
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_u8SetPinMode+0x1da>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_u8SetPinMode+0x1d6>
    17c6:	84 2b       	or	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
			else error_status = E_NOK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_u8SetPinMode+0x1ee>
		break;
		default : error_status = E_NOK; break;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d8:	26 96       	adiw	r28, 0x06	; 6
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <DIO_u8SetPinValue>:
uint8_t DIO_u8SetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t value)
{
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_u8SetPinValue+0x6>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <DIO_u8SetPinValue+0x8>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <DIO_u8SetPinValue+0xa>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	8a 83       	std	Y+2, r24	; 0x02
    17fa:	6b 83       	std	Y+3, r22	; 0x03
    17fc:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    17fe:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3e 83       	std	Y+6, r19	; 0x06
    1808:	2d 83       	std	Y+5, r18	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <DIO_u8SetPinValue+0x2c>
    1814:	49 c0       	rjmp	.+146    	; 0x18a8 <DIO_u8SetPinValue+0xbe>
    1816:	2d 81       	ldd	r18, Y+5	; 0x05
    1818:	3e 81       	ldd	r19, Y+6	; 0x06
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	2c f4       	brge	.+10     	; 0x182a <DIO_u8SetPinValue+0x40>
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	71 f0       	breq	.+28     	; 0x1844 <DIO_u8SetPinValue+0x5a>
    1828:	d5 c0       	rjmp	.+426    	; 0x19d4 <DIO_u8SetPinValue+0x1ea>
    182a:	2d 81       	ldd	r18, Y+5	; 0x05
    182c:	3e 81       	ldd	r19, Y+6	; 0x06
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <DIO_u8SetPinValue+0x4c>
    1834:	6b c0       	rjmp	.+214    	; 0x190c <DIO_u8SetPinValue+0x122>
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <DIO_u8SetPinValue+0x58>
    1840:	97 c0       	rjmp	.+302    	; 0x1970 <DIO_u8SetPinValue+0x186>
    1842:	c8 c0       	rjmp	.+400    	; 0x19d4 <DIO_u8SetPinValue+0x1ea>
		{
		case PORT_A:
			if(value==LOW)CLR_BIT(PORTA_REG,pin_no);
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	88 23       	and	r24, r24
    1848:	a9 f4       	brne	.+42     	; 0x1874 <DIO_u8SetPinValue+0x8a>
    184a:	ab e3       	ldi	r26, 0x3B	; 59
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e3       	ldi	r30, 0x3B	; 59
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_u8SetPinValue+0x7e>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_u8SetPinValue+0x7a>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	b2 c0       	rjmp	.+356    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTA_REG,pin_no);
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <DIO_u8SetPinValue+0xb8>
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <DIO_u8SetPinValue+0xae>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <DIO_u8SetPinValue+0xaa>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	9b c0       	rjmp	.+310    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	98 c0       	rjmp	.+304    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_B:
			if(value==LOW)CLR_BIT(PORTB_REG,pin_no);
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	88 23       	and	r24, r24
    18ac:	a9 f4       	brne	.+42     	; 0x18d8 <DIO_u8SetPinValue+0xee>
    18ae:	a8 e3       	ldi	r26, 0x38	; 56
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e8 e3       	ldi	r30, 0x38	; 56
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_u8SetPinValue+0xe2>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_u8SetPinValue+0xde>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	80 c0       	rjmp	.+256    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTB_REG,pin_no);
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	a1 f4       	brne	.+40     	; 0x1906 <DIO_u8SetPinValue+0x11c>
    18de:	a8 e3       	ldi	r26, 0x38	; 56
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_u8SetPinValue+0x112>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_u8SetPinValue+0x10e>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	69 c0       	rjmp	.+210    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	66 c0       	rjmp	.+204    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_C:
			if(value==LOW)CLR_BIT(PORTC_REG,pin_no);
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	88 23       	and	r24, r24
    1910:	a9 f4       	brne	.+42     	; 0x193c <DIO_u8SetPinValue+0x152>
    1912:	a5 e3       	ldi	r26, 0x35	; 53
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e3       	ldi	r30, 0x35	; 53
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_u8SetPinValue+0x146>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_u8SetPinValue+0x142>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	4e c0       	rjmp	.+156    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTC_REG,pin_no);
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	a1 f4       	brne	.+40     	; 0x196a <DIO_u8SetPinValue+0x180>
    1942:	a5 e3       	ldi	r26, 0x35	; 53
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e3       	ldi	r30, 0x35	; 53
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_u8SetPinValue+0x176>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_u8SetPinValue+0x172>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	37 c0       	rjmp	.+110    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	34 c0       	rjmp	.+104    	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
		break;
		case PORT_D:
			if(value==LOW)CLR_BIT(PORTD_REG,pin_no);
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	88 23       	and	r24, r24
    1974:	a9 f4       	brne	.+42     	; 0x19a0 <DIO_u8SetPinValue+0x1b6>
    1976:	a2 e3       	ldi	r26, 0x32	; 50
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e2 e3       	ldi	r30, 0x32	; 50
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_u8SetPinValue+0x1aa>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_u8SetPinValue+0x1a6>
    1998:	80 95       	com	r24
    199a:	84 23       	and	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	1c c0       	rjmp	.+56     	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else if(value==HIGH)SET_BIT(PORTD_REG,pin_no);
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	a1 f4       	brne	.+40     	; 0x19ce <DIO_u8SetPinValue+0x1e4>
    19a6:	a2 e3       	ldi	r26, 0x32	; 50
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e2 e3       	ldi	r30, 0x32	; 50
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_u8SetPinValue+0x1da>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <DIO_u8SetPinValue+0x1d6>
    19c8:	84 2b       	or	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
			else error_status = E_NOK;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_u8SetPinValue+0x1ee>
		break;
		default : error_status = E_NOK; break;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	26 96       	adiw	r28, 0x06	; 6
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <DIO_u8GetPinValue>:
uint8_t DIO_u8GetPinValue(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	27 97       	sbiw	r28, 0x07	; 7
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	6b 83       	std	Y+3, r22	; 0x03
    1a04:	5d 83       	std	Y+5, r21	; 0x05
    1a06:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1a08:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	88 30       	cpi	r24, 0x08	; 8
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <DIO_u8GetPinValue+0x26>
    1a10:	74 c0       	rjmp	.+232    	; 0x1afa <DIO_u8GetPinValue+0x10e>
	{
		switch(port_id)
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	3f 83       	std	Y+7, r19	; 0x07
    1a1a:	2e 83       	std	Y+6, r18	; 0x06
    1a1c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a1e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a20:	41 30       	cpi	r20, 0x01	; 1
    1a22:	51 05       	cpc	r21, r1
    1a24:	59 f1       	breq	.+86     	; 0x1a7c <DIO_u8GetPinValue+0x90>
    1a26:	8e 81       	ldd	r24, Y+6	; 0x06
    1a28:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	34 f4       	brge	.+12     	; 0x1a3c <DIO_u8GetPinValue+0x50>
    1a30:	2e 81       	ldd	r18, Y+6	; 0x06
    1a32:	3f 81       	ldd	r19, Y+7	; 0x07
    1a34:	21 15       	cp	r18, r1
    1a36:	31 05       	cpc	r19, r1
    1a38:	69 f0       	breq	.+26     	; 0x1a54 <DIO_u8GetPinValue+0x68>
    1a3a:	5c c0       	rjmp	.+184    	; 0x1af4 <DIO_u8GetPinValue+0x108>
    1a3c:	4e 81       	ldd	r20, Y+6	; 0x06
    1a3e:	5f 81       	ldd	r21, Y+7	; 0x07
    1a40:	42 30       	cpi	r20, 0x02	; 2
    1a42:	51 05       	cpc	r21, r1
    1a44:	79 f1       	breq	.+94     	; 0x1aa4 <DIO_u8GetPinValue+0xb8>
    1a46:	8e 81       	ldd	r24, Y+6	; 0x06
    1a48:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <DIO_u8GetPinValue+0x66>
    1a50:	3d c0       	rjmp	.+122    	; 0x1acc <DIO_u8GetPinValue+0xe0>
    1a52:	50 c0       	rjmp	.+160    	; 0x1af4 <DIO_u8GetPinValue+0x108>
		{
		case PORT_A: *value = GET_BIT(PINA_REG,pin_no); break;
    1a54:	e9 e3       	ldi	r30, 0x39	; 57
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_u8GetPinValue+0x80>
    1a68:	55 95       	asr	r21
    1a6a:	47 95       	ror	r20
    1a6c:	8a 95       	dec	r24
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_u8GetPinValue+0x7c>
    1a70:	ca 01       	movw	r24, r20
    1a72:	81 70       	andi	r24, 0x01	; 1
    1a74:	ec 81       	ldd	r30, Y+4	; 0x04
    1a76:	fd 81       	ldd	r31, Y+5	; 0x05
    1a78:	80 83       	st	Z, r24
    1a7a:	41 c0       	rjmp	.+130    	; 0x1afe <DIO_u8GetPinValue+0x112>
		case PORT_B: *value = GET_BIT(PINB_REG,pin_no); break;
    1a7c:	e6 e3       	ldi	r30, 0x36	; 54
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_u8GetPinValue+0xa8>
    1a90:	55 95       	asr	r21
    1a92:	47 95       	ror	r20
    1a94:	8a 95       	dec	r24
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_u8GetPinValue+0xa4>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa0:	80 83       	st	Z, r24
    1aa2:	2d c0       	rjmp	.+90     	; 0x1afe <DIO_u8GetPinValue+0x112>
		case PORT_C: *value = GET_BIT(PINC_REG,pin_no); break;
    1aa4:	e3 e3       	ldi	r30, 0x33	; 51
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_u8GetPinValue+0xd0>
    1ab8:	55 95       	asr	r21
    1aba:	47 95       	ror	r20
    1abc:	8a 95       	dec	r24
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_u8GetPinValue+0xcc>
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	81 70       	andi	r24, 0x01	; 1
    1ac4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac8:	80 83       	st	Z, r24
    1aca:	19 c0       	rjmp	.+50     	; 0x1afe <DIO_u8GetPinValue+0x112>
		case PORT_D: *value = GET_BIT(PIND_REG,pin_no); break;
    1acc:	e0 e3       	ldi	r30, 0x30	; 48
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a9 01       	movw	r20, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_u8GetPinValue+0xf8>
    1ae0:	55 95       	asr	r21
    1ae2:	47 95       	ror	r20
    1ae4:	8a 95       	dec	r24
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_u8GetPinValue+0xf4>
    1ae8:	ca 01       	movw	r24, r20
    1aea:	81 70       	andi	r24, 0x01	; 1
    1aec:	ec 81       	ldd	r30, Y+4	; 0x04
    1aee:	fd 81       	ldd	r31, Y+5	; 0x05
    1af0:	80 83       	st	Z, r24
    1af2:	05 c0       	rjmp	.+10     	; 0x1afe <DIO_u8GetPinValue+0x112>
		default : error_status = E_NOK; break;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_u8GetPinValue+0x112>
		}
	}else error_status = E_NOK;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b00:	27 96       	adiw	r28, 0x07	; 7
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <DIO_u8IsPinOutPut>:
uint8_t DIO_u8IsPinOutPut(uint8_t port_id,uint8_t pin_no,uint8_t * value)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	27 97       	sbiw	r28, 0x07	; 7
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    1b28:	6b 83       	std	Y+3, r22	; 0x03
    1b2a:	5d 83       	std	Y+5, r21	; 0x05
    1b2c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 30       	cpi	r24, 0x08	; 8
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <DIO_u8IsPinOutPut+0x26>
    1b36:	74 c0       	rjmp	.+232    	; 0x1c20 <DIO_u8IsPinOutPut+0x10e>
		{
			switch(port_id)
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	3f 83       	std	Y+7, r19	; 0x07
    1b40:	2e 83       	std	Y+6, r18	; 0x06
    1b42:	4e 81       	ldd	r20, Y+6	; 0x06
    1b44:	5f 81       	ldd	r21, Y+7	; 0x07
    1b46:	41 30       	cpi	r20, 0x01	; 1
    1b48:	51 05       	cpc	r21, r1
    1b4a:	59 f1       	breq	.+86     	; 0x1ba2 <DIO_u8IsPinOutPut+0x90>
    1b4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	91 05       	cpc	r25, r1
    1b54:	34 f4       	brge	.+12     	; 0x1b62 <DIO_u8IsPinOutPut+0x50>
    1b56:	2e 81       	ldd	r18, Y+6	; 0x06
    1b58:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5a:	21 15       	cp	r18, r1
    1b5c:	31 05       	cpc	r19, r1
    1b5e:	69 f0       	breq	.+26     	; 0x1b7a <DIO_u8IsPinOutPut+0x68>
    1b60:	5c c0       	rjmp	.+184    	; 0x1c1a <DIO_u8IsPinOutPut+0x108>
    1b62:	4e 81       	ldd	r20, Y+6	; 0x06
    1b64:	5f 81       	ldd	r21, Y+7	; 0x07
    1b66:	42 30       	cpi	r20, 0x02	; 2
    1b68:	51 05       	cpc	r21, r1
    1b6a:	79 f1       	breq	.+94     	; 0x1bca <DIO_u8IsPinOutPut+0xb8>
    1b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	91 05       	cpc	r25, r1
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <DIO_u8IsPinOutPut+0x66>
    1b76:	3d c0       	rjmp	.+122    	; 0x1bf2 <DIO_u8IsPinOutPut+0xe0>
    1b78:	50 c0       	rjmp	.+160    	; 0x1c1a <DIO_u8IsPinOutPut+0x108>
			{
			case PORT_A: *value = GET_BIT(DDRA_REG,pin_no); break;
    1b7a:	ea e3       	ldi	r30, 0x3A	; 58
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a9 01       	movw	r20, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <DIO_u8IsPinOutPut+0x80>
    1b8e:	55 95       	asr	r21
    1b90:	47 95       	ror	r20
    1b92:	8a 95       	dec	r24
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <DIO_u8IsPinOutPut+0x7c>
    1b96:	ca 01       	movw	r24, r20
    1b98:	81 70       	andi	r24, 0x01	; 1
    1b9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b9e:	80 83       	st	Z, r24
    1ba0:	41 c0       	rjmp	.+130    	; 0x1c24 <DIO_u8IsPinOutPut+0x112>
			case PORT_B: *value = GET_BIT(DDRB_REG,pin_no); break;
    1ba2:	e7 e3       	ldi	r30, 0x37	; 55
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a9 01       	movw	r20, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_u8IsPinOutPut+0xa8>
    1bb6:	55 95       	asr	r21
    1bb8:	47 95       	ror	r20
    1bba:	8a 95       	dec	r24
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_u8IsPinOutPut+0xa4>
    1bbe:	ca 01       	movw	r24, r20
    1bc0:	81 70       	andi	r24, 0x01	; 1
    1bc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1bc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1bc6:	80 83       	st	Z, r24
    1bc8:	2d c0       	rjmp	.+90     	; 0x1c24 <DIO_u8IsPinOutPut+0x112>
			case PORT_C: *value = GET_BIT(DDRC_REG,pin_no); break;
    1bca:	e4 e3       	ldi	r30, 0x34	; 52
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a9 01       	movw	r20, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_u8IsPinOutPut+0xd0>
    1bde:	55 95       	asr	r21
    1be0:	47 95       	ror	r20
    1be2:	8a 95       	dec	r24
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_u8IsPinOutPut+0xcc>
    1be6:	ca 01       	movw	r24, r20
    1be8:	81 70       	andi	r24, 0x01	; 1
    1bea:	ec 81       	ldd	r30, Y+4	; 0x04
    1bec:	fd 81       	ldd	r31, Y+5	; 0x05
    1bee:	80 83       	st	Z, r24
    1bf0:	19 c0       	rjmp	.+50     	; 0x1c24 <DIO_u8IsPinOutPut+0x112>
			case PORT_D: *value = GET_BIT(DDRD_REG,pin_no); break;
    1bf2:	e1 e3       	ldi	r30, 0x31	; 49
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a9 01       	movw	r20, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_u8IsPinOutPut+0xf8>
    1c06:	55 95       	asr	r21
    1c08:	47 95       	ror	r20
    1c0a:	8a 95       	dec	r24
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_u8IsPinOutPut+0xf4>
    1c0e:	ca 01       	movw	r24, r20
    1c10:	81 70       	andi	r24, 0x01	; 1
    1c12:	ec 81       	ldd	r30, Y+4	; 0x04
    1c14:	fd 81       	ldd	r31, Y+5	; 0x05
    1c16:	80 83       	st	Z, r24
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <DIO_u8IsPinOutPut+0x112>
			default : error_status = E_NOK; break;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_u8IsPinOutPut+0x112>
			}
		}else error_status = E_NOK;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c26:	27 96       	adiw	r28, 0x07	; 7
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <DIO_u8SetPullUpMode>:
uint8_t DIO_u8SetPullUpMode(uint8_t port_id,uint8_t pin_no,uint8_t mode)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	2e 97       	sbiw	r28, 0x0e	; 14
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	6b 83       	std	Y+3, r22	; 0x03
    1c50:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t error_status = E_OK;
    1c52:	19 82       	std	Y+1, r1	; 0x01
	if(pin_no>=0&&pin_no<8)
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	88 30       	cpi	r24, 0x08	; 8
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <DIO_u8SetPullUpMode+0x24>
    1c5a:	db c0       	rjmp	.+438    	; 0x1e12 <DIO_u8SetPullUpMode+0x1da>
	{
	switch(port_id)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3e 87       	std	Y+14, r19	; 0x0e
    1c64:	2d 87       	std	Y+13, r18	; 0x0d
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <DIO_u8SetPullUpMode+0x3a>
    1c70:	44 c0       	rjmp	.+136    	; 0x1cfa <DIO_u8SetPullUpMode+0xc2>
    1c72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c76:	22 30       	cpi	r18, 0x02	; 2
    1c78:	31 05       	cpc	r19, r1
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <DIO_u8SetPullUpMode+0x4e>
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	71 f0       	breq	.+28     	; 0x1ca0 <DIO_u8SetPullUpMode+0x68>
    1c84:	c3 c0       	rjmp	.+390    	; 0x1e0c <DIO_u8SetPullUpMode+0x1d4>
    1c86:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c88:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <DIO_u8SetPullUpMode+0x5a>
    1c90:	62 c0       	rjmp	.+196    	; 0x1d56 <DIO_u8SetPullUpMode+0x11e>
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	91 05       	cpc	r25, r1
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <DIO_u8SetPullUpMode+0x66>
    1c9c:	89 c0       	rjmp	.+274    	; 0x1db0 <DIO_u8SetPullUpMode+0x178>
    1c9e:	b6 c0       	rjmp	.+364    	; 0x1e0c <DIO_u8SetPullUpMode+0x1d4>
	{
	case PORT_A: mode==Enabled?SET_BIT(PORTA_REG,pin_no):CLR_BIT(PORTA_REG,pin_no); break;
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	a9 f4       	brne	.+42     	; 0x1cd0 <DIO_u8SetPullUpMode+0x98>
    1ca6:	ab e3       	ldi	r26, 0x3B	; 59
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e3       	ldi	r30, 0x3B	; 59
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	02 2e       	mov	r0, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_u8SetPullUpMode+0x8c>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_u8SetPullUpMode+0x88>
    1cc8:	84 2b       	or	r24, r20
    1cca:	8c 93       	st	X, r24
    1ccc:	9c 91       	ld	r25, X
    1cce:	a3 c0       	rjmp	.+326    	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8SetPullUpMode+0xb4>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	2a 95       	dec	r18
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_u8SetPullUpMode+0xb0>
    1cf0:	80 95       	com	r24
    1cf2:	84 23       	and	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	2c 91       	ld	r18, X
    1cf8:	8e c0       	rjmp	.+284    	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
	case PORT_B: mode==Enabled?SET_BIT(PORTB_REG,pin_no):CLR_BIT(PORTB_REG,pin_no); break;
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	a9 f4       	brne	.+42     	; 0x1d2a <DIO_u8SetPullUpMode+0xf2>
    1d00:	a8 e3       	ldi	r26, 0x38	; 56
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e8 e3       	ldi	r30, 0x38	; 56
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <DIO_u8SetPullUpMode+0xe6>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <DIO_u8SetPullUpMode+0xe2>
    1d22:	84 2b       	or	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	3c 91       	ld	r19, X
    1d28:	76 c0       	rjmp	.+236    	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
    1d2a:	a8 e3       	ldi	r26, 0x38	; 56
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e8 e3       	ldi	r30, 0x38	; 56
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <DIO_u8SetPullUpMode+0x110>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <DIO_u8SetPullUpMode+0x10c>
    1d4c:	80 95       	com	r24
    1d4e:	84 23       	and	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	8c 91       	ld	r24, X
    1d54:	60 c0       	rjmp	.+192    	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
	case PORT_C: mode==Enabled?SET_BIT(PORTC_REG,pin_no):CLR_BIT(PORTC_REG,pin_no); break;
    1d56:	8c 81       	ldd	r24, Y+4	; 0x04
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	a9 f4       	brne	.+42     	; 0x1d86 <DIO_u8SetPullUpMode+0x14e>
    1d5c:	a5 e3       	ldi	r26, 0x35	; 53
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e3       	ldi	r30, 0x35	; 53
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_u8SetPullUpMode+0x142>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_u8SetPullUpMode+0x13e>
    1d7e:	84 2b       	or	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	9c 91       	ld	r25, X
    1d84:	48 c0       	rjmp	.+144    	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
    1d86:	a5 e3       	ldi	r26, 0x35	; 53
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e5 e3       	ldi	r30, 0x35	; 53
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_u8SetPullUpMode+0x16a>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	2a 95       	dec	r18
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_u8SetPullUpMode+0x166>
    1da6:	80 95       	com	r24
    1da8:	84 23       	and	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	2c 91       	ld	r18, X
    1dae:	33 c0       	rjmp	.+102    	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
	case PORT_D: mode==Enabled?SET_BIT(PORTD_REG,pin_no):CLR_BIT(PORTD_REG,pin_no); break;
    1db0:	8c 81       	ldd	r24, Y+4	; 0x04
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	a9 f4       	brne	.+42     	; 0x1de0 <DIO_u8SetPullUpMode+0x1a8>
    1db6:	a2 e3       	ldi	r26, 0x32	; 50
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e2 e3       	ldi	r30, 0x32	; 50
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	02 2e       	mov	r0, r18
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <DIO_u8SetPullUpMode+0x19c>
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	0a 94       	dec	r0
    1dd6:	e2 f7       	brpl	.-8      	; 0x1dd0 <DIO_u8SetPullUpMode+0x198>
    1dd8:	84 2b       	or	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	3c 91       	ld	r19, X
    1dde:	1b c0       	rjmp	.+54     	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
    1de0:	a2 e3       	ldi	r26, 0x32	; 50
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e2 e3       	ldi	r30, 0x32	; 50
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_u8SetPullUpMode+0x1c6>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_u8SetPullUpMode+0x1c2>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	8c 91       	ld	r24, X
    1e0a:	05 c0       	rjmp	.+10     	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
	default : error_status = E_NOK; break;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <DIO_u8SetPullUpMode+0x1de>
	}
	}else error_status=E_NOK;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e18:	2e 96       	adiw	r28, 0x0e	; 14
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <DIO_u8SetPortMode>:

uint8_t DIO_u8SetPortMode(uint8_t port_id,uint8_t mode)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_u8SetPortMode+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <DIO_u8SetPortMode+0x8>
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    1e3a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1e3c:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3d 83       	std	Y+5, r19	; 0x05
    1e46:	2c 83       	std	Y+4, r18	; 0x04
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	91 05       	cpc	r25, r1
    1e50:	d1 f0       	breq	.+52     	; 0x1e86 <DIO_u8SetPortMode+0x5c>
    1e52:	2c 81       	ldd	r18, Y+4	; 0x04
    1e54:	3d 81       	ldd	r19, Y+5	; 0x05
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <DIO_u8SetPortMode+0x3c>
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	61 f0       	breq	.+24     	; 0x1e7c <DIO_u8SetPortMode+0x52>
    1e64:	1f c0       	rjmp	.+62     	; 0x1ea4 <DIO_u8SetPortMode+0x7a>
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	81 f0       	breq	.+32     	; 0x1e90 <DIO_u8SetPortMode+0x66>
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
    1e72:	9d 81       	ldd	r25, Y+5	; 0x05
    1e74:	83 30       	cpi	r24, 0x03	; 3
    1e76:	91 05       	cpc	r25, r1
    1e78:	81 f0       	breq	.+32     	; 0x1e9a <DIO_u8SetPortMode+0x70>
    1e7a:	14 c0       	rjmp	.+40     	; 0x1ea4 <DIO_u8SetPortMode+0x7a>
	{
	case PORT_A: DDRA_REG = mode; break;
    1e7c:	ea e3       	ldi	r30, 0x3A	; 58
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	80 83       	st	Z, r24
    1e84:	11 c0       	rjmp	.+34     	; 0x1ea8 <DIO_u8SetPortMode+0x7e>
	case PORT_B: DDRB_REG = mode; break;
    1e86:	e7 e3       	ldi	r30, 0x37	; 55
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	80 83       	st	Z, r24
    1e8e:	0c c0       	rjmp	.+24     	; 0x1ea8 <DIO_u8SetPortMode+0x7e>
	case PORT_C: DDRC_REG = mode; break;
    1e90:	e4 e3       	ldi	r30, 0x34	; 52
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	80 83       	st	Z, r24
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <DIO_u8SetPortMode+0x7e>
	case PORT_D: DDRD_REG = mode; break;
    1e9a:	e1 e3       	ldi	r30, 0x31	; 49
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	80 83       	st	Z, r24
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <DIO_u8SetPortMode+0x7e>
	default : error_status = E_NOK; break;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <DIO_u8SetPortValue>:
uint8_t DIO_u8SetPortValue(uint8_t port_id,uint8_t value)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <DIO_u8SetPortValue+0x6>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <DIO_u8SetPortValue+0x8>
    1ec2:	0f 92       	push	r0
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
    1eca:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	3d 83       	std	Y+5, r19	; 0x05
    1ed6:	2c 83       	std	Y+4, r18	; 0x04
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	81 30       	cpi	r24, 0x01	; 1
    1ede:	91 05       	cpc	r25, r1
    1ee0:	d1 f0       	breq	.+52     	; 0x1f16 <DIO_u8SetPortValue+0x5c>
    1ee2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee6:	22 30       	cpi	r18, 0x02	; 2
    1ee8:	31 05       	cpc	r19, r1
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <DIO_u8SetPortValue+0x3c>
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <DIO_u8SetPortValue+0x52>
    1ef4:	1f c0       	rjmp	.+62     	; 0x1f34 <DIO_u8SetPortValue+0x7a>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	22 30       	cpi	r18, 0x02	; 2
    1efc:	31 05       	cpc	r19, r1
    1efe:	81 f0       	breq	.+32     	; 0x1f20 <DIO_u8SetPortValue+0x66>
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	83 30       	cpi	r24, 0x03	; 3
    1f06:	91 05       	cpc	r25, r1
    1f08:	81 f0       	breq	.+32     	; 0x1f2a <DIO_u8SetPortValue+0x70>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <DIO_u8SetPortValue+0x7a>
		{
		case PORT_A: PORTA_REG = value; break;
    1f0c:	eb e3       	ldi	r30, 0x3B	; 59
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	80 83       	st	Z, r24
    1f14:	11 c0       	rjmp	.+34     	; 0x1f38 <DIO_u8SetPortValue+0x7e>
		case PORT_B: PORTB_REG = value; break;
    1f16:	e8 e3       	ldi	r30, 0x38	; 56
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	80 83       	st	Z, r24
    1f1e:	0c c0       	rjmp	.+24     	; 0x1f38 <DIO_u8SetPortValue+0x7e>
		case PORT_C: PORTC_REG = value; break;
    1f20:	e5 e3       	ldi	r30, 0x35	; 53
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	80 83       	st	Z, r24
    1f28:	07 c0       	rjmp	.+14     	; 0x1f38 <DIO_u8SetPortValue+0x7e>
		case PORT_D: PORTD_REG = value; break;
    1f2a:	e2 e3       	ldi	r30, 0x32	; 50
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	80 83       	st	Z, r24
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <DIO_u8SetPortValue+0x7e>
		default : error_status = E_NOK; break;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <DIO_u8GetPortValue>:
uint8_t DIO_u8GetPortValue(uint8_t port_id,uint8_t * value)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <DIO_u8GetPortValue+0x6>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <DIO_u8GetPortValue+0x8>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <DIO_u8GetPortValue+0xa>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	8a 83       	std	Y+2, r24	; 0x02
    1f5a:	7c 83       	std	Y+4, r23	; 0x04
    1f5c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    1f5e:	19 82       	std	Y+1, r1	; 0x01
		switch(port_id)
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	3e 83       	std	Y+6, r19	; 0x06
    1f68:	2d 83       	std	Y+5, r18	; 0x05
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	91 05       	cpc	r25, r1
    1f72:	e1 f0       	breq	.+56     	; 0x1fac <DIO_u8GetPortValue+0x62>
    1f74:	2d 81       	ldd	r18, Y+5	; 0x05
    1f76:	3e 81       	ldd	r19, Y+6	; 0x06
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	2c f4       	brge	.+10     	; 0x1f88 <DIO_u8GetPortValue+0x3e>
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	61 f0       	breq	.+24     	; 0x1f9e <DIO_u8GetPortValue+0x54>
    1f86:	27 c0       	rjmp	.+78     	; 0x1fd6 <DIO_u8GetPortValue+0x8c>
    1f88:	2d 81       	ldd	r18, Y+5	; 0x05
    1f8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f8c:	22 30       	cpi	r18, 0x02	; 2
    1f8e:	31 05       	cpc	r19, r1
    1f90:	a1 f0       	breq	.+40     	; 0x1fba <DIO_u8GetPortValue+0x70>
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	91 05       	cpc	r25, r1
    1f9a:	b1 f0       	breq	.+44     	; 0x1fc8 <DIO_u8GetPortValue+0x7e>
    1f9c:	1c c0       	rjmp	.+56     	; 0x1fd6 <DIO_u8GetPortValue+0x8c>
		{
		case PORT_A: *value = PINA_REG; break;
    1f9e:	e9 e3       	ldi	r30, 0x39	; 57
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa8:	80 83       	st	Z, r24
    1faa:	17 c0       	rjmp	.+46     	; 0x1fda <DIO_u8GetPortValue+0x90>
		case PORT_B: *value = PINB_REG; break;
    1fac:	e6 e3       	ldi	r30, 0x36	; 54
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb6:	80 83       	st	Z, r24
    1fb8:	10 c0       	rjmp	.+32     	; 0x1fda <DIO_u8GetPortValue+0x90>
		case PORT_C: *value = PINC_REG; break;
    1fba:	e3 e3       	ldi	r30, 0x33	; 51
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc4:	80 83       	st	Z, r24
    1fc6:	09 c0       	rjmp	.+18     	; 0x1fda <DIO_u8GetPortValue+0x90>
		case PORT_D: *value = PIND_REG; break;
    1fc8:	e0 e3       	ldi	r30, 0x30	; 48
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd2:	80 83       	st	Z, r24
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <DIO_u8GetPortValue+0x90>
		default : error_status = E_NOK; break;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	89 83       	std	Y+1, r24	; 0x01
		}
		return error_status;
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fdc:	26 96       	adiw	r28, 0x06	; 6
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <DIO_u8SetPortPullUpMode>:

uint8_t DIO_u8SetPortPullUpMode(uint8_t port_id,uint8_t mode)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <DIO_u8SetPortPullUpMode+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <DIO_u8SetPortPullUpMode+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = E_OK;
    2000:	19 82       	std	Y+1, r1	; 0x01
	switch(port_id)
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3d 83       	std	Y+5, r19	; 0x05
    200a:	2c 83       	std	Y+4, r18	; 0x04
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	d1 f0       	breq	.+52     	; 0x204a <DIO_u8SetPortPullUpMode+0x5c>
    2016:	2c 81       	ldd	r18, Y+4	; 0x04
    2018:	3d 81       	ldd	r19, Y+5	; 0x05
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	2c f4       	brge	.+10     	; 0x202a <DIO_u8SetPortPullUpMode+0x3c>
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	9d 81       	ldd	r25, Y+5	; 0x05
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	61 f0       	breq	.+24     	; 0x2040 <DIO_u8SetPortPullUpMode+0x52>
    2028:	1f c0       	rjmp	.+62     	; 0x2068 <DIO_u8SetPortPullUpMode+0x7a>
    202a:	2c 81       	ldd	r18, Y+4	; 0x04
    202c:	3d 81       	ldd	r19, Y+5	; 0x05
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	81 f0       	breq	.+32     	; 0x2054 <DIO_u8SetPortPullUpMode+0x66>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	83 30       	cpi	r24, 0x03	; 3
    203a:	91 05       	cpc	r25, r1
    203c:	81 f0       	breq	.+32     	; 0x205e <DIO_u8SetPortPullUpMode+0x70>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <DIO_u8SetPortPullUpMode+0x7a>
	{
	case PORT_A: PORTA_REG=mode; break;
    2040:	eb e3       	ldi	r30, 0x3B	; 59
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	80 83       	st	Z, r24
    2048:	11 c0       	rjmp	.+34     	; 0x206c <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_B: PORTB_REG=mode; break;
    204a:	e8 e3       	ldi	r30, 0x38	; 56
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	80 83       	st	Z, r24
    2052:	0c c0       	rjmp	.+24     	; 0x206c <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_C: PORTC_REG=mode; break;
    2054:	e5 e3       	ldi	r30, 0x35	; 53
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	80 83       	st	Z, r24
    205c:	07 c0       	rjmp	.+14     	; 0x206c <DIO_u8SetPortPullUpMode+0x7e>
	case PORT_D: PORTD_REG=mode; break;
    205e:	e2 e3       	ldi	r30, 0x32	; 50
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	80 83       	st	Z, r24
    2066:	02 c0       	rjmp	.+4      	; 0x206c <DIO_u8SetPortPullUpMode+0x7e>
	default : error_status = E_NOK; break;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <ADC_vidAdcInit>:
uint16_* ADC_READ=NULL;

static void ADC_vidSetMultiPlexer(uint8_t adc_pin);

void ADC_vidAdcInit(uint8_t voltage_reference)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <ADC_vidAdcInit+0x6>
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,7);
    208c:	a6 e2       	ldi	r26, 0x26	; 38
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e6 e2       	ldi	r30, 0x26	; 38
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,2);
    209a:	a6 e2       	ldi	r26, 0x26	; 38
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e6 e2       	ldi	r30, 0x26	; 38
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8b 7f       	andi	r24, 0xFB	; 251
    20a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    20a8:	a6 e2       	ldi	r26, 0x26	; 38
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e6 e2       	ldi	r30, 0x26	; 38
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	82 60       	ori	r24, 0x02	; 2
    20b4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
    20b6:	a6 e2       	ldi	r26, 0x26	; 38
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e6 e2       	ldi	r30, 0x26	; 38
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	8e 7f       	andi	r24, 0xFE	; 254
    20c2:	8c 93       	st	X, r24
	switch(voltage_reference)
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	3b 83       	std	Y+3, r19	; 0x03
    20cc:	2a 83       	std	Y+2, r18	; 0x02
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	91 05       	cpc	r25, r1
    20d6:	c9 f0       	breq	.+50     	; 0x210a <ADC_vidAdcInit+0x8c>
    20d8:	2a 81       	ldd	r18, Y+2	; 0x02
    20da:	3b 81       	ldd	r19, Y+3	; 0x03
    20dc:	22 30       	cpi	r18, 0x02	; 2
    20de:	31 05       	cpc	r19, r1
    20e0:	29 f0       	breq	.+10     	; 0x20ec <ADC_vidAdcInit+0x6e>
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	9b 81       	ldd	r25, Y+3	; 0x03
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	f9 f0       	breq	.+62     	; 0x2128 <ADC_vidAdcInit+0xaa>
    20ea:	2c c0       	rjmp	.+88     	; 0x2144 <ADC_vidAdcInit+0xc6>
	{
	case AREF_VOLTAGE:
		CLR_BIT(ADMUX,7);
    20ec:	a7 e2       	ldi	r26, 0x27	; 39
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e7 e2       	ldi	r30, 0x27	; 39
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	8f 77       	andi	r24, 0x7F	; 127
    20f8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,6);
    20fa:	a7 e2       	ldi	r26, 0x27	; 39
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e7 e2       	ldi	r30, 0x27	; 39
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	8f 7b       	andi	r24, 0xBF	; 191
    2106:	8c 93       	st	X, r24
    2108:	1d c0       	rjmp	.+58     	; 0x2144 <ADC_vidAdcInit+0xc6>
		break;
	case VCC:
		CLR_BIT(ADMUX,7);
    210a:	a7 e2       	ldi	r26, 0x27	; 39
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e7 e2       	ldi	r30, 0x27	; 39
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	8f 77       	andi	r24, 0x7F	; 127
    2116:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2118:	a7 e2       	ldi	r26, 0x27	; 39
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e7 e2       	ldi	r30, 0x27	; 39
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	80 64       	ori	r24, 0x40	; 64
    2124:	8c 93       	st	X, r24
    2126:	0e c0       	rjmp	.+28     	; 0x2144 <ADC_vidAdcInit+0xc6>
		break;
	case INTERNAL_2_56_:
		SET_BIT(ADMUX,7);
    2128:	a7 e2       	ldi	r26, 0x27	; 39
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e7 e2       	ldi	r30, 0x27	; 39
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	80 68       	ori	r24, 0x80	; 128
    2134:	8c 93       	st	X, r24
		SET_BIT(ADMUX,6);
    2136:	a7 e2       	ldi	r26, 0x27	; 39
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e7 e2       	ldi	r30, 0x27	; 39
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	80 64       	ori	r24, 0x40	; 64
    2142:	8c 93       	st	X, r24
	ADC_vidAdcPinInit(ADC_AUTO_TRIGGER_PIN);
	ADC_vidSetMultiPlexer(ADC_AUTO_TRIGGER_PIN);
	ADC_VIDSetAutoTriggerMode(INT_0);
	SET_BIT(ADCSRA,5);
#elif ADC_TRIGGERING_MODE == 1
	CLR_BIT(ADCSRA,5);
    2144:	a6 e2       	ldi	r26, 0x26	; 38
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e6 e2       	ldi	r30, 0x26	; 38
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7d       	andi	r24, 0xDF	; 223
    2150:	8c 93       	st	X, r24
#endif

#if ADC_READING_TECHNIQUE == 0
	SET_BIT(ADCSRA,3);
    2152:	a6 e2       	ldi	r26, 0x26	; 38
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e6 e2       	ldi	r30, 0x26	; 38
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	88 60       	ori	r24, 0x08	; 8
    215e:	8c 93       	st	X, r24
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
#endif

#if ADC_READING_NO_OF_BITS == 0
	SET_BIT(ADMUX,5);
#elif ADC_READING_NO_OF_BITS == 1
	CLR_BIT(ADMUX,5);
    2166:	a7 e2       	ldi	r26, 0x27	; 39
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e7 e2       	ldi	r30, 0x27	; 39
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	8f 7d       	andi	r24, 0xDF	; 223
    2172:	8c 93       	st	X, r24
#endif

}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <ADC_vidAdcPinInit>:

void ADC_vidAdcPinInit(uint8_t adc_pin)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <ADC_vidAdcPinInit+0x6>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	8a 83       	std	Y+2, r24	; 0x02
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	88 30       	cpi	r24, 0x08	; 8
    2190:	c0 f4       	brcc	.+48     	; 0x21c2 <ADC_vidAdcPinInit+0x42>
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	fc 01       	movw	r30, r24
    219e:	e2 51       	subi	r30, 0x12	; 18
    21a0:	fc 4f       	sbci	r31, 0xFC	; 252
    21a2:	20 81       	ld	r18, Z
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	88 2f       	mov	r24, r24
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	fc 01       	movw	r30, r24
    21b0:	e1 51       	subi	r30, 0x11	; 17
    21b2:	fc 4f       	sbci	r31, 0xFC	; 252
    21b4:	90 81       	ld	r25, Z
    21b6:	82 2f       	mov	r24, r18
    21b8:	69 2f       	mov	r22, r25
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
    21c0:	22 c0       	rjmp	.+68     	; 0x2206 <ADC_vidAdcPinInit+0x86>
	else if(adc_pin==8)
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 30       	cpi	r24, 0x08	; 8
    21c6:	f9 f4       	brne	.+62     	; 0x2206 <ADC_vidAdcPinInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	1a c0       	rjmp	.+52     	; 0x2200 <ADC_vidAdcPinInit+0x80>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 51       	subi	r30, 0x12	; 18
    21da:	fc 4f       	sbci	r31, 0xFC	; 252
    21dc:	20 81       	ld	r18, Z
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	fc 01       	movw	r30, r24
    21ea:	e1 51       	subi	r30, 0x11	; 17
    21ec:	fc 4f       	sbci	r31, 0xFC	; 252
    21ee:	90 81       	ld	r25, Z
    21f0:	82 2f       	mov	r24, r18
    21f2:	69 2f       	mov	r22, r25
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
void ADC_vidAdcPinInit(uint8_t adc_pin)
{
	if(adc_pin<8)DIO_u8SetPinMode(ADC_PINS[adc_pin].port,ADC_PINS[adc_pin].pin,INPUT);
	else if(adc_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	88 30       	cpi	r24, 0x08	; 8
    2204:	18 f3       	brcs	.-58     	; 0x21cc <ADC_vidAdcPinInit+0x4c>
		{
			DIO_u8SetPinMode(ADC_PINS[i].port,ADC_PINS[i].pin,INPUT);
		}
	}
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <ADC_vidAdcGetRead>:

void ADC_vidAdcGetRead(uint8_t adc_pin)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	0f 92       	push	r0
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetMultiPlexer(adc_pin);
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	0e 94 b0 11 	call	0x2360	; 0x2360 <ADC_vidSetMultiPlexer>
	SET_BIT(ADCSRA,6);
    2222:	a6 e2       	ldi	r26, 0x26	; 38
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e6 e2       	ldi	r30, 0x26	; 38
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	80 64       	ori	r24, 0x40	; 64
    222e:	8c 93       	st	X, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    2230:	0f 90       	pop	r0
    2232:	cf 91       	pop	r28
    2234:	df 91       	pop	r29
    2236:	08 95       	ret

00002238 <ADC_vidGetAutoTriggerRead>:

void ADC_vidGetAutoTriggerRead()
{
    2238:	df 93       	push	r29
    223a:	cf 93       	push	r28
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	SET_BIT(ADCSRA,4);
#endif
}
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <ADC_VIDSetAutoTriggerMode>:

void ADC_VIDSetAutoTriggerMode(uint8_t mode)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	0f 92       	push	r0
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	91 05       	cpc	r25, r1
    225c:	a9 f4       	brne	.+42     	; 0x2288 <ADC_VIDSetAutoTriggerMode+0x42>
	{
	case INT_0:
		CLR_BIT(SFIOR,5);
    225e:	a0 e5       	ldi	r26, 0x50	; 80
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e0 e5       	ldi	r30, 0x50	; 80
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 7d       	andi	r24, 0xDF	; 223
    226a:	8c 93       	st	X, r24
		SET_BIT(SFIOR,6);
    226c:	a0 e5       	ldi	r26, 0x50	; 80
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e0 e5       	ldi	r30, 0x50	; 80
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 64       	ori	r24, 0x40	; 64
    2278:	8c 93       	st	X, r24
		CLR_BIT(SFIOR,7);
    227a:	a0 e5       	ldi	r26, 0x50	; 80
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e0 e5       	ldi	r30, 0x50	; 80
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8f 77       	andi	r24, 0x7F	; 127
    2286:	8c 93       	st	X, r24
		break;
	}
}
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <ADC_vidSetReadingVariable>:

void ADC_vidSetReadingVariable(uint16_* adc_read)
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <ADC_vidSetReadingVariable+0x6>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
	ADC_READ=adc_read;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	90 93 19 04 	sts	0x0419, r25
    22a6:	80 93 18 04 	sts	0x0418, r24
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <ADC_vidSetCallBack>:

void ADC_vidSetCallBack(void (*func)(void))
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <ADC_vidSetCallBack+0x6>
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01
	vector_16=func;
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	90 93 17 04 	sts	0x0417, r25
    22ca:	80 93 16 04 	sts	0x0416, r24
}
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    22d8:	1f 92       	push	r1
    22da:	0f 92       	push	r0
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	0f 92       	push	r0
    22e0:	11 24       	eor	r1, r1
    22e2:	2f 93       	push	r18
    22e4:	3f 93       	push	r19
    22e6:	4f 93       	push	r20
    22e8:	5f 93       	push	r21
    22ea:	6f 93       	push	r22
    22ec:	7f 93       	push	r23
    22ee:	8f 93       	push	r24
    22f0:	9f 93       	push	r25
    22f2:	af 93       	push	r26
    22f4:	bf 93       	push	r27
    22f6:	ef 93       	push	r30
    22f8:	ff 93       	push	r31
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
#if ADC_READING_TECHNIQUE == 0
	if(ADC_READ!=NULL)
    2302:	80 91 18 04 	lds	r24, 0x0418
    2306:	90 91 19 04 	lds	r25, 0x0419
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	59 f0       	breq	.+22     	; 0x2324 <__vector_16+0x4c>
	{
#if ADC_READING_NO_OF_BITS == 1
	*ADC_READ=ADCL16;
    230e:	e0 91 18 04 	lds	r30, 0x0418
    2312:	f0 91 19 04 	lds	r31, 0x0419
    2316:	a4 e2       	ldi	r26, 0x24	; 36
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	8d 91       	ld	r24, X+
    231c:	9c 91       	ld	r25, X
    231e:	11 97       	sbiw	r26, 0x01	; 1
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
#elif ADC_READING_NO_OF_BITS == 0
	*ADC_READ=(uint16_)ADCL8;
#endif
	}
	if(vector_16!=NULL)vector_16();
    2324:	80 91 16 04 	lds	r24, 0x0416
    2328:	90 91 17 04 	lds	r25, 0x0417
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	29 f0       	breq	.+10     	; 0x233a <__vector_16+0x62>
    2330:	e0 91 16 04 	lds	r30, 0x0416
    2334:	f0 91 17 04 	lds	r31, 0x0417
    2338:	09 95       	icall
#endif
}
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <ADC_vidSetMultiPlexer>:

static void ADC_vidSetMultiPlexer(uint8_t adc_pin)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <ADC_vidSetMultiPlexer+0x6>
    2366:	0f 92       	push	r0
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	89 83       	std	Y+1, r24	; 0x01
	switch(adc_pin)
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	3b 83       	std	Y+3, r19	; 0x03
    2376:	2a 83       	std	Y+2, r18	; 0x02
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	83 30       	cpi	r24, 0x03	; 3
    237e:	91 05       	cpc	r25, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <ADC_vidSetMultiPlexer+0x24>
    2382:	9b c0       	rjmp	.+310    	; 0x24ba <ADC_vidSetMultiPlexer+0x15a>
    2384:	2a 81       	ldd	r18, Y+2	; 0x02
    2386:	3b 81       	ldd	r19, Y+3	; 0x03
    2388:	24 30       	cpi	r18, 0x04	; 4
    238a:	31 05       	cpc	r19, r1
    238c:	8c f4       	brge	.+34     	; 0x23b0 <ADC_vidSetMultiPlexer+0x50>
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	9b 81       	ldd	r25, Y+3	; 0x03
    2392:	81 30       	cpi	r24, 0x01	; 1
    2394:	91 05       	cpc	r25, r1
    2396:	09 f4       	brne	.+2      	; 0x239a <ADC_vidSetMultiPlexer+0x3a>
    2398:	48 c0       	rjmp	.+144    	; 0x242a <ADC_vidSetMultiPlexer+0xca>
    239a:	2a 81       	ldd	r18, Y+2	; 0x02
    239c:	3b 81       	ldd	r19, Y+3	; 0x03
    239e:	22 30       	cpi	r18, 0x02	; 2
    23a0:	31 05       	cpc	r19, r1
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <ADC_vidSetMultiPlexer+0x46>
    23a4:	66 c0       	rjmp	.+204    	; 0x2472 <ADC_vidSetMultiPlexer+0x112>
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	9b 81       	ldd	r25, Y+3	; 0x03
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	d1 f0       	breq	.+52     	; 0x23e2 <ADC_vidSetMultiPlexer+0x82>
    23ae:	38 c1       	rjmp	.+624    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
    23b0:	2a 81       	ldd	r18, Y+2	; 0x02
    23b2:	3b 81       	ldd	r19, Y+3	; 0x03
    23b4:	25 30       	cpi	r18, 0x05	; 5
    23b6:	31 05       	cpc	r19, r1
    23b8:	09 f4       	brne	.+2      	; 0x23bc <ADC_vidSetMultiPlexer+0x5c>
    23ba:	c7 c0       	rjmp	.+398    	; 0x254a <ADC_vidSetMultiPlexer+0x1ea>
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	85 30       	cpi	r24, 0x05	; 5
    23c2:	91 05       	cpc	r25, r1
    23c4:	0c f4       	brge	.+2      	; 0x23c8 <ADC_vidSetMultiPlexer+0x68>
    23c6:	9d c0       	rjmp	.+314    	; 0x2502 <ADC_vidSetMultiPlexer+0x1a2>
    23c8:	2a 81       	ldd	r18, Y+2	; 0x02
    23ca:	3b 81       	ldd	r19, Y+3	; 0x03
    23cc:	26 30       	cpi	r18, 0x06	; 6
    23ce:	31 05       	cpc	r19, r1
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <ADC_vidSetMultiPlexer+0x74>
    23d2:	df c0       	rjmp	.+446    	; 0x2592 <ADC_vidSetMultiPlexer+0x232>
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	9b 81       	ldd	r25, Y+3	; 0x03
    23d8:	87 30       	cpi	r24, 0x07	; 7
    23da:	91 05       	cpc	r25, r1
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <ADC_vidSetMultiPlexer+0x80>
    23de:	fd c0       	rjmp	.+506    	; 0x25da <ADC_vidSetMultiPlexer+0x27a>
    23e0:	1f c1       	rjmp	.+574    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
	{
	case ADC_0:
			CLR_BIT(ADMUX,4);
    23e2:	a7 e2       	ldi	r26, 0x27	; 39
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e7 e2       	ldi	r30, 0x27	; 39
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	8f 7e       	andi	r24, 0xEF	; 239
    23ee:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    23f0:	a7 e2       	ldi	r26, 0x27	; 39
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e7 e2       	ldi	r30, 0x27	; 39
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	87 7f       	andi	r24, 0xF7	; 247
    23fc:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    23fe:	a7 e2       	ldi	r26, 0x27	; 39
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e7 e2       	ldi	r30, 0x27	; 39
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8b 7f       	andi	r24, 0xFB	; 251
    240a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    240c:	a7 e2       	ldi	r26, 0x27	; 39
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e7 e2       	ldi	r30, 0x27	; 39
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	8d 7f       	andi	r24, 0xFD	; 253
    2418:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    241a:	a7 e2       	ldi	r26, 0x27	; 39
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e7 e2       	ldi	r30, 0x27	; 39
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8e 7f       	andi	r24, 0xFE	; 254
    2426:	8c 93       	st	X, r24
    2428:	fb c0       	rjmp	.+502    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_1:
			CLR_BIT(ADMUX,4);
    242a:	a7 e2       	ldi	r26, 0x27	; 39
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e7 e2       	ldi	r30, 0x27	; 39
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8f 7e       	andi	r24, 0xEF	; 239
    2436:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2438:	a7 e2       	ldi	r26, 0x27	; 39
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e7 e2       	ldi	r30, 0x27	; 39
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	87 7f       	andi	r24, 0xF7	; 247
    2444:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    2446:	a7 e2       	ldi	r26, 0x27	; 39
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e7 e2       	ldi	r30, 0x27	; 39
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8b 7f       	andi	r24, 0xFB	; 251
    2452:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2454:	a7 e2       	ldi	r26, 0x27	; 39
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e7 e2       	ldi	r30, 0x27	; 39
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8d 7f       	andi	r24, 0xFD	; 253
    2460:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2462:	a7 e2       	ldi	r26, 0x27	; 39
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e2       	ldi	r30, 0x27	; 39
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	81 60       	ori	r24, 0x01	; 1
    246e:	8c 93       	st	X, r24
    2470:	d7 c0       	rjmp	.+430    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_2:
			CLR_BIT(ADMUX,4);
    2472:	a7 e2       	ldi	r26, 0x27	; 39
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e7 e2       	ldi	r30, 0x27	; 39
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 7e       	andi	r24, 0xEF	; 239
    247e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2480:	a7 e2       	ldi	r26, 0x27	; 39
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	e7 e2       	ldi	r30, 0x27	; 39
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	87 7f       	andi	r24, 0xF7	; 247
    248c:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    248e:	a7 e2       	ldi	r26, 0x27	; 39
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e7 e2       	ldi	r30, 0x27	; 39
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8b 7f       	andi	r24, 0xFB	; 251
    249a:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    249c:	a7 e2       	ldi	r26, 0x27	; 39
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e7 e2       	ldi	r30, 0x27	; 39
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	82 60       	ori	r24, 0x02	; 2
    24a8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    24aa:	a7 e2       	ldi	r26, 0x27	; 39
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	e7 e2       	ldi	r30, 0x27	; 39
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	8e 7f       	andi	r24, 0xFE	; 254
    24b6:	8c 93       	st	X, r24
    24b8:	b3 c0       	rjmp	.+358    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_3:
			CLR_BIT(ADMUX,4);
    24ba:	a7 e2       	ldi	r26, 0x27	; 39
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e7 e2       	ldi	r30, 0x27	; 39
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 7e       	andi	r24, 0xEF	; 239
    24c6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    24c8:	a7 e2       	ldi	r26, 0x27	; 39
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e7 e2       	ldi	r30, 0x27	; 39
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	87 7f       	andi	r24, 0xF7	; 247
    24d4:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,2);
    24d6:	a7 e2       	ldi	r26, 0x27	; 39
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e7 e2       	ldi	r30, 0x27	; 39
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8b 7f       	andi	r24, 0xFB	; 251
    24e2:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    24e4:	a7 e2       	ldi	r26, 0x27	; 39
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e7 e2       	ldi	r30, 0x27	; 39
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	82 60       	ori	r24, 0x02	; 2
    24f0:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    24f2:	a7 e2       	ldi	r26, 0x27	; 39
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e7 e2       	ldi	r30, 0x27	; 39
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	81 60       	ori	r24, 0x01	; 1
    24fe:	8c 93       	st	X, r24
    2500:	8f c0       	rjmp	.+286    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_4:
			CLR_BIT(ADMUX,4);
    2502:	a7 e2       	ldi	r26, 0x27	; 39
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e7 e2       	ldi	r30, 0x27	; 39
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	8f 7e       	andi	r24, 0xEF	; 239
    250e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2510:	a7 e2       	ldi	r26, 0x27	; 39
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e7 e2       	ldi	r30, 0x27	; 39
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	87 7f       	andi	r24, 0xF7	; 247
    251c:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    251e:	a7 e2       	ldi	r26, 0x27	; 39
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e7 e2       	ldi	r30, 0x27	; 39
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	84 60       	ori	r24, 0x04	; 4
    252a:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    252c:	a7 e2       	ldi	r26, 0x27	; 39
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e7 e2       	ldi	r30, 0x27	; 39
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	8d 7f       	andi	r24, 0xFD	; 253
    2538:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    253a:	a7 e2       	ldi	r26, 0x27	; 39
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e7 e2       	ldi	r30, 0x27	; 39
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8e 7f       	andi	r24, 0xFE	; 254
    2546:	8c 93       	st	X, r24
    2548:	6b c0       	rjmp	.+214    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_5:
			CLR_BIT(ADMUX,4);
    254a:	a7 e2       	ldi	r26, 0x27	; 39
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e7 e2       	ldi	r30, 0x27	; 39
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 7e       	andi	r24, 0xEF	; 239
    2556:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    2558:	a7 e2       	ldi	r26, 0x27	; 39
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e7 e2       	ldi	r30, 0x27	; 39
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	87 7f       	andi	r24, 0xF7	; 247
    2564:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    2566:	a7 e2       	ldi	r26, 0x27	; 39
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e7 e2       	ldi	r30, 0x27	; 39
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	84 60       	ori	r24, 0x04	; 4
    2572:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,1);
    2574:	a7 e2       	ldi	r26, 0x27	; 39
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e7 e2       	ldi	r30, 0x27	; 39
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8d 7f       	andi	r24, 0xFD	; 253
    2580:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2582:	a7 e2       	ldi	r26, 0x27	; 39
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e7 e2       	ldi	r30, 0x27	; 39
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	81 60       	ori	r24, 0x01	; 1
    258e:	8c 93       	st	X, r24
    2590:	47 c0       	rjmp	.+142    	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_6:
			CLR_BIT(ADMUX,4);
    2592:	a7 e2       	ldi	r26, 0x27	; 39
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e7 e2       	ldi	r30, 0x27	; 39
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8f 7e       	andi	r24, 0xEF	; 239
    259e:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    25a0:	a7 e2       	ldi	r26, 0x27	; 39
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e7 e2       	ldi	r30, 0x27	; 39
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	87 7f       	andi	r24, 0xF7	; 247
    25ac:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    25ae:	a7 e2       	ldi	r26, 0x27	; 39
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e7 e2       	ldi	r30, 0x27	; 39
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	84 60       	ori	r24, 0x04	; 4
    25ba:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    25bc:	a7 e2       	ldi	r26, 0x27	; 39
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e7 e2       	ldi	r30, 0x27	; 39
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	82 60       	ori	r24, 0x02	; 2
    25c8:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,0);
    25ca:	a7 e2       	ldi	r26, 0x27	; 39
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	e7 e2       	ldi	r30, 0x27	; 39
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8e 7f       	andi	r24, 0xFE	; 254
    25d6:	8c 93       	st	X, r24
    25d8:	23 c0       	rjmp	.+70     	; 0x2620 <ADC_vidSetMultiPlexer+0x2c0>
			break;
	case ADC_7:
			CLR_BIT(ADMUX,4);
    25da:	a7 e2       	ldi	r26, 0x27	; 39
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e7 e2       	ldi	r30, 0x27	; 39
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	8f 7e       	andi	r24, 0xEF	; 239
    25e6:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,3);
    25e8:	a7 e2       	ldi	r26, 0x27	; 39
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e7 e2       	ldi	r30, 0x27	; 39
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	87 7f       	andi	r24, 0xF7	; 247
    25f4:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
    25f6:	a7 e2       	ldi	r26, 0x27	; 39
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e7 e2       	ldi	r30, 0x27	; 39
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	84 60       	ori	r24, 0x04	; 4
    2602:	8c 93       	st	X, r24
			SET_BIT(ADMUX,1);
    2604:	a7 e2       	ldi	r26, 0x27	; 39
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e7 e2       	ldi	r30, 0x27	; 39
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	82 60       	ori	r24, 0x02	; 2
    2610:	8c 93       	st	X, r24
			SET_BIT(ADMUX,0);
    2612:	a7 e2       	ldi	r26, 0x27	; 39
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e7 e2       	ldi	r30, 0x27	; 39
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	81 60       	ori	r24, 0x01	; 1
    261e:	8c 93       	st	X, r24
			break;
	}
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <UART_Init>:
#include "../../libraries/std_types.h"
#include "../../libraries/bit_math.h"
#include "UART.h"
#include "UART_REGISTERS.h"

void UART_Init(uint16_ baud) {
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	00 d0       	rcall	.+0      	; 0x2632 <UART_Init+0x6>
    2632:	00 d0       	rcall	.+0      	; 0x2634 <UART_Init+0x8>
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
    uint16_ ubrr = (uint16_)(((uint32_t)8000000/16)/baud-1);
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	9c 01       	movw	r18, r24
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	80 e2       	ldi	r24, 0x20	; 32
    2648:	91 ea       	ldi	r25, 0xA1	; 161
    264a:	a7 e0       	ldi	r26, 0x07	; 7
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    2656:	da 01       	movw	r26, r20
    2658:	c9 01       	movw	r24, r18
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01

    UBRRH = (uint8_t)(ubrr>>8);
    2660:	e0 e4       	ldi	r30, 0x40	; 64
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	89 2f       	mov	r24, r25
    266a:	99 27       	eor	r25, r25
    266c:	80 83       	st	Z, r24
    UBRRL = (uint8_t)ubrr;
    266e:	e9 e2       	ldi	r30, 0x29	; 41
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	80 83       	st	Z, r24
    SET_BIT(UCSRB,4);
    2676:	aa e2       	ldi	r26, 0x2A	; 42
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	ea e2       	ldi	r30, 0x2A	; 42
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	80 61       	ori	r24, 0x10	; 16
    2682:	8c 93       	st	X, r24
    SET_BIT(UCSRB,3);
    2684:	aa e2       	ldi	r26, 0x2A	; 42
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ea e2       	ldi	r30, 0x2A	; 42
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 60       	ori	r24, 0x08	; 8
    2690:	8c 93       	st	X, r24
    UCSRC = (1<<7) | (3<<1);
    2692:	e0 e4       	ldi	r30, 0x40	; 64
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	86 e8       	ldi	r24, 0x86	; 134
    2698:	80 83       	st	Z, r24
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <UART_Transmit>:

void UART_Transmit(uint8_t data) {
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
    while (!GET_BIT(UCSRA,5));
    26b4:	eb e2       	ldi	r30, 0x2B	; 43
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	82 95       	swap	r24
    26bc:	86 95       	lsr	r24
    26be:	87 70       	andi	r24, 0x07	; 7
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	81 70       	andi	r24, 0x01	; 1
    26c6:	90 70       	andi	r25, 0x00	; 0
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	a1 f3       	breq	.-24     	; 0x26b4 <UART_Transmit+0xc>
    UDR = data;
    26cc:	ec e2       	ldi	r30, 0x2C	; 44
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	80 83       	st	Z, r24
}
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <UART_Receive>:

uint8_t UART_Receive(void) {
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    while (!GET_BIT(UCSRA,7));
    26e4:	eb e2       	ldi	r30, 0x2B	; 43
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	88 23       	and	r24, r24
    26ec:	dc f7       	brge	.-10     	; 0x26e4 <UART_Receive+0x8>
    return UDR;
    26ee:	ec e2       	ldi	r30, 0x2C	; 44
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
}
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <TIMER1_voidInit>:

void (* TIMER1_voidpSetCallBackCTC)(void) = NULL;

uint16_ compare_cnt1;

void TIMER1_voidInit(void){
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000;
	TCCR1B |= TIMER1_PRESCALER;

#elif TIMER1_MODE == CTC_T_MODE

	CLR_BIT(TCCR1A , WGM10);
    2702:	af e4       	ldi	r26, 0x4F	; 79
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8e 7f       	andi	r24, 0xFE	; 254
    270e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , WGM11);
    2710:	af e4       	ldi	r26, 0x4F	; 79
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ef e4       	ldi	r30, 0x4F	; 79
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8d 7f       	andi	r24, 0xFD	; 253
    271c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    271e:	ae e4       	ldi	r26, 0x4E	; 78
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ee e4       	ldi	r30, 0x4E	; 78
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	88 60       	ori	r24, 0x08	; 8
    272a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , WGM13);
    272c:	ae e4       	ldi	r26, 0x4E	; 78
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ee e4       	ldi	r30, 0x4E	; 78
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8f 7e       	andi	r24, 0xEF	; 239
    2738:	8c 93       	st	X, r24

	//Enabling timer flag;
	SET_BIT(TIMSK , OCIE1A);
    273a:	a9 e5       	ldi	r26, 0x59	; 89
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e9 e5       	ldi	r30, 0x59	; 89
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	80 61       	ori	r24, 0x10	; 16
    2746:	8c 93       	st	X, r24

	//selecting prescaler;
	TCCR1B &= 0b11111000;
    2748:	ae e4       	ldi	r26, 0x4E	; 78
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	ee e4       	ldi	r30, 0x4E	; 78
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	88 7f       	andi	r24, 0xF8	; 248
    2754:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER;
    2756:	ae e4       	ldi	r26, 0x4E	; 78
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	ee e4       	ldi	r30, 0x4E	; 78
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	85 60       	ori	r24, 0x05	; 5
    2762:	8c 93       	st	X, r24
#else

#error "wrong timer mode"

#endif
}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <TIMER1_voidDisable>:

void TIMER1_voidDisable(void){
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62

	TCCR1B &= 0b11111000;
    2772:	ae e4       	ldi	r26, 0x4E	; 78
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	ee e4       	ldi	r30, 0x4E	; 78
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	88 7f       	andi	r24, 0xF8	; 248
    277e:	8c 93       	st	X, r24

}
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <TIMER1_uint8SetPrescaler>:

uint8_t TIMER1_uint8SetPrescaler(uint8_t Copy_uint8Prescaler){
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <TIMER1_uint8SetPrescaler+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t Local_uint8ErrorState = 0;
    2792:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint8Prescaler <8){
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	88 30       	cpi	r24, 0x08	; 8
    2798:	80 f4       	brcc	.+32     	; 0x27ba <TIMER1_uint8SetPrescaler+0x34>

		//selecting prescaler;
		TCCR1B &= 0b11111000;
    279a:	ae e4       	ldi	r26, 0x4E	; 78
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	ee e4       	ldi	r30, 0x4E	; 78
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	88 7f       	andi	r24, 0xF8	; 248
    27a6:	8c 93       	st	X, r24
		TCCR1B |= Copy_uint8Prescaler;
    27a8:	ae e4       	ldi	r26, 0x4E	; 78
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	ee e4       	ldi	r30, 0x4E	; 78
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	90 81       	ld	r25, Z
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	89 2b       	or	r24, r25
    27b6:	8c 93       	st	X, r24
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <TIMER1_uint8SetPrescaler+0x38>

	}
	else{

		Local_uint8ErrorState = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_uint8ErrorState;
    27be:	89 81       	ldd	r24, Y+1	; 0x01

}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <TIMER1_voidSetCounterRegister>:
void TIMER1_voidSetCounterRegister(uint8_t Copy_uint8Counter1Start){
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	0f 92       	push	r0
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	89 83       	std	Y+1, r24	; 0x01

	TCNT1L = Copy_uint8Counter1Start;
    27d6:	ec e4       	ldi	r30, 0x4C	; 76
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	80 83       	st	Z, r24
}
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <TIMER1_voidSetCTCTime>:

void TIMER1_voidSetCTCTime(uint8_t Copy_uint8CompareTime){
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	0f 92       	push	r0
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	89 83       	std	Y+1, r24	; 0x01

	 OCR1AL = Copy_uint8CompareTime;
    27f2:	ea e4       	ldi	r30, 0x4A	; 74
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	80 83       	st	Z, r24

}
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <TIMER1_voidGetNumCountCTC>:

void TIMER1_voidGetNumCountCTC(uint16_ Copy_uint8DesiredTime, uint16_ * Copy_uint16pNumOfCounts, uint8_t * Copy_uint8pCompareValue){
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <TIMER1_voidGetNumCountCTC+0x6>
    2808:	00 d0       	rcall	.+0      	; 0x280a <TIMER1_voidGetNumCountCTC+0x8>
    280a:	00 d0       	rcall	.+0      	; 0x280c <TIMER1_voidGetNumCountCTC+0xa>
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	7c 83       	std	Y+4, r23	; 0x04
    2816:	6b 83       	std	Y+3, r22	; 0x03
    2818:	5e 83       	std	Y+6, r21	; 0x06
    281a:	4d 83       	std	Y+5, r20	; 0x05
#define PRESCALER		TIMER1_PRESCALER

#if PRESCALER == CLK_1024
#define TICK_TIME		128

	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/((uint32_t)TICK_TIME*250));
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	cc 01       	movw	r24, r24
    2822:	a0 e0       	ldi	r26, 0x00	; 0
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	28 ee       	ldi	r18, 0xE8	; 232
    2828:	33 e0       	ldi	r19, 0x03	; 3
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	50 e0       	ldi	r21, 0x00	; 0
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3d e7       	ldi	r19, 0x7D	; 125
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    284a:	da 01       	movw	r26, r20
    284c:	c9 01       	movw	r24, r18
    284e:	eb 81       	ldd	r30, Y+3	; 0x03
    2850:	fc 81       	ldd	r31, Y+4	; 0x04
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
	* Copy_uint8pCompareValue = 250;
    2856:	ed 81       	ldd	r30, Y+5	; 0x05
    2858:	fe 81       	ldd	r31, Y+6	; 0x06
    285a:	8a ef       	ldi	r24, 0xFA	; 250
    285c:	80 83       	st	Z, r24
#define TICK_TIME		12/100
	* Copy_uint16pNumOfCounts = (uint16_)(((uint32_t)Copy_uint8DesiredTime*1000)/(250*TICK_TIME));
	* Copy_uint8pCompareValue = 250;

#endif
}
    285e:	26 96       	adiw	r28, 0x06	; 6
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <TIMER1_voidSetCallBackNormal>:


void TIMER1_voidSetCallBackNormal(void (* Copy_uint8pSetCallBackNormal1)(void)){
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	00 d0       	rcall	.+0      	; 0x2876 <TIMER1_voidSetCallBackNormal+0x6>
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackNormal = Copy_uint8pSetCallBackNormal1;
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	90 93 1b 04 	sts	0x041B, r25
    2886:	80 93 1a 04 	sts	0x041A, r24

}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <TIMER1_voidSetCallBackCTC>:

void TIMER1_voidSetCallBackCTC(void (* Copy_uint8pSetCallBackCTC1)(void)){
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <TIMER1_voidSetCallBackCTC+0x6>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_voidpSetCallBackCTC = Copy_uint8pSetCallBackCTC1;
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	90 93 1d 04 	sts	0x041D, r25
    28aa:	80 93 1c 04 	sts	0x041C, r24

}
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    28b8:	1f 92       	push	r1
    28ba:	0f 92       	push	r0
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	0f 92       	push	r0
    28c0:	11 24       	eor	r1, r1
    28c2:	2f 93       	push	r18
    28c4:	3f 93       	push	r19
    28c6:	4f 93       	push	r20
    28c8:	5f 93       	push	r21
    28ca:	6f 93       	push	r22
    28cc:	7f 93       	push	r23
    28ce:	8f 93       	push	r24
    28d0:	9f 93       	push	r25
    28d2:	af 93       	push	r26
    28d4:	bf 93       	push	r27
    28d6:	ef 93       	push	r30
    28d8:	ff 93       	push	r31
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62

	static uint16_ cnt = 0;
	//extern uint16_ compare_cnt;
	cnt++;
    28e2:	80 91 1e 04 	lds	r24, 0x041E
    28e6:	90 91 1f 04 	lds	r25, 0x041F
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	90 93 1f 04 	sts	0x041F, r25
    28f0:	80 93 1e 04 	sts	0x041E, r24
	if(cnt == compare_cnt1){
    28f4:	20 91 1e 04 	lds	r18, 0x041E
    28f8:	30 91 1f 04 	lds	r19, 0x041F
    28fc:	80 91 53 04 	lds	r24, 0x0453
    2900:	90 91 54 04 	lds	r25, 0x0454
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	79 f4       	brne	.+30     	; 0x2928 <__vector_7+0x70>

//		TIMER_voidSetCounterRegister(123);
		if(TIMER1_voidpSetCallBackCTC != NULL){
    290a:	80 91 1c 04 	lds	r24, 0x041C
    290e:	90 91 1d 04 	lds	r25, 0x041D
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	49 f0       	breq	.+18     	; 0x2928 <__vector_7+0x70>

			TIMER1_voidpSetCallBackCTC();
    2916:	e0 91 1c 04 	lds	r30, 0x041C
    291a:	f0 91 1d 04 	lds	r31, 0x041D
    291e:	09 95       	icall
			cnt = 0;
    2920:	10 92 1f 04 	sts	0x041F, r1
    2924:	10 92 1e 04 	sts	0x041E, r1
		}

	}


}
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	bf 91       	pop	r27
    2932:	af 91       	pop	r26
    2934:	9f 91       	pop	r25
    2936:	8f 91       	pop	r24
    2938:	7f 91       	pop	r23
    293a:	6f 91       	pop	r22
    293c:	5f 91       	pop	r21
    293e:	4f 91       	pop	r20
    2940:	3f 91       	pop	r19
    2942:	2f 91       	pop	r18
    2944:	0f 90       	pop	r0
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	0f 90       	pop	r0
    294a:	1f 90       	pop	r1
    294c:	18 95       	reti

0000294e <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    294e:	1f 92       	push	r1
    2950:	0f 92       	push	r0
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	0f 92       	push	r0
    2956:	11 24       	eor	r1, r1
    2958:	2f 93       	push	r18
    295a:	3f 93       	push	r19
    295c:	4f 93       	push	r20
    295e:	5f 93       	push	r21
    2960:	6f 93       	push	r22
    2962:	7f 93       	push	r23
    2964:	8f 93       	push	r24
    2966:	9f 93       	push	r25
    2968:	af 93       	push	r26
    296a:	bf 93       	push	r27
    296c:	ef 93       	push	r30
    296e:	ff 93       	push	r31
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_voidpSetCallBackNormal != NULL){
    2978:	80 91 1a 04 	lds	r24, 0x041A
    297c:	90 91 1b 04 	lds	r25, 0x041B
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	29 f0       	breq	.+10     	; 0x298e <__vector_9+0x40>

		TIMER1_voidpSetCallBackNormal();
    2984:	e0 91 1a 04 	lds	r30, 0x041A
    2988:	f0 91 1b 04 	lds	r31, 0x041B
    298c:	09 95       	icall

		//do nothing;

	}

}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	ff 91       	pop	r31
    2994:	ef 91       	pop	r30
    2996:	bf 91       	pop	r27
    2998:	af 91       	pop	r26
    299a:	9f 91       	pop	r25
    299c:	8f 91       	pop	r24
    299e:	7f 91       	pop	r23
    29a0:	6f 91       	pop	r22
    29a2:	5f 91       	pop	r21
    29a4:	4f 91       	pop	r20
    29a6:	3f 91       	pop	r19
    29a8:	2f 91       	pop	r18
    29aa:	0f 90       	pop	r0
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	0f 90       	pop	r0
    29b0:	1f 90       	pop	r1
    29b2:	18 95       	reti

000029b4 <TMR0_Init>:

// Function prototypes
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds);

void TMR0_Init(void)
{
    29b4:	df 93       	push	r29
    29b6:	cf 93       	push	r28
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
	// Set mode based on configuration
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
	TCCR0_REG &= ~(1 << TCCR0_WGM01);  // Normal mode
	#elif TMR0_MODE == TMR0_MODE_CTC
	TCCR0_REG &= ~(1 << TCCR0_WGM00);
    29bc:	a3 e5       	ldi	r26, 0x53	; 83
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e3 e5       	ldi	r30, 0x53	; 83
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	8f 7b       	andi	r24, 0xBF	; 191
    29c8:	8c 93       	st	X, r24
	TCCR0_REG |= (1 << TCCR0_WGM01);   // CTC mode
    29ca:	a3 e5       	ldi	r26, 0x53	; 83
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e3 e5       	ldi	r30, 0x53	; 83
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	88 60       	ori	r24, 0x08	; 8
    29d6:	8c 93       	st	X, r24

	// Enable Timer interrupt based on the mode
	#if TMR0_MODE == TMR0_MODE_NORMAL
	TIMSK_REG |= (1 << TIMSK_TOIE0);   // Enable Overflow Interrupt
	#elif TMR0_MODE == TMR0_MODE_CTC
	TIMSK_REG |= (1 << TIMSK_OCIE0);   // Enable Compare Match Interrupt
    29d8:	a9 e5       	ldi	r26, 0x59	; 89
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e9 e5       	ldi	r30, 0x59	; 89
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	82 60       	ori	r24, 0x02	; 2
    29e4:	8c 93       	st	X, r24
	#endif
	// Enable global interrupts
	SREG |= (1 << 7);
    29e6:	af e5       	ldi	r26, 0x5F	; 95
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	ef e5       	ldi	r30, 0x5F	; 95
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	80 68       	ori	r24, 0x80	; 128
    29f2:	8c 93       	st	X, r24
}
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <TMR0_Start>:

void TMR0_Start(uint16_ milliseconds)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <TMR0_Start+0x6>
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <TMR0_Start+0x8>
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	9c 83       	std	Y+4, r25	; 0x04
    2a08:	8b 83       	std	Y+3, r24	; 0x03
	uint16_ ticks = TMR0_CalculateTicks(milliseconds);
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <TMR0_CalculateTicks>
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01

	// Set compare value for CTC mode
	if (TMR0_MODE == TMR0_MODE_CTC)
	{
		OCR0_REG = ticks;
    2a16:	ec e5       	ldi	r30, 0x5C	; 92
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	80 83       	st	Z, r24
	}

	// Reset the match counter
	TMR0_CurrentMatches = 0;
    2a1e:	10 92 25 04 	sts	0x0425, r1
    2a22:	10 92 24 04 	sts	0x0424, r1
		break;
		case TMR0_PRESCALER_8:
		TCCR0_REG |= (1 << TCCR0_CS01);
		break;
		case TMR0_PRESCALER_64:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS01);
    2a26:	a3 e5       	ldi	r26, 0x53	; 83
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e3 e5       	ldi	r30, 0x53	; 83
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	83 60       	ori	r24, 0x03	; 3
    2a32:	8c 93       	st	X, r24
		break;
		case TMR0_PRESCALER_1024:
		TCCR0_REG |= (1 << TCCR0_CS00) | (1 << TCCR0_CS02);
		break;
	}
}
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	08 95       	ret

00002a42 <TMR0_Stop>:

void TMR0_Stop(void)
{
    2a42:	df 93       	push	r29
    2a44:	cf 93       	push	r28
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
	// Stop the timer by clearing the clock source bits
	TCCR0_REG &= ~((1 << TCCR0_CS00) | (1 << TCCR0_CS01) | (1 << TCCR0_CS02));
    2a4a:	a3 e5       	ldi	r26, 0x53	; 83
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e3 e5       	ldi	r30, 0x53	; 83
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	88 7f       	andi	r24, 0xF8	; 248
    2a56:	8c 93       	st	X, r24
}
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <TMR0_SetCallback>:

void TMR0_SetCallback(void (*callbackFunc)(void))
{
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <TMR0_SetCallback+0x6>
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	9a 83       	std	Y+2, r25	; 0x02
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	TMR0_Callback = callbackFunc;
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	90 93 21 04 	sts	0x0421, r25
    2a74:	80 93 20 04 	sts	0x0420, r24
}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <__vector_10>:

// Interrupt Service Routine for Timer0 Compare Match
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2a82:	1f 92       	push	r1
    2a84:	0f 92       	push	r0
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	0f 92       	push	r0
    2a8a:	11 24       	eor	r1, r1
    2a8c:	2f 93       	push	r18
    2a8e:	3f 93       	push	r19
    2a90:	4f 93       	push	r20
    2a92:	5f 93       	push	r21
    2a94:	6f 93       	push	r22
    2a96:	7f 93       	push	r23
    2a98:	8f 93       	push	r24
    2a9a:	9f 93       	push	r25
    2a9c:	af 93       	push	r26
    2a9e:	bf 93       	push	r27
    2aa0:	ef 93       	push	r30
    2aa2:	ff 93       	push	r31
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62

	TMR0_CurrentMatches++;
    2aac:	80 91 24 04 	lds	r24, 0x0424
    2ab0:	90 91 25 04 	lds	r25, 0x0425
    2ab4:	01 96       	adiw	r24, 0x01	; 1
    2ab6:	90 93 25 04 	sts	0x0425, r25
    2aba:	80 93 24 04 	sts	0x0424, r24
	
	// Check if we've reached the required number of matches
	if (TMR0_CurrentMatches >= TMR0_RequiredMatches)
    2abe:	20 91 24 04 	lds	r18, 0x0424
    2ac2:	30 91 25 04 	lds	r19, 0x0425
    2ac6:	80 91 22 04 	lds	r24, 0x0422
    2aca:	90 91 23 04 	lds	r25, 0x0423
    2ace:	28 17       	cp	r18, r24
    2ad0:	39 07       	cpc	r19, r25
    2ad2:	78 f0       	brcs	.+30     	; 0x2af2 <__vector_10+0x70>
	{
		if (TMR0_Callback != 0)
    2ad4:	80 91 20 04 	lds	r24, 0x0420
    2ad8:	90 91 21 04 	lds	r25, 0x0421
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	29 f0       	breq	.+10     	; 0x2aea <__vector_10+0x68>
		{
			TMR0_Callback();
    2ae0:	e0 91 20 04 	lds	r30, 0x0420
    2ae4:	f0 91 21 04 	lds	r31, 0x0421
    2ae8:	09 95       	icall
		}
		TMR0_CurrentMatches = 0;  // Reset matches for the next cycle
    2aea:	10 92 25 04 	sts	0x0425, r1
    2aee:	10 92 24 04 	sts	0x0424, r1
	}
}
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	ff 91       	pop	r31
    2af8:	ef 91       	pop	r30
    2afa:	bf 91       	pop	r27
    2afc:	af 91       	pop	r26
    2afe:	9f 91       	pop	r25
    2b00:	8f 91       	pop	r24
    2b02:	7f 91       	pop	r23
    2b04:	6f 91       	pop	r22
    2b06:	5f 91       	pop	r21
    2b08:	4f 91       	pop	r20
    2b0a:	3f 91       	pop	r19
    2b0c:	2f 91       	pop	r18
    2b0e:	0f 90       	pop	r0
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	0f 90       	pop	r0
    2b14:	1f 90       	pop	r1
    2b16:	18 95       	reti

00002b18 <TMR0_CalculateTicks>:

// Function to calculate ticks based on the desired time in milliseconds and the configured prescaler
static uint16_ TMR0_CalculateTicks(uint16_ milliseconds)
{
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	2a 97       	sbiw	r28, 0x0a	; 10
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	9a 87       	std	Y+10, r25	; 0x0a
    2b36:	89 87       	std	Y+9, r24	; 0x09
	uint32_t prescaler_value = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	af 83       	std	Y+7, r26	; 0x07
    2b46:	b8 87       	std	Y+8, r27	; 0x08
		break;
		case TMR0_PRESCALER_8:
		prescaler_value = 8;
		break;
		case TMR0_PRESCALER_64:
		prescaler_value = 64;
    2b48:	80 e4       	ldi	r24, 0x40	; 64
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a0 e0       	ldi	r26, 0x00	; 0
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	8d 83       	std	Y+5, r24	; 0x05
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	af 83       	std	Y+7, r26	; 0x07
    2b56:	b8 87       	std	Y+8, r27	; 0x08
		prescaler_value = 1024;
		break;
	}

	// Calculate ticks based on prescaler and the desired time in milliseconds
	uint32_t ticks = ((8000000 / (prescaler_value * 1000)) * milliseconds);
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5c:	af 81       	ldd	r26, Y+7	; 0x07
    2b5e:	b8 85       	ldd	r27, Y+8	; 0x08
    2b60:	28 ee       	ldi	r18, 0xE8	; 232
    2b62:	33 e0       	ldi	r19, 0x03	; 3
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    2b70:	9b 01       	movw	r18, r22
    2b72:	ac 01       	movw	r20, r24
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	92 e1       	ldi	r25, 0x12	; 18
    2b78:	aa e7       	ldi	r26, 0x7A	; 122
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    2b84:	da 01       	movw	r26, r20
    2b86:	c9 01       	movw	r24, r18
    2b88:	7c 01       	movw	r14, r24
    2b8a:	8d 01       	movw	r16, r26
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	9c 01       	movw	r18, r24
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	c8 01       	movw	r24, r16
    2b98:	b7 01       	movw	r22, r14
    2b9a:	0e 94 25 23 	call	0x464a	; 0x464a <__mulsi3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	ab 83       	std	Y+3, r26	; 0x03
    2ba8:	bc 83       	std	Y+4, r27	; 0x04

	// If the number of ticks exceeds 255 (the max value for an 8-bit timer), calculate how many compare matches are required
	if (ticks > 255)
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	ab 81       	ldd	r26, Y+3	; 0x03
    2bb0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb4:	91 05       	cpc	r25, r1
    2bb6:	a1 05       	cpc	r26, r1
    2bb8:	b1 05       	cpc	r27, r1
    2bba:	e1 f0       	breq	.+56     	; 0x2bf4 <TMR0_CalculateTicks+0xdc>
    2bbc:	d8 f0       	brcs	.+54     	; 0x2bf4 <TMR0_CalculateTicks+0xdc>
	{
		TMR0_RequiredMatches = ticks / 255;
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
    2bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc2:	ab 81       	ldd	r26, Y+3	; 0x03
    2bc4:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc6:	2f ef       	ldi	r18, 0xFF	; 255
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	50 e0       	ldi	r21, 0x00	; 0
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 64 23 	call	0x46c8	; 0x46c8 <__udivmodsi4>
    2bd6:	da 01       	movw	r26, r20
    2bd8:	c9 01       	movw	r24, r18
    2bda:	90 93 23 04 	sts	0x0423, r25
    2bde:	80 93 22 04 	sts	0x0422, r24
		ticks = 255;  // Set the compare value to the maximum for the first match
    2be2:	8f ef       	ldi	r24, 0xFF	; 255
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	a0 e0       	ldi	r26, 0x00	; 0
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	89 83       	std	Y+1, r24	; 0x01
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	ab 83       	std	Y+3, r26	; 0x03
    2bf0:	bc 83       	std	Y+4, r27	; 0x04
    2bf2:	06 c0       	rjmp	.+12     	; 0x2c00 <TMR0_CalculateTicks+0xe8>
	}
	else
	{
		TMR0_RequiredMatches = 1;  // Only one match is needed
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	90 93 23 04 	sts	0x0423, r25
    2bfc:	80 93 22 04 	sts	0x0422, r24
	}

	return (uint16_)ticks;
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c04:	2a 96       	adiw	r28, 0x0a	; 10
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	08 95       	ret

00002c1e <TILT_vidInit>:
TILT_SENSOR_PIN tilt_pins[NO_OF_SENSORS] ={TILT_1_PIN,TILT_2_PIN,TILT_3_PIN,TILT_4_PIN,
										TILT_5_PIN,TILT_6_PIN,TILT_7_PIN,TILT_8_PIN};


void TILT_vidInit(uint8_t tilt_pin)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <TILT_vidInit+0x6>
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	8a 83       	std	Y+2, r24	; 0x02
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	88 30       	cpi	r24, 0x08	; 8
    2c2e:	c0 f4       	brcc	.+48     	; 0x2c60 <TILT_vidInit+0x42>
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e2 50       	subi	r30, 0x02	; 2
    2c3e:	fc 4f       	sbci	r31, 0xFC	; 252
    2c40:	20 81       	ld	r18, Z
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	88 2f       	mov	r24, r24
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	e1 50       	subi	r30, 0x01	; 1
    2c50:	fc 4f       	sbci	r31, 0xFC	; 252
    2c52:	90 81       	ld	r25, Z
    2c54:	82 2f       	mov	r24, r18
    2c56:	69 2f       	mov	r22, r25
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
    2c5e:	22 c0       	rjmp	.+68     	; 0x2ca4 <TILT_vidInit+0x86>
	else if(tilt_pin==8)
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	88 30       	cpi	r24, 0x08	; 8
    2c64:	f9 f4       	brne	.+62     	; 0x2ca4 <TILT_vidInit+0x86>
	{
		for(uint8_t i=0;i<8;i++)
    2c66:	19 82       	std	Y+1, r1	; 0x01
    2c68:	1a c0       	rjmp	.+52     	; 0x2c9e <TILT_vidInit+0x80>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	fc 01       	movw	r30, r24
    2c76:	e2 50       	subi	r30, 0x02	; 2
    2c78:	fc 4f       	sbci	r31, 0xFC	; 252
    2c7a:	20 81       	ld	r18, Z
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	88 2f       	mov	r24, r24
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	fc 01       	movw	r30, r24
    2c88:	e1 50       	subi	r30, 0x01	; 1
    2c8a:	fc 4f       	sbci	r31, 0xFC	; 252
    2c8c:	90 81       	ld	r25, Z
    2c8e:	82 2f       	mov	r24, r18
    2c90:	69 2f       	mov	r22, r25
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
void TILT_vidInit(uint8_t tilt_pin)
{
	if(tilt_pin<8)DIO_u8SetPinMode(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,INPUT);
	else if(tilt_pin==8)
	{
		for(uint8_t i=0;i<8;i++)
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	8f 5f       	subi	r24, 0xFF	; 255
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	88 30       	cpi	r24, 0x08	; 8
    2ca2:	18 f3       	brcs	.-58     	; 0x2c6a <TILT_vidInit+0x4c>
		{
			DIO_u8SetPinMode(tilt_pins[i].port,tilt_pins[i].pin,INPUT);
		}
	}
}
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <TILT_vidGetTiltRead>:

void TILT_vidGetTiltRead(uint8_t * tilt_read, uint8_t tilt_pin)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <TILT_vidGetTiltRead+0x6>
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	9a 83       	std	Y+2, r25	; 0x02
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(tilt_pins[tilt_pin].port,tilt_pins[tilt_pin].pin,tilt_read);
    2cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e2 50       	subi	r30, 0x02	; 2
    2cce:	fc 4f       	sbci	r31, 0xFC	; 252
    2cd0:	40 81       	ld	r20, Z
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e1 50       	subi	r30, 0x01	; 1
    2ce0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ce2:	90 81       	ld	r25, Z
    2ce4:	29 81       	ldd	r18, Y+1	; 0x01
    2ce6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce8:	84 2f       	mov	r24, r20
    2cea:	69 2f       	mov	r22, r25
    2cec:	a9 01       	movw	r20, r18
    2cee:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_u8GetPinValue>
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <TILT_vidGetAllTiltRead>:

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <TILT_vidGetAllTiltRead+0x6>
    2d04:	0f 92       	push	r0
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	9b 83       	std	Y+3, r25	; 0x03
    2d0c:	8a 83       	std	Y+2, r24	; 0x02
	tilt_read[NO_OF_SENSORS]=0;
    2d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d10:	9b 81       	ldd	r25, Y+3	; 0x03
    2d12:	fc 01       	movw	r30, r24
    2d14:	32 96       	adiw	r30, 0x02	; 2
    2d16:	10 82       	st	Z, r1
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    2d18:	19 82       	std	Y+1, r1	; 0x01
    2d1a:	21 c0       	rjmp	.+66     	; 0x2d5e <TILT_vidGetAllTiltRead+0x60>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	fc 01       	movw	r30, r24
    2d28:	e2 50       	subi	r30, 0x02	; 2
    2d2a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d2c:	40 81       	ld	r20, Z
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	88 2f       	mov	r24, r24
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	fc 01       	movw	r30, r24
    2d3a:	e1 50       	subi	r30, 0x01	; 1
    2d3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2d3e:	50 81       	ld	r21, Z
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	28 0f       	add	r18, r24
    2d4c:	39 1f       	adc	r19, r25
    2d4e:	84 2f       	mov	r24, r20
    2d50:	65 2f       	mov	r22, r21
    2d52:	a9 01       	movw	r20, r18
    2d54:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_u8GetPinValue>
}

void TILT_vidGetAllTiltRead(uint8_t * tilt_read)
{
	tilt_read[NO_OF_SENSORS]=0;
	for(uint8_t i=0; i<NO_OF_SENSORS;i++)
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	82 30       	cpi	r24, 0x02	; 2
    2d62:	e0 f2       	brcs	.-72     	; 0x2d1c <TILT_vidGetAllTiltRead+0x1e>
	{
		DIO_u8GetPinValue(tilt_pins[i].port,tilt_pins[i].pin,&(tilt_read[i]));
	}
	tilt_read[NO_OF_SENSORS]=1;
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	fc 01       	movw	r30, r24
    2d6a:	32 96       	adiw	r30, 0x02	; 2
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 83       	st	Z, r24
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <LED_u8InitializeLed>:
#include"../../libraries/std_types.h"
#include "../../mcal/dio_driver/dio_int.h"

uint8_t LED_u8InitializeLed(uint8_t port_id,uint8_t led_pin)
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <LED_u8InitializeLed+0x6>
    2d82:	0f 92       	push	r0
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	8a 83       	std	Y+2, r24	; 0x02
    2d8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t error_status = DIO_u8SetPinMode(port_id,led_pin,OUTPUT);
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	6b 81       	ldd	r22, Y+3	; 0x03
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
    2d96:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <LED_u8InitializeLedPort>:

uint8_t LED_u8InitializeLedPort(uint8_t port_id)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <LED_u8InitializeLedPort+0x6>
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t error_status = DIO_u8SetPortMode(port_id,255);
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	6f ef       	ldi	r22, 0xFF	; 255
    2db6:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DIO_u8SetPortMode>
    2dba:	89 83       	std	Y+1, r24	; 0x01
	return error_status;
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <LED_u8LedOn>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"led_helper.h"

uint8_t LED_u8LedOn(uint8_t port_id,uint8_t led_pin)
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <LED_u8LedOn+0x6>
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <LED_u8LedOn+0x8>
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
    2dd6:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2dd8:	9e 01       	movw	r18, r28
    2dda:	2e 5f       	subi	r18, 0xFE	; 254
    2ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	6c 81       	ldd	r22, Y+4	; 0x04
    2de2:	a9 01       	movw	r20, r18
    2de4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    2de8:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	88 23       	and	r24, r24
    2dee:	71 f4       	brne	.+28     	; 0x2e0c <LED_u8LedOn+0x44>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	88 23       	and	r24, r24
    2df4:	29 f4       	brne	.+10     	; 0x2e00 <LED_u8LedOn+0x38>
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	6c 81       	ldd	r22, Y+4	; 0x04
    2dfa:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <LED_u8InitializeLed>
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPinValue(port_id,led_pin,HIGH);
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	6c 81       	ldd	r22, Y+4	; 0x04
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
    2e0a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	0f 90       	pop	r0
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <LED_u8LedOff>:
uint8_t LED_u8LedOff(uint8_t port_id,uint8_t led_pin)
{
    2e1c:	df 93       	push	r29
    2e1e:	cf 93       	push	r28
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <LED_u8LedOff+0x6>
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <LED_u8LedOff+0x8>
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	8b 83       	std	Y+3, r24	; 0x03
    2e2a:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2e2c:	9e 01       	movw	r18, r28
    2e2e:	2e 5f       	subi	r18, 0xFE	; 254
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	6c 81       	ldd	r22, Y+4	; 0x04
    2e36:	a9 01       	movw	r20, r18
    2e38:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    2e3c:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	88 23       	and	r24, r24
    2e42:	71 f4       	brne	.+28     	; 0x2e60 <LED_u8LedOff+0x44>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	88 23       	and	r24, r24
    2e48:	29 f4       	brne	.+10     	; 0x2e54 <LED_u8LedOff+0x38>
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e4e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <LED_u8InitializeLed>
    2e52:	89 83       	std	Y+1, r24	; 0x01
	    error_status = DIO_u8SetPinValue(port_id,led_pin,LOW);
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	6c 81       	ldd	r22, Y+4	; 0x04
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
    2e5e:	89 83       	std	Y+1, r24	; 0x01
		}
	return error_status;
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	cf 91       	pop	r28
    2e6c:	df 91       	pop	r29
    2e6e:	08 95       	ret

00002e70 <LED_u8LedToggle>:
uint8_t LED_u8LedToggle(uint8_t port_id,uint8_t led_pin)
{
    2e70:	df 93       	push	r29
    2e72:	cf 93       	push	r28
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <LED_u8LedToggle+0x6>
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <LED_u8LedToggle+0x8>
    2e78:	0f 92       	push	r0
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	8c 83       	std	Y+4, r24	; 0x04
    2e80:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t value;
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2e82:	9e 01       	movw	r18, r28
    2e84:	2d 5f       	subi	r18, 0xFD	; 253
    2e86:	3f 4f       	sbci	r19, 0xFF	; 255
    2e88:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8a:	6d 81       	ldd	r22, Y+5	; 0x05
    2e8c:	a9 01       	movw	r20, r18
    2e8e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    2e92:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK)
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	88 23       	and	r24, r24
    2e98:	21 f5       	brne	.+72     	; 0x2ee2 <LED_u8LedToggle+0x72>
		{
		if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	88 23       	and	r24, r24
    2e9e:	29 f4       	brne	.+10     	; 0x2eaa <LED_u8LedToggle+0x3a>
    2ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ea4:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <LED_u8InitializeLed>
    2ea8:	89 83       	std	Y+1, r24	; 0x01
		error_status = DIO_u8GetPinValue(port_id,led_pin,&value);
    2eaa:	9e 01       	movw	r18, r28
    2eac:	2e 5f       	subi	r18, 0xFE	; 254
    2eae:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2eb4:	a9 01       	movw	r20, r18
    2eb6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <DIO_u8GetPinValue>
    2eba:	89 83       	std	Y+1, r24	; 0x01
		if(error_status==E_OK){
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 23       	and	r24, r24
    2ec0:	81 f4       	brne	.+32     	; 0x2ee2 <LED_u8LedToggle+0x72>
			if(value==HIGH)error_status=DIO_u8SetPinValue(port_id,led_pin,LOW);
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	39 f4       	brne	.+14     	; 0x2ed6 <LED_u8LedToggle+0x66>
    2ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eca:	6d 81       	ldd	r22, Y+5	; 0x05
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	06 c0       	rjmp	.+12     	; 0x2ee2 <LED_u8LedToggle+0x72>
			else error_status=DIO_u8SetPinValue(port_id,led_pin,HIGH);
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	6d 81       	ldd	r22, Y+5	; 0x05
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
    2ee0:	89 83       	std	Y+1, r24	; 0x01
		}
		}
	return error_status;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <LED_u8LedBlink>:
uint8_t LED_u8LedBlink(uint8_t port_id,uint8_t led_pin,uint16_ delay_time_ms)
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	a2 97       	sbiw	r28, 0x22	; 34
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	8f 8f       	std	Y+31, r24	; 0x1f
    2f0a:	68 a3       	std	Y+32, r22	; 0x20
    2f0c:	5a a3       	std	Y+34, r21	; 0x22
    2f0e:	49 a3       	std	Y+33, r20	; 0x21
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,led_pin,&IsOut);
    2f10:	9e 01       	movw	r18, r28
    2f12:	22 5e       	subi	r18, 0xE2	; 226
    2f14:	3f 4f       	sbci	r19, 0xFF	; 255
    2f16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f18:	68 a1       	ldd	r22, Y+32	; 0x20
    2f1a:	a9 01       	movw	r20, r18
    2f1c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    2f20:	8d 8f       	std	Y+29, r24	; 0x1d
	if(error_status==E_OK)
    2f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f24:	88 23       	and	r24, r24
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <LED_u8LedBlink+0x36>
    2f28:	08 c1       	rjmp	.+528    	; 0x313a <LED_u8LedBlink+0x246>
	{
	if(IsOut==0)error_status=LED_u8InitializeLed(port_id,led_pin);
    2f2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f2c:	88 23       	and	r24, r24
    2f2e:	29 f4       	brne	.+10     	; 0x2f3a <LED_u8LedBlink+0x46>
    2f30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f32:	68 a1       	ldd	r22, Y+32	; 0x20
    2f34:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <LED_u8InitializeLed>
    2f38:	8d 8f       	std	Y+29, r24	; 0x1d
	error_status = LED_u8LedOn(port_id,led_pin);
    2f3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f3c:	68 a1       	ldd	r22, Y+32	; 0x20
    2f3e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <LED_u8LedOn>
    2f42:	8d 8f       	std	Y+29, r24	; 0x1d
 	 _delay_ms(delay_time_ms);
    2f44:	89 a1       	ldd	r24, Y+33	; 0x21
    2f46:	9a a1       	ldd	r25, Y+34	; 0x22
    2f48:	cc 01       	movw	r24, r24
    2f4a:	a0 e0       	ldi	r26, 0x00	; 0
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	89 8f       	std	Y+25, r24	; 0x19
    2f5c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f5e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f62:	69 8d       	ldd	r22, Y+25	; 0x19
    2f64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	4a ef       	ldi	r20, 0xFA	; 250
    2f70:	54 e4       	ldi	r21, 0x44	; 68
    2f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	8d 8b       	std	Y+21, r24	; 0x15
    2f7c:	9e 8b       	std	Y+22, r25	; 0x16
    2f7e:	af 8b       	std	Y+23, r26	; 0x17
    2f80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f82:	6d 89       	ldd	r22, Y+21	; 0x15
    2f84:	7e 89       	ldd	r23, Y+22	; 0x16
    2f86:	8f 89       	ldd	r24, Y+23	; 0x17
    2f88:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f96:	88 23       	and	r24, r24
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <LED_u8LedBlink+0xb0>
		__ticks = 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	9c 8b       	std	Y+20, r25	; 0x14
    2fa0:	8b 8b       	std	Y+19, r24	; 0x13
    2fa2:	3f c0       	rjmp	.+126    	; 0x3022 <LED_u8LedBlink+0x12e>
	else if (__tmp > 65535)
    2fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2faa:	98 8d       	ldd	r25, Y+24	; 0x18
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	3f ef       	ldi	r19, 0xFF	; 255
    2fb0:	4f e7       	ldi	r20, 0x7F	; 127
    2fb2:	57 e4       	ldi	r21, 0x47	; 71
    2fb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb8:	18 16       	cp	r1, r24
    2fba:	4c f5       	brge	.+82     	; 0x300e <LED_u8LedBlink+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	40 e2       	ldi	r20, 0x20	; 32
    2fca:	51 e4       	ldi	r21, 0x41	; 65
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	9c 8b       	std	Y+20, r25	; 0x14
    2fe2:	8b 8b       	std	Y+19, r24	; 0x13
    2fe4:	0f c0       	rjmp	.+30     	; 0x3004 <LED_u8LedBlink+0x110>
    2fe6:	88 ec       	ldi	r24, 0xC8	; 200
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9a 8b       	std	Y+18, r25	; 0x12
    2fec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fee:	89 89       	ldd	r24, Y+17	; 0x11
    2ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LED_u8LedBlink+0xfe>
    2ff6:	9a 8b       	std	Y+18, r25	; 0x12
    2ff8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffa:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffc:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	9c 8b       	std	Y+20, r25	; 0x14
    3002:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3004:	8b 89       	ldd	r24, Y+19	; 0x13
    3006:	9c 89       	ldd	r25, Y+20	; 0x14
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	69 f7       	brne	.-38     	; 0x2fe6 <LED_u8LedBlink+0xf2>
    300c:	14 c0       	rjmp	.+40     	; 0x3036 <LED_u8LedBlink+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300e:	6d 89       	ldd	r22, Y+21	; 0x15
    3010:	7e 89       	ldd	r23, Y+22	; 0x16
    3012:	8f 89       	ldd	r24, Y+23	; 0x17
    3014:	98 8d       	ldd	r25, Y+24	; 0x18
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9c 8b       	std	Y+20, r25	; 0x14
    3020:	8b 8b       	std	Y+19, r24	; 0x13
    3022:	8b 89       	ldd	r24, Y+19	; 0x13
    3024:	9c 89       	ldd	r25, Y+20	; 0x14
    3026:	98 8b       	std	Y+16, r25	; 0x10
    3028:	8f 87       	std	Y+15, r24	; 0x0f
    302a:	8f 85       	ldd	r24, Y+15	; 0x0f
    302c:	98 89       	ldd	r25, Y+16	; 0x10
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LED_u8LedBlink+0x13a>
    3032:	98 8b       	std	Y+16, r25	; 0x10
    3034:	8f 87       	std	Y+15, r24	; 0x0f
	if(error_status==E_OK){
    3036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3038:	88 23       	and	r24, r24
    303a:	09 f0       	breq	.+2      	; 0x303e <LED_u8LedBlink+0x14a>
    303c:	7e c0       	rjmp	.+252    	; 0x313a <LED_u8LedBlink+0x246>
	error_status = LED_u8LedOff(port_id,led_pin);
    303e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3040:	68 a1       	ldd	r22, Y+32	; 0x20
    3042:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LED_u8LedOff>
    3046:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(delay_time_ms);
    3048:	89 a1       	ldd	r24, Y+33	; 0x21
    304a:	9a a1       	ldd	r25, Y+34	; 0x22
    304c:	cc 01       	movw	r24, r24
    304e:	a0 e0       	ldi	r26, 0x00	; 0
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	bc 01       	movw	r22, r24
    3054:	cd 01       	movw	r24, r26
    3056:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	8b 87       	std	Y+11, r24	; 0x0b
    3060:	9c 87       	std	Y+12, r25	; 0x0c
    3062:	ad 87       	std	Y+13, r26	; 0x0d
    3064:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3066:	6b 85       	ldd	r22, Y+11	; 0x0b
    3068:	7c 85       	ldd	r23, Y+12	; 0x0c
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	4a ef       	ldi	r20, 0xFA	; 250
    3074:	54 e4       	ldi	r21, 0x44	; 68
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8f 83       	std	Y+7, r24	; 0x07
    3080:	98 87       	std	Y+8, r25	; 0x08
    3082:	a9 87       	std	Y+9, r26	; 0x09
    3084:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	40 e8       	ldi	r20, 0x80	; 128
    3094:	5f e3       	ldi	r21, 0x3F	; 63
    3096:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    309a:	88 23       	and	r24, r24
    309c:	2c f4       	brge	.+10     	; 0x30a8 <LED_u8LedBlink+0x1b4>
		__ticks = 1;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	3f c0       	rjmp	.+126    	; 0x3126 <LED_u8LedBlink+0x232>
	else if (__tmp > 65535)
    30a8:	6f 81       	ldd	r22, Y+7	; 0x07
    30aa:	78 85       	ldd	r23, Y+8	; 0x08
    30ac:	89 85       	ldd	r24, Y+9	; 0x09
    30ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	4c f5       	brge	.+82     	; 0x3112 <LED_u8LedBlink+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9e 83       	std	Y+6, r25	; 0x06
    30e6:	8d 83       	std	Y+5, r24	; 0x05
    30e8:	0f c0       	rjmp	.+30     	; 0x3108 <LED_u8LedBlink+0x214>
    30ea:	88 ec       	ldi	r24, 0xC8	; 200
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	9c 83       	std	Y+4, r25	; 0x04
    30f0:	8b 83       	std	Y+3, r24	; 0x03
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	9c 81       	ldd	r25, Y+4	; 0x04
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <LED_u8LedBlink+0x202>
    30fa:	9c 83       	std	Y+4, r25	; 0x04
    30fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	9e 83       	std	Y+6, r25	; 0x06
    3106:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3108:	8d 81       	ldd	r24, Y+5	; 0x05
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	69 f7       	brne	.-38     	; 0x30ea <LED_u8LedBlink+0x1f6>
    3110:	14 c0       	rjmp	.+40     	; 0x313a <LED_u8LedBlink+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3112:	6f 81       	ldd	r22, Y+7	; 0x07
    3114:	78 85       	ldd	r23, Y+8	; 0x08
    3116:	89 85       	ldd	r24, Y+9	; 0x09
    3118:	9a 85       	ldd	r25, Y+10	; 0x0a
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	9e 81       	ldd	r25, Y+6	; 0x06
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	9a 81       	ldd	r25, Y+2	; 0x02
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <LED_u8LedBlink+0x23e>
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    313a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    313c:	a2 96       	adiw	r28, 0x22	; 34
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <LED_u8LedPortOn>:


uint8_t LED_u8LedPortOn(uint8_t port_id)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	00 d0       	rcall	.+0      	; 0x3154 <LED_u8LedPortOn+0x6>
    3154:	0f 92       	push	r0
    3156:	cd b7       	in	r28, 0x3d	; 61
    3158:	de b7       	in	r29, 0x3e	; 62
    315a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    315c:	9e 01       	movw	r18, r28
    315e:	2e 5f       	subi	r18, 0xFE	; 254
    3160:	3f 4f       	sbci	r19, 0xFF	; 255
    3162:	8b 81       	ldd	r24, Y+3	; 0x03
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	a9 01       	movw	r20, r18
    3168:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    316c:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	88 23       	and	r24, r24
    3172:	61 f4       	brne	.+24     	; 0x318c <LED_u8LedPortOn+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	88 23       	and	r24, r24
    3178:	21 f4       	brne	.+8      	; 0x3182 <LED_u8LedPortOn+0x34>
    317a:	8b 81       	ldd	r24, Y+3	; 0x03
    317c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_u8InitializeLedPort>
    3180:	89 83       	std	Y+1, r24	; 0x01
    error_status = DIO_u8SetPortValue(port_id,255);
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	6f ef       	ldi	r22, 0xFF	; 255
    3186:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <DIO_u8SetPortValue>
    318a:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    318c:	89 81       	ldd	r24, Y+1	; 0x01
}
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <LED_u8LedPortOff>:
uint8_t LED_u8LedPortOff(uint8_t port_id)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <LED_u8LedPortOff+0x6>
    31a0:	0f 92       	push	r0
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    31a8:	9e 01       	movw	r18, r28
    31aa:	2e 5f       	subi	r18, 0xFE	; 254
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	a9 01       	movw	r20, r18
    31b4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    31b8:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	88 23       	and	r24, r24
    31be:	61 f4       	brne	.+24     	; 0x31d8 <LED_u8LedPortOff+0x3e>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	88 23       	and	r24, r24
    31c4:	21 f4       	brne	.+8      	; 0x31ce <LED_u8LedPortOff+0x34>
    31c6:	8b 81       	ldd	r24, Y+3	; 0x03
    31c8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_u8InitializeLedPort>
    31cc:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8SetPortValue(port_id,LOW);
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	60 e0       	ldi	r22, 0x00	; 0
    31d2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <DIO_u8SetPortValue>
    31d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return error_status;
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <LED_u8LedPortToggle>:
uint8_t LED_u8LedPortToggle(uint8_t port_id)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <LED_u8LedPortToggle+0x6>
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <LED_u8LedPortToggle+0x8>
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t value;
	uint8_t IsOut;
	uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    31f4:	9e 01       	movw	r18, r28
    31f6:	2d 5f       	subi	r18, 0xFD	; 253
    31f8:	3f 4f       	sbci	r19, 0xFF	; 255
    31fa:	8c 81       	ldd	r24, Y+4	; 0x04
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	a9 01       	movw	r20, r18
    3200:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    3204:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK)
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	88 23       	and	r24, r24
    320a:	01 f5       	brne	.+64     	; 0x324c <LED_u8LedPortToggle+0x66>
	{
	if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	88 23       	and	r24, r24
    3210:	21 f4       	brne	.+8      	; 0x321a <LED_u8LedPortToggle+0x34>
    3212:	8c 81       	ldd	r24, Y+4	; 0x04
    3214:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_u8InitializeLedPort>
    3218:	89 83       	std	Y+1, r24	; 0x01
	error_status = DIO_u8GetPortValue(port_id,&value);
    321a:	9e 01       	movw	r18, r28
    321c:	2e 5f       	subi	r18, 0xFE	; 254
    321e:	3f 4f       	sbci	r19, 0xFF	; 255
    3220:	8c 81       	ldd	r24, Y+4	; 0x04
    3222:	b9 01       	movw	r22, r18
    3224:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8GetPortValue>
    3228:	89 83       	std	Y+1, r24	; 0x01
	if(error_status==E_OK){
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	88 23       	and	r24, r24
    322e:	71 f4       	brne	.+28     	; 0x324c <LED_u8LedPortToggle+0x66>
		if(value==HIGH)error_status=DIO_u8SetPortValue(port_id,LOW);
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	81 30       	cpi	r24, 0x01	; 1
    3234:	31 f4       	brne	.+12     	; 0x3242 <LED_u8LedPortToggle+0x5c>
    3236:	8c 81       	ldd	r24, Y+4	; 0x04
    3238:	60 e0       	ldi	r22, 0x00	; 0
    323a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <DIO_u8SetPortValue>
    323e:	89 83       	std	Y+1, r24	; 0x01
    3240:	05 c0       	rjmp	.+10     	; 0x324c <LED_u8LedPortToggle+0x66>
		else error_status=DIO_u8SetPortValue(port_id,255);
    3242:	8c 81       	ldd	r24, Y+4	; 0x04
    3244:	6f ef       	ldi	r22, 0xFF	; 255
    3246:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <DIO_u8SetPortValue>
    324a:	89 83       	std	Y+1, r24	; 0x01
	}
	}
	return error_status;
    324c:	89 81       	ldd	r24, Y+1	; 0x01
}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <LED_u8LedPortBlink>:
uint8_t LED_u8LedPortBlink(uint8_t port_id,uint16_ delay_time_ms)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	a1 97       	sbiw	r28, 0x21	; 33
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	f8 94       	cli
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	8f 8f       	std	Y+31, r24	; 0x1f
    3272:	79 a3       	std	Y+33, r23	; 0x21
    3274:	68 a3       	std	Y+32, r22	; 0x20
	uint8_t IsOut;
		uint8_t error_status = DIO_u8IsPinOutPut(port_id,PIN_0,&IsOut);
    3276:	9e 01       	movw	r18, r28
    3278:	22 5e       	subi	r18, 0xE2	; 226
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	a9 01       	movw	r20, r18
    3282:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <DIO_u8IsPinOutPut>
    3286:	8d 8f       	std	Y+29, r24	; 0x1d
		if(error_status==E_OK)
    3288:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328a:	88 23       	and	r24, r24
    328c:	09 f0       	breq	.+2      	; 0x3290 <LED_u8LedPortBlink+0x34>
    328e:	05 c1       	rjmp	.+522    	; 0x349a <LED_u8LedPortBlink+0x23e>
		{
		if(IsOut==0)error_status=LED_u8InitializeLedPort(port_id);
    3290:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3292:	88 23       	and	r24, r24
    3294:	21 f4       	brne	.+8      	; 0x329e <LED_u8LedPortBlink+0x42>
    3296:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3298:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_u8InitializeLedPort>
    329c:	8d 8f       	std	Y+29, r24	; 0x1d
		error_status = LED_u8LedPortOn(port_id);
    329e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a0:	0e 94 a7 18 	call	0x314e	; 0x314e <LED_u8LedPortOn>
    32a4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    32a6:	88 a1       	ldd	r24, Y+32	; 0x20
    32a8:	99 a1       	ldd	r25, Y+33	; 0x21
    32aa:	cc 01       	movw	r24, r24
    32ac:	a0 e0       	ldi	r26, 0x00	; 0
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	bc 01       	movw	r22, r24
    32b2:	cd 01       	movw	r24, r26
    32b4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	89 8f       	std	Y+25, r24	; 0x19
    32be:	9a 8f       	std	Y+26, r25	; 0x1a
    32c0:	ab 8f       	std	Y+27, r26	; 0x1b
    32c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c4:	69 8d       	ldd	r22, Y+25	; 0x19
    32c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a ef       	ldi	r20, 0xFA	; 250
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	8d 8b       	std	Y+21, r24	; 0x15
    32de:	9e 8b       	std	Y+22, r25	; 0x16
    32e0:	af 8b       	std	Y+23, r26	; 0x17
    32e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e4:	6d 89       	ldd	r22, Y+21	; 0x15
    32e6:	7e 89       	ldd	r23, Y+22	; 0x16
    32e8:	8f 89       	ldd	r24, Y+23	; 0x17
    32ea:	98 8d       	ldd	r25, Y+24	; 0x18
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	5f e3       	ldi	r21, 0x3F	; 63
    32f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f8:	88 23       	and	r24, r24
    32fa:	2c f4       	brge	.+10     	; 0x3306 <LED_u8LedPortBlink+0xaa>
		__ticks = 1;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	9c 8b       	std	Y+20, r25	; 0x14
    3302:	8b 8b       	std	Y+19, r24	; 0x13
    3304:	3f c0       	rjmp	.+126    	; 0x3384 <LED_u8LedPortBlink+0x128>
	else if (__tmp > 65535)
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	3f ef       	ldi	r19, 0xFF	; 255
    3312:	4f e7       	ldi	r20, 0x7F	; 127
    3314:	57 e4       	ldi	r21, 0x47	; 71
    3316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331a:	18 16       	cp	r1, r24
    331c:	4c f5       	brge	.+82     	; 0x3370 <LED_u8LedPortBlink+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    331e:	69 8d       	ldd	r22, Y+25	; 0x19
    3320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e2       	ldi	r20, 0x20	; 32
    332c:	51 e4       	ldi	r21, 0x41	; 65
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	bc 01       	movw	r22, r24
    3338:	cd 01       	movw	r24, r26
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9c 8b       	std	Y+20, r25	; 0x14
    3344:	8b 8b       	std	Y+19, r24	; 0x13
    3346:	0f c0       	rjmp	.+30     	; 0x3366 <LED_u8LedPortBlink+0x10a>
    3348:	88 ec       	ldi	r24, 0xC8	; 200
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9a 8b       	std	Y+18, r25	; 0x12
    334e:	89 8b       	std	Y+17, r24	; 0x11
    3350:	89 89       	ldd	r24, Y+17	; 0x11
    3352:	9a 89       	ldd	r25, Y+18	; 0x12
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	f1 f7       	brne	.-4      	; 0x3354 <LED_u8LedPortBlink+0xf8>
    3358:	9a 8b       	std	Y+18, r25	; 0x12
    335a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    335c:	8b 89       	ldd	r24, Y+19	; 0x13
    335e:	9c 89       	ldd	r25, Y+20	; 0x14
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	9c 8b       	std	Y+20, r25	; 0x14
    3364:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3366:	8b 89       	ldd	r24, Y+19	; 0x13
    3368:	9c 89       	ldd	r25, Y+20	; 0x14
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	69 f7       	brne	.-38     	; 0x3348 <LED_u8LedPortBlink+0xec>
    336e:	14 c0       	rjmp	.+40     	; 0x3398 <LED_u8LedPortBlink+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3370:	6d 89       	ldd	r22, Y+21	; 0x15
    3372:	7e 89       	ldd	r23, Y+22	; 0x16
    3374:	8f 89       	ldd	r24, Y+23	; 0x17
    3376:	98 8d       	ldd	r25, Y+24	; 0x18
    3378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	9c 8b       	std	Y+20, r25	; 0x14
    3382:	8b 8b       	std	Y+19, r24	; 0x13
    3384:	8b 89       	ldd	r24, Y+19	; 0x13
    3386:	9c 89       	ldd	r25, Y+20	; 0x14
    3388:	98 8b       	std	Y+16, r25	; 0x10
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	8f 85       	ldd	r24, Y+15	; 0x0f
    338e:	98 89       	ldd	r25, Y+16	; 0x10
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <LED_u8LedPortBlink+0x134>
    3394:	98 8b       	std	Y+16, r25	; 0x10
    3396:	8f 87       	std	Y+15, r24	; 0x0f
		if(error_status==E_OK){
    3398:	8d 8d       	ldd	r24, Y+29	; 0x1d
    339a:	88 23       	and	r24, r24
    339c:	09 f0       	breq	.+2      	; 0x33a0 <LED_u8LedPortBlink+0x144>
    339e:	7d c0       	rjmp	.+250    	; 0x349a <LED_u8LedPortBlink+0x23e>
		error_status = LED_u8LedPortOff(port_id);
    33a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33a2:	0e 94 cd 18 	call	0x319a	; 0x319a <LED_u8LedPortOff>
    33a6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay_time_ms);
    33a8:	88 a1       	ldd	r24, Y+32	; 0x20
    33aa:	99 a1       	ldd	r25, Y+33	; 0x21
    33ac:	cc 01       	movw	r24, r24
    33ae:	a0 e0       	ldi	r26, 0x00	; 0
    33b0:	b0 e0       	ldi	r27, 0x00	; 0
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	8b 87       	std	Y+11, r24	; 0x0b
    33c0:	9c 87       	std	Y+12, r25	; 0x0c
    33c2:	ad 87       	std	Y+13, r26	; 0x0d
    33c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    33cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	4a ef       	ldi	r20, 0xFA	; 250
    33d4:	54 e4       	ldi	r21, 0x44	; 68
    33d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	8f 83       	std	Y+7, r24	; 0x07
    33e0:	98 87       	std	Y+8, r25	; 0x08
    33e2:	a9 87       	std	Y+9, r26	; 0x09
    33e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33e6:	6f 81       	ldd	r22, Y+7	; 0x07
    33e8:	78 85       	ldd	r23, Y+8	; 0x08
    33ea:	89 85       	ldd	r24, Y+9	; 0x09
    33ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e8       	ldi	r20, 0x80	; 128
    33f4:	5f e3       	ldi	r21, 0x3F	; 63
    33f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33fa:	88 23       	and	r24, r24
    33fc:	2c f4       	brge	.+10     	; 0x3408 <LED_u8LedPortBlink+0x1ac>
		__ticks = 1;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	9e 83       	std	Y+6, r25	; 0x06
    3404:	8d 83       	std	Y+5, r24	; 0x05
    3406:	3f c0       	rjmp	.+126    	; 0x3486 <LED_u8LedPortBlink+0x22a>
	else if (__tmp > 65535)
    3408:	6f 81       	ldd	r22, Y+7	; 0x07
    340a:	78 85       	ldd	r23, Y+8	; 0x08
    340c:	89 85       	ldd	r24, Y+9	; 0x09
    340e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	3f ef       	ldi	r19, 0xFF	; 255
    3414:	4f e7       	ldi	r20, 0x7F	; 127
    3416:	57 e4       	ldi	r21, 0x47	; 71
    3418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    341c:	18 16       	cp	r1, r24
    341e:	4c f5       	brge	.+82     	; 0x3472 <LED_u8LedPortBlink+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3420:	6b 85       	ldd	r22, Y+11	; 0x0b
    3422:	7c 85       	ldd	r23, Y+12	; 0x0c
    3424:	8d 85       	ldd	r24, Y+13	; 0x0d
    3426:	9e 85       	ldd	r25, Y+14	; 0x0e
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e2       	ldi	r20, 0x20	; 32
    342e:	51 e4       	ldi	r21, 0x41	; 65
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	9e 83       	std	Y+6, r25	; 0x06
    3446:	8d 83       	std	Y+5, r24	; 0x05
    3448:	0f c0       	rjmp	.+30     	; 0x3468 <LED_u8LedPortBlink+0x20c>
    344a:	88 ec       	ldi	r24, 0xC8	; 200
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	9c 83       	std	Y+4, r25	; 0x04
    3450:	8b 83       	std	Y+3, r24	; 0x03
    3452:	8b 81       	ldd	r24, Y+3	; 0x03
    3454:	9c 81       	ldd	r25, Y+4	; 0x04
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <LED_u8LedPortBlink+0x1fa>
    345a:	9c 83       	std	Y+4, r25	; 0x04
    345c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    345e:	8d 81       	ldd	r24, Y+5	; 0x05
    3460:	9e 81       	ldd	r25, Y+6	; 0x06
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	9e 81       	ldd	r25, Y+6	; 0x06
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	69 f7       	brne	.-38     	; 0x344a <LED_u8LedPortBlink+0x1ee>
    3470:	14 c0       	rjmp	.+40     	; 0x349a <LED_u8LedPortBlink+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3472:	6f 81       	ldd	r22, Y+7	; 0x07
    3474:	78 85       	ldd	r23, Y+8	; 0x08
    3476:	89 85       	ldd	r24, Y+9	; 0x09
    3478:	9a 85       	ldd	r25, Y+10	; 0x0a
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	9e 83       	std	Y+6, r25	; 0x06
    3484:	8d 83       	std	Y+5, r24	; 0x05
    3486:	8d 81       	ldd	r24, Y+5	; 0x05
    3488:	9e 81       	ldd	r25, Y+6	; 0x06
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	9a 81       	ldd	r25, Y+2	; 0x02
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <LED_u8LedPortBlink+0x236>
    3496:	9a 83       	std	Y+2, r25	; 0x02
    3498:	89 83       	std	Y+1, r24	; 0x01
		}
		}

	return error_status;
    349a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    349c:	a1 96       	adiw	r28, 0x21	; 33
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <LCD_vidWriteData>:
#include "../../mcal/dio_driver/dio_int.h"
#include"util/delay.h"
#include"lcd_cfg.h"

void LCD_vidWriteData(uint8_t data)
{
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	2f 97       	sbiw	r28, 0x0f	; 15
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	67 e0       	ldi	r22, 0x07	; 7
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	65 e0       	ldi	r22, 0x05	; 5
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,data);
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	6f 85       	ldd	r22, Y+15	; 0x0f
    34dc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	66 e0       	ldi	r22, 0x06	; 6
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	a0 e0       	ldi	r26, 0x00	; 0
    34f0:	b0 e4       	ldi	r27, 0x40	; 64
    34f2:	8b 87       	std	Y+11, r24	; 0x0b
    34f4:	9c 87       	std	Y+12, r25	; 0x0c
    34f6:	ad 87       	std	Y+13, r26	; 0x0d
    34f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3500:	9e 85       	ldd	r25, Y+14	; 0x0e
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	4a ef       	ldi	r20, 0xFA	; 250
    3508:	54 e4       	ldi	r21, 0x44	; 68
    350a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	8f 83       	std	Y+7, r24	; 0x07
    3514:	98 87       	std	Y+8, r25	; 0x08
    3516:	a9 87       	std	Y+9, r26	; 0x09
    3518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    351a:	6f 81       	ldd	r22, Y+7	; 0x07
    351c:	78 85       	ldd	r23, Y+8	; 0x08
    351e:	89 85       	ldd	r24, Y+9	; 0x09
    3520:	9a 85       	ldd	r25, Y+10	; 0x0a
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e8       	ldi	r20, 0x80	; 128
    3528:	5f e3       	ldi	r21, 0x3F	; 63
    352a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    352e:	88 23       	and	r24, r24
    3530:	2c f4       	brge	.+10     	; 0x353c <LCD_vidWriteData+0x8e>
		__ticks = 1;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	9e 83       	std	Y+6, r25	; 0x06
    3538:	8d 83       	std	Y+5, r24	; 0x05
    353a:	3f c0       	rjmp	.+126    	; 0x35ba <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    353c:	6f 81       	ldd	r22, Y+7	; 0x07
    353e:	78 85       	ldd	r23, Y+8	; 0x08
    3540:	89 85       	ldd	r24, Y+9	; 0x09
    3542:	9a 85       	ldd	r25, Y+10	; 0x0a
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	3f ef       	ldi	r19, 0xFF	; 255
    3548:	4f e7       	ldi	r20, 0x7F	; 127
    354a:	57 e4       	ldi	r21, 0x47	; 71
    354c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3550:	18 16       	cp	r1, r24
    3552:	4c f5       	brge	.+82     	; 0x35a6 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3554:	6b 85       	ldd	r22, Y+11	; 0x0b
    3556:	7c 85       	ldd	r23, Y+12	; 0x0c
    3558:	8d 85       	ldd	r24, Y+13	; 0x0d
    355a:	9e 85       	ldd	r25, Y+14	; 0x0e
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e2       	ldi	r20, 0x20	; 32
    3562:	51 e4       	ldi	r21, 0x41	; 65
    3564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	bc 01       	movw	r22, r24
    356e:	cd 01       	movw	r24, r26
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	9e 83       	std	Y+6, r25	; 0x06
    357a:	8d 83       	std	Y+5, r24	; 0x05
    357c:	0f c0       	rjmp	.+30     	; 0x359c <LCD_vidWriteData+0xee>
    357e:	88 ec       	ldi	r24, 0xC8	; 200
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	9c 83       	std	Y+4, r25	; 0x04
    3584:	8b 83       	std	Y+3, r24	; 0x03
    3586:	8b 81       	ldd	r24, Y+3	; 0x03
    3588:	9c 81       	ldd	r25, Y+4	; 0x04
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <LCD_vidWriteData+0xdc>
    358e:	9c 83       	std	Y+4, r25	; 0x04
    3590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	9e 83       	std	Y+6, r25	; 0x06
    359a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	69 f7       	brne	.-38     	; 0x357e <LCD_vidWriteData+0xd0>
    35a4:	14 c0       	rjmp	.+40     	; 0x35ce <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a6:	6f 81       	ldd	r22, Y+7	; 0x07
    35a8:	78 85       	ldd	r23, Y+8	; 0x08
    35aa:	89 85       	ldd	r24, Y+9	; 0x09
    35ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	9e 83       	std	Y+6, r25	; 0x06
    35b8:	8d 83       	std	Y+5, r24	; 0x05
    35ba:	8d 81       	ldd	r24, Y+5	; 0x05
    35bc:	9e 81       	ldd	r25, Y+6	; 0x06
    35be:	9a 83       	std	Y+2, r25	; 0x02
    35c0:	89 83       	std	Y+1, r24	; 0x01
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	9a 81       	ldd	r25, Y+2	; 0x02
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <LCD_vidWriteData+0x118>
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	66 e0       	ldi	r22, 0x06	; 6
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
}
    35d8:	2f 96       	adiw	r28, 0x0f	; 15
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <LCD_vidWriteCmd>:

void LCD_vidWriteCmd(uint8_t command)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	2f 97       	sbiw	r28, 0x0f	; 15
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	67 e0       	ldi	r22, 0x07	; 7
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_RW_PORT,LCD_RW_PIN,LOW);
    360a:	82 e0       	ldi	r24, 0x02	; 2
    360c:	65 e0       	ldi	r22, 0x05	; 5
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_Data_PORT,command);
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	6f 85       	ldd	r22, Y+15	; 0x0f
    3618:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    361c:	82 e0       	ldi	r24, 0x02	; 2
    361e:	66 e0       	ldi	r22, 0x06	; 6
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	a0 e0       	ldi	r26, 0x00	; 0
    362c:	b0 e4       	ldi	r27, 0x40	; 64
    362e:	8b 87       	std	Y+11, r24	; 0x0b
    3630:	9c 87       	std	Y+12, r25	; 0x0c
    3632:	ad 87       	std	Y+13, r26	; 0x0d
    3634:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3636:	6b 85       	ldd	r22, Y+11	; 0x0b
    3638:	7c 85       	ldd	r23, Y+12	; 0x0c
    363a:	8d 85       	ldd	r24, Y+13	; 0x0d
    363c:	9e 85       	ldd	r25, Y+14	; 0x0e
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	4a ef       	ldi	r20, 0xFA	; 250
    3644:	54 e4       	ldi	r21, 0x44	; 68
    3646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	8f 83       	std	Y+7, r24	; 0x07
    3650:	98 87       	std	Y+8, r25	; 0x08
    3652:	a9 87       	std	Y+9, r26	; 0x09
    3654:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3656:	6f 81       	ldd	r22, Y+7	; 0x07
    3658:	78 85       	ldd	r23, Y+8	; 0x08
    365a:	89 85       	ldd	r24, Y+9	; 0x09
    365c:	9a 85       	ldd	r25, Y+10	; 0x0a
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e8       	ldi	r20, 0x80	; 128
    3664:	5f e3       	ldi	r21, 0x3F	; 63
    3666:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    366a:	88 23       	and	r24, r24
    366c:	2c f4       	brge	.+10     	; 0x3678 <LCD_vidWriteCmd+0x8e>
		__ticks = 1;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9e 83       	std	Y+6, r25	; 0x06
    3674:	8d 83       	std	Y+5, r24	; 0x05
    3676:	3f c0       	rjmp	.+126    	; 0x36f6 <LCD_vidWriteCmd+0x10c>
	else if (__tmp > 65535)
    3678:	6f 81       	ldd	r22, Y+7	; 0x07
    367a:	78 85       	ldd	r23, Y+8	; 0x08
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	3f ef       	ldi	r19, 0xFF	; 255
    3684:	4f e7       	ldi	r20, 0x7F	; 127
    3686:	57 e4       	ldi	r21, 0x47	; 71
    3688:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    368c:	18 16       	cp	r1, r24
    368e:	4c f5       	brge	.+82     	; 0x36e2 <LCD_vidWriteCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3690:	6b 85       	ldd	r22, Y+11	; 0x0b
    3692:	7c 85       	ldd	r23, Y+12	; 0x0c
    3694:	8d 85       	ldd	r24, Y+13	; 0x0d
    3696:	9e 85       	ldd	r25, Y+14	; 0x0e
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	bc 01       	movw	r22, r24
    36aa:	cd 01       	movw	r24, r26
    36ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	9e 83       	std	Y+6, r25	; 0x06
    36b6:	8d 83       	std	Y+5, r24	; 0x05
    36b8:	0f c0       	rjmp	.+30     	; 0x36d8 <LCD_vidWriteCmd+0xee>
    36ba:	88 ec       	ldi	r24, 0xC8	; 200
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9c 83       	std	Y+4, r25	; 0x04
    36c0:	8b 83       	std	Y+3, r24	; 0x03
    36c2:	8b 81       	ldd	r24, Y+3	; 0x03
    36c4:	9c 81       	ldd	r25, Y+4	; 0x04
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <LCD_vidWriteCmd+0xdc>
    36ca:	9c 83       	std	Y+4, r25	; 0x04
    36cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	9e 83       	std	Y+6, r25	; 0x06
    36d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	00 97       	sbiw	r24, 0x00	; 0
    36de:	69 f7       	brne	.-38     	; 0x36ba <LCD_vidWriteCmd+0xd0>
    36e0:	14 c0       	rjmp	.+40     	; 0x370a <LCD_vidWriteCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e2:	6f 81       	ldd	r22, Y+7	; 0x07
    36e4:	78 85       	ldd	r23, Y+8	; 0x08
    36e6:	89 85       	ldd	r24, Y+9	; 0x09
    36e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	9e 83       	std	Y+6, r25	; 0x06
    36f4:	8d 83       	std	Y+5, r24	; 0x05
    36f6:	8d 81       	ldd	r24, Y+5	; 0x05
    36f8:	9e 81       	ldd	r25, Y+6	; 0x06
    36fa:	9a 83       	std	Y+2, r25	; 0x02
    36fc:	89 83       	std	Y+1, r24	; 0x01
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	9a 81       	ldd	r25, Y+2	; 0x02
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	f1 f7       	brne	.-4      	; 0x3702 <LCD_vidWriteCmd+0x118>
    3706:	9a 83       	std	Y+2, r25	; 0x02
    3708:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	66 e0       	ldi	r22, 0x06	; 6
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <DIO_u8SetPinValue>
}
    3714:	2f 96       	adiw	r28, 0x0f	; 15
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <LCD_vidInit>:

void LCD_vidInit(void)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	e8 97       	sbiw	r28, 0x38	; 56
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	67 e0       	ldi	r22, 0x07	; 7
    373e:	41 e0       	ldi	r20, 0x01	; 1
    3740:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	65 e0       	ldi	r22, 0x05	; 5
    3748:	41 e0       	ldi	r20, 0x01	; 1
    374a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
	DIO_u8SetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	66 e0       	ldi	r22, 0x06	; 6
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinMode>
	DIO_u8SetPortMode(LCD_Data_PORT,255);
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	6f ef       	ldi	r22, 0xFF	; 255
    375c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <DIO_u8SetPortMode>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	a0 e2       	ldi	r26, 0x20	; 32
    3766:	b2 e4       	ldi	r27, 0x42	; 66
    3768:	8d ab       	std	Y+53, r24	; 0x35
    376a:	9e ab       	std	Y+54, r25	; 0x36
    376c:	af ab       	std	Y+55, r26	; 0x37
    376e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3770:	6d a9       	ldd	r22, Y+53	; 0x35
    3772:	7e a9       	ldd	r23, Y+54	; 0x36
    3774:	8f a9       	ldd	r24, Y+55	; 0x37
    3776:	98 ad       	ldd	r25, Y+56	; 0x38
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	4a ef       	ldi	r20, 0xFA	; 250
    377e:	54 e4       	ldi	r21, 0x44	; 68
    3780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	89 ab       	std	Y+49, r24	; 0x31
    378a:	9a ab       	std	Y+50, r25	; 0x32
    378c:	ab ab       	std	Y+51, r26	; 0x33
    378e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3790:	69 a9       	ldd	r22, Y+49	; 0x31
    3792:	7a a9       	ldd	r23, Y+50	; 0x32
    3794:	8b a9       	ldd	r24, Y+51	; 0x33
    3796:	9c a9       	ldd	r25, Y+52	; 0x34
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e8       	ldi	r20, 0x80	; 128
    379e:	5f e3       	ldi	r21, 0x3F	; 63
    37a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a4:	88 23       	and	r24, r24
    37a6:	2c f4       	brge	.+10     	; 0x37b2 <LCD_vidInit+0x8c>
		__ticks = 1;
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	98 ab       	std	Y+48, r25	; 0x30
    37ae:	8f a7       	std	Y+47, r24	; 0x2f
    37b0:	3f c0       	rjmp	.+126    	; 0x3830 <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    37b2:	69 a9       	ldd	r22, Y+49	; 0x31
    37b4:	7a a9       	ldd	r23, Y+50	; 0x32
    37b6:	8b a9       	ldd	r24, Y+51	; 0x33
    37b8:	9c a9       	ldd	r25, Y+52	; 0x34
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	3f ef       	ldi	r19, 0xFF	; 255
    37be:	4f e7       	ldi	r20, 0x7F	; 127
    37c0:	57 e4       	ldi	r21, 0x47	; 71
    37c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37c6:	18 16       	cp	r1, r24
    37c8:	4c f5       	brge	.+82     	; 0x381c <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ca:	6d a9       	ldd	r22, Y+53	; 0x35
    37cc:	7e a9       	ldd	r23, Y+54	; 0x36
    37ce:	8f a9       	ldd	r24, Y+55	; 0x37
    37d0:	98 ad       	ldd	r25, Y+56	; 0x38
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e2       	ldi	r20, 0x20	; 32
    37d8:	51 e4       	ldi	r21, 0x41	; 65
    37da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	bc 01       	movw	r22, r24
    37e4:	cd 01       	movw	r24, r26
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	98 ab       	std	Y+48, r25	; 0x30
    37f0:	8f a7       	std	Y+47, r24	; 0x2f
    37f2:	0f c0       	rjmp	.+30     	; 0x3812 <LCD_vidInit+0xec>
    37f4:	88 ec       	ldi	r24, 0xC8	; 200
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	9e a7       	std	Y+46, r25	; 0x2e
    37fa:	8d a7       	std	Y+45, r24	; 0x2d
    37fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    37fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <LCD_vidInit+0xda>
    3804:	9e a7       	std	Y+46, r25	; 0x2e
    3806:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3808:	8f a5       	ldd	r24, Y+47	; 0x2f
    380a:	98 a9       	ldd	r25, Y+48	; 0x30
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	98 ab       	std	Y+48, r25	; 0x30
    3810:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3812:	8f a5       	ldd	r24, Y+47	; 0x2f
    3814:	98 a9       	ldd	r25, Y+48	; 0x30
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	69 f7       	brne	.-38     	; 0x37f4 <LCD_vidInit+0xce>
    381a:	14 c0       	rjmp	.+40     	; 0x3844 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381c:	69 a9       	ldd	r22, Y+49	; 0x31
    381e:	7a a9       	ldd	r23, Y+50	; 0x32
    3820:	8b a9       	ldd	r24, Y+51	; 0x33
    3822:	9c a9       	ldd	r25, Y+52	; 0x34
    3824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	98 ab       	std	Y+48, r25	; 0x30
    382e:	8f a7       	std	Y+47, r24	; 0x2f
    3830:	8f a5       	ldd	r24, Y+47	; 0x2f
    3832:	98 a9       	ldd	r25, Y+48	; 0x30
    3834:	9c a7       	std	Y+44, r25	; 0x2c
    3836:	8b a7       	std	Y+43, r24	; 0x2b
    3838:	8b a5       	ldd	r24, Y+43	; 0x2b
    383a:	9c a5       	ldd	r25, Y+44	; 0x2c
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	f1 f7       	brne	.-4      	; 0x383c <LCD_vidInit+0x116>
    3840:	9c a7       	std	Y+44, r25	; 0x2c
    3842:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_vidWriteCmd(0b00111000);
    3844:	88 e3       	ldi	r24, 0x38	; 56
    3846:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e4       	ldi	r27, 0x40	; 64
    3852:	8f a3       	std	Y+39, r24	; 0x27
    3854:	98 a7       	std	Y+40, r25	; 0x28
    3856:	a9 a7       	std	Y+41, r26	; 0x29
    3858:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    385a:	6f a1       	ldd	r22, Y+39	; 0x27
    385c:	78 a5       	ldd	r23, Y+40	; 0x28
    385e:	89 a5       	ldd	r24, Y+41	; 0x29
    3860:	9a a5       	ldd	r25, Y+42	; 0x2a
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	4a ef       	ldi	r20, 0xFA	; 250
    3868:	54 e4       	ldi	r21, 0x44	; 68
    386a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	8b a3       	std	Y+35, r24	; 0x23
    3874:	9c a3       	std	Y+36, r25	; 0x24
    3876:	ad a3       	std	Y+37, r26	; 0x25
    3878:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    387a:	6b a1       	ldd	r22, Y+35	; 0x23
    387c:	7c a1       	ldd	r23, Y+36	; 0x24
    387e:	8d a1       	ldd	r24, Y+37	; 0x25
    3880:	9e a1       	ldd	r25, Y+38	; 0x26
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e8       	ldi	r20, 0x80	; 128
    3888:	5f e3       	ldi	r21, 0x3F	; 63
    388a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    388e:	88 23       	and	r24, r24
    3890:	2c f4       	brge	.+10     	; 0x389c <LCD_vidInit+0x176>
		__ticks = 1;
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	9a a3       	std	Y+34, r25	; 0x22
    3898:	89 a3       	std	Y+33, r24	; 0x21
    389a:	3f c0       	rjmp	.+126    	; 0x391a <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    389c:	6b a1       	ldd	r22, Y+35	; 0x23
    389e:	7c a1       	ldd	r23, Y+36	; 0x24
    38a0:	8d a1       	ldd	r24, Y+37	; 0x25
    38a2:	9e a1       	ldd	r25, Y+38	; 0x26
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	3f ef       	ldi	r19, 0xFF	; 255
    38a8:	4f e7       	ldi	r20, 0x7F	; 127
    38aa:	57 e4       	ldi	r21, 0x47	; 71
    38ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38b0:	18 16       	cp	r1, r24
    38b2:	4c f5       	brge	.+82     	; 0x3906 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b4:	6f a1       	ldd	r22, Y+39	; 0x27
    38b6:	78 a5       	ldd	r23, Y+40	; 0x28
    38b8:	89 a5       	ldd	r24, Y+41	; 0x29
    38ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e2       	ldi	r20, 0x20	; 32
    38c2:	51 e4       	ldi	r21, 0x41	; 65
    38c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	9a a3       	std	Y+34, r25	; 0x22
    38da:	89 a3       	std	Y+33, r24	; 0x21
    38dc:	0f c0       	rjmp	.+30     	; 0x38fc <LCD_vidInit+0x1d6>
    38de:	88 ec       	ldi	r24, 0xC8	; 200
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	98 a3       	std	Y+32, r25	; 0x20
    38e4:	8f 8f       	std	Y+31, r24	; 0x1f
    38e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38e8:	98 a1       	ldd	r25, Y+32	; 0x20
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <LCD_vidInit+0x1c4>
    38ee:	98 a3       	std	Y+32, r25	; 0x20
    38f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f2:	89 a1       	ldd	r24, Y+33	; 0x21
    38f4:	9a a1       	ldd	r25, Y+34	; 0x22
    38f6:	01 97       	sbiw	r24, 0x01	; 1
    38f8:	9a a3       	std	Y+34, r25	; 0x22
    38fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38fc:	89 a1       	ldd	r24, Y+33	; 0x21
    38fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	69 f7       	brne	.-38     	; 0x38de <LCD_vidInit+0x1b8>
    3904:	14 c0       	rjmp	.+40     	; 0x392e <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3906:	6b a1       	ldd	r22, Y+35	; 0x23
    3908:	7c a1       	ldd	r23, Y+36	; 0x24
    390a:	8d a1       	ldd	r24, Y+37	; 0x25
    390c:	9e a1       	ldd	r25, Y+38	; 0x26
    390e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	9a a3       	std	Y+34, r25	; 0x22
    3918:	89 a3       	std	Y+33, r24	; 0x21
    391a:	89 a1       	ldd	r24, Y+33	; 0x21
    391c:	9a a1       	ldd	r25, Y+34	; 0x22
    391e:	9e 8f       	std	Y+30, r25	; 0x1e
    3920:	8d 8f       	std	Y+29, r24	; 0x1d
    3922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3924:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <LCD_vidInit+0x200>
    392a:	9e 8f       	std	Y+30, r25	; 0x1e
    392c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_vidWriteCmd(0b00001100);
    392e:	8c e0       	ldi	r24, 0x0C	; 12
    3930:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a0 e0       	ldi	r26, 0x00	; 0
    393a:	b0 e4       	ldi	r27, 0x40	; 64
    393c:	89 8f       	std	Y+25, r24	; 0x19
    393e:	9a 8f       	std	Y+26, r25	; 0x1a
    3940:	ab 8f       	std	Y+27, r26	; 0x1b
    3942:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3944:	69 8d       	ldd	r22, Y+25	; 0x19
    3946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    394a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	4a ef       	ldi	r20, 0xFA	; 250
    3952:	54 e4       	ldi	r21, 0x44	; 68
    3954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	8d 8b       	std	Y+21, r24	; 0x15
    395e:	9e 8b       	std	Y+22, r25	; 0x16
    3960:	af 8b       	std	Y+23, r26	; 0x17
    3962:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3964:	6d 89       	ldd	r22, Y+21	; 0x15
    3966:	7e 89       	ldd	r23, Y+22	; 0x16
    3968:	8f 89       	ldd	r24, Y+23	; 0x17
    396a:	98 8d       	ldd	r25, Y+24	; 0x18
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e8       	ldi	r20, 0x80	; 128
    3972:	5f e3       	ldi	r21, 0x3F	; 63
    3974:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3978:	88 23       	and	r24, r24
    397a:	2c f4       	brge	.+10     	; 0x3986 <LCD_vidInit+0x260>
		__ticks = 1;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	9c 8b       	std	Y+20, r25	; 0x14
    3982:	8b 8b       	std	Y+19, r24	; 0x13
    3984:	3f c0       	rjmp	.+126    	; 0x3a04 <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    3986:	6d 89       	ldd	r22, Y+21	; 0x15
    3988:	7e 89       	ldd	r23, Y+22	; 0x16
    398a:	8f 89       	ldd	r24, Y+23	; 0x17
    398c:	98 8d       	ldd	r25, Y+24	; 0x18
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	4f e7       	ldi	r20, 0x7F	; 127
    3994:	57 e4       	ldi	r21, 0x47	; 71
    3996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    399a:	18 16       	cp	r1, r24
    399c:	4c f5       	brge	.+82     	; 0x39f0 <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399e:	69 8d       	ldd	r22, Y+25	; 0x19
    39a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	9c 8b       	std	Y+20, r25	; 0x14
    39c4:	8b 8b       	std	Y+19, r24	; 0x13
    39c6:	0f c0       	rjmp	.+30     	; 0x39e6 <LCD_vidInit+0x2c0>
    39c8:	88 ec       	ldi	r24, 0xC8	; 200
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	9a 8b       	std	Y+18, r25	; 0x12
    39ce:	89 8b       	std	Y+17, r24	; 0x11
    39d0:	89 89       	ldd	r24, Y+17	; 0x11
    39d2:	9a 89       	ldd	r25, Y+18	; 0x12
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_vidInit+0x2ae>
    39d8:	9a 8b       	std	Y+18, r25	; 0x12
    39da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39dc:	8b 89       	ldd	r24, Y+19	; 0x13
    39de:	9c 89       	ldd	r25, Y+20	; 0x14
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	9c 8b       	std	Y+20, r25	; 0x14
    39e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e6:	8b 89       	ldd	r24, Y+19	; 0x13
    39e8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	69 f7       	brne	.-38     	; 0x39c8 <LCD_vidInit+0x2a2>
    39ee:	14 c0       	rjmp	.+40     	; 0x3a18 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f0:	6d 89       	ldd	r22, Y+21	; 0x15
    39f2:	7e 89       	ldd	r23, Y+22	; 0x16
    39f4:	8f 89       	ldd	r24, Y+23	; 0x17
    39f6:	98 8d       	ldd	r25, Y+24	; 0x18
    39f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	9c 8b       	std	Y+20, r25	; 0x14
    3a02:	8b 8b       	std	Y+19, r24	; 0x13
    3a04:	8b 89       	ldd	r24, Y+19	; 0x13
    3a06:	9c 89       	ldd	r25, Y+20	; 0x14
    3a08:	98 8b       	std	Y+16, r25	; 0x10
    3a0a:	8f 87       	std	Y+15, r24	; 0x0f
    3a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a0e:	98 89       	ldd	r25, Y+16	; 0x10
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <LCD_vidInit+0x2ea>
    3a14:	98 8b       	std	Y+16, r25	; 0x10
    3a16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000001);
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	a0 e0       	ldi	r26, 0x00	; 0
    3a24:	b0 e4       	ldi	r27, 0x40	; 64
    3a26:	8b 87       	std	Y+11, r24	; 0x0b
    3a28:	9c 87       	std	Y+12, r25	; 0x0c
    3a2a:	ad 87       	std	Y+13, r26	; 0x0d
    3a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	4a ef       	ldi	r20, 0xFA	; 250
    3a3c:	54 e4       	ldi	r21, 0x44	; 68
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	8f 83       	std	Y+7, r24	; 0x07
    3a48:	98 87       	std	Y+8, r25	; 0x08
    3a4a:	a9 87       	std	Y+9, r26	; 0x09
    3a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a50:	78 85       	ldd	r23, Y+8	; 0x08
    3a52:	89 85       	ldd	r24, Y+9	; 0x09
    3a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e8       	ldi	r20, 0x80	; 128
    3a5c:	5f e3       	ldi	r21, 0x3F	; 63
    3a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a62:	88 23       	and	r24, r24
    3a64:	2c f4       	brge	.+10     	; 0x3a70 <LCD_vidInit+0x34a>
		__ticks = 1;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	3f c0       	rjmp	.+126    	; 0x3aee <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    3a70:	6f 81       	ldd	r22, Y+7	; 0x07
    3a72:	78 85       	ldd	r23, Y+8	; 0x08
    3a74:	89 85       	ldd	r24, Y+9	; 0x09
    3a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	3f ef       	ldi	r19, 0xFF	; 255
    3a7c:	4f e7       	ldi	r20, 0x7F	; 127
    3a7e:	57 e4       	ldi	r21, 0x47	; 71
    3a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a84:	18 16       	cp	r1, r24
    3a86:	4c f5       	brge	.+82     	; 0x3ada <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	40 e2       	ldi	r20, 0x20	; 32
    3a96:	51 e4       	ldi	r21, 0x41	; 65
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9e 83       	std	Y+6, r25	; 0x06
    3aae:	8d 83       	std	Y+5, r24	; 0x05
    3ab0:	0f c0       	rjmp	.+30     	; 0x3ad0 <LCD_vidInit+0x3aa>
    3ab2:	88 ec       	ldi	r24, 0xC8	; 200
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	9c 83       	std	Y+4, r25	; 0x04
    3ab8:	8b 83       	std	Y+3, r24	; 0x03
    3aba:	8b 81       	ldd	r24, Y+3	; 0x03
    3abc:	9c 81       	ldd	r25, Y+4	; 0x04
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <LCD_vidInit+0x398>
    3ac2:	9c 83       	std	Y+4, r25	; 0x04
    3ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	9e 83       	std	Y+6, r25	; 0x06
    3ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad4:	00 97       	sbiw	r24, 0x00	; 0
    3ad6:	69 f7       	brne	.-38     	; 0x3ab2 <LCD_vidInit+0x38c>
    3ad8:	14 c0       	rjmp	.+40     	; 0x3b02 <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ada:	6f 81       	ldd	r22, Y+7	; 0x07
    3adc:	78 85       	ldd	r23, Y+8	; 0x08
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	9e 83       	std	Y+6, r25	; 0x06
    3aec:	8d 83       	std	Y+5, r24	; 0x05
    3aee:	8d 81       	ldd	r24, Y+5	; 0x05
    3af0:	9e 81       	ldd	r25, Y+6	; 0x06
    3af2:	9a 83       	std	Y+2, r25	; 0x02
    3af4:	89 83       	std	Y+1, r24	; 0x01
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	9a 81       	ldd	r25, Y+2	; 0x02
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <LCD_vidInit+0x3d4>
    3afe:	9a 83       	std	Y+2, r25	; 0x02
    3b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidWriteCmd(0b00000110);
    3b02:	86 e0       	ldi	r24, 0x06	; 6
    3b04:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
}
    3b08:	e8 96       	adiw	r28, 0x38	; 56
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <LCD_vidDisplayString>:

void LCD_vidDisplayString(uint8_t * string)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <LCD_vidDisplayString+0x6>
    3b20:	0f 92       	push	r0
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	9b 83       	std	Y+3, r25	; 0x03
    3b28:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; string[i]!='\0'; i++)
    3b2a:	19 82       	std	Y+1, r1	; 0x01
    3b2c:	14 c0       	rjmp	.+40     	; 0x3b56 <LCD_vidDisplayString+0x3c>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	80 31       	cpi	r24, 0x10	; 16
    3b32:	19 f4       	brne	.+6      	; 0x3b3a <LCD_vidDisplayString+0x20>
    3b34:	80 ec       	ldi	r24, 0xC0	; 192
    3b36:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
		LCD_vidWriteData(string[i]);
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9b 81       	ldd	r25, Y+3	; 0x03
    3b44:	fc 01       	movw	r30, r24
    3b46:	e2 0f       	add	r30, r18
    3b48:	f3 1f       	adc	r31, r19
    3b4a:	80 81       	ld	r24, Z
    3b4c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LCD_vidWriteData>
	LCD_vidWriteCmd(0b00000110);
}

void LCD_vidDisplayString(uint8_t * string)
{
	for(uint8_t i=0; string[i]!='\0'; i++)
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	8f 5f       	subi	r24, 0xFF	; 255
    3b54:	89 83       	std	Y+1, r24	; 0x01
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	28 2f       	mov	r18, r24
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b60:	fc 01       	movw	r30, r24
    3b62:	e2 0f       	add	r30, r18
    3b64:	f3 1f       	adc	r31, r19
    3b66:	80 81       	ld	r24, Z
    3b68:	88 23       	and	r24, r24
    3b6a:	09 f7       	brne	.-62     	; 0x3b2e <LCD_vidDisplayString+0x14>
	{
		if(i==16)LCD_vidWriteCmd(0b11000000);
		LCD_vidWriteData(string[i]);
	}
}
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	cf 91       	pop	r28
    3b74:	df 91       	pop	r29
    3b76:	08 95       	ret

00003b78 <LCD_vidNewLine>:
void LCD_vidNewLine()
{
    3b78:	df 93       	push	r29
    3b7a:	cf 93       	push	r28
    3b7c:	cd b7       	in	r28, 0x3d	; 61
    3b7e:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b11000000);
    3b80:	80 ec       	ldi	r24, 0xC0	; 192
    3b82:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
}
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <LCD_vidDisplayStringLeftShift>:
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	62 97       	sbiw	r28, 0x12	; 18
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	9a 8b       	std	Y+18, r25	; 0x12
    3ba2:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3ba4:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3ba6:	18 8a       	std	Y+16, r1	; 0x10
    3ba8:	0e c0       	rjmp	.+28     	; 0x3bc6 <LCD_vidDisplayStringLeftShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3baa:	88 89       	ldd	r24, Y+16	; 0x10
    3bac:	28 2f       	mov	r18, r24
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	89 89       	ldd	r24, Y+17	; 0x11
    3bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	e2 0f       	add	r30, r18
    3bb8:	f3 1f       	adc	r31, r19
    3bba:	80 81       	ld	r24, Z
    3bbc:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LCD_vidWriteData>
	LCD_vidWriteCmd(0b11000000);
}
void LCD_vidDisplayStringLeftShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3bc0:	88 89       	ldd	r24, Y+16	; 0x10
    3bc2:	8f 5f       	subi	r24, 0xFF	; 255
    3bc4:	88 8b       	std	Y+16, r24	; 0x10
    3bc6:	88 89       	ldd	r24, Y+16	; 0x10
    3bc8:	28 2f       	mov	r18, r24
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	89 89       	ldd	r24, Y+17	; 0x11
    3bce:	9a 89       	ldd	r25, Y+18	; 0x12
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	e2 0f       	add	r30, r18
    3bd4:	f3 1f       	adc	r31, r19
    3bd6:	80 81       	ld	r24, Z
    3bd8:	88 23       	and	r24, r24
    3bda:	39 f7       	brne	.-50     	; 0x3baa <LCD_vidDisplayStringLeftShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bde:	98 89       	ldd	r25, Y+16	; 0x10
    3be0:	69 2f       	mov	r22, r25
    3be2:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodqi4>
    3be6:	89 2f       	mov	r24, r25
    3be8:	80 31       	cpi	r24, 0x10	; 16
    3bea:	19 f4       	brne	.+6      	; 0x3bf2 <LCD_vidDisplayStringLeftShift+0x66>
    3bec:	80 e8       	ldi	r24, 0x80	; 128
    3bee:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011000);
    3bf2:	88 e1       	ldi	r24, 0x18	; 24
    3bf4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	aa ef       	ldi	r26, 0xFA	; 250
    3bfe:	b3 e4       	ldi	r27, 0x43	; 67
    3c00:	8b 87       	std	Y+11, r24	; 0x0b
    3c02:	9c 87       	std	Y+12, r25	; 0x0c
    3c04:	ad 87       	std	Y+13, r26	; 0x0d
    3c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a ef       	ldi	r20, 0xFA	; 250
    3c16:	54 e4       	ldi	r21, 0x44	; 68
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	8f 83       	std	Y+7, r24	; 0x07
    3c22:	98 87       	std	Y+8, r25	; 0x08
    3c24:	a9 87       	std	Y+9, r26	; 0x09
    3c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c28:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2a:	78 85       	ldd	r23, Y+8	; 0x08
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c3c:	88 23       	and	r24, r24
    3c3e:	2c f4       	brge	.+10     	; 0x3c4a <LCD_vidDisplayStringLeftShift+0xbe>
		__ticks = 1;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	3f c0       	rjmp	.+126    	; 0x3cc8 <LCD_vidDisplayStringLeftShift+0x13c>
	else if (__tmp > 65535)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	4c f5       	brge	.+82     	; 0x3cb4 <LCD_vidDisplayStringLeftShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e2       	ldi	r20, 0x20	; 32
    3c70:	51 e4       	ldi	r21, 0x41	; 65
    3c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	bc 01       	movw	r22, r24
    3c7c:	cd 01       	movw	r24, r26
    3c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9e 83       	std	Y+6, r25	; 0x06
    3c88:	8d 83       	std	Y+5, r24	; 0x05
    3c8a:	0f c0       	rjmp	.+30     	; 0x3caa <LCD_vidDisplayStringLeftShift+0x11e>
    3c8c:	88 ec       	ldi	r24, 0xC8	; 200
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	9c 81       	ldd	r25, Y+4	; 0x04
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <LCD_vidDisplayStringLeftShift+0x10c>
    3c9c:	9c 83       	std	Y+4, r25	; 0x04
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	69 f7       	brne	.-38     	; 0x3c8c <LCD_vidDisplayStringLeftShift+0x100>
    3cb2:	14 c0       	rjmp	.+40     	; 0x3cdc <LCD_vidDisplayStringLeftShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <LCD_vidDisplayStringLeftShift+0x148>
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cde:	8f 5f       	subi	r24, 0xFF	; 255
    3ce0:	8f 87       	std	Y+15, r24	; 0x0f
    3ce2:	7c cf       	rjmp	.-264    	; 0x3bdc <LCD_vidDisplayStringLeftShift+0x50>

00003ce4 <LCD_vidDisplayStringRightShift>:
	}
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
    3ce4:	df 93       	push	r29
    3ce6:	cf 93       	push	r28
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	62 97       	sbiw	r28, 0x12	; 18
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	9a 8b       	std	Y+18, r25	; 0x12
    3cfa:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t i,y=0;
    3cfc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;string[i]!='\0';i++)
    3cfe:	18 8a       	std	Y+16, r1	; 0x10
    3d00:	0e c0       	rjmp	.+28     	; 0x3d1e <LCD_vidDisplayStringRightShift+0x3a>
		{
			LCD_vidWriteData(string[i]);
    3d02:	88 89       	ldd	r24, Y+16	; 0x10
    3d04:	28 2f       	mov	r18, r24
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	89 89       	ldd	r24, Y+17	; 0x11
    3d0a:	9a 89       	ldd	r25, Y+18	; 0x12
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	e2 0f       	add	r30, r18
    3d10:	f3 1f       	adc	r31, r19
    3d12:	80 81       	ld	r24, Z
    3d14:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LCD_vidWriteData>
}

void LCD_vidDisplayStringRightShift(uint8_t* string)
{
	uint8_t i,y=0;
	for(i=0;string[i]!='\0';i++)
    3d18:	88 89       	ldd	r24, Y+16	; 0x10
    3d1a:	8f 5f       	subi	r24, 0xFF	; 255
    3d1c:	88 8b       	std	Y+16, r24	; 0x10
    3d1e:	88 89       	ldd	r24, Y+16	; 0x10
    3d20:	28 2f       	mov	r18, r24
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	89 89       	ldd	r24, Y+17	; 0x11
    3d26:	9a 89       	ldd	r25, Y+18	; 0x12
    3d28:	fc 01       	movw	r30, r24
    3d2a:	e2 0f       	add	r30, r18
    3d2c:	f3 1f       	adc	r31, r19
    3d2e:	80 81       	ld	r24, Z
    3d30:	88 23       	and	r24, r24
    3d32:	39 f7       	brne	.-50     	; 0x3d02 <LCD_vidDisplayStringRightShift+0x1e>
		{
			LCD_vidWriteData(string[i]);
		}
	while(1)
	{
		if((y%i)-16==0)LCD_vidWriteCmd(0b10000000);
    3d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d36:	98 89       	ldd	r25, Y+16	; 0x10
    3d38:	69 2f       	mov	r22, r25
    3d3a:	0e 94 44 23 	call	0x4688	; 0x4688 <__udivmodqi4>
    3d3e:	89 2f       	mov	r24, r25
    3d40:	80 31       	cpi	r24, 0x10	; 16
    3d42:	19 f4       	brne	.+6      	; 0x3d4a <LCD_vidDisplayStringRightShift+0x66>
    3d44:	80 e8       	ldi	r24, 0x80	; 128
    3d46:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
		LCD_vidWriteCmd(0b00011100);
    3d4a:	8c e1       	ldi	r24, 0x1C	; 28
    3d4c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	aa ef       	ldi	r26, 0xFA	; 250
    3d56:	b3 e4       	ldi	r27, 0x43	; 67
    3d58:	8b 87       	std	Y+11, r24	; 0x0b
    3d5a:	9c 87       	std	Y+12, r25	; 0x0c
    3d5c:	ad 87       	std	Y+13, r26	; 0x0d
    3d5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	4a ef       	ldi	r20, 0xFA	; 250
    3d6e:	54 e4       	ldi	r21, 0x44	; 68
    3d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	8f 83       	std	Y+7, r24	; 0x07
    3d7a:	98 87       	std	Y+8, r25	; 0x08
    3d7c:	a9 87       	std	Y+9, r26	; 0x09
    3d7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d80:	6f 81       	ldd	r22, Y+7	; 0x07
    3d82:	78 85       	ldd	r23, Y+8	; 0x08
    3d84:	89 85       	ldd	r24, Y+9	; 0x09
    3d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	40 e8       	ldi	r20, 0x80	; 128
    3d8e:	5f e3       	ldi	r21, 0x3F	; 63
    3d90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d94:	88 23       	and	r24, r24
    3d96:	2c f4       	brge	.+10     	; 0x3da2 <LCD_vidDisplayStringRightShift+0xbe>
		__ticks = 1;
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	9e 83       	std	Y+6, r25	; 0x06
    3d9e:	8d 83       	std	Y+5, r24	; 0x05
    3da0:	3f c0       	rjmp	.+126    	; 0x3e20 <LCD_vidDisplayStringRightShift+0x13c>
	else if (__tmp > 65535)
    3da2:	6f 81       	ldd	r22, Y+7	; 0x07
    3da4:	78 85       	ldd	r23, Y+8	; 0x08
    3da6:	89 85       	ldd	r24, Y+9	; 0x09
    3da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	3f ef       	ldi	r19, 0xFF	; 255
    3dae:	4f e7       	ldi	r20, 0x7F	; 127
    3db0:	57 e4       	ldi	r21, 0x47	; 71
    3db2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3db6:	18 16       	cp	r1, r24
    3db8:	4c f5       	brge	.+82     	; 0x3e0c <LCD_vidDisplayStringRightShift+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	40 e2       	ldi	r20, 0x20	; 32
    3dc8:	51 e4       	ldi	r21, 0x41	; 65
    3dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	bc 01       	movw	r22, r24
    3dd4:	cd 01       	movw	r24, r26
    3dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
    3de2:	0f c0       	rjmp	.+30     	; 0x3e02 <LCD_vidDisplayStringRightShift+0x11e>
    3de4:	88 ec       	ldi	r24, 0xC8	; 200
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	9c 83       	std	Y+4, r25	; 0x04
    3dea:	8b 83       	std	Y+3, r24	; 0x03
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	9c 81       	ldd	r25, Y+4	; 0x04
    3df0:	01 97       	sbiw	r24, 0x01	; 1
    3df2:	f1 f7       	brne	.-4      	; 0x3df0 <LCD_vidDisplayStringRightShift+0x10c>
    3df4:	9c 83       	std	Y+4, r25	; 0x04
    3df6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	9e 83       	std	Y+6, r25	; 0x06
    3e00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e02:	8d 81       	ldd	r24, Y+5	; 0x05
    3e04:	9e 81       	ldd	r25, Y+6	; 0x06
    3e06:	00 97       	sbiw	r24, 0x00	; 0
    3e08:	69 f7       	brne	.-38     	; 0x3de4 <LCD_vidDisplayStringRightShift+0x100>
    3e0a:	14 c0       	rjmp	.+40     	; 0x3e34 <LCD_vidDisplayStringRightShift+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e0e:	78 85       	ldd	r23, Y+8	; 0x08
    3e10:	89 85       	ldd	r24, Y+9	; 0x09
    3e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	8d 81       	ldd	r24, Y+5	; 0x05
    3e22:	9e 81       	ldd	r25, Y+6	; 0x06
    3e24:	9a 83       	std	Y+2, r25	; 0x02
    3e26:	89 83       	std	Y+1, r24	; 0x01
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e2c:	01 97       	sbiw	r24, 0x01	; 1
    3e2e:	f1 f7       	brne	.-4      	; 0x3e2c <LCD_vidDisplayStringRightShift+0x148>
    3e30:	9a 83       	std	Y+2, r25	; 0x02
    3e32:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		y++;
    3e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e36:	8f 5f       	subi	r24, 0xFF	; 255
    3e38:	8f 87       	std	Y+15, r24	; 0x0f
    3e3a:	7c cf       	rjmp	.-264    	; 0x3d34 <LCD_vidDisplayStringRightShift+0x50>

00003e3c <LCD_vidClearDisplay>:
	}
}

void LCD_vidClearDisplay()
{
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
	LCD_vidWriteCmd(0b00000001);
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
}
    3e4a:	cf 91       	pop	r28
    3e4c:	df 91       	pop	r29
    3e4e:	08 95       	ret

00003e50 <LCD_vidGoTo>:

void LCD_vidGoTo(uint8_t x,uint8_t y)
{
    3e50:	df 93       	push	r29
    3e52:	cf 93       	push	r28
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <LCD_vidGoTo+0x6>
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
    3e5a:	89 83       	std	Y+1, r24	; 0x01
    3e5c:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1&&y<=39)LCD_vidWriteCmd((0b10000000+y));
    3e5e:	89 81       	ldd	r24, Y+1	; 0x01
    3e60:	81 30       	cpi	r24, 0x01	; 1
    3e62:	41 f4       	brne	.+16     	; 0x3e74 <LCD_vidGoTo+0x24>
    3e64:	8a 81       	ldd	r24, Y+2	; 0x02
    3e66:	88 32       	cpi	r24, 0x28	; 40
    3e68:	28 f4       	brcc	.+10     	; 0x3e74 <LCD_vidGoTo+0x24>
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	80 58       	subi	r24, 0x80	; 128
    3e6e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
    3e72:	0f c0       	rjmp	.+30     	; 0x3e92 <LCD_vidGoTo+0x42>
	else if(x==2&&(y+64)<103) LCD_vidWriteCmd((0b11000000+y));
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	82 30       	cpi	r24, 0x02	; 2
    3e78:	61 f4       	brne	.+24     	; 0x3e92 <LCD_vidGoTo+0x42>
    3e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7c:	88 2f       	mov	r24, r24
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	80 5c       	subi	r24, 0xC0	; 192
    3e82:	9f 4f       	sbci	r25, 0xFF	; 255
    3e84:	87 36       	cpi	r24, 0x67	; 103
    3e86:	91 05       	cpc	r25, r1
    3e88:	24 f4       	brge	.+8      	; 0x3e92 <LCD_vidGoTo+0x42>
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	80 54       	subi	r24, 0x40	; 64
    3e8e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
}
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	cf 91       	pop	r28
    3e98:	df 91       	pop	r29
    3e9a:	08 95       	ret

00003e9c <LCD_vidSetCursor>:

void LCD_vidSetCursor(uint8_t x,uint8_t y)
{
    3e9c:	df 93       	push	r29
    3e9e:	cf 93       	push	r28
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <LCD_vidSetCursor+0x6>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	89 83       	std	Y+1, r24	; 0x01
    3ea8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_vidGoTo(x,y);
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	6a 81       	ldd	r22, Y+2	; 0x02
    3eae:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <LCD_vidGoTo>
	LCD_vidWriteCmd(0b00001111);
    3eb2:	8f e0       	ldi	r24, 0x0F	; 15
    3eb4:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
}
    3eb8:	0f 90       	pop	r0
    3eba:	0f 90       	pop	r0
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	08 95       	ret

00003ec2 <LCD_vidWriteInteger>:

void LCD_vidWriteInteger(uint16_ number)
{
    3ec2:	df 93       	push	r29
    3ec4:	cf 93       	push	r28
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62
    3eca:	28 97       	sbiw	r28, 0x08	; 8
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	98 87       	std	Y+8, r25	; 0x08
    3ed8:	8f 83       	std	Y+7, r24	; 0x07
	uint16_ num_mask=number,p=1;
    3eda:	8f 81       	ldd	r24, Y+7	; 0x07
    3edc:	98 85       	ldd	r25, Y+8	; 0x08
    3ede:	9e 83       	std	Y+6, r25	; 0x06
    3ee0:	8d 83       	std	Y+5, r24	; 0x05
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	9c 83       	std	Y+4, r25	; 0x04
    3ee8:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i=0;
    3eea:	1a 82       	std	Y+2, r1	; 0x02
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
    3eec:	8d 81       	ldd	r24, Y+5	; 0x05
    3eee:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	f9 f4       	brne	.+62     	; 0x3f32 <LCD_vidWriteInteger+0x70>
    3ef4:	80 e3       	ldi	r24, 0x30	; 48
    3ef6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LCD_vidWriteData>
    3efa:	1b c0       	rjmp	.+54     	; 0x3f32 <LCD_vidWriteInteger+0x70>
	for(;num_mask!=0;i++)
	{
		num_mask/=10;
    3efc:	8d 81       	ldd	r24, Y+5	; 0x05
    3efe:	9e 81       	ldd	r25, Y+6	; 0x06
    3f00:	2a e0       	ldi	r18, 0x0A	; 10
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	b9 01       	movw	r22, r18
    3f06:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	9e 83       	std	Y+6, r25	; 0x06
    3f0e:	8d 83       	std	Y+5, r24	; 0x05
		p*=10;
    3f10:	8b 81       	ldd	r24, Y+3	; 0x03
    3f12:	9c 81       	ldd	r25, Y+4	; 0x04
    3f14:	9c 01       	movw	r18, r24
    3f16:	22 0f       	add	r18, r18
    3f18:	33 1f       	adc	r19, r19
    3f1a:	c9 01       	movw	r24, r18
    3f1c:	88 0f       	add	r24, r24
    3f1e:	99 1f       	adc	r25, r25
    3f20:	88 0f       	add	r24, r24
    3f22:	99 1f       	adc	r25, r25
    3f24:	82 0f       	add	r24, r18
    3f26:	93 1f       	adc	r25, r19
    3f28:	9c 83       	std	Y+4, r25	; 0x04
    3f2a:	8b 83       	std	Y+3, r24	; 0x03
{
	uint16_ num_mask=number,p=1;
	uint8_t i=0;
	sint8_t nxtl;
	if(num_mask==0)LCD_vidWriteData('0');
	for(;num_mask!=0;i++)
    3f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2e:	8f 5f       	subi	r24, 0xFF	; 255
    3f30:	8a 83       	std	Y+2, r24	; 0x02
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	9e 81       	ldd	r25, Y+6	; 0x06
    3f36:	00 97       	sbiw	r24, 0x00	; 0
    3f38:	09 f7       	brne	.-62     	; 0x3efc <LCD_vidWriteInteger+0x3a>
	{
		num_mask/=10;
		p*=10;
	}

	p/=10;
    3f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3e:	2a e0       	ldi	r18, 0x0A	; 10
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	b9 01       	movw	r22, r18
    3f44:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    3f48:	cb 01       	movw	r24, r22
    3f4a:	9c 83       	std	Y+4, r25	; 0x04
    3f4c:	8b 83       	std	Y+3, r24	; 0x03
	nxtl = i - 16;
    3f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f50:	80 51       	subi	r24, 0x10	; 16
    3f52:	89 83       	std	Y+1, r24	; 0x01
	if(nxtl < 0) nxtl =0;
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	88 23       	and	r24, r24
    3f58:	0c f0       	brlt	.+2      	; 0x3f5c <LCD_vidWriteInteger+0x9a>
    3f5a:	3e c0       	rjmp	.+124    	; 0x3fd8 <LCD_vidWriteInteger+0x116>
    3f5c:	19 82       	std	Y+1, r1	; 0x01
    3f5e:	3c c0       	rjmp	.+120    	; 0x3fd8 <LCD_vidWriteInteger+0x116>
	for(;i>0;i--)
	{
		if(i==nxtl)LCD_vidWriteCmd(0b11000000);
    3f60:	8a 81       	ldd	r24, Y+2	; 0x02
    3f62:	28 2f       	mov	r18, r24
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	99 27       	eor	r25, r25
    3f6a:	87 fd       	sbrc	r24, 7
    3f6c:	90 95       	com	r25
    3f6e:	28 17       	cp	r18, r24
    3f70:	39 07       	cpc	r19, r25
    3f72:	19 f4       	brne	.+6      	; 0x3f7a <LCD_vidWriteInteger+0xb8>
    3f74:	80 ec       	ldi	r24, 0xC0	; 192
    3f76:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <LCD_vidWriteCmd>
		num_mask= (uint8_t)(number/p);
    3f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f7c:	98 85       	ldd	r25, Y+8	; 0x08
    3f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3f80:	3c 81       	ldd	r19, Y+4	; 0x04
    3f82:	b9 01       	movw	r22, r18
    3f84:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    3f88:	cb 01       	movw	r24, r22
    3f8a:	88 2f       	mov	r24, r24
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	9e 83       	std	Y+6, r25	; 0x06
    3f90:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData((uint8_t)'0'+num_mask);
    3f92:	8d 81       	ldd	r24, Y+5	; 0x05
    3f94:	80 5d       	subi	r24, 0xD0	; 208
    3f96:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LCD_vidWriteData>
		number -= num_mask*p;
    3f9a:	2d 81       	ldd	r18, Y+5	; 0x05
    3f9c:	3e 81       	ldd	r19, Y+6	; 0x06
    3f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa2:	a9 01       	movw	r20, r18
    3fa4:	48 9f       	mul	r20, r24
    3fa6:	90 01       	movw	r18, r0
    3fa8:	49 9f       	mul	r20, r25
    3faa:	30 0d       	add	r19, r0
    3fac:	58 9f       	mul	r21, r24
    3fae:	30 0d       	add	r19, r0
    3fb0:	11 24       	eor	r1, r1
    3fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fb4:	98 85       	ldd	r25, Y+8	; 0x08
    3fb6:	82 1b       	sub	r24, r18
    3fb8:	93 0b       	sbc	r25, r19
    3fba:	98 87       	std	Y+8, r25	; 0x08
    3fbc:	8f 83       	std	Y+7, r24	; 0x07
		p/=10;
    3fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc2:	2a e0       	ldi	r18, 0x0A	; 10
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	b9 01       	movw	r22, r18
    3fc8:	0e 94 50 23 	call	0x46a0	; 0x46a0 <__udivmodhi4>
    3fcc:	cb 01       	movw	r24, r22
    3fce:	9c 83       	std	Y+4, r25	; 0x04
    3fd0:	8b 83       	std	Y+3, r24	; 0x03
	}

	p/=10;
	nxtl = i - 16;
	if(nxtl < 0) nxtl =0;
	for(;i>0;i--)
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	81 50       	subi	r24, 0x01	; 1
    3fd6:	8a 83       	std	Y+2, r24	; 0x02
    3fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fda:	88 23       	and	r24, r24
    3fdc:	09 f6       	brne	.-126    	; 0x3f60 <LCD_vidWriteInteger+0x9e>
		num_mask= (uint8_t)(number/p);
		LCD_vidWriteData((uint8_t)'0'+num_mask);
		number -= num_mask*p;
		p/=10;
	}
}
    3fde:	28 96       	adiw	r28, 0x08	; 8
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	f8 94       	cli
    3fe4:	de bf       	out	0x3e, r29	; 62
    3fe6:	0f be       	out	0x3f, r0	; 63
    3fe8:	cd bf       	out	0x3d, r28	; 61
    3fea:	cf 91       	pop	r28
    3fec:	df 91       	pop	r29
    3fee:	08 95       	ret

00003ff0 <FLEX_vidFlexInit>:
#include"../../mcal/adc_driver/adc_int.h"
#include"flex_sensor_int.h"


void FLEX_vidFlexInit(uint8_t sensor_pin)
{
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	0f 92       	push	r0
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	89 83       	std	Y+1, r24	; 0x01

	ADC_vidAdcInit(AREF_VOLTAGE);
    3ffc:	82 e0       	ldi	r24, 0x02	; 2
    3ffe:	0e 94 3f 10 	call	0x207e	; 0x207e <ADC_vidAdcInit>
	ADC_vidAdcPinInit(sensor_pin);
    4002:	89 81       	ldd	r24, Y+1	; 0x01
    4004:	0e 94 c0 10 	call	0x2180	; 0x2180 <ADC_vidAdcPinInit>

}
    4008:	0f 90       	pop	r0
    400a:	cf 91       	pop	r28
    400c:	df 91       	pop	r29
    400e:	08 95       	ret

00004010 <FLEX_vidGetFlexRead>:

void FLEX_vidGetFlexRead(uint16_* sensor_read, uint8_t sensor_pin)
{
    4010:	df 93       	push	r29
    4012:	cf 93       	push	r28
    4014:	00 d0       	rcall	.+0      	; 0x4016 <FLEX_vidGetFlexRead+0x6>
    4016:	0f 92       	push	r0
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	9a 83       	std	Y+2, r25	; 0x02
    401e:	89 83       	std	Y+1, r24	; 0x01
    4020:	6b 83       	std	Y+3, r22	; 0x03
	ADC_vidSetReadingVariable(sensor_read);
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	9a 81       	ldd	r25, Y+2	; 0x02
    4026:	0e 94 48 11 	call	0x2290	; 0x2290 <ADC_vidSetReadingVariable>
	ADC_vidAdcGetRead(sensor_pin);
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	0e 94 08 11 	call	0x2210	; 0x2210 <ADC_vidAdcGetRead>
}
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <FLEX_vidSetCallBack>:

void FLEX_vidSetCallBack(void (*func)(void))
{
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	00 d0       	rcall	.+0      	; 0x4042 <FLEX_vidSetCallBack+0x6>
    4042:	cd b7       	in	r28, 0x3d	; 61
    4044:	de b7       	in	r29, 0x3e	; 62
    4046:	9a 83       	std	Y+2, r25	; 0x02
    4048:	89 83       	std	Y+1, r24	; 0x01
	ADC_vidSetCallBack(func);
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <ADC_vidSetCallBack>
}
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	cf 91       	pop	r28
    4058:	df 91       	pop	r29
    405a:	08 95       	ret

0000405c <M16P_vidInit>:

static uint8_t send_buf[SERIAL_BUFF_SIZE] = {0x7E, 0xFF, 06, 00, 00, 00, 00, 00, 00, 0xEF};
static uint8_t recv_buf[SERIAL_BUFF_SIZE];
static uint8_t is_reply = 0;

void M16P_vidInit(uint16_ baud) {
    405c:	df 93       	push	r29
    405e:	cf 93       	push	r28
    4060:	00 d0       	rcall	.+0      	; 0x4062 <M16P_vidInit+0x6>
    4062:	cd b7       	in	r28, 0x3d	; 61
    4064:	de b7       	in	r29, 0x3e	; 62
    4066:	9a 83       	std	Y+2, r25	; 0x02
    4068:	89 83       	std	Y+1, r24	; 0x01
    is_reply = 0;
    406a:	10 92 26 04 	sts	0x0426, r1
    UART_Init(baud);
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	9a 81       	ldd	r25, Y+2	; 0x02
    4072:	0e 94 16 13 	call	0x262c	; 0x262c <UART_Init>
}
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <M16P_vidSetReply>:

void M16P_vidSetReply(uint8_t state) {
    4080:	df 93       	push	r29
    4082:	cf 93       	push	r28
    4084:	0f 92       	push	r0
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	89 83       	std	Y+1, r24	; 0x01
    is_reply = state;
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	80 93 26 04 	sts	0x0426, r24
    send_buf[4] = is_reply;
    4092:	80 91 26 04 	lds	r24, 0x0426
    4096:	80 93 06 04 	sts	0x0406, r24
}
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <M16P_vidFillBufUint16>:

static void M16P_vidFillBufUint16(uint8_t *thebuf, uint16_ data) {
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	00 d0       	rcall	.+0      	; 0x40a8 <M16P_vidFillBufUint16+0x6>
    40a8:	00 d0       	rcall	.+0      	; 0x40aa <M16P_vidFillBufUint16+0x8>
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
    40ae:	9a 83       	std	Y+2, r25	; 0x02
    40b0:	89 83       	std	Y+1, r24	; 0x01
    40b2:	7c 83       	std	Y+4, r23	; 0x04
    40b4:	6b 83       	std	Y+3, r22	; 0x03
    *thebuf = (uint8_t)(data >> 8);
    40b6:	8b 81       	ldd	r24, Y+3	; 0x03
    40b8:	9c 81       	ldd	r25, Y+4	; 0x04
    40ba:	89 2f       	mov	r24, r25
    40bc:	99 27       	eor	r25, r25
    40be:	e9 81       	ldd	r30, Y+1	; 0x01
    40c0:	fa 81       	ldd	r31, Y+2	; 0x02
    40c2:	80 83       	st	Z, r24
    *(thebuf + 1) = (uint8_t)data;
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	9a 81       	ldd	r25, Y+2	; 0x02
    40c8:	fc 01       	movw	r30, r24
    40ca:	31 96       	adiw	r30, 0x01	; 1
    40cc:	8b 81       	ldd	r24, Y+3	; 0x03
    40ce:	80 83       	st	Z, r24
}
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	cf 91       	pop	r28
    40da:	df 91       	pop	r29
    40dc:	08 95       	ret

000040de <M16P_Uu16GetCheckSum>:

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    40de:	df 93       	push	r29
    40e0:	cf 93       	push	r28
    40e2:	00 d0       	rcall	.+0      	; 0x40e4 <M16P_Uu16GetCheckSum+0x6>
    40e4:	00 d0       	rcall	.+0      	; 0x40e6 <M16P_Uu16GetCheckSum+0x8>
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <M16P_Uu16GetCheckSum+0xa>
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
    40ec:	9e 83       	std	Y+6, r25	; 0x06
    40ee:	8d 83       	std	Y+5, r24	; 0x05
    uint16_ sum = 0;
    40f0:	1c 82       	std	Y+4, r1	; 0x04
    40f2:	1b 82       	std	Y+3, r1	; 0x03
    for (int i = 1; i < 7; i++) {
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	9a 83       	std	Y+2, r25	; 0x02
    40fa:	89 83       	std	Y+1, r24	; 0x01
    40fc:	15 c0       	rjmp	.+42     	; 0x4128 <M16P_Uu16GetCheckSum+0x4a>
        sum += thebuf[i];
    40fe:	29 81       	ldd	r18, Y+1	; 0x01
    4100:	3a 81       	ldd	r19, Y+2	; 0x02
    4102:	8d 81       	ldd	r24, Y+5	; 0x05
    4104:	9e 81       	ldd	r25, Y+6	; 0x06
    4106:	fc 01       	movw	r30, r24
    4108:	e2 0f       	add	r30, r18
    410a:	f3 1f       	adc	r31, r19
    410c:	80 81       	ld	r24, Z
    410e:	28 2f       	mov	r18, r24
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	8b 81       	ldd	r24, Y+3	; 0x03
    4114:	9c 81       	ldd	r25, Y+4	; 0x04
    4116:	82 0f       	add	r24, r18
    4118:	93 1f       	adc	r25, r19
    411a:	9c 83       	std	Y+4, r25	; 0x04
    411c:	8b 83       	std	Y+3, r24	; 0x03
    *(thebuf + 1) = (uint8_t)data;
}

static uint16_ M16P_Uu16GetCheckSum(uint8_t *thebuf) {
    uint16_ sum = 0;
    for (int i = 1; i < 7; i++) {
    411e:	89 81       	ldd	r24, Y+1	; 0x01
    4120:	9a 81       	ldd	r25, Y+2	; 0x02
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	9a 83       	std	Y+2, r25	; 0x02
    4126:	89 83       	std	Y+1, r24	; 0x01
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	9a 81       	ldd	r25, Y+2	; 0x02
    412c:	87 30       	cpi	r24, 0x07	; 7
    412e:	91 05       	cpc	r25, r1
    4130:	34 f3       	brlt	.-52     	; 0x40fe <M16P_Uu16GetCheckSum+0x20>
        sum += thebuf[i];
    }
    return -sum;
    4132:	8b 81       	ldd	r24, Y+3	; 0x03
    4134:	9c 81       	ldd	r25, Y+4	; 0x04
    4136:	90 95       	com	r25
    4138:	81 95       	neg	r24
    413a:	9f 4f       	sbci	r25, 0xFF	; 255
}
    413c:	26 96       	adiw	r28, 0x06	; 6
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <M16P_vidFillCheckSum>:

static void M16P_vidFillCheckSum() {
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	00 d0       	rcall	.+0      	; 0x4154 <M16P_vidFillCheckSum+0x6>
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	94 e0       	ldi	r25, 0x04	; 4
    415c:	0e 94 6f 20 	call	0x40de	; 0x40de <M16P_Uu16GetCheckSum>
    4160:	9a 83       	std	Y+2, r25	; 0x02
    4162:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidFillBufUint16(send_buf + 7, checksum);
    4164:	89 e0       	ldi	r24, 0x09	; 9
    4166:	94 e0       	ldi	r25, 0x04	; 4
    4168:	29 81       	ldd	r18, Y+1	; 0x01
    416a:	3a 81       	ldd	r19, Y+2	; 0x02
    416c:	b9 01       	movw	r22, r18
    416e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <M16P_vidFillBufUint16>
}
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	cf 91       	pop	r28
    4178:	df 91       	pop	r29
    417a:	08 95       	ret

0000417c <M16P_vidSendFunc>:

static void M16P_vidSendFunc() {
    417c:	df 93       	push	r29
    417e:	cf 93       	push	r28
    4180:	00 d0       	rcall	.+0      	; 0x4182 <M16P_vidSendFunc+0x6>
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    4186:	1a 82       	std	Y+2, r1	; 0x02
    4188:	19 82       	std	Y+1, r1	; 0x01
    418a:	0d c0       	rjmp	.+26     	; 0x41a6 <M16P_vidSendFunc+0x2a>
        UART_Transmit(send_buf[i]);
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	9a 81       	ldd	r25, Y+2	; 0x02
    4190:	fc 01       	movw	r30, r24
    4192:	ee 5f       	subi	r30, 0xFE	; 254
    4194:	fb 4f       	sbci	r31, 0xFB	; 251
    4196:	80 81       	ld	r24, Z
    4198:	0e 94 54 13 	call	0x26a8	; 0x26a8 <UART_Transmit>
    uint16_ checksum = M16P_Uu16GetCheckSum(send_buf);
    M16P_vidFillBufUint16(send_buf + 7, checksum);
}

static void M16P_vidSendFunc() {
    for (int i = 0; i < SERIAL_BUFF_SIZE; i++) {
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	01 96       	adiw	r24, 0x01	; 1
    41a2:	9a 83       	std	Y+2, r25	; 0x02
    41a4:	89 83       	std	Y+1, r24	; 0x01
    41a6:	89 81       	ldd	r24, Y+1	; 0x01
    41a8:	9a 81       	ldd	r25, Y+2	; 0x02
    41aa:	8a 30       	cpi	r24, 0x0A	; 10
    41ac:	91 05       	cpc	r25, r1
    41ae:	74 f3       	brlt	.-36     	; 0x418c <M16P_vidSendFunc+0x10>
        UART_Transmit(send_buf[i]);
    }
}
    41b0:	0f 90       	pop	r0
    41b2:	0f 90       	pop	r0
    41b4:	cf 91       	pop	r28
    41b6:	df 91       	pop	r29
    41b8:	08 95       	ret

000041ba <M16P_vidSendCmd>:

static void M16P_vidSendCmd(uint8_t cmd, uint16_ arg1, uint16_ arg2) {
    41ba:	df 93       	push	r29
    41bc:	cf 93       	push	r28
    41be:	00 d0       	rcall	.+0      	; 0x41c0 <M16P_vidSendCmd+0x6>
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <M16P_vidSendCmd+0x8>
    41c2:	0f 92       	push	r0
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	89 83       	std	Y+1, r24	; 0x01
    41ca:	7b 83       	std	Y+3, r23	; 0x03
    41cc:	6a 83       	std	Y+2, r22	; 0x02
    41ce:	5d 83       	std	Y+5, r21	; 0x05
    41d0:	4c 83       	std	Y+4, r20	; 0x04
    send_buf[3] = cmd;
    41d2:	89 81       	ldd	r24, Y+1	; 0x01
    41d4:	80 93 05 04 	sts	0x0405, r24
    send_buf[5] = arg1;
    41d8:	8a 81       	ldd	r24, Y+2	; 0x02
    41da:	80 93 07 04 	sts	0x0407, r24
    send_buf[6] = arg2;
    41de:	8c 81       	ldd	r24, Y+4	; 0x04
    41e0:	80 93 08 04 	sts	0x0408, r24
    M16P_vidFillCheckSum();
    41e4:	0e 94 a7 20 	call	0x414e	; 0x414e <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    41e8:	0e 94 be 20 	call	0x417c	; 0x417c <M16P_vidSendFunc>
}
    41ec:	0f 90       	pop	r0
    41ee:	0f 90       	pop	r0
    41f0:	0f 90       	pop	r0
    41f2:	0f 90       	pop	r0
    41f4:	0f 90       	pop	r0
    41f6:	cf 91       	pop	r28
    41f8:	df 91       	pop	r29
    41fa:	08 95       	ret

000041fc <M16P_vidSendCmdSingleArg>:

static void M16P_vidSendCmdSingleArg(uint8_t cmd, uint16_ arg) {
    41fc:	df 93       	push	r29
    41fe:	cf 93       	push	r28
    4200:	00 d0       	rcall	.+0      	; 0x4202 <M16P_vidSendCmdSingleArg+0x6>
    4202:	0f 92       	push	r0
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	89 83       	std	Y+1, r24	; 0x01
    420a:	7b 83       	std	Y+3, r23	; 0x03
    420c:	6a 83       	std	Y+2, r22	; 0x02
    send_buf[3] = cmd;
    420e:	89 81       	ldd	r24, Y+1	; 0x01
    4210:	80 93 05 04 	sts	0x0405, r24
    M16P_vidFillBufUint16((send_buf + 5), arg);
    4214:	87 e0       	ldi	r24, 0x07	; 7
    4216:	94 e0       	ldi	r25, 0x04	; 4
    4218:	2a 81       	ldd	r18, Y+2	; 0x02
    421a:	3b 81       	ldd	r19, Y+3	; 0x03
    421c:	b9 01       	movw	r22, r18
    421e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    4222:	0e 94 a7 20 	call	0x414e	; 0x414e <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4226:	0e 94 be 20 	call	0x417c	; 0x417c <M16P_vidSendFunc>
}
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	cf 91       	pop	r28
    4232:	df 91       	pop	r29
    4234:	08 95       	ret

00004236 <M16P_vidSendCmdNoArg>:

static void M16P_vidSendCmdNoArg(uint8_t cmd) {
    4236:	df 93       	push	r29
    4238:	cf 93       	push	r28
    423a:	0f 92       	push	r0
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	89 83       	std	Y+1, r24	; 0x01
    send_buf[3] = cmd;
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	80 93 05 04 	sts	0x0405, r24
    M16P_vidFillBufUint16((send_buf + 5), 0);
    4248:	87 e0       	ldi	r24, 0x07	; 7
    424a:	94 e0       	ldi	r25, 0x04	; 4
    424c:	60 e0       	ldi	r22, 0x00	; 0
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	0e 94 51 20 	call	0x40a2	; 0x40a2 <M16P_vidFillBufUint16>
    M16P_vidFillCheckSum();
    4254:	0e 94 a7 20 	call	0x414e	; 0x414e <M16P_vidFillCheckSum>
    M16P_vidSendFunc();
    4258:	0e 94 be 20 	call	0x417c	; 0x417c <M16P_vidSendFunc>
}
    425c:	0f 90       	pop	r0
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <M16P_vidPlayTrack>:

void M16P_vidPlayTrack(uint16_ num) {
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	00 d0       	rcall	.+0      	; 0x426a <M16P_vidPlayTrack+0x6>
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	9a 83       	std	Y+2, r25	; 0x02
    4270:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x03, num);
    4272:	29 81       	ldd	r18, Y+1	; 0x01
    4274:	3a 81       	ldd	r19, Y+2	; 0x02
    4276:	83 e0       	ldi	r24, 0x03	; 3
    4278:	b9 01       	movw	r22, r18
    427a:	0e 94 fe 20 	call	0x41fc	; 0x41fc <M16P_vidSendCmdSingleArg>
}
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	cf 91       	pop	r28
    4284:	df 91       	pop	r29
    4286:	08 95       	ret

00004288 <M16P_vidNextTrack>:

void M16P_vidNextTrack() {
    4288:	df 93       	push	r29
    428a:	cf 93       	push	r28
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x01);
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    4296:	cf 91       	pop	r28
    4298:	df 91       	pop	r29
    429a:	08 95       	ret

0000429c <M16P_vidPreviousTrack>:

void M16P_vidPreviousTrack() {
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x02);
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <M16P_vidSetVolume>:

void M16P_vidSetVolume(uint16_ volume) {
    42b0:	df 93       	push	r29
    42b2:	cf 93       	push	r28
    42b4:	00 d0       	rcall	.+0      	; 0x42b6 <M16P_vidSetVolume+0x6>
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	9a 83       	std	Y+2, r25	; 0x02
    42bc:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x06, volume);
    42be:	29 81       	ldd	r18, Y+1	; 0x01
    42c0:	3a 81       	ldd	r19, Y+2	; 0x02
    42c2:	86 e0       	ldi	r24, 0x06	; 6
    42c4:	b9 01       	movw	r22, r18
    42c6:	0e 94 fe 20 	call	0x41fc	; 0x41fc <M16P_vidSendCmdSingleArg>
}
    42ca:	0f 90       	pop	r0
    42cc:	0f 90       	pop	r0
    42ce:	cf 91       	pop	r28
    42d0:	df 91       	pop	r29
    42d2:	08 95       	ret

000042d4 <M16P_vidSetEQ>:

void M16P_vidSetEQ(uint16_ eq) {
    42d4:	df 93       	push	r29
    42d6:	cf 93       	push	r28
    42d8:	00 d0       	rcall	.+0      	; 0x42da <M16P_vidSetEQ+0x6>
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x07, eq);
    42e2:	29 81       	ldd	r18, Y+1	; 0x01
    42e4:	3a 81       	ldd	r19, Y+2	; 0x02
    42e6:	87 e0       	ldi	r24, 0x07	; 7
    42e8:	b9 01       	movw	r22, r18
    42ea:	0e 94 fe 20 	call	0x41fc	; 0x41fc <M16P_vidSendCmdSingleArg>
}
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	cf 91       	pop	r28
    42f4:	df 91       	pop	r29
    42f6:	08 95       	ret

000042f8 <M16P_vidSetPlaybackSource>:

void M16P_vidSetPlaybackSource(uint16_ device) {
    42f8:	df 93       	push	r29
    42fa:	cf 93       	push	r28
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <M16P_vidSetPlaybackSource+0x6>
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    4302:	9a 83       	std	Y+2, r25	; 0x02
    4304:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x09, device);
    4306:	29 81       	ldd	r18, Y+1	; 0x01
    4308:	3a 81       	ldd	r19, Y+2	; 0x02
    430a:	89 e0       	ldi	r24, 0x09	; 9
    430c:	b9 01       	movw	r22, r18
    430e:	0e 94 fe 20 	call	0x41fc	; 0x41fc <M16P_vidSendCmdSingleArg>
}
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	cf 91       	pop	r28
    4318:	df 91       	pop	r29
    431a:	08 95       	ret

0000431c <M16P_vidSleep>:

void M16P_vidSleep() {
    431c:	df 93       	push	r29
    431e:	cf 93       	push	r28
    4320:	cd b7       	in	r28, 0x3d	; 61
    4322:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0a);
    4324:	8a e0       	ldi	r24, 0x0A	; 10
    4326:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    432a:	cf 91       	pop	r28
    432c:	df 91       	pop	r29
    432e:	08 95       	ret

00004330 <M16P_vidReset>:

void M16P_vidReset() {
    4330:	df 93       	push	r29
    4332:	cf 93       	push	r28
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0c);
    4338:	8c e0       	ldi	r24, 0x0C	; 12
    433a:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    433e:	cf 91       	pop	r28
    4340:	df 91       	pop	r29
    4342:	08 95       	ret

00004344 <M16P_vidPlayback>:

void M16P_vidPlayback() {
    4344:	df 93       	push	r29
    4346:	cf 93       	push	r28
    4348:	cd b7       	in	r28, 0x3d	; 61
    434a:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0d);
    434c:	8d e0       	ldi	r24, 0x0D	; 13
    434e:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    4352:	cf 91       	pop	r28
    4354:	df 91       	pop	r29
    4356:	08 95       	ret

00004358 <M16P_vidPause>:

void M16P_vidPause() {
    4358:	df 93       	push	r29
    435a:	cf 93       	push	r28
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x0e);
    4360:	8e e0       	ldi	r24, 0x0E	; 14
    4362:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    4366:	cf 91       	pop	r28
    4368:	df 91       	pop	r29
    436a:	08 95       	ret

0000436c <M16P_vidPlayFileInFolder>:

void M16P_vidPlayFileInFolder(uint16_ folder, uint16_ file) {
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	00 d0       	rcall	.+0      	; 0x4372 <M16P_vidPlayFileInFolder+0x6>
    4372:	00 d0       	rcall	.+0      	; 0x4374 <M16P_vidPlayFileInFolder+0x8>
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62
    4378:	9a 83       	std	Y+2, r25	; 0x02
    437a:	89 83       	std	Y+1, r24	; 0x01
    437c:	7c 83       	std	Y+4, r23	; 0x04
    437e:	6b 83       	std	Y+3, r22	; 0x03
    M16P_vidSendCmd(0x0f, folder, file);
    4380:	29 81       	ldd	r18, Y+1	; 0x01
    4382:	3a 81       	ldd	r19, Y+2	; 0x02
    4384:	4b 81       	ldd	r20, Y+3	; 0x03
    4386:	5c 81       	ldd	r21, Y+4	; 0x04
    4388:	8f e0       	ldi	r24, 0x0F	; 15
    438a:	b9 01       	movw	r22, r18
    438c:	0e 94 dd 20 	call	0x41ba	; 0x41ba <M16P_vidSendCmd>
}
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	cf 91       	pop	r28
    439a:	df 91       	pop	r29
    439c:	08 95       	ret

0000439e <M16P_vidPlayByNumber>:

void M16P_vidPlayByNumber(uint16_ num) {
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	00 d0       	rcall	.+0      	; 0x43a4 <M16P_vidPlayByNumber+0x6>
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
    43a8:	9a 83       	std	Y+2, r25	; 0x02
    43aa:	89 83       	std	Y+1, r24	; 0x01
    M16P_vidSendCmdSingleArg(0x12, num);
    43ac:	29 81       	ldd	r18, Y+1	; 0x01
    43ae:	3a 81       	ldd	r19, Y+2	; 0x02
    43b0:	82 e1       	ldi	r24, 0x12	; 18
    43b2:	b9 01       	movw	r22, r18
    43b4:	0e 94 fe 20 	call	0x41fc	; 0x41fc <M16P_vidSendCmdSingleArg>
}
    43b8:	0f 90       	pop	r0
    43ba:	0f 90       	pop	r0
    43bc:	cf 91       	pop	r28
    43be:	df 91       	pop	r29
    43c0:	08 95       	ret

000043c2 <M16P_vidGetState>:

/*---------------------------------------------------------------------------*/



void M16P_vidGetState() {
    43c2:	df 93       	push	r29
    43c4:	cf 93       	push	r28
    43c6:	cd b7       	in	r28, 0x3d	; 61
    43c8:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x42);
    43ca:	82 e4       	ldi	r24, 0x42	; 66
    43cc:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <M16P_vidGetVolume>:

void M16P_vidGetVolume() {
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x43);
    43de:	83 e4       	ldi	r24, 0x43	; 67
    43e0:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <M16P_vidGetUSum>:

void M16P_vidGetUSum() {
    43ea:	df 93       	push	r29
    43ec:	cf 93       	push	r28
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x47);
    43f2:	87 e4       	ldi	r24, 0x47	; 71
    43f4:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <M16P_vidGetTFSum>:

void M16P_vidGetTFSum() {
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x48);
    4406:	88 e4       	ldi	r24, 0x48	; 72
    4408:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <M16P_vidGetFlashSum>:

void M16P_vidGetFlashSum() {
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	cd b7       	in	r28, 0x3d	; 61
    4418:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x49);
    441a:	89 e4       	ldi	r24, 0x49	; 73
    441c:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    4420:	cf 91       	pop	r28
    4422:	df 91       	pop	r29
    4424:	08 95       	ret

00004426 <M16P_vidGetTFCurrent>:

void M16P_vidGetTFCurrent() {
    4426:	df 93       	push	r29
    4428:	cf 93       	push	r28
    442a:	cd b7       	in	r28, 0x3d	; 61
    442c:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4c);
    442e:	8c e4       	ldi	r24, 0x4C	; 76
    4430:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <M16P_vidGetUCurrent>:

void M16P_vidGetUCurrent() {
    443a:	df 93       	push	r29
    443c:	cf 93       	push	r28
    443e:	cd b7       	in	r28, 0x3d	; 61
    4440:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4b);
    4442:	8b e4       	ldi	r24, 0x4B	; 75
    4444:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	08 95       	ret

0000444e <M16P_vidGetFlashCurrent>:

void M16P_vidGetFlashCurrent() {
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    M16P_vidSendCmdNoArg(0x4d);
    4456:	8d e4       	ldi	r24, 0x4D	; 77
    4458:	0e 94 1b 21 	call	0x4236	; 0x4236 <M16P_vidSendCmdNoArg>
}
    445c:	cf 91       	pop	r28
    445e:	df 91       	pop	r29
    4460:	08 95       	ret

00004462 <M16P_u8GetDataBuffer>:

uint8_t M16P_u8GetDataBuffer() {
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	df 93       	push	r29
    4468:	cf 93       	push	r28
    446a:	00 d0       	rcall	.+0      	; 0x446c <M16P_u8GetDataBuffer+0xa>
    446c:	0f 92       	push	r0
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    if (UART_Receive() != 0x7E) {
    4472:	0e 94 6e 13 	call	0x26dc	; 0x26dc <UART_Receive>
    4476:	8e 37       	cpi	r24, 0x7E	; 126
    4478:	11 f0       	breq	.+4      	; 0x447e <M16P_u8GetDataBuffer+0x1c>
        return 0;
    447a:	1b 82       	std	Y+3, r1	; 0x03
    447c:	1c c0       	rjmp	.+56     	; 0x44b6 <M16P_u8GetDataBuffer+0x54>
    }else{
    	recv_buf[0] = 0x7E;
    447e:	8e e7       	ldi	r24, 0x7E	; 126
    4480:	80 93 27 04 	sts	0x0427, r24
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	9a 83       	std	Y+2, r25	; 0x02
    448a:	89 83       	std	Y+1, r24	; 0x01
    448c:	0d c0       	rjmp	.+26     	; 0x44a8 <M16P_u8GetDataBuffer+0x46>
    		recv_buf[i] = UART_Receive();
    448e:	09 81       	ldd	r16, Y+1	; 0x01
    4490:	1a 81       	ldd	r17, Y+2	; 0x02
    4492:	0e 94 6e 13 	call	0x26dc	; 0x26dc <UART_Receive>
    4496:	f8 01       	movw	r30, r16
    4498:	e9 5d       	subi	r30, 0xD9	; 217
    449a:	fb 4f       	sbci	r31, 0xFB	; 251
    449c:	80 83       	st	Z, r24
uint8_t M16P_u8GetDataBuffer() {
    if (UART_Receive() != 0x7E) {
        return 0;
    }else{
    	recv_buf[0] = 0x7E;
    	for (int i = 1; i < SERIAL_BUFF_SIZE; i++) {
    449e:	89 81       	ldd	r24, Y+1	; 0x01
    44a0:	9a 81       	ldd	r25, Y+2	; 0x02
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	9a 83       	std	Y+2, r25	; 0x02
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	9a 81       	ldd	r25, Y+2	; 0x02
    44ac:	8a 30       	cpi	r24, 0x0A	; 10
    44ae:	91 05       	cpc	r25, r1
    44b0:	74 f3       	brlt	.-36     	; 0x448e <M16P_u8GetDataBuffer+0x2c>
    		recv_buf[i] = UART_Receive();
    	}
    	return 1;
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	8b 83       	std	Y+3, r24	; 0x03
    44b6:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	08 95       	ret

000044c8 <main>:

extern uint16_ compare_cnt1;
void get_word();

int main()
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	00 d0       	rcall	.+0      	; 0x44ce <main+0x6>
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_vidGlobalInterruptEnable(ENABLED);
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GLOBAL_INTERRUPT_vidGlobalInterruptEnable>
	uint8_t compare_value;
	GLOVE_vidSensorsInit();
    44d8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GLOVE_vidSensorsInit>
	SHOW_vidShowAndPlayInit(&ready_flag);
    44dc:	81 e3       	ldi	r24, 0x31	; 49
    44de:	94 e0       	ldi	r25, 0x04	; 4
    44e0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SHOW_vidShowAndPlayInit>
	GLOVE_vidSetGloveParams(&sensor_reads[0],7);
    44e4:	85 e5       	ldi	r24, 0x55	; 85
    44e6:	94 e0       	ldi	r25, 0x04	; 4
    44e8:	67 e0       	ldi	r22, 0x07	; 7
    44ea:	0e 94 80 08 	call	0x1100	; 0x1100 <GLOVE_vidSetGloveParams>
	TIMER1_voidInit();
    44ee:	0e 94 7d 13 	call	0x26fa	; 0x26fa <TIMER1_voidInit>
	TIMER1_voidGetNumCountCTC(1000, &compare_cnt1, &compare_value);
    44f2:	23 e5       	ldi	r18, 0x53	; 83
    44f4:	34 e0       	ldi	r19, 0x04	; 4
    44f6:	ae 01       	movw	r20, r28
    44f8:	4e 5f       	subi	r20, 0xFE	; 254
    44fa:	5f 4f       	sbci	r21, 0xFF	; 255
    44fc:	88 ee       	ldi	r24, 0xE8	; 232
    44fe:	93 e0       	ldi	r25, 0x03	; 3
    4500:	b9 01       	movw	r22, r18
    4502:	0e 94 01 14 	call	0x2802	; 0x2802 <TIMER1_voidGetNumCountCTC>
	TIMER1_voidSetCTCTime(compare_value);
    4506:	8a 81       	ldd	r24, Y+2	; 0x02
    4508:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <TIMER1_voidSetCTCTime>
	TIMER1_voidSetCallBackCTC(&get_word);
    450c:	84 eb       	ldi	r24, 0xB4	; 180
    450e:	92 e2       	ldi	r25, 0x22	; 34
    4510:	0e 94 4a 14 	call	0x2894	; 0x2894 <TIMER1_voidSetCallBackCTC>
	GLOVE_vidGetHandRead();
    4514:	0e 94 9c 08 	call	0x1138	; 0x1138 <GLOVE_vidGetHandRead>
	while(1)
	{
		while(ready_flag || get_another_read_flag);
    4518:	80 91 31 04 	lds	r24, 0x0431
    451c:	88 23       	and	r24, r24
    451e:	e1 f7       	brne	.-8      	; 0x4518 <main+0x50>
    4520:	80 91 0c 04 	lds	r24, 0x040C
    4524:	88 23       	and	r24, r24
    4526:	c1 f7       	brne	.-16     	; 0x4518 <main+0x50>
		for(uint8_t i=0;i<10;i++)
    4528:	19 82       	std	Y+1, r1	; 0x01
    452a:	11 c0       	rjmp	.+34     	; 0x454e <main+0x86>
		{
			word_location[i]=word_location_buffer[i];
    452c:	89 81       	ldd	r24, Y+1	; 0x01
    452e:	28 2f       	mov	r18, r24
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	89 81       	ldd	r24, Y+1	; 0x01
    4534:	88 2f       	mov	r24, r24
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	fc 01       	movw	r30, r24
    453a:	eb 59       	subi	r30, 0x9B	; 155
    453c:	fb 4f       	sbci	r31, 0xFB	; 251
    453e:	80 81       	ld	r24, Z
    4540:	f9 01       	movw	r30, r18
    4542:	e1 59       	subi	r30, 0x91	; 145
    4544:	fb 4f       	sbci	r31, 0xFB	; 251
    4546:	80 83       	st	Z, r24
	TIMER1_voidSetCallBackCTC(&get_word);
	GLOVE_vidGetHandRead();
	while(1)
	{
		while(ready_flag || get_another_read_flag);
		for(uint8_t i=0;i<10;i++)
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	8f 5f       	subi	r24, 0xFF	; 255
    454c:	89 83       	std	Y+1, r24	; 0x01
    454e:	89 81       	ldd	r24, Y+1	; 0x01
    4550:	8a 30       	cpi	r24, 0x0A	; 10
    4552:	60 f3       	brcs	.-40     	; 0x452c <main+0x64>
		{
			word_location[i]=word_location_buffer[i];
		}
		get_another_read_flag = 1;
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	80 93 0c 04 	sts	0x040C, r24
		GLOVE_vidGetHandRead();
    455a:	0e 94 9c 08 	call	0x1138	; 0x1138 <GLOVE_vidGetHandRead>
		SHOW_vidShowAndPlay(&word_location[0]);
    455e:	8f e6       	ldi	r24, 0x6F	; 111
    4560:	94 e0       	ldi	r25, 0x04	; 4
    4562:	0e 94 8c 06 	call	0xd18	; 0xd18 <SHOW_vidShowAndPlay>
    4566:	d8 cf       	rjmp	.-80     	; 0x4518 <main+0x50>

00004568 <get_word>:

	return 0;
}

void get_word()
{
    4568:	df 93       	push	r29
    456a:	cf 93       	push	r28
    456c:	cd b7       	in	r28, 0x3d	; 61
    456e:	de b7       	in	r29, 0x3e	; 62
	static uint8_t i = 0;
	if(i<5 && sensor_reads[7] && get_another_read_flag)
    4570:	80 91 32 04 	lds	r24, 0x0432
    4574:	85 30       	cpi	r24, 0x05	; 5
    4576:	08 f0       	brcs	.+2      	; 0x457a <get_word+0x12>
    4578:	61 c0       	rjmp	.+194    	; 0x463c <get_word+0xd4>
    457a:	80 91 63 04 	lds	r24, 0x0463
    457e:	90 91 64 04 	lds	r25, 0x0464
    4582:	00 97       	sbiw	r24, 0x00	; 0
    4584:	09 f4       	brne	.+2      	; 0x4588 <get_word+0x20>
    4586:	5a c0       	rjmp	.+180    	; 0x463c <get_word+0xd4>
    4588:	80 91 0c 04 	lds	r24, 0x040C
    458c:	88 23       	and	r24, r24
    458e:	09 f4       	brne	.+2      	; 0x4592 <get_word+0x2a>
    4590:	55 c0       	rjmp	.+170    	; 0x463c <get_word+0xd4>
	{
		LED_u8LedToggle(PORT_D, PIN_7);
    4592:	83 e0       	ldi	r24, 0x03	; 3
    4594:	67 e0       	ldi	r22, 0x07	; 7
    4596:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LED_u8LedToggle>
		GET_vidGetWordAndSound(&sensor_reads[0], &word_location_buffer[i*2]);
    459a:	80 91 32 04 	lds	r24, 0x0432
    459e:	88 2f       	mov	r24, r24
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	88 0f       	add	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	9c 01       	movw	r18, r24
    45a8:	2b 59       	subi	r18, 0x9B	; 155
    45aa:	3b 4f       	sbci	r19, 0xFB	; 251
    45ac:	85 e5       	ldi	r24, 0x55	; 85
    45ae:	94 e0       	ldi	r25, 0x04	; 4
    45b0:	b9 01       	movw	r22, r18
    45b2:	0e 94 8c 0a 	call	0x1518	; 0x1518 <GET_vidGetWordAndSound>
		if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 1 )i--;
    45b6:	80 91 32 04 	lds	r24, 0x0432
    45ba:	88 2f       	mov	r24, r24
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	88 0f       	add	r24, r24
    45c0:	99 1f       	adc	r25, r25
    45c2:	fc 01       	movw	r30, r24
    45c4:	eb 59       	subi	r30, 0x9B	; 155
    45c6:	fb 4f       	sbci	r31, 0xFB	; 251
    45c8:	80 81       	ld	r24, Z
    45ca:	88 23       	and	r24, r24
    45cc:	99 f4       	brne	.+38     	; 0x45f4 <get_word+0x8c>
    45ce:	80 91 32 04 	lds	r24, 0x0432
    45d2:	88 2f       	mov	r24, r24
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	88 0f       	add	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	01 96       	adiw	r24, 0x01	; 1
    45dc:	fc 01       	movw	r30, r24
    45de:	eb 59       	subi	r30, 0x9B	; 155
    45e0:	fb 4f       	sbci	r31, 0xFB	; 251
    45e2:	80 81       	ld	r24, Z
    45e4:	81 30       	cpi	r24, 0x01	; 1
    45e6:	31 f4       	brne	.+12     	; 0x45f4 <get_word+0x8c>
    45e8:	80 91 32 04 	lds	r24, 0x0432
    45ec:	81 50       	subi	r24, 0x01	; 1
    45ee:	80 93 32 04 	sts	0x0432, r24
    45f2:	1c c0       	rjmp	.+56     	; 0x462c <get_word+0xc4>
		else if(word_location_buffer[i*2]== 0 && word_location_buffer[i*2+1]== 0 )i=5;
    45f4:	80 91 32 04 	lds	r24, 0x0432
    45f8:	88 2f       	mov	r24, r24
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	fc 01       	movw	r30, r24
    4602:	eb 59       	subi	r30, 0x9B	; 155
    4604:	fb 4f       	sbci	r31, 0xFB	; 251
    4606:	80 81       	ld	r24, Z
    4608:	88 23       	and	r24, r24
    460a:	81 f4       	brne	.+32     	; 0x462c <get_word+0xc4>
    460c:	80 91 32 04 	lds	r24, 0x0432
    4610:	88 2f       	mov	r24, r24
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	88 0f       	add	r24, r24
    4616:	99 1f       	adc	r25, r25
    4618:	01 96       	adiw	r24, 0x01	; 1
    461a:	fc 01       	movw	r30, r24
    461c:	eb 59       	subi	r30, 0x9B	; 155
    461e:	fb 4f       	sbci	r31, 0xFB	; 251
    4620:	80 81       	ld	r24, Z
    4622:	88 23       	and	r24, r24
    4624:	19 f4       	brne	.+6      	; 0x462c <get_word+0xc4>
    4626:	85 e0       	ldi	r24, 0x05	; 5
    4628:	80 93 32 04 	sts	0x0432, r24
		GLOVE_vidGetHandRead();
    462c:	0e 94 9c 08 	call	0x1138	; 0x1138 <GLOVE_vidGetHandRead>
		i++;
    4630:	80 91 32 04 	lds	r24, 0x0432
    4634:	8f 5f       	subi	r24, 0xFF	; 255
    4636:	80 93 32 04 	sts	0x0432, r24
    463a:	04 c0       	rjmp	.+8      	; 0x4644 <get_word+0xdc>
	}else {
		i = 0;
    463c:	10 92 32 04 	sts	0x0432, r1
		get_another_read_flag = 0;
    4640:	10 92 0c 04 	sts	0x040C, r1

	}

}
    4644:	cf 91       	pop	r28
    4646:	df 91       	pop	r29
    4648:	08 95       	ret

0000464a <__mulsi3>:
    464a:	62 9f       	mul	r22, r18
    464c:	d0 01       	movw	r26, r0
    464e:	73 9f       	mul	r23, r19
    4650:	f0 01       	movw	r30, r0
    4652:	82 9f       	mul	r24, r18
    4654:	e0 0d       	add	r30, r0
    4656:	f1 1d       	adc	r31, r1
    4658:	64 9f       	mul	r22, r20
    465a:	e0 0d       	add	r30, r0
    465c:	f1 1d       	adc	r31, r1
    465e:	92 9f       	mul	r25, r18
    4660:	f0 0d       	add	r31, r0
    4662:	83 9f       	mul	r24, r19
    4664:	f0 0d       	add	r31, r0
    4666:	74 9f       	mul	r23, r20
    4668:	f0 0d       	add	r31, r0
    466a:	65 9f       	mul	r22, r21
    466c:	f0 0d       	add	r31, r0
    466e:	99 27       	eor	r25, r25
    4670:	72 9f       	mul	r23, r18
    4672:	b0 0d       	add	r27, r0
    4674:	e1 1d       	adc	r30, r1
    4676:	f9 1f       	adc	r31, r25
    4678:	63 9f       	mul	r22, r19
    467a:	b0 0d       	add	r27, r0
    467c:	e1 1d       	adc	r30, r1
    467e:	f9 1f       	adc	r31, r25
    4680:	bd 01       	movw	r22, r26
    4682:	cf 01       	movw	r24, r30
    4684:	11 24       	eor	r1, r1
    4686:	08 95       	ret

00004688 <__udivmodqi4>:
    4688:	99 1b       	sub	r25, r25
    468a:	79 e0       	ldi	r23, 0x09	; 9
    468c:	04 c0       	rjmp	.+8      	; 0x4696 <__udivmodqi4_ep>

0000468e <__udivmodqi4_loop>:
    468e:	99 1f       	adc	r25, r25
    4690:	96 17       	cp	r25, r22
    4692:	08 f0       	brcs	.+2      	; 0x4696 <__udivmodqi4_ep>
    4694:	96 1b       	sub	r25, r22

00004696 <__udivmodqi4_ep>:
    4696:	88 1f       	adc	r24, r24
    4698:	7a 95       	dec	r23
    469a:	c9 f7       	brne	.-14     	; 0x468e <__udivmodqi4_loop>
    469c:	80 95       	com	r24
    469e:	08 95       	ret

000046a0 <__udivmodhi4>:
    46a0:	aa 1b       	sub	r26, r26
    46a2:	bb 1b       	sub	r27, r27
    46a4:	51 e1       	ldi	r21, 0x11	; 17
    46a6:	07 c0       	rjmp	.+14     	; 0x46b6 <__udivmodhi4_ep>

000046a8 <__udivmodhi4_loop>:
    46a8:	aa 1f       	adc	r26, r26
    46aa:	bb 1f       	adc	r27, r27
    46ac:	a6 17       	cp	r26, r22
    46ae:	b7 07       	cpc	r27, r23
    46b0:	10 f0       	brcs	.+4      	; 0x46b6 <__udivmodhi4_ep>
    46b2:	a6 1b       	sub	r26, r22
    46b4:	b7 0b       	sbc	r27, r23

000046b6 <__udivmodhi4_ep>:
    46b6:	88 1f       	adc	r24, r24
    46b8:	99 1f       	adc	r25, r25
    46ba:	5a 95       	dec	r21
    46bc:	a9 f7       	brne	.-22     	; 0x46a8 <__udivmodhi4_loop>
    46be:	80 95       	com	r24
    46c0:	90 95       	com	r25
    46c2:	bc 01       	movw	r22, r24
    46c4:	cd 01       	movw	r24, r26
    46c6:	08 95       	ret

000046c8 <__udivmodsi4>:
    46c8:	a1 e2       	ldi	r26, 0x21	; 33
    46ca:	1a 2e       	mov	r1, r26
    46cc:	aa 1b       	sub	r26, r26
    46ce:	bb 1b       	sub	r27, r27
    46d0:	fd 01       	movw	r30, r26
    46d2:	0d c0       	rjmp	.+26     	; 0x46ee <__udivmodsi4_ep>

000046d4 <__udivmodsi4_loop>:
    46d4:	aa 1f       	adc	r26, r26
    46d6:	bb 1f       	adc	r27, r27
    46d8:	ee 1f       	adc	r30, r30
    46da:	ff 1f       	adc	r31, r31
    46dc:	a2 17       	cp	r26, r18
    46de:	b3 07       	cpc	r27, r19
    46e0:	e4 07       	cpc	r30, r20
    46e2:	f5 07       	cpc	r31, r21
    46e4:	20 f0       	brcs	.+8      	; 0x46ee <__udivmodsi4_ep>
    46e6:	a2 1b       	sub	r26, r18
    46e8:	b3 0b       	sbc	r27, r19
    46ea:	e4 0b       	sbc	r30, r20
    46ec:	f5 0b       	sbc	r31, r21

000046ee <__udivmodsi4_ep>:
    46ee:	66 1f       	adc	r22, r22
    46f0:	77 1f       	adc	r23, r23
    46f2:	88 1f       	adc	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	1a 94       	dec	r1
    46f8:	69 f7       	brne	.-38     	; 0x46d4 <__udivmodsi4_loop>
    46fa:	60 95       	com	r22
    46fc:	70 95       	com	r23
    46fe:	80 95       	com	r24
    4700:	90 95       	com	r25
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
    4706:	bd 01       	movw	r22, r26
    4708:	cf 01       	movw	r24, r30
    470a:	08 95       	ret

0000470c <__prologue_saves__>:
    470c:	2f 92       	push	r2
    470e:	3f 92       	push	r3
    4710:	4f 92       	push	r4
    4712:	5f 92       	push	r5
    4714:	6f 92       	push	r6
    4716:	7f 92       	push	r7
    4718:	8f 92       	push	r8
    471a:	9f 92       	push	r9
    471c:	af 92       	push	r10
    471e:	bf 92       	push	r11
    4720:	cf 92       	push	r12
    4722:	df 92       	push	r13
    4724:	ef 92       	push	r14
    4726:	ff 92       	push	r15
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	ca 1b       	sub	r28, r26
    4736:	db 0b       	sbc	r29, r27
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	09 94       	ijmp

00004744 <__epilogue_restores__>:
    4744:	2a 88       	ldd	r2, Y+18	; 0x12
    4746:	39 88       	ldd	r3, Y+17	; 0x11
    4748:	48 88       	ldd	r4, Y+16	; 0x10
    474a:	5f 84       	ldd	r5, Y+15	; 0x0f
    474c:	6e 84       	ldd	r6, Y+14	; 0x0e
    474e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4750:	8c 84       	ldd	r8, Y+12	; 0x0c
    4752:	9b 84       	ldd	r9, Y+11	; 0x0b
    4754:	aa 84       	ldd	r10, Y+10	; 0x0a
    4756:	b9 84       	ldd	r11, Y+9	; 0x09
    4758:	c8 84       	ldd	r12, Y+8	; 0x08
    475a:	df 80       	ldd	r13, Y+7	; 0x07
    475c:	ee 80       	ldd	r14, Y+6	; 0x06
    475e:	fd 80       	ldd	r15, Y+5	; 0x05
    4760:	0c 81       	ldd	r16, Y+4	; 0x04
    4762:	1b 81       	ldd	r17, Y+3	; 0x03
    4764:	aa 81       	ldd	r26, Y+2	; 0x02
    4766:	b9 81       	ldd	r27, Y+1	; 0x01
    4768:	ce 0f       	add	r28, r30
    476a:	d1 1d       	adc	r29, r1
    476c:	0f b6       	in	r0, 0x3f	; 63
    476e:	f8 94       	cli
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	cd bf       	out	0x3d, r28	; 61
    4776:	ed 01       	movw	r28, r26
    4778:	08 95       	ret
    477a:	11 f4       	brne	.+4      	; 0x4780 <__epilogue_restores__+0x3c>
    477c:	0e f4       	brtc	.+2      	; 0x4780 <__epilogue_restores__+0x3c>
    477e:	4d c0       	rjmp	.+154    	; 0x481a <__fp_nan>
    4780:	3e c0       	rjmp	.+124    	; 0x47fe <__fp_mpack>

00004782 <sqrt>:
    4782:	5d d0       	rcall	.+186    	; 0x483e <__fp_splitA>
    4784:	d0 f3       	brcs	.-12     	; 0x477a <__epilogue_restores__+0x36>
    4786:	99 23       	and	r25, r25
    4788:	d9 f3       	breq	.-10     	; 0x4780 <__epilogue_restores__+0x3c>
    478a:	ce f3       	brts	.-14     	; 0x477e <__epilogue_restores__+0x3a>
    478c:	9f 57       	subi	r25, 0x7F	; 127
    478e:	55 0b       	sbc	r21, r21
    4790:	87 ff       	sbrs	r24, 7
    4792:	46 d0       	rcall	.+140    	; 0x4820 <__fp_norm2>
    4794:	00 24       	eor	r0, r0
    4796:	a0 e6       	ldi	r26, 0x60	; 96
    4798:	40 ea       	ldi	r20, 0xA0	; 160
    479a:	90 01       	movw	r18, r0
    479c:	80 58       	subi	r24, 0x80	; 128
    479e:	56 95       	lsr	r21
    47a0:	97 95       	ror	r25
    47a2:	28 f4       	brcc	.+10     	; 0x47ae <sqrt+0x2c>
    47a4:	80 5c       	subi	r24, 0xC0	; 192
    47a6:	66 0f       	add	r22, r22
    47a8:	77 1f       	adc	r23, r23
    47aa:	88 1f       	adc	r24, r24
    47ac:	20 f0       	brcs	.+8      	; 0x47b6 <sqrt+0x34>
    47ae:	26 17       	cp	r18, r22
    47b0:	37 07       	cpc	r19, r23
    47b2:	48 07       	cpc	r20, r24
    47b4:	30 f4       	brcc	.+12     	; 0x47c2 <sqrt+0x40>
    47b6:	62 1b       	sub	r22, r18
    47b8:	73 0b       	sbc	r23, r19
    47ba:	84 0b       	sbc	r24, r20
    47bc:	20 29       	or	r18, r0
    47be:	31 29       	or	r19, r1
    47c0:	4a 2b       	or	r20, r26
    47c2:	a6 95       	lsr	r26
    47c4:	17 94       	ror	r1
    47c6:	07 94       	ror	r0
    47c8:	20 25       	eor	r18, r0
    47ca:	31 25       	eor	r19, r1
    47cc:	4a 27       	eor	r20, r26
    47ce:	58 f7       	brcc	.-42     	; 0x47a6 <sqrt+0x24>
    47d0:	66 0f       	add	r22, r22
    47d2:	77 1f       	adc	r23, r23
    47d4:	88 1f       	adc	r24, r24
    47d6:	20 f0       	brcs	.+8      	; 0x47e0 <sqrt+0x5e>
    47d8:	26 17       	cp	r18, r22
    47da:	37 07       	cpc	r19, r23
    47dc:	48 07       	cpc	r20, r24
    47de:	30 f4       	brcc	.+12     	; 0x47ec <sqrt+0x6a>
    47e0:	62 0b       	sbc	r22, r18
    47e2:	73 0b       	sbc	r23, r19
    47e4:	84 0b       	sbc	r24, r20
    47e6:	20 0d       	add	r18, r0
    47e8:	31 1d       	adc	r19, r1
    47ea:	41 1d       	adc	r20, r1
    47ec:	a0 95       	com	r26
    47ee:	81 f7       	brne	.-32     	; 0x47d0 <sqrt+0x4e>
    47f0:	b9 01       	movw	r22, r18
    47f2:	84 2f       	mov	r24, r20
    47f4:	91 58       	subi	r25, 0x81	; 129
    47f6:	88 0f       	add	r24, r24
    47f8:	96 95       	lsr	r25
    47fa:	87 95       	ror	r24
    47fc:	08 95       	ret

000047fe <__fp_mpack>:
    47fe:	9f 3f       	cpi	r25, 0xFF	; 255
    4800:	31 f0       	breq	.+12     	; 0x480e <__fp_mpack_finite+0xc>

00004802 <__fp_mpack_finite>:
    4802:	91 50       	subi	r25, 0x01	; 1
    4804:	20 f4       	brcc	.+8      	; 0x480e <__fp_mpack_finite+0xc>
    4806:	87 95       	ror	r24
    4808:	77 95       	ror	r23
    480a:	67 95       	ror	r22
    480c:	b7 95       	ror	r27
    480e:	88 0f       	add	r24, r24
    4810:	91 1d       	adc	r25, r1
    4812:	96 95       	lsr	r25
    4814:	87 95       	ror	r24
    4816:	97 f9       	bld	r25, 7
    4818:	08 95       	ret

0000481a <__fp_nan>:
    481a:	9f ef       	ldi	r25, 0xFF	; 255
    481c:	80 ec       	ldi	r24, 0xC0	; 192
    481e:	08 95       	ret

00004820 <__fp_norm2>:
    4820:	91 50       	subi	r25, 0x01	; 1
    4822:	50 40       	sbci	r21, 0x00	; 0
    4824:	66 0f       	add	r22, r22
    4826:	77 1f       	adc	r23, r23
    4828:	88 1f       	adc	r24, r24
    482a:	d2 f7       	brpl	.-12     	; 0x4820 <__fp_norm2>
    482c:	08 95       	ret

0000482e <__fp_split3>:
    482e:	57 fd       	sbrc	r21, 7
    4830:	90 58       	subi	r25, 0x80	; 128
    4832:	44 0f       	add	r20, r20
    4834:	55 1f       	adc	r21, r21
    4836:	59 f0       	breq	.+22     	; 0x484e <__fp_splitA+0x10>
    4838:	5f 3f       	cpi	r21, 0xFF	; 255
    483a:	71 f0       	breq	.+28     	; 0x4858 <__fp_splitA+0x1a>
    483c:	47 95       	ror	r20

0000483e <__fp_splitA>:
    483e:	88 0f       	add	r24, r24
    4840:	97 fb       	bst	r25, 7
    4842:	99 1f       	adc	r25, r25
    4844:	61 f0       	breq	.+24     	; 0x485e <__fp_splitA+0x20>
    4846:	9f 3f       	cpi	r25, 0xFF	; 255
    4848:	79 f0       	breq	.+30     	; 0x4868 <__fp_splitA+0x2a>
    484a:	87 95       	ror	r24
    484c:	08 95       	ret
    484e:	12 16       	cp	r1, r18
    4850:	13 06       	cpc	r1, r19
    4852:	14 06       	cpc	r1, r20
    4854:	55 1f       	adc	r21, r21
    4856:	f2 cf       	rjmp	.-28     	; 0x483c <__fp_split3+0xe>
    4858:	46 95       	lsr	r20
    485a:	f1 df       	rcall	.-30     	; 0x483e <__fp_splitA>
    485c:	08 c0       	rjmp	.+16     	; 0x486e <__fp_splitA+0x30>
    485e:	16 16       	cp	r1, r22
    4860:	17 06       	cpc	r1, r23
    4862:	18 06       	cpc	r1, r24
    4864:	99 1f       	adc	r25, r25
    4866:	f1 cf       	rjmp	.-30     	; 0x484a <__fp_splitA+0xc>
    4868:	86 95       	lsr	r24
    486a:	71 05       	cpc	r23, r1
    486c:	61 05       	cpc	r22, r1
    486e:	08 94       	sec
    4870:	08 95       	ret

00004872 <_exit>:
    4872:	f8 94       	cli

00004874 <__stop_program>:
    4874:	ff cf       	rjmp	.-2      	; 0x4874 <__stop_program>
